
mutex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006500  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006690  08006690  00007690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006818  08006818  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006820  08006820  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006824  08006824  00007824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006828  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001160  2000006c  08006894  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011cc  08006894  000081cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fdc  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b8a  00000000  00000000  00019078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0001bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bad  00000000  00000000  0001cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002846b  00000000  00000000  0001d705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001175f  00000000  00000000  00045b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f24a6  00000000  00000000  000572cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  001497b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006678 	.word	0x08006678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006678 	.word	0x08006678

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000088 	.word	0x20000088
 80005dc:	200000dc 	.word	0x200000dc

080005e0 <uart_send>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to send a string via UART2
void uart_send(char *s)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fdf1 	bl	80001d0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <uart_send+0x28>)
 80005fa:	f002 f9bf 	bl	800297c <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200002dc 	.word	0x200002dc

0800060c <task1>:

// Task-1 function
void task1(void *p)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    // Take the mutex before accessing UART
    xSemaphoreTake(xMutex, portMAX_DELAY);
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <task1+0x3c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f04f 31ff 	mov.w	r1, #4294967295
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fa35 	bl	8003a8c <xQueueSemaphoreTake>

    // Send the task message
    uart_send((char *)p);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ffdc 	bl	80005e0 <uart_send>

    // Release the mutex after UART is used
    xSemaphoreGive(xMutex);
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <task1+0x3c>)
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	f003 f929 	bl	8003888 <xQueueGenericSend>

    // Add a small delay (500 ms)
    vTaskDelay(pdMS_TO_TICKS(500));
 8000636:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800063a:	f003 fdd1 	bl	80041e0 <vTaskDelay>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000368 	.word	0x20000368

0800064c <task2>:

// Task-2 function
void task2(void *p)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    while(1)  // Infinite loop
    {
        // Send the task message
        uart_send((char *)p);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffc3 	bl	80005e0 <uart_send>

        // Random delay between 1 and 16 ticks
        vTaskDelay((rand() & 0xF) + 1);
 800065a:	f005 f823 	bl	80056a4 <rand>
 800065e:	4603      	mov	r3, r0
 8000660:	f003 030f 	and.w	r3, r3, #15
 8000664:	3301      	adds	r3, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fdba 	bl	80041e0 <vTaskDelay>
        uart_send((char *)p);
 800066c:	bf00      	nop
 800066e:	e7f1      	b.n	8000654 <task2+0x8>

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 faef 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f849 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f8c9 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000682:	f000 f897 	bl	80007b4 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000686:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <main+0x7c>)
 8000688:	1d3c      	adds	r4, r7, #4
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fee9 	bl	8003474 <osThreadCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <main+0x80>)
 80006a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // Create a mutex semaphore
  xMutex = xSemaphoreCreateMutex();
 80006a8:	2001      	movs	r0, #1
 80006aa:	f003 f8d5 	bl	8003858 <xQueueCreateMutex>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a10      	ldr	r2, [pc, #64]	@ (80006f4 <main+0x84>)
 80006b2:	6013      	str	r3, [r2, #0]

  // Check if mutex creation was successful
  if(xMutex != NULL)
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <main+0x84>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d013      	beq.n	80006e4 <main+0x74>
  {
      // Create Task-1 with priority 1
      xTaskCreate(task1, "print1", configMINIMAL_STACK_SIZE, "***TASK-1***\r\n", 1, NULL);
 80006bc:	2300      	movs	r3, #0
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <main+0x88>)
 80006c6:	2280      	movs	r2, #128	@ 0x80
 80006c8:	490c      	ldr	r1, [pc, #48]	@ (80006fc <main+0x8c>)
 80006ca:	480d      	ldr	r0, [pc, #52]	@ (8000700 <main+0x90>)
 80006cc:	f003 fc50 	bl	8003f70 <xTaskCreate>

      // Create Task-2 with priority 2
      xTaskCreate(task2, "print2", configMINIMAL_STACK_SIZE, "**TASK-2**\r\n", 2, NULL);
 80006d0:	2300      	movs	r3, #0
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	2302      	movs	r3, #2
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <main+0x94>)
 80006da:	2280      	movs	r2, #128	@ 0x80
 80006dc:	490a      	ldr	r1, [pc, #40]	@ (8000708 <main+0x98>)
 80006de:	480b      	ldr	r0, [pc, #44]	@ (800070c <main+0x9c>)
 80006e0:	f003 fc46 	bl	8003f70 <xTaskCreate>
  }

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e4:	f002 febf 	bl	8003466 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <main+0x78>
 80006ec:	080066cc 	.word	0x080066cc
 80006f0:	20000364 	.word	0x20000364
 80006f4:	20000368 	.word	0x20000368
 80006f8:	08006690 	.word	0x08006690
 80006fc:	080066a0 	.word	0x080066a0
 8000700:	0800060d 	.word	0x0800060d
 8000704:	080066a8 	.word	0x080066a8
 8000708:	080066b8 	.word	0x080066b8
 800070c:	0800064d 	.word	0x0800064d

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	@ 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	@ 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 f903 	bl	800592a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000736:	f000 fdc1 	bl	80012bc <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 f8d6 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800074c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2310      	movs	r3, #16
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800075e:	230a      	movs	r3, #10
 8000760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000762:	2307      	movs	r3, #7
 8000764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fdf8 	bl	8001368 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800077e:	f000 f8b7 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2104      	movs	r1, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f9c0 	bl	8001b20 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007a6:	f000 f8a3 	bl	80008f0 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3758      	adds	r7, #88	@ 0x58
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	@ (8000810 <MX_USART2_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART2_UART_Init+0x58>)
 80007f8:	f002 f872 	bl	80028e0 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f875 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200002dc 	.word	0x200002dc
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a2a      	ldr	r2, [pc, #168]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	4a24      	ldr	r2, [pc, #144]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084e:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a1e      	ldr	r2, [pc, #120]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	4a18      	ldr	r2, [pc, #96]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000892:	f000 fced 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480b      	ldr	r0, [pc, #44]	@ (80008dc <MX_GPIO_Init+0xc8>)
 80008ae:	f000 fb35 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b2:	2320      	movs	r3, #32
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008cc:	f000 fb26 	bl	8000f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000800 	.word	0x48000800

080008e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f002 fe0f 	bl	800350c <osDelay>
 80008ee:	e7fb      	b.n	80008e8 <StartDefaultTask+0x8>

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <HAL_MspInit+0x4c>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000906:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6613      	str	r3, [r2, #96]	@ 0x60
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <HAL_MspInit+0x4c>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <HAL_MspInit+0x4c>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6593      	str	r3, [r2, #88]	@ 0x58
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 fac6 	bl	8000eca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0ac      	sub	sp, #176	@ 0xb0
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2288      	movs	r2, #136	@ 0x88
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f004 ffdc 	bl	800592a <memset>
  if(huart->Instance==USART2)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <HAL_UART_MspInit+0xb0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d13b      	bne.n	80009f4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800097c:	2302      	movs	r3, #2
 800097e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000980:	2300      	movs	r3, #0
 8000982:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4618      	mov	r0, r3
 800098a:	f001 faed 	bl	8001f68 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000994:	f7ff ffac 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 800099a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099c:	4a18      	ldr	r2, [pc, #96]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 800099e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 80009a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b4:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009bc:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c8:	230c      	movs	r3, #12
 80009ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e0:	2307      	movs	r3, #7
 80009e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ea:	4619      	mov	r1, r3
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f0:	f000 fa94 	bl	8000f1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009f4:	bf00      	nop
 80009f6:	37b0      	adds	r7, #176	@ 0xb0
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40021000 	.word	0x40021000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x4>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 f967 	bl	8000d10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a42:	f004 f80d 	bl	8004a60 <xTaskGetSchedulerState>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d001      	beq.n	8000a50 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a4c:	f004 fbec 	bl	8005228 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return 1;
 8000a58:	2301      	movs	r3, #1
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_kill>:

int _kill(int pid, int sig)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a6e:	f004 ffab 	bl	80059c8 <__errno>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2216      	movs	r2, #22
 8000a76:	601a      	str	r2, [r3, #0]
  return -1;
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_exit>:

void _exit (int status)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ffe7 	bl	8000a64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a96:	bf00      	nop
 8000a98:	e7fd      	b.n	8000a96 <_exit+0x12>

08000a9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e00a      	b.n	8000ac2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aac:	f3af 8000 	nop.w
 8000ab0:	4601      	mov	r1, r0
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	60ba      	str	r2, [r7, #8]
 8000ab8:	b2ca      	uxtb	r2, r1
 8000aba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	dbf0      	blt.n	8000aac <_read+0x12>
  }

  return len;
 8000aca:	687b      	ldr	r3, [r7, #4]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e009      	b.n	8000afa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	60ba      	str	r2, [r7, #8]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dbf1      	blt.n	8000ae6 <_write+0x12>
  }
  return len;
 8000b02:	687b      	ldr	r3, [r7, #4]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_close>:

int _close(int file)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b34:	605a      	str	r2, [r3, #4]
  return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <_isatty>:

int _isatty(int file)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4c:	2301      	movs	r3, #1
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f004 ff10 	bl	80059c8 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20018000 	.word	0x20018000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	2000036c 	.word	0x2000036c
 8000bdc:	200011d0 	.word	0x200011d0

08000be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	@ (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	@ (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f004 fecf 	bl	80059d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c36:	f7ff fd1b 	bl	8000670 <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c48:	08006828 	.word	0x08006828
  ldr r2, =_sbss
 8000c4c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c50:	200011cc 	.word	0x200011cc

08000c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <HAL_Init+0x3c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a0b      	ldr	r2, [pc, #44]	@ (8000c94 <HAL_Init+0x3c>)
 8000c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f000 f920 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c74:	200f      	movs	r0, #15
 8000c76:	f000 f80f 	bl	8000c98 <HAL_InitTick>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	e001      	b.n	8000c8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c86:	f7ff fe39 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_InitTick+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d023      	beq.n	8000cf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cac:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <HAL_InitTick+0x70>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_InitTick+0x6c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f91d 	bl	8000f02 <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10f      	bne.n	8000cee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d809      	bhi.n	8000ce8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f8f5 	bl	8000eca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <HAL_InitTick+0x74>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e007      	b.n	8000cf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e004      	b.n	8000cf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e001      	b.n	8000cf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000370 	.word	0x20000370

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000370 	.word	0x20000370

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	@ (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	@ (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	@ 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	@ 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff47 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff5c 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffb0 	bl	8000e70 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2a:	e17f      	b.n	800122c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8171 	beq.w	8001226 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d005      	beq.n	8000f5c <HAL_GPIO_Init+0x40>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d130      	bne.n	8000fbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f92:	2201      	movs	r2, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	f003 0201 	and.w	r2, r3, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d118      	bne.n	8000ffc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	6939      	ldr	r1, [r7, #16]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80ac 	beq.w	8001226 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	4b5f      	ldr	r3, [pc, #380]	@ (800124c <HAL_GPIO_Init+0x330>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	4a5e      	ldr	r2, [pc, #376]	@ (800124c <HAL_GPIO_Init+0x330>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010da:	4b5c      	ldr	r3, [pc, #368]	@ (800124c <HAL_GPIO_Init+0x330>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001110:	d025      	beq.n	800115e <HAL_GPIO_Init+0x242>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4f      	ldr	r2, [pc, #316]	@ (8001254 <HAL_GPIO_Init+0x338>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d01f      	beq.n	800115a <HAL_GPIO_Init+0x23e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4e      	ldr	r2, [pc, #312]	@ (8001258 <HAL_GPIO_Init+0x33c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x23a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4d      	ldr	r2, [pc, #308]	@ (800125c <HAL_GPIO_Init+0x340>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x236>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4c      	ldr	r2, [pc, #304]	@ (8001260 <HAL_GPIO_Init+0x344>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x232>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4b      	ldr	r2, [pc, #300]	@ (8001264 <HAL_GPIO_Init+0x348>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x22e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4a      	ldr	r2, [pc, #296]	@ (8001268 <HAL_GPIO_Init+0x34c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x22a>
 8001142:	2306      	movs	r3, #6
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x244>
 8001146:	2307      	movs	r3, #7
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x244>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x244>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x244>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x244>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x244>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x244>
 800115e:	2300      	movs	r3, #0
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001170:	4937      	ldr	r1, [pc, #220]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800117e:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <HAL_GPIO_Init+0x350>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a2:	4a32      	ldr	r2, [pc, #200]	@ (800126c <HAL_GPIO_Init+0x350>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011a8:	4b30      	ldr	r3, [pc, #192]	@ (800126c <HAL_GPIO_Init+0x350>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011cc:	4a27      	ldr	r2, [pc, #156]	@ (800126c <HAL_GPIO_Init+0x350>)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011d2:	4b26      	ldr	r3, [pc, #152]	@ (800126c <HAL_GPIO_Init+0x350>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f6:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <HAL_GPIO_Init+0x350>)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <HAL_GPIO_Init+0x350>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <HAL_GPIO_Init+0x350>)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa22 f303 	lsr.w	r3, r2, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	f47f ae78 	bne.w	8000f2c <HAL_GPIO_Init+0x10>
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	371c      	adds	r7, #28
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	48000400 	.word	0x48000400
 8001258:	48000800 	.word	0x48000800
 800125c:	48000c00 	.word	0x48000c00
 8001260:	48001000 	.word	0x48001000
 8001264:	48001400 	.word	0x48001400
 8001268:	48001800 	.word	0x48001800
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800128c:	e002      	b.n	8001294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40007000 	.word	0x40007000

080012bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012ca:	d130      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012cc:	4b23      	ldr	r3, [pc, #140]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d8:	d038      	beq.n	800134c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012e2:	4a1e      	ldr	r2, [pc, #120]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2232      	movs	r2, #50	@ 0x32
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0c9b      	lsrs	r3, r3, #18
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001300:	e002      	b.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3b01      	subs	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001314:	d102      	bne.n	800131c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f2      	bne.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001328:	d110      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e00f      	b.n	800134e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133a:	d007      	beq.n	800134c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001344:	4a05      	ldr	r2, [pc, #20]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800134a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40007000 	.word	0x40007000
 8001360:	20000000 	.word	0x20000000
 8001364:	431bde83 	.word	0x431bde83

08001368 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e3ca      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800137a:	4b97      	ldr	r3, [pc, #604]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001384:	4b94      	ldr	r3, [pc, #592]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80e4 	beq.w	8001564 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4a>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	f040 808b 	bne.w	80014c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	f040 8087 	bne.w	80014c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b2:	4b89      	ldr	r3, [pc, #548]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <HAL_RCC_OscConfig+0x62>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e3a2      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1a      	ldr	r2, [r3, #32]
 80013ce:	4b82      	ldr	r3, [pc, #520]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <HAL_RCC_OscConfig+0x7c>
 80013da:	4b7f      	ldr	r3, [pc, #508]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013e2:	e005      	b.n	80013f0 <HAL_RCC_OscConfig+0x88>
 80013e4:	4b7c      	ldr	r3, [pc, #496]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80013e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d223      	bcs.n	800143c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fd55 	bl	8001ea8 <RCC_SetFlashLatencyFromMSIRange>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e383      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001408:	4b73      	ldr	r3, [pc, #460]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a72      	ldr	r2, [pc, #456]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b70      	ldr	r3, [pc, #448]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	496d      	ldr	r1, [pc, #436]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001426:	4b6c      	ldr	r3, [pc, #432]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	4968      	ldr	r1, [pc, #416]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
 800143a:	e025      	b.n	8001488 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143c:	4b66      	ldr	r3, [pc, #408]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a65      	ldr	r2, [pc, #404]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b63      	ldr	r3, [pc, #396]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4960      	ldr	r1, [pc, #384]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145a:	4b5f      	ldr	r3, [pc, #380]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	495b      	ldr	r1, [pc, #364]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d109      	bne.n	8001488 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fd15 	bl	8001ea8 <RCC_SetFlashLatencyFromMSIRange>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e343      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001488:	f000 fc4a 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 800148c:	4602      	mov	r2, r0
 800148e:	4b52      	ldr	r3, [pc, #328]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	4950      	ldr	r1, [pc, #320]	@ (80015dc <HAL_RCC_OscConfig+0x274>)
 800149a:	5ccb      	ldrb	r3, [r1, r3]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
 80014a4:	4a4e      	ldr	r2, [pc, #312]	@ (80015e0 <HAL_RCC_OscConfig+0x278>)
 80014a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014a8:	4b4e      	ldr	r3, [pc, #312]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fbf3 	bl	8000c98 <HAL_InitTick>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d052      	beq.n	8001562 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	e327      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d032      	beq.n	800152e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014c8:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a42      	ldr	r2, [pc, #264]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc30 	bl	8000d38 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc2c 	bl	8000d38 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e310      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ee:	4b3a      	ldr	r3, [pc, #232]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fa:	4b37      	ldr	r3, [pc, #220]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a36      	ldr	r2, [pc, #216]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b34      	ldr	r3, [pc, #208]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4931      	ldr	r1, [pc, #196]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001518:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	492c      	ldr	r1, [pc, #176]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e01a      	b.n	8001564 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800152e:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a29      	ldr	r2, [pc, #164]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800153a:	f7ff fbfd 	bl	8000d38 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001542:	f7ff fbf9 	bl	8000d38 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e2dd      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001554:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x1da>
 8001560:	e000      	b.n	8001564 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001562:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d074      	beq.n	800165a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b08      	cmp	r3, #8
 8001574:	d005      	beq.n	8001582 <HAL_RCC_OscConfig+0x21a>
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b0c      	cmp	r3, #12
 800157a:	d10e      	bne.n	800159a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d10b      	bne.n	800159a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d064      	beq.n	8001658 <HAL_RCC_OscConfig+0x2f0>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d160      	bne.n	8001658 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e2ba      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x24a>
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e026      	b.n	8001600 <HAL_RCC_OscConfig+0x298>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015ba:	d115      	bne.n	80015e8 <HAL_RCC_OscConfig+0x280>
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80015c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a02      	ldr	r2, [pc, #8]	@ (80015d8 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e014      	b.n	8001600 <HAL_RCC_OscConfig+0x298>
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	080066f0 	.word	0x080066f0
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000004 	.word	0x20000004
 80015e8:	4ba0      	ldr	r3, [pc, #640]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a9f      	ldr	r2, [pc, #636]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80015ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b9d      	ldr	r3, [pc, #628]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a9c      	ldr	r2, [pc, #624]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d013      	beq.n	8001630 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fb96 	bl	8000d38 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fb92 	bl	8000d38 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	@ 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e276      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001622:	4b92      	ldr	r3, [pc, #584]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x2a8>
 800162e:	e014      	b.n	800165a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fb82 	bl	8000d38 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fb7e 	bl	8000d38 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	@ 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e262      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164a:	4b88      	ldr	r3, [pc, #544]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x2d0>
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d060      	beq.n	8001728 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d005      	beq.n	8001678 <HAL_RCC_OscConfig+0x310>
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d119      	bne.n	80016a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d116      	bne.n	80016a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001678:	4b7c      	ldr	r3, [pc, #496]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x328>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e23f      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4b76      	ldr	r3, [pc, #472]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	061b      	lsls	r3, r3, #24
 800169e:	4973      	ldr	r1, [pc, #460]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a4:	e040      	b.n	8001728 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d023      	beq.n	80016f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ae:	4b6f      	ldr	r3, [pc, #444]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a6e      	ldr	r2, [pc, #440]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb3d 	bl	8000d38 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fb39 	bl	8000d38 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e21d      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d4:	4b65      	ldr	r3, [pc, #404]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b62      	ldr	r3, [pc, #392]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	495f      	ldr	r1, [pc, #380]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	e018      	b.n	8001728 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f6:	4b5d      	ldr	r3, [pc, #372]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5c      	ldr	r2, [pc, #368]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80016fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fb19 	bl	8000d38 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fb15 	bl	8000d38 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1f9      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171c:	4b53      	ldr	r3, [pc, #332]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d03c      	beq.n	80017ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01c      	beq.n	8001776 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173c:	4b4b      	ldr	r3, [pc, #300]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 800173e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001742:	4a4a      	ldr	r2, [pc, #296]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174c:	f7ff faf4 	bl	8000d38 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff faf0 	bl	8000d38 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1d4      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001766:	4b41      	ldr	r3, [pc, #260]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 8001768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ef      	beq.n	8001754 <HAL_RCC_OscConfig+0x3ec>
 8001774:	e01b      	b.n	80017ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001776:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 8001778:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800177c:	4a3b      	ldr	r2, [pc, #236]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff fad7 	bl	8000d38 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178e:	f7ff fad3 	bl	8000d38 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e1b7      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a0:	4b32      	ldr	r3, [pc, #200]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80017a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ef      	bne.n	800178e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80a6 	beq.w	8001908 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017c0:	4b2a      	ldr	r3, [pc, #168]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10d      	bne.n	80017e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	4b27      	ldr	r3, [pc, #156]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d0:	4a26      	ldr	r2, [pc, #152]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80017d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d8:	4b24      	ldr	r3, [pc, #144]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e4:	2301      	movs	r3, #1
 80017e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e8:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <HAL_RCC_OscConfig+0x508>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d118      	bne.n	8001826 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <HAL_RCC_OscConfig+0x508>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_RCC_OscConfig+0x508>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001800:	f7ff fa9a 	bl	8000d38 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001808:	f7ff fa96 	bl	8000d38 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e17a      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <HAL_RCC_OscConfig+0x508>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <HAL_RCC_OscConfig+0x4d8>
 800182e:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800183e:	e029      	b.n	8001894 <HAL_RCC_OscConfig+0x52c>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d115      	bne.n	8001874 <HAL_RCC_OscConfig+0x50c>
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800184e:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185e:	4a03      	ldr	r2, [pc, #12]	@ (800186c <HAL_RCC_OscConfig+0x504>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001868:	e014      	b.n	8001894 <HAL_RCC_OscConfig+0x52c>
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	40007000 	.word	0x40007000
 8001874:	4b9c      	ldr	r3, [pc, #624]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001884:	4b98      	ldr	r3, [pc, #608]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800188a:	4a97      	ldr	r2, [pc, #604]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d016      	beq.n	80018ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fa4c 	bl	8000d38 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff fa48 	bl	8000d38 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e12a      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ba:	4b8b      	ldr	r3, [pc, #556]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 80018bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ed      	beq.n	80018a4 <HAL_RCC_OscConfig+0x53c>
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ca:	f7ff fa35 	bl	8000d38 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff fa31 	bl	8000d38 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e113      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ed      	bne.n	80018d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001900:	4a79      	ldr	r2, [pc, #484]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001906:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80fe 	beq.w	8001b0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001916:	2b02      	cmp	r3, #2
 8001918:	f040 80d0 	bne.w	8001abc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800191c:	4b72      	ldr	r3, [pc, #456]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192c:	429a      	cmp	r2, r3
 800192e:	d130      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	3b01      	subs	r3, #1
 800193c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d127      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d11f      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800195c:	2a07      	cmp	r2, #7
 800195e:	bf14      	ite	ne
 8001960:	2201      	movne	r2, #1
 8001962:	2200      	moveq	r2, #0
 8001964:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001966:	4293      	cmp	r3, r2
 8001968:	d113      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	3b01      	subs	r3, #1
 8001978:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d109      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	3b01      	subs	r3, #1
 800198c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d06e      	beq.n	8001a70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d069      	beq.n	8001a6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001998:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019a4:	4b50      	ldr	r3, [pc, #320]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0ad      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019b4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 80019ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c0:	f7ff f9ba 	bl	8000d38 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f9b6 	bl	8000d38 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e09a      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019da:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e6:	4b40      	ldr	r3, [pc, #256]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	4b40      	ldr	r3, [pc, #256]	@ (8001aec <HAL_RCC_OscConfig+0x784>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019f6:	3a01      	subs	r2, #1
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a00:	0212      	lsls	r2, r2, #8
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a08:	0852      	lsrs	r2, r2, #1
 8001a0a:	3a01      	subs	r2, #1
 8001a0c:	0552      	lsls	r2, r2, #21
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a14:	0852      	lsrs	r2, r2, #1
 8001a16:	3a01      	subs	r2, #1
 8001a18:	0652      	lsls	r2, r2, #25
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a20:	0912      	lsrs	r2, r2, #4
 8001a22:	0452      	lsls	r2, r2, #17
 8001a24:	430a      	orrs	r2, r1
 8001a26:	4930      	ldr	r1, [pc, #192]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a44:	f7ff f978 	bl	8000d38 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff f974 	bl	8000d38 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e058      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a6a:	e050      	b.n	8001b0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e04f      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d148      	bne.n	8001b0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a16      	ldr	r2, [pc, #88]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a94:	f7ff f950 	bl	8000d38 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f94c 	bl	8000d38 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e030      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x734>
 8001aba:	e028      	b.n	8001b0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d023      	beq.n	8001b0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <HAL_RCC_OscConfig+0x780>)
 8001ac8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff f933 	bl	8000d38 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad4:	e00c      	b.n	8001af0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff f92f 	bl	8000d38 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d905      	bls.n	8001af0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e013      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <HAL_RCC_OscConfig+0x7b0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ec      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_RCC_OscConfig+0x7b0>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4905      	ldr	r1, [pc, #20]	@ (8001b18 <HAL_RCC_OscConfig+0x7b0>)
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_RCC_OscConfig+0x7b4>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
 8001b08:	e001      	b.n	8001b0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	feeefffc 	.word	0xfeeefffc

08001b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0e7      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b75      	ldr	r3, [pc, #468]	@ (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d910      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b72      	ldr	r3, [pc, #456]	@ (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0207 	bic.w	r2, r3, #7
 8001b4a:	4970      	ldr	r1, [pc, #448]	@ (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b6e      	ldr	r3, [pc, #440]	@ (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0cf      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d010      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d908      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b80:	4b63      	ldr	r3, [pc, #396]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4960      	ldr	r1, [pc, #384]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d04c      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d121      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0a6      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bbe:	4b54      	ldr	r3, [pc, #336]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d115      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e09a      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e08e      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e086      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bf6:	4b46      	ldr	r3, [pc, #280]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f023 0203 	bic.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4943      	ldr	r1, [pc, #268]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c08:	f7ff f896 	bl	8000d38 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff f892 	bl	8000d38 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e06e      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b3a      	ldr	r3, [pc, #232]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 020c 	and.w	r2, r3, #12
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1eb      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d010      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d208      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b2e      	ldr	r3, [pc, #184]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	492b      	ldr	r1, [pc, #172]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c66:	4b29      	ldr	r3, [pc, #164]	@ (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d210      	bcs.n	8001c96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c74:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 0207 	bic.w	r2, r3, #7
 8001c7c:	4923      	ldr	r1, [pc, #140]	@ (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c84:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e036      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4918      	ldr	r1, [pc, #96]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4910      	ldr	r1, [pc, #64]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cd4:	f000 f824 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	490b      	ldr	r1, [pc, #44]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f4>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf0:	4a09      	ldr	r2, [pc, #36]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_RCC_ClockConfig+0x1fc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe ffcd 	bl	8000c98 <HAL_InitTick>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d02:	7afb      	ldrb	r3, [r7, #11]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	080066f0 	.word	0x080066f0
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d38:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x34>
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	d121      	bne.n	8001d92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d11e      	bne.n	8001d92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d54:	4b34      	ldr	r3, [pc, #208]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d60:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e005      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d70:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	e004      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001da4:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001da6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d134      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dae:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d003      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0xac>
 8001dc4:	e005      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dc8:	617b      	str	r3, [r7, #20]
      break;
 8001dca:	e005      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dce:	617b      	str	r3, [r7, #20]
      break;
 8001dd0:	e002      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	617b      	str	r3, [r7, #20]
      break;
 8001dd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	3301      	adds	r3, #1
 8001de4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	fb03 f202 	mul.w	r2, r3, r2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	0e5b      	lsrs	r3, r3, #25
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e18:	69bb      	ldr	r3, [r7, #24]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	@ 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08006708 	.word	0x08006708
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	007a1200 	.word	0x007a1200

08001e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4904      	ldr	r1, [pc, #16]	@ (8001e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08006700 	.word	0x08006700

08001e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e80:	f7ff ffda 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	0adb      	lsrs	r3, r3, #11
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4904      	ldr	r1, [pc, #16]	@ (8001ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08006700 	.word	0x08006700

08001ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ec0:	f7ff f9ee 	bl	80012a0 <HAL_PWREx_GetVoltageRange>
 8001ec4:	6178      	str	r0, [r7, #20]
 8001ec6:	e014      	b.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b25      	ldr	r3, [pc, #148]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	4a24      	ldr	r2, [pc, #144]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed4:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ee0:	f7ff f9de 	bl	80012a0 <HAL_PWREx_GetVoltageRange>
 8001ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eea:	4a1d      	ldr	r2, [pc, #116]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ef8:	d10b      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b80      	cmp	r3, #128	@ 0x80
 8001efe:	d919      	bls.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f04:	d902      	bls.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f06:	2302      	movs	r3, #2
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e013      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	e010      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b80      	cmp	r3, #128	@ 0x80
 8001f16:	d902      	bls.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f18:	2303      	movs	r3, #3
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	e00a      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b80      	cmp	r3, #128	@ 0x80
 8001f22:	d102      	bne.n	8001f2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f24:	2302      	movs	r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e004      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b70      	cmp	r3, #112	@ 0x70
 8001f2e:	d101      	bne.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 0207 	bic.w	r2, r3, #7
 8001f3c:	4909      	ldr	r1, [pc, #36]	@ (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f44:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40022000 	.word	0x40022000

08001f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f70:	2300      	movs	r3, #0
 8001f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f74:	2300      	movs	r3, #0
 8001f76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d041      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f8c:	d02a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f92:	d824      	bhi.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f98:	d008      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f9e:	d81e      	bhi.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001faa:	e018      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fac:	4b86      	ldr	r3, [pc, #536]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a85      	ldr	r2, [pc, #532]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fabb 	bl	800253c <RCCEx_PLLSAI1_Config>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fca:	e00c      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3320      	adds	r3, #32
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fba6 	bl	8002724 <RCCEx_PLLSAI2_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fdc:	e003      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fe6:	7cfb      	ldrb	r3, [r7, #19]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fec:	4b76      	ldr	r3, [pc, #472]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ffa:	4973      	ldr	r1, [pc, #460]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002002:	e001      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002004:	7cfb      	ldrb	r3, [r7, #19]
 8002006:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d041      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002018:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800201c:	d02a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800201e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002022:	d824      	bhi.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002028:	d008      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800202a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800202e:	d81e      	bhi.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002038:	d010      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800203a:	e018      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800203c:	4b62      	ldr	r3, [pc, #392]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a61      	ldr	r2, [pc, #388]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002046:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002048:	e015      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f000 fa73 	bl	800253c <RCCEx_PLLSAI1_Config>
 8002056:	4603      	mov	r3, r0
 8002058:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800205a:	e00c      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3320      	adds	r3, #32
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fb5e 	bl	8002724 <RCCEx_PLLSAI2_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800206c:	e003      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	74fb      	strb	r3, [r7, #19]
      break;
 8002072:	e000      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002076:	7cfb      	ldrb	r3, [r7, #19]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800207c:	4b52      	ldr	r3, [pc, #328]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002082:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800208a:	494f      	ldr	r1, [pc, #316]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002092:	e001      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a0 	beq.w	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020aa:	4b47      	ldr	r3, [pc, #284]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b41      	ldr	r3, [pc, #260]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	4a40      	ldr	r2, [pc, #256]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80020cc:	4b3e      	ldr	r3, [pc, #248]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020dc:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3a      	ldr	r2, [pc, #232]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e8:	f7fe fe26 	bl	8000d38 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ee:	e009      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f0:	f7fe fe22 	bl	8000d38 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d902      	bls.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	74fb      	strb	r3, [r7, #19]
        break;
 8002102:	e005      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002104:	4b31      	ldr	r3, [pc, #196]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ef      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d15c      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002116:	4b2c      	ldr	r3, [pc, #176]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002120:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01f      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	d019      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002134:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002140:	4b21      	ldr	r3, [pc, #132]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	4a20      	ldr	r2, [pc, #128]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002150:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002156:	4a1c      	ldr	r2, [pc, #112]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002160:	4a19      	ldr	r2, [pc, #100]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d016      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002172:	f7fe fde1 	bl	8000d38 <HAL_GetTick>
 8002176:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002178:	e00b      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fddd 	bl	8000d38 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d902      	bls.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	74fb      	strb	r3, [r7, #19]
            break;
 8002190:	e006      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ec      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021b6:	4904      	ldr	r1, [pc, #16]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021be:	e009      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
 80021c4:	e006      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d4:	7c7b      	ldrb	r3, [r7, #17]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b9e      	ldr	r3, [pc, #632]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	4a9d      	ldr	r2, [pc, #628]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f2:	4b98      	ldr	r3, [pc, #608]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f023 0203 	bic.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002200:	4994      	ldr	r1, [pc, #592]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002214:	4b8f      	ldr	r3, [pc, #572]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f023 020c 	bic.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002222:	498c      	ldr	r1, [pc, #560]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002236:	4b87      	ldr	r3, [pc, #540]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	4983      	ldr	r1, [pc, #524]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002258:	4b7e      	ldr	r3, [pc, #504]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	497b      	ldr	r1, [pc, #492]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800227a:	4b76      	ldr	r3, [pc, #472]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002288:	4972      	ldr	r1, [pc, #456]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800229c:	4b6d      	ldr	r3, [pc, #436]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	496a      	ldr	r1, [pc, #424]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022be:	4b65      	ldr	r3, [pc, #404]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022cc:	4961      	ldr	r1, [pc, #388]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ee:	4959      	ldr	r1, [pc, #356]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002302:	4b54      	ldr	r3, [pc, #336]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002308:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002310:	4950      	ldr	r1, [pc, #320]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002324:	4b4b      	ldr	r3, [pc, #300]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002332:	4948      	ldr	r1, [pc, #288]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002346:	4b43      	ldr	r3, [pc, #268]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	493f      	ldr	r1, [pc, #252]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d028      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002368:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002376:	4937      	ldr	r1, [pc, #220]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002386:	d106      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b32      	ldr	r3, [pc, #200]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a31      	ldr	r2, [pc, #196]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e011      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800239e:	d10c      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f8c8 	bl	800253c <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023c6:	4b23      	ldr	r3, [pc, #140]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	491f      	ldr	r1, [pc, #124]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f0:	60d3      	str	r3, [r2, #12]
 80023f2:	e011      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f899 	bl	800253c <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d02b      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002432:	4908      	ldr	r1, [pc, #32]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002442:	d109      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a02      	ldr	r2, [pc, #8]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800244e:	60d3      	str	r3, [r2, #12]
 8002450:	e014      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800245c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f867 	bl	800253c <RCCEx_PLLSAI1_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d02f      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002488:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002496:	4928      	ldr	r1, [pc, #160]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024a6:	d10d      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f844 	bl	800253c <RCCEx_PLLSAI1_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d014      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	74bb      	strb	r3, [r7, #18]
 80024c2:	e011      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3320      	adds	r3, #32
 80024d2:	2102      	movs	r1, #2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 f925 	bl	8002724 <RCCEx_PLLSAI2_Config>
 80024da:	4603      	mov	r3, r0
 80024dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024f4:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002502:	490d      	ldr	r1, [pc, #52]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002516:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002526:	4904      	ldr	r1, [pc, #16]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800252e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000

0800253c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800254a:	4b75      	ldr	r3, [pc, #468]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d018      	beq.n	8002588 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002556:	4b72      	ldr	r3, [pc, #456]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0203 	and.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d10d      	bne.n	8002582 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
       ||
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800256e:	4b6c      	ldr	r3, [pc, #432]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
       ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d047      	beq.n	8002612 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e044      	b.n	8002612 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d018      	beq.n	80025c2 <RCCEx_PLLSAI1_Config+0x86>
 8002590:	2b03      	cmp	r3, #3
 8002592:	d825      	bhi.n	80025e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002594:	2b01      	cmp	r3, #1
 8002596:	d002      	beq.n	800259e <RCCEx_PLLSAI1_Config+0x62>
 8002598:	2b02      	cmp	r3, #2
 800259a:	d009      	beq.n	80025b0 <RCCEx_PLLSAI1_Config+0x74>
 800259c:	e020      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800259e:	4b60      	ldr	r3, [pc, #384]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11d      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ae:	e01a      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d116      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c0:	e013      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025c2:	4b57      	ldr	r3, [pc, #348]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ce:	4b54      	ldr	r3, [pc, #336]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025de:	e006      	b.n	80025ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	e004      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e6:	bf00      	nop
 80025e8:	e002      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ea:	bf00      	nop
 80025ec:	e000      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10d      	bne.n	8002612 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	430b      	orrs	r3, r1
 800260c:	4944      	ldr	r1, [pc, #272]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d17d      	bne.n	8002714 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002618:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a40      	ldr	r2, [pc, #256]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002624:	f7fe fb88 	bl	8000d38 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800262a:	e009      	b.n	8002640 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800262c:	f7fe fb84 	bl	8000d38 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d902      	bls.n	8002640 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	73fb      	strb	r3, [r7, #15]
        break;
 800263e:	e005      	b.n	800264c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002640:	4b37      	ldr	r3, [pc, #220]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ef      	bne.n	800262c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d160      	bne.n	8002714 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002658:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6892      	ldr	r2, [r2, #8]
 8002668:	0211      	lsls	r1, r2, #8
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68d2      	ldr	r2, [r2, #12]
 800266e:	0912      	lsrs	r2, r2, #4
 8002670:	0452      	lsls	r2, r2, #17
 8002672:	430a      	orrs	r2, r1
 8002674:	492a      	ldr	r1, [pc, #168]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	610b      	str	r3, [r1, #16]
 800267a:	e027      	b.n	80026cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d112      	bne.n	80026a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002682:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800268a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6892      	ldr	r2, [r2, #8]
 8002692:	0211      	lsls	r1, r2, #8
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6912      	ldr	r2, [r2, #16]
 8002698:	0852      	lsrs	r2, r2, #1
 800269a:	3a01      	subs	r2, #1
 800269c:	0552      	lsls	r2, r2, #21
 800269e:	430a      	orrs	r2, r1
 80026a0:	491f      	ldr	r1, [pc, #124]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	610b      	str	r3, [r1, #16]
 80026a6:	e011      	b.n	80026cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6892      	ldr	r2, [r2, #8]
 80026b8:	0211      	lsls	r1, r2, #8
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6952      	ldr	r2, [r2, #20]
 80026be:	0852      	lsrs	r2, r2, #1
 80026c0:	3a01      	subs	r2, #1
 80026c2:	0652      	lsls	r2, r2, #25
 80026c4:	430a      	orrs	r2, r1
 80026c6:	4916      	ldr	r1, [pc, #88]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026cc:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a13      	ldr	r2, [pc, #76]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fb2e 	bl	8000d38 <HAL_GetTick>
 80026dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026de:	e009      	b.n	80026f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e0:	f7fe fb2a 	bl	8000d38 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	73fb      	strb	r3, [r7, #15]
          break;
 80026f2:	e005      	b.n	8002700 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	4904      	ldr	r1, [pc, #16]	@ (8002720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000

08002724 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002732:	4b6a      	ldr	r3, [pc, #424]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d018      	beq.n	8002770 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800273e:	4b67      	ldr	r3, [pc, #412]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d10d      	bne.n	800276a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
       ||
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002756:	4b61      	ldr	r3, [pc, #388]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
       ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d047      	beq.n	80027fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	e044      	b.n	80027fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d018      	beq.n	80027aa <RCCEx_PLLSAI2_Config+0x86>
 8002778:	2b03      	cmp	r3, #3
 800277a:	d825      	bhi.n	80027c8 <RCCEx_PLLSAI2_Config+0xa4>
 800277c:	2b01      	cmp	r3, #1
 800277e:	d002      	beq.n	8002786 <RCCEx_PLLSAI2_Config+0x62>
 8002780:	2b02      	cmp	r3, #2
 8002782:	d009      	beq.n	8002798 <RCCEx_PLLSAI2_Config+0x74>
 8002784:	e020      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002786:	4b55      	ldr	r3, [pc, #340]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d11d      	bne.n	80027ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002796:	e01a      	b.n	80027ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002798:	4b50      	ldr	r3, [pc, #320]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d116      	bne.n	80027d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a8:	e013      	b.n	80027d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027aa:	4b4c      	ldr	r3, [pc, #304]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10f      	bne.n	80027d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027b6:	4b49      	ldr	r3, [pc, #292]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027c6:	e006      	b.n	80027d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      break;
 80027cc:	e004      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ce:	bf00      	nop
 80027d0:	e002      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027d2:	bf00      	nop
 80027d4:	e000      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10d      	bne.n	80027fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027de:	4b3f      	ldr	r3, [pc, #252]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	430b      	orrs	r3, r1
 80027f4:	4939      	ldr	r1, [pc, #228]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d167      	bne.n	80028d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002800:	4b36      	ldr	r3, [pc, #216]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a35      	ldr	r2, [pc, #212]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800280a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800280c:	f7fe fa94 	bl	8000d38 <HAL_GetTick>
 8002810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002812:	e009      	b.n	8002828 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002814:	f7fe fa90 	bl	8000d38 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d902      	bls.n	8002828 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	73fb      	strb	r3, [r7, #15]
        break;
 8002826:	e005      	b.n	8002834 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002828:	4b2c      	ldr	r3, [pc, #176]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ef      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d14a      	bne.n	80028d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d111      	bne.n	8002864 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002840:	4b26      	ldr	r3, [pc, #152]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6892      	ldr	r2, [r2, #8]
 8002850:	0211      	lsls	r1, r2, #8
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68d2      	ldr	r2, [r2, #12]
 8002856:	0912      	lsrs	r2, r2, #4
 8002858:	0452      	lsls	r2, r2, #17
 800285a:	430a      	orrs	r2, r1
 800285c:	491f      	ldr	r1, [pc, #124]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	614b      	str	r3, [r1, #20]
 8002862:	e011      	b.n	8002888 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002864:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800286c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6892      	ldr	r2, [r2, #8]
 8002874:	0211      	lsls	r1, r2, #8
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6912      	ldr	r2, [r2, #16]
 800287a:	0852      	lsrs	r2, r2, #1
 800287c:	3a01      	subs	r2, #1
 800287e:	0652      	lsls	r2, r2, #25
 8002880:	430a      	orrs	r2, r1
 8002882:	4916      	ldr	r1, [pc, #88]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002884:	4313      	orrs	r3, r2
 8002886:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002888:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a13      	ldr	r2, [pc, #76]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002892:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fa50 	bl	8000d38 <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800289a:	e009      	b.n	80028b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800289c:	f7fe fa4c 	bl	8000d38 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d902      	bls.n	80028b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	73fb      	strb	r3, [r7, #15]
          break;
 80028ae:	e005      	b.n	80028bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ef      	beq.n	800289c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4904      	ldr	r1, [pc, #16]	@ (80028dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e040      	b.n	8002974 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe f822 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fb6a 	bl	8003000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f8af 	bl	8002a90 <UART_SetConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e01b      	b.n	8002974 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800294a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800295a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fbe9 	bl	8003144 <UART_CheckIdleState>
 8002972:	4603      	mov	r3, r0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	@ 0x28
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002990:	2b20      	cmp	r3, #32
 8002992:	d177      	bne.n	8002a84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_UART_Transmit+0x24>
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e070      	b.n	8002a86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2221      	movs	r2, #33	@ 0x21
 80029b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b2:	f7fe f9c1 	bl	8000d38 <HAL_GetTick>
 80029b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d0:	d108      	bne.n	80029e4 <HAL_UART_Transmit+0x68>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d104      	bne.n	80029e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e003      	b.n	80029ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029ec:	e02f      	b.n	8002a4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2180      	movs	r1, #128	@ 0x80
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fc4b 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e03b      	b.n	8002a86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a20:	b292      	uxth	r2, r2
 8002a22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	3302      	adds	r3, #2
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	e007      	b.n	8002a3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1c9      	bne.n	80029ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2140      	movs	r1, #64	@ 0x40
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fc15 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e005      	b.n	8002a86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a94:	b08a      	sub	sp, #40	@ 0x28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4ba4      	ldr	r3, [pc, #656]	@ (8002d50 <UART_SetConfig+0x2c0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a99      	ldr	r2, [pc, #612]	@ (8002d54 <UART_SetConfig+0x2c4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d004      	beq.n	8002afc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af8:	4313      	orrs	r3, r2
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a90      	ldr	r2, [pc, #576]	@ (8002d58 <UART_SetConfig+0x2c8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d126      	bne.n	8002b68 <UART_SetConfig+0xd8>
 8002b1a:	4b90      	ldr	r3, [pc, #576]	@ (8002d5c <UART_SetConfig+0x2cc>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d81b      	bhi.n	8002b60 <UART_SetConfig+0xd0>
 8002b28:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <UART_SetConfig+0xa0>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b41 	.word	0x08002b41
 8002b34:	08002b51 	.word	0x08002b51
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b59 	.word	0x08002b59
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b46:	e116      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b4e:	e112      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002b50:	2304      	movs	r3, #4
 8002b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b56:	e10e      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002b58:	2308      	movs	r3, #8
 8002b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b5e:	e10a      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002b60:	2310      	movs	r3, #16
 8002b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b66:	e106      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a7c      	ldr	r2, [pc, #496]	@ (8002d60 <UART_SetConfig+0x2d0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d138      	bne.n	8002be4 <UART_SetConfig+0x154>
 8002b72:	4b7a      	ldr	r3, [pc, #488]	@ (8002d5c <UART_SetConfig+0x2cc>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d82d      	bhi.n	8002bdc <UART_SetConfig+0x14c>
 8002b80:	a201      	add	r2, pc, #4	@ (adr r2, 8002b88 <UART_SetConfig+0xf8>)
 8002b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b86:	bf00      	nop
 8002b88:	08002bbd 	.word	0x08002bbd
 8002b8c:	08002bdd 	.word	0x08002bdd
 8002b90:	08002bdd 	.word	0x08002bdd
 8002b94:	08002bdd 	.word	0x08002bdd
 8002b98:	08002bcd 	.word	0x08002bcd
 8002b9c:	08002bdd 	.word	0x08002bdd
 8002ba0:	08002bdd 	.word	0x08002bdd
 8002ba4:	08002bdd 	.word	0x08002bdd
 8002ba8:	08002bc5 	.word	0x08002bc5
 8002bac:	08002bdd 	.word	0x08002bdd
 8002bb0:	08002bdd 	.word	0x08002bdd
 8002bb4:	08002bdd 	.word	0x08002bdd
 8002bb8:	08002bd5 	.word	0x08002bd5
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bc2:	e0d8      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bca:	e0d4      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd2:	e0d0      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bda:	e0cc      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002be2:	e0c8      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5e      	ldr	r2, [pc, #376]	@ (8002d64 <UART_SetConfig+0x2d4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d125      	bne.n	8002c3a <UART_SetConfig+0x1aa>
 8002bee:	4b5b      	ldr	r3, [pc, #364]	@ (8002d5c <UART_SetConfig+0x2cc>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002bf8:	2b30      	cmp	r3, #48	@ 0x30
 8002bfa:	d016      	beq.n	8002c2a <UART_SetConfig+0x19a>
 8002bfc:	2b30      	cmp	r3, #48	@ 0x30
 8002bfe:	d818      	bhi.n	8002c32 <UART_SetConfig+0x1a2>
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d00a      	beq.n	8002c1a <UART_SetConfig+0x18a>
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d814      	bhi.n	8002c32 <UART_SetConfig+0x1a2>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <UART_SetConfig+0x182>
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d008      	beq.n	8002c22 <UART_SetConfig+0x192>
 8002c10:	e00f      	b.n	8002c32 <UART_SetConfig+0x1a2>
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c18:	e0ad      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c20:	e0a9      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c22:	2304      	movs	r3, #4
 8002c24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c28:	e0a5      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c30:	e0a1      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c32:	2310      	movs	r3, #16
 8002c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c38:	e09d      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d68 <UART_SetConfig+0x2d8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d125      	bne.n	8002c90 <UART_SetConfig+0x200>
 8002c44:	4b45      	ldr	r3, [pc, #276]	@ (8002d5c <UART_SetConfig+0x2cc>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c50:	d016      	beq.n	8002c80 <UART_SetConfig+0x1f0>
 8002c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c54:	d818      	bhi.n	8002c88 <UART_SetConfig+0x1f8>
 8002c56:	2b80      	cmp	r3, #128	@ 0x80
 8002c58:	d00a      	beq.n	8002c70 <UART_SetConfig+0x1e0>
 8002c5a:	2b80      	cmp	r3, #128	@ 0x80
 8002c5c:	d814      	bhi.n	8002c88 <UART_SetConfig+0x1f8>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <UART_SetConfig+0x1d8>
 8002c62:	2b40      	cmp	r3, #64	@ 0x40
 8002c64:	d008      	beq.n	8002c78 <UART_SetConfig+0x1e8>
 8002c66:	e00f      	b.n	8002c88 <UART_SetConfig+0x1f8>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c6e:	e082      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c70:	2302      	movs	r3, #2
 8002c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c76:	e07e      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c7e:	e07a      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c80:	2308      	movs	r3, #8
 8002c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c86:	e076      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c8e:	e072      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a35      	ldr	r2, [pc, #212]	@ (8002d6c <UART_SetConfig+0x2dc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d12a      	bne.n	8002cf0 <UART_SetConfig+0x260>
 8002c9a:	4b30      	ldr	r3, [pc, #192]	@ (8002d5c <UART_SetConfig+0x2cc>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ca8:	d01a      	beq.n	8002ce0 <UART_SetConfig+0x250>
 8002caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cae:	d81b      	bhi.n	8002ce8 <UART_SetConfig+0x258>
 8002cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb4:	d00c      	beq.n	8002cd0 <UART_SetConfig+0x240>
 8002cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cba:	d815      	bhi.n	8002ce8 <UART_SetConfig+0x258>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <UART_SetConfig+0x238>
 8002cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cc4:	d008      	beq.n	8002cd8 <UART_SetConfig+0x248>
 8002cc6:	e00f      	b.n	8002ce8 <UART_SetConfig+0x258>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cce:	e052      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd6:	e04e      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cde:	e04a      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce6:	e046      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002ce8:	2310      	movs	r3, #16
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cee:	e042      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <UART_SetConfig+0x2c4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d13a      	bne.n	8002d70 <UART_SetConfig+0x2e0>
 8002cfa:	4b18      	ldr	r3, [pc, #96]	@ (8002d5c <UART_SetConfig+0x2cc>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d08:	d01a      	beq.n	8002d40 <UART_SetConfig+0x2b0>
 8002d0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d0e:	d81b      	bhi.n	8002d48 <UART_SetConfig+0x2b8>
 8002d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d14:	d00c      	beq.n	8002d30 <UART_SetConfig+0x2a0>
 8002d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d1a:	d815      	bhi.n	8002d48 <UART_SetConfig+0x2b8>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <UART_SetConfig+0x298>
 8002d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d24:	d008      	beq.n	8002d38 <UART_SetConfig+0x2a8>
 8002d26:	e00f      	b.n	8002d48 <UART_SetConfig+0x2b8>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d2e:	e022      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002d30:	2302      	movs	r3, #2
 8002d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d36:	e01e      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d3e:	e01a      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002d40:	2308      	movs	r3, #8
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d46:	e016      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002d48:	2310      	movs	r3, #16
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4e:	e012      	b.n	8002d76 <UART_SetConfig+0x2e6>
 8002d50:	efff69f3 	.word	0xefff69f3
 8002d54:	40008000 	.word	0x40008000
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40004400 	.word	0x40004400
 8002d64:	40004800 	.word	0x40004800
 8002d68:	40004c00 	.word	0x40004c00
 8002d6c:	40005000 	.word	0x40005000
 8002d70:	2310      	movs	r3, #16
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a9f      	ldr	r2, [pc, #636]	@ (8002ff8 <UART_SetConfig+0x568>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d17a      	bne.n	8002e76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d824      	bhi.n	8002dd2 <UART_SetConfig+0x342>
 8002d88:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <UART_SetConfig+0x300>)
 8002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8e:	bf00      	nop
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002dd3 	.word	0x08002dd3
 8002d98:	08002dbd 	.word	0x08002dbd
 8002d9c:	08002dd3 	.word	0x08002dd3
 8002da0:	08002dc3 	.word	0x08002dc3
 8002da4:	08002dd3 	.word	0x08002dd3
 8002da8:	08002dd3 	.word	0x08002dd3
 8002dac:	08002dd3 	.word	0x08002dd3
 8002db0:	08002dcb 	.word	0x08002dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db4:	f7ff f84c 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8002db8:	61f8      	str	r0, [r7, #28]
        break;
 8002dba:	e010      	b.n	8002dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dbc:	4b8f      	ldr	r3, [pc, #572]	@ (8002ffc <UART_SetConfig+0x56c>)
 8002dbe:	61fb      	str	r3, [r7, #28]
        break;
 8002dc0:	e00d      	b.n	8002dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc2:	f7fe ffad 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8002dc6:	61f8      	str	r0, [r7, #28]
        break;
 8002dc8:	e009      	b.n	8002dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dce:	61fb      	str	r3, [r7, #28]
        break;
 8002dd0:	e005      	b.n	8002dde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80fb 	beq.w	8002fdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d305      	bcc.n	8002e02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d903      	bls.n	8002e0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e08:	e0e8      	b.n	8002fdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	461c      	mov	r4, r3
 8002e10:	4615      	mov	r5, r2
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	022b      	lsls	r3, r5, #8
 8002e1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e20:	0222      	lsls	r2, r4, #8
 8002e22:	68f9      	ldr	r1, [r7, #12]
 8002e24:	6849      	ldr	r1, [r1, #4]
 8002e26:	0849      	lsrs	r1, r1, #1
 8002e28:	2000      	movs	r0, #0
 8002e2a:	4688      	mov	r8, r1
 8002e2c:	4681      	mov	r9, r0
 8002e2e:	eb12 0a08 	adds.w	sl, r2, r8
 8002e32:	eb43 0b09 	adc.w	fp, r3, r9
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e44:	4650      	mov	r0, sl
 8002e46:	4659      	mov	r1, fp
 8002e48:	f7fd fa1a 	bl	8000280 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4613      	mov	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e5a:	d308      	bcc.n	8002e6e <UART_SetConfig+0x3de>
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e62:	d204      	bcs.n	8002e6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	e0b6      	b.n	8002fdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e74:	e0b2      	b.n	8002fdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e7e:	d15e      	bne.n	8002f3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002e80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d828      	bhi.n	8002eda <UART_SetConfig+0x44a>
 8002e88:	a201      	add	r2, pc, #4	@ (adr r2, 8002e90 <UART_SetConfig+0x400>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002eb5 	.word	0x08002eb5
 8002e94:	08002ebd 	.word	0x08002ebd
 8002e98:	08002ec5 	.word	0x08002ec5
 8002e9c:	08002edb 	.word	0x08002edb
 8002ea0:	08002ecb 	.word	0x08002ecb
 8002ea4:	08002edb 	.word	0x08002edb
 8002ea8:	08002edb 	.word	0x08002edb
 8002eac:	08002edb 	.word	0x08002edb
 8002eb0:	08002ed3 	.word	0x08002ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb4:	f7fe ffcc 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8002eb8:	61f8      	str	r0, [r7, #28]
        break;
 8002eba:	e014      	b.n	8002ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ebc:	f7fe ffde 	bl	8001e7c <HAL_RCC_GetPCLK2Freq>
 8002ec0:	61f8      	str	r0, [r7, #28]
        break;
 8002ec2:	e010      	b.n	8002ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8002ffc <UART_SetConfig+0x56c>)
 8002ec6:	61fb      	str	r3, [r7, #28]
        break;
 8002ec8:	e00d      	b.n	8002ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eca:	f7fe ff29 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8002ece:	61f8      	str	r0, [r7, #28]
        break;
 8002ed0:	e009      	b.n	8002ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ed6:	61fb      	str	r3, [r7, #28]
        break;
 8002ed8:	e005      	b.n	8002ee6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d077      	beq.n	8002fdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	005a      	lsls	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b0f      	cmp	r3, #15
 8002f06:	d916      	bls.n	8002f36 <UART_SetConfig+0x4a6>
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0e:	d212      	bcs.n	8002f36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f023 030f 	bic.w	r3, r3, #15
 8002f18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	8afb      	ldrh	r3, [r7, #22]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	8afa      	ldrh	r2, [r7, #22]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	e052      	b.n	8002fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f3c:	e04e      	b.n	8002fdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d827      	bhi.n	8002f96 <UART_SetConfig+0x506>
 8002f46:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <UART_SetConfig+0x4bc>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f79 	.word	0x08002f79
 8002f54:	08002f81 	.word	0x08002f81
 8002f58:	08002f97 	.word	0x08002f97
 8002f5c:	08002f87 	.word	0x08002f87
 8002f60:	08002f97 	.word	0x08002f97
 8002f64:	08002f97 	.word	0x08002f97
 8002f68:	08002f97 	.word	0x08002f97
 8002f6c:	08002f8f 	.word	0x08002f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7fe ff6e 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8002f74:	61f8      	str	r0, [r7, #28]
        break;
 8002f76:	e014      	b.n	8002fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f78:	f7fe ff80 	bl	8001e7c <HAL_RCC_GetPCLK2Freq>
 8002f7c:	61f8      	str	r0, [r7, #28]
        break;
 8002f7e:	e010      	b.n	8002fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f80:	4b1e      	ldr	r3, [pc, #120]	@ (8002ffc <UART_SetConfig+0x56c>)
 8002f82:	61fb      	str	r3, [r7, #28]
        break;
 8002f84:	e00d      	b.n	8002fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f86:	f7fe fecb 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8002f8a:	61f8      	str	r0, [r7, #28]
        break;
 8002f8c:	e009      	b.n	8002fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f92:	61fb      	str	r3, [r7, #28]
        break;
 8002f94:	e005      	b.n	8002fa2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d019      	beq.n	8002fdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	085a      	lsrs	r2, r3, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	441a      	add	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	d909      	bls.n	8002fd6 <UART_SetConfig+0x546>
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc8:	d205      	bcs.n	8002fd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	e002      	b.n	8002fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fe8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3728      	adds	r7, #40	@ 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40008000 	.word	0x40008000
 8002ffc:	00f42400 	.word	0x00f42400

08003000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01a      	beq.n	8003116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030fe:	d10a      	bne.n	8003116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b098      	sub	sp, #96	@ 0x60
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003154:	f7fd fdf0 	bl	8000d38 <HAL_GetTick>
 8003158:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b08      	cmp	r3, #8
 8003166:	d12e      	bne.n	80031c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f88c 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d021      	beq.n	80031c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003196:	653b      	str	r3, [r7, #80]	@ 0x50
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e6      	bne.n	8003182 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e062      	b.n	800328c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d149      	bne.n	8003268 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031dc:	2200      	movs	r2, #0
 80031de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f856 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d03c      	beq.n	8003268 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	623b      	str	r3, [r7, #32]
   return(result);
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320c:	633b      	str	r3, [r7, #48]	@ 0x30
 800320e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e6      	bne.n	80031ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3308      	adds	r3, #8
 8003226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3308      	adds	r3, #8
 800323e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003240:	61fa      	str	r2, [r7, #28]
 8003242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	69b9      	ldr	r1, [r7, #24]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	617b      	str	r3, [r7, #20]
   return(result);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e5      	bne.n	8003220 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e011      	b.n	800328c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3758      	adds	r7, #88	@ 0x58
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a4:	e04f      	b.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d04b      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fd fd43 	bl	8000d38 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e04e      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d037      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b80      	cmp	r3, #128	@ 0x80
 80032da:	d034      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b40      	cmp	r3, #64	@ 0x40
 80032e0:	d031      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d110      	bne.n	8003312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2208      	movs	r2, #8
 80032f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f838 	bl	800336e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2208      	movs	r2, #8
 8003302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e029      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003320:	d111      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800332a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f81e 	bl	800336e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	429a      	cmp	r2, r3
 8003362:	d0a0      	beq.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800336e:	b480      	push	{r7}
 8003370:	b095      	sub	sp, #84	@ 0x54
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003394:	643b      	str	r3, [r7, #64]	@ 0x40
 8003396:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800339a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e6      	bne.n	8003376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d118      	bne.n	8003416 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f023 0310 	bic.w	r3, r3, #16
 80033f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	613b      	str	r3, [r7, #16]
   return(result);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e6      	bne.n	80033e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800342a:	bf00      	nop
 800342c:	3754      	adds	r7, #84	@ 0x54
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003448:	2b84      	cmp	r3, #132	@ 0x84
 800344a:	d005      	beq.n	8003458 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800344c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	3303      	adds	r3, #3
 8003456:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003458:	68fb      	ldr	r3, [r7, #12]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800346a:	f000 feef 	bl	800424c <vTaskStartScheduler>
  
  return osOK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}

08003474 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	b089      	sub	sp, #36	@ 0x24
 8003478:	af04      	add	r7, sp, #16
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d020      	beq.n	80034c8 <osThreadCreate+0x54>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01c      	beq.n	80034c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685c      	ldr	r4, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691e      	ldr	r6, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ffc8 	bl	8003436 <makeFreeRtosPriority>
 80034a6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034b0:	9202      	str	r2, [sp, #8]
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	9100      	str	r1, [sp, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	4632      	mov	r2, r6
 80034ba:	4629      	mov	r1, r5
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 fcf7 	bl	8003eb0 <xTaskCreateStatic>
 80034c2:	4603      	mov	r3, r0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e01c      	b.n	8003502 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685c      	ldr	r4, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034d4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ffaa 	bl	8003436 <makeFreeRtosPriority>
 80034e2:	4602      	mov	r2, r0
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	9200      	str	r2, [sp, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4632      	mov	r2, r6
 80034f0:	4629      	mov	r1, r5
 80034f2:	4620      	mov	r0, r4
 80034f4:	f000 fd3c 	bl	8003f70 <xTaskCreate>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d001      	beq.n	8003502 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800350c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <osDelay+0x16>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	e000      	b.n	8003524 <osDelay+0x18>
 8003522:	2301      	movs	r3, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fe5b 	bl	80041e0 <vTaskDelay>
  
  return osOK;
 800352a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f103 0208 	add.w	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f103 0208 	add.w	r2, r3, #8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f103 0208 	add.w	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d103      	bne.n	80035f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e00c      	b.n	8003610 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3308      	adds	r3, #8
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e002      	b.n	8003604 <vListInsert+0x2e>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	d2f6      	bcs.n	80035fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6852      	ldr	r2, [r2, #4]
 8003668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d103      	bne.n	800367c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1e5a      	subs	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036c8:	f001 fd1e 	bl	8005108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	68f9      	ldr	r1, [r7, #12]
 80036d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	441a      	add	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	3b01      	subs	r3, #1
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	441a      	add	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	22ff      	movs	r2, #255	@ 0xff
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	22ff      	movs	r2, #255	@ 0xff
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d114      	bne.n	8003748 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01a      	beq.n	800375c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3310      	adds	r3, #16
 800372a:	4618      	mov	r0, r3
 800372c:	f000 ffd8 	bl	80046e0 <xTaskRemoveFromEventList>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <xQueueGenericReset+0xd0>)
 8003738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	e009      	b.n	800375c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3310      	adds	r3, #16
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fef1 	bl	8003534 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3324      	adds	r3, #36	@ 0x24
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff feec 	bl	8003534 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800375c:	f001 fd06 	bl	800516c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003760:	2301      	movs	r3, #1
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	@ 0x28
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <xQueueGenericCreate+0x2c>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	613b      	str	r3, [r7, #16]
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3348      	adds	r3, #72	@ 0x48
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fd8c 	bl	80052c8 <pvPortMalloc>
 80037b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d011      	beq.n	80037dc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3348      	adds	r3, #72	@ 0x48
 80037c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037ca:	79fa      	ldrb	r2, [r7, #7]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f805 	bl	80037e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037dc:	69bb      	ldr	r3, [r7, #24]
	}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e002      	b.n	8003808 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003814:	2101      	movs	r1, #1
 8003816:	69b8      	ldr	r0, [r7, #24]
 8003818:	f7ff ff40 	bl	800369c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00e      	beq.n	8003850 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003844:	2300      	movs	r3, #0
 8003846:	2200      	movs	r2, #0
 8003848:	2100      	movs	r1, #0
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f81c 	bl	8003888 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003862:	2301      	movs	r3, #1
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	461a      	mov	r2, r3
 800386e:	6939      	ldr	r1, [r7, #16]
 8003870:	6978      	ldr	r0, [r7, #20]
 8003872:	f7ff ff7d 	bl	8003770 <xQueueGenericCreate>
 8003876:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff ffd3 	bl	8003824 <prvInitialiseMutex>

		return xNewQueue;
 800387e:	68fb      	ldr	r3, [r7, #12]
	}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08e      	sub	sp, #56	@ 0x38
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003896:	2300      	movs	r3, #0
 8003898:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800389e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <xQueueGenericSend+0x34>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	e7fd      	b.n	80038b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <xQueueGenericSend+0x42>
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <xQueueGenericSend+0x46>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <xQueueGenericSend+0x48>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <xQueueGenericSend+0x64>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d103      	bne.n	80038fa <xQueueGenericSend+0x72>
 80038f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <xQueueGenericSend+0x76>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <xQueueGenericSend+0x78>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <xQueueGenericSend+0x94>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	623b      	str	r3, [r7, #32]
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800391c:	f001 f8a0 	bl	8004a60 <xTaskGetSchedulerState>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <xQueueGenericSend+0xa4>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <xQueueGenericSend+0xa8>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <xQueueGenericSend+0xaa>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <xQueueGenericSend+0xc6>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	61fb      	str	r3, [r7, #28]
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800394e:	f001 fbdb 	bl	8005108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <xQueueGenericSend+0xdc>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d129      	bne.n	80039b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	68b9      	ldr	r1, [r7, #8]
 8003968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800396a:	f000 f9b7 	bl	8003cdc <prvCopyDataToQueue>
 800396e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	3324      	adds	r3, #36	@ 0x24
 800397c:	4618      	mov	r0, r3
 800397e:	f000 feaf 	bl	80046e0 <xTaskRemoveFromEventList>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003988:	4b3f      	ldr	r3, [pc, #252]	@ (8003a88 <xQueueGenericSend+0x200>)
 800398a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	e00a      	b.n	80039b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039a0:	4b39      	ldr	r3, [pc, #228]	@ (8003a88 <xQueueGenericSend+0x200>)
 80039a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039b0:	f001 fbdc 	bl	800516c <vPortExitCritical>
				return pdPASS;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e063      	b.n	8003a80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039be:	f001 fbd5 	bl	800516c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e05c      	b.n	8003a80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fee9 	bl	80047a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039da:	f001 fbc7 	bl	800516c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039de:	f000 fc97 	bl	8004310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039e2:	f001 fb91 	bl	8005108 <vPortEnterCritical>
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d103      	bne.n	80039fc <xQueueGenericSend+0x174>
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a02:	b25b      	sxtb	r3, r3
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d103      	bne.n	8003a12 <xQueueGenericSend+0x18a>
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a12:	f001 fbab 	bl	800516c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a16:	1d3a      	adds	r2, r7, #4
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fed8 	bl	80047d4 <xTaskCheckForTimeOut>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d124      	bne.n	8003a74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a2c:	f000 fa28 	bl	8003e80 <prvIsQueueFull>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d018      	beq.n	8003a68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a38:	3310      	adds	r3, #16
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fe28 	bl	8004694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a46:	f000 f9b3 	bl	8003db0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a4a:	f000 fc6f 	bl	800432c <xTaskResumeAll>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f47f af7c 	bne.w	800394e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003a56:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <xQueueGenericSend+0x200>)
 8003a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	e772      	b.n	800394e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a6a:	f000 f9a1 	bl	8003db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a6e:	f000 fc5d 	bl	800432c <xTaskResumeAll>
 8003a72:	e76c      	b.n	800394e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a76:	f000 f99b 	bl	8003db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a7a:	f000 fc57 	bl	800432c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3738      	adds	r7, #56	@ 0x38
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08e      	sub	sp, #56	@ 0x38
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	623b      	str	r3, [r7, #32]
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	61fb      	str	r3, [r7, #28]
}
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ae0:	f000 ffbe 	bl	8004a60 <xTaskGetSchedulerState>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <xQueueSemaphoreTake+0x64>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <xQueueSemaphoreTake+0x68>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <xQueueSemaphoreTake+0x6a>
 8003af4:	2300      	movs	r3, #0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	61bb      	str	r3, [r7, #24]
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	e7fd      	b.n	8003b0e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b12:	f001 faf9 	bl	8005108 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d024      	beq.n	8003b6c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	1e5a      	subs	r2, r3, #1
 8003b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d104      	bne.n	8003b3c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b32:	f001 f941 	bl	8004db8 <pvTaskIncrementMutexHeldCount>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00f      	beq.n	8003b64 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b46:	3310      	adds	r3, #16
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fdc9 	bl	80046e0 <xTaskRemoveFromEventList>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b54:	4b54      	ldr	r3, [pc, #336]	@ (8003ca8 <xQueueSemaphoreTake+0x21c>)
 8003b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b64:	f001 fb02 	bl	800516c <vPortExitCritical>
				return pdPASS;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e098      	b.n	8003c9e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d112      	bne.n	8003b98 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00b      	beq.n	8003b90 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	617b      	str	r3, [r7, #20]
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003b90:	f001 faec 	bl	800516c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e082      	b.n	8003c9e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b9e:	f107 030c 	add.w	r3, r7, #12
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fe00 	bl	80047a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bac:	f001 fade 	bl	800516c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bb0:	f000 fbae 	bl	8004310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bb4:	f001 faa8 	bl	8005108 <vPortEnterCritical>
 8003bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d103      	bne.n	8003bce <xQueueSemaphoreTake+0x142>
 8003bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bd4:	b25b      	sxtb	r3, r3
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d103      	bne.n	8003be4 <xQueueSemaphoreTake+0x158>
 8003bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003be4:	f001 fac2 	bl	800516c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003be8:	463a      	mov	r2, r7
 8003bea:	f107 030c 	add.w	r3, r7, #12
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fdef 	bl	80047d4 <xTaskCheckForTimeOut>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d132      	bne.n	8003c62 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bfe:	f000 f929 	bl	8003e54 <prvIsQueueEmpty>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d026      	beq.n	8003c56 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003c10:	f001 fa7a 	bl	8005108 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 ff3f 	bl	8004a9c <xTaskPriorityInherit>
 8003c1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003c20:	f001 faa4 	bl	800516c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c26:	3324      	adds	r3, #36	@ 0x24
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fd31 	bl	8004694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c34:	f000 f8bc 	bl	8003db0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c38:	f000 fb78 	bl	800432c <xTaskResumeAll>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f47f af67 	bne.w	8003b12 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003c44:	4b18      	ldr	r3, [pc, #96]	@ (8003ca8 <xQueueSemaphoreTake+0x21c>)
 8003c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	e75d      	b.n	8003b12 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c58:	f000 f8aa 	bl	8003db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c5c:	f000 fb66 	bl	800432c <xTaskResumeAll>
 8003c60:	e757      	b.n	8003b12 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003c62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c64:	f000 f8a4 	bl	8003db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c68:	f000 fb60 	bl	800432c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c6e:	f000 f8f1 	bl	8003e54 <prvIsQueueEmpty>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f43f af4c 	beq.w	8003b12 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003c80:	f001 fa42 	bl	8005108 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003c84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c86:	f000 f811 	bl	8003cac <prvGetDisinheritPriorityAfterTimeout>
 8003c8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 f800 	bl	8004c98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003c98:	f001 fa68 	bl	800516c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3738      	adds	r7, #56	@ 0x38
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d006      	beq.n	8003cca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f1c3 0307 	rsb	r3, r3, #7
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e001      	b.n	8003cce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003cce:	68fb      	ldr	r3, [r7, #12]
	}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10d      	bne.n	8003d16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d14d      	bne.n	8003d9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 ff3e 	bl	8004b88 <xTaskPriorityDisinherit>
 8003d0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e043      	b.n	8003d9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d119      	bne.n	8003d50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6858      	ldr	r0, [r3, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	461a      	mov	r2, r3
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	f001 fe7b 	bl	8005a22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	441a      	add	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d32b      	bcc.n	8003d9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	e026      	b.n	8003d9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68d8      	ldr	r0, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	f001 fe61 	bl	8005a22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	425b      	negs	r3, r3
 8003d6a:	441a      	add	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d207      	bcs.n	8003d8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	425b      	negs	r3, r3
 8003d86:	441a      	add	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d105      	bne.n	8003d9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003da6:	697b      	ldr	r3, [r7, #20]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003db8:	f001 f9a6 	bl	8005108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dc4:	e011      	b.n	8003dea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d012      	beq.n	8003df4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3324      	adds	r3, #36	@ 0x24
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fc84 	bl	80046e0 <xTaskRemoveFromEventList>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003dde:	f000 fd5d 	bl	800489c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	dce9      	bgt.n	8003dc6 <prvUnlockQueue+0x16>
 8003df2:	e000      	b.n	8003df6 <prvUnlockQueue+0x46>
					break;
 8003df4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	22ff      	movs	r2, #255	@ 0xff
 8003dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003dfe:	f001 f9b5 	bl	800516c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e02:	f001 f981 	bl	8005108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e0e:	e011      	b.n	8003e34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d012      	beq.n	8003e3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3310      	adds	r3, #16
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fc5f 	bl	80046e0 <xTaskRemoveFromEventList>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e28:	f000 fd38 	bl	800489c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e2c:	7bbb      	ldrb	r3, [r7, #14]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	dce9      	bgt.n	8003e10 <prvUnlockQueue+0x60>
 8003e3c:	e000      	b.n	8003e40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	22ff      	movs	r2, #255	@ 0xff
 8003e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003e48:	f001 f990 	bl	800516c <vPortExitCritical>
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e5c:	f001 f954 	bl	8005108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e001      	b.n	8003e72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e72:	f001 f97b 	bl	800516c <vPortExitCritical>

	return xReturn;
 8003e76:	68fb      	ldr	r3, [r7, #12]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e88:	f001 f93e 	bl	8005108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d102      	bne.n	8003e9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	e001      	b.n	8003ea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ea2:	f001 f963 	bl	800516c <vPortExitCritical>

	return xReturn;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08e      	sub	sp, #56	@ 0x38
 8003eb4:	af04      	add	r7, sp, #16
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	623b      	str	r3, [r7, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10b      	bne.n	8003efa <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	61fb      	str	r3, [r7, #28]
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	e7fd      	b.n	8003ef6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003efa:	2354      	movs	r3, #84	@ 0x54
 8003efc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b54      	cmp	r3, #84	@ 0x54
 8003f02:	d00b      	beq.n	8003f1c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	61bb      	str	r3, [r7, #24]
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01e      	beq.n	8003f62 <xTaskCreateStatic+0xb2>
 8003f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01b      	beq.n	8003f62 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9303      	str	r3, [sp, #12]
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	9302      	str	r3, [sp, #8]
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f850 	bl	8003ffa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f5c:	f000 f8d6 	bl	800410c <prvAddNewTaskToReadyList>
 8003f60:	e001      	b.n	8003f66 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f66:	697b      	ldr	r3, [r7, #20]
	}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3728      	adds	r7, #40	@ 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08c      	sub	sp, #48	@ 0x30
 8003f74:	af04      	add	r7, sp, #16
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 f99f 	bl	80052c8 <pvPortMalloc>
 8003f8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00e      	beq.n	8003fb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f92:	2054      	movs	r0, #84	@ 0x54
 8003f94:	f001 f998 	bl	80052c8 <pvPortMalloc>
 8003f98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fa6:	e005      	b.n	8003fb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f001 fa5b 	bl	8005464 <vPortFree>
 8003fae:	e001      	b.n	8003fb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d017      	beq.n	8003fea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9303      	str	r3, [sp, #12]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	9302      	str	r3, [sp, #8]
 8003fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f80e 	bl	8003ffa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fde:	69f8      	ldr	r0, [r7, #28]
 8003fe0:	f000 f894 	bl	800410c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	61bb      	str	r3, [r7, #24]
 8003fe8:	e002      	b.n	8003ff0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ff0:	69bb      	ldr	r3, [r7, #24]
	}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3720      	adds	r7, #32
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b088      	sub	sp, #32
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004012:	3b01      	subs	r3, #1
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f023 0307 	bic.w	r3, r3, #7
 8004020:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	617b      	str	r3, [r7, #20]
}
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01f      	beq.n	800408a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	e012      	b.n	8004076 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	7819      	ldrb	r1, [r3, #0]
 8004058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	3334      	adds	r3, #52	@ 0x34
 8004060:	460a      	mov	r2, r1
 8004062:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	3301      	adds	r3, #1
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d9e9      	bls.n	8004050 <prvInitialiseNewTask+0x56>
 800407c:	e000      	b.n	8004080 <prvInitialiseNewTask+0x86>
			{
				break;
 800407e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004088:	e003      	b.n	8004092 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	2b06      	cmp	r3, #6
 8004096:	d901      	bls.n	800409c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004098:	2306      	movs	r3, #6
 800409a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040a6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	2200      	movs	r2, #0
 80040ac:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	3304      	adds	r3, #4
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fa5e 	bl	8003574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	3318      	adds	r3, #24
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fa59 	bl	8003574 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ca:	f1c3 0207 	rsb	r2, r3, #7
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040da:	2200      	movs	r2, #0
 80040dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	68f9      	ldr	r1, [r7, #12]
 80040ea:	69b8      	ldr	r0, [r7, #24]
 80040ec:	f000 fede 	bl	8004eac <pxPortInitialiseStack>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004100:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004102:	bf00      	nop
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004114:	f000 fff8 	bl	8005108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004118:	4b2a      	ldr	r3, [pc, #168]	@ (80041c4 <prvAddNewTaskToReadyList+0xb8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a29      	ldr	r2, [pc, #164]	@ (80041c4 <prvAddNewTaskToReadyList+0xb8>)
 8004120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004122:	4b29      	ldr	r3, [pc, #164]	@ (80041c8 <prvAddNewTaskToReadyList+0xbc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800412a:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <prvAddNewTaskToReadyList+0xbc>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004130:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <prvAddNewTaskToReadyList+0xb8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d110      	bne.n	800415a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004138:	f000 fbd4 	bl	80048e4 <prvInitialiseTaskLists>
 800413c:	e00d      	b.n	800415a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800413e:	4b23      	ldr	r3, [pc, #140]	@ (80041cc <prvAddNewTaskToReadyList+0xc0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004146:	4b20      	ldr	r3, [pc, #128]	@ (80041c8 <prvAddNewTaskToReadyList+0xbc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	429a      	cmp	r2, r3
 8004152:	d802      	bhi.n	800415a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004154:	4a1c      	ldr	r2, [pc, #112]	@ (80041c8 <prvAddNewTaskToReadyList+0xbc>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800415a:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <prvAddNewTaskToReadyList+0xc4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	4a1b      	ldr	r2, [pc, #108]	@ (80041d0 <prvAddNewTaskToReadyList+0xc4>)
 8004162:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	2201      	movs	r2, #1
 800416a:	409a      	lsls	r2, r3
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <prvAddNewTaskToReadyList+0xc8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4313      	orrs	r3, r2
 8004172:	4a18      	ldr	r2, [pc, #96]	@ (80041d4 <prvAddNewTaskToReadyList+0xc8>)
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <prvAddNewTaskToReadyList+0xcc>)
 8004184:	441a      	add	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f7ff f9fe 	bl	800358e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004192:	f000 ffeb 	bl	800516c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <prvAddNewTaskToReadyList+0xc0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800419e:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <prvAddNewTaskToReadyList+0xbc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d207      	bcs.n	80041bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041ac:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <prvAddNewTaskToReadyList+0xd0>)
 80041ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000474 	.word	0x20000474
 80041c8:	20000374 	.word	0x20000374
 80041cc:	20000480 	.word	0x20000480
 80041d0:	20000490 	.word	0x20000490
 80041d4:	2000047c 	.word	0x2000047c
 80041d8:	20000378 	.word	0x20000378
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041f2:	4b14      	ldr	r3, [pc, #80]	@ (8004244 <vTaskDelay+0x64>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <vTaskDelay+0x32>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004212:	f000 f87d 	bl	8004310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004216:	2100      	movs	r1, #0
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fde1 	bl	8004de0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800421e:	f000 f885 	bl	800432c <xTaskResumeAll>
 8004222:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d107      	bne.n	800423a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800422a:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <vTaskDelay+0x68>)
 800422c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	2000049c 	.word	0x2000049c
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	@ 0x28
 8004250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800425a:	463a      	mov	r2, r7
 800425c:	1d39      	adds	r1, r7, #4
 800425e:	f107 0308 	add.w	r3, r7, #8
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc f9a2 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004268:	6839      	ldr	r1, [r7, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	9202      	str	r2, [sp, #8]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	2300      	movs	r3, #0
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2300      	movs	r3, #0
 8004278:	460a      	mov	r2, r1
 800427a:	491f      	ldr	r1, [pc, #124]	@ (80042f8 <vTaskStartScheduler+0xac>)
 800427c:	481f      	ldr	r0, [pc, #124]	@ (80042fc <vTaskStartScheduler+0xb0>)
 800427e:	f7ff fe17 	bl	8003eb0 <xTaskCreateStatic>
 8004282:	4603      	mov	r3, r0
 8004284:	4a1e      	ldr	r2, [pc, #120]	@ (8004300 <vTaskStartScheduler+0xb4>)
 8004286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004288:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <vTaskStartScheduler+0xb4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004290:	2301      	movs	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e001      	b.n	800429a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d116      	bne.n	80042ce <vTaskStartScheduler+0x82>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	613b      	str	r3, [r7, #16]
}
 80042b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042b4:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <vTaskStartScheduler+0xb8>)
 80042b6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042bc:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <vTaskStartScheduler+0xbc>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042c2:	4b12      	ldr	r3, [pc, #72]	@ (800430c <vTaskStartScheduler+0xc0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042c8:	f000 fe7a 	bl	8004fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042cc:	e00f      	b.n	80042ee <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d10b      	bne.n	80042ee <vTaskStartScheduler+0xa2>
	__asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	60fb      	str	r3, [r7, #12]
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	e7fd      	b.n	80042ea <vTaskStartScheduler+0x9e>
}
 80042ee:	bf00      	nop
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	080066e8 	.word	0x080066e8
 80042fc:	080048b5 	.word	0x080048b5
 8004300:	20000498 	.word	0x20000498
 8004304:	20000494 	.word	0x20000494
 8004308:	20000480 	.word	0x20000480
 800430c:	20000478 	.word	0x20000478

08004310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004314:	4b04      	ldr	r3, [pc, #16]	@ (8004328 <vTaskSuspendAll+0x18>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	4a03      	ldr	r2, [pc, #12]	@ (8004328 <vTaskSuspendAll+0x18>)
 800431c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	2000049c 	.word	0x2000049c

0800432c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800433a:	4b42      	ldr	r3, [pc, #264]	@ (8004444 <xTaskResumeAll+0x118>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10b      	bne.n	800435a <xTaskResumeAll+0x2e>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	603b      	str	r3, [r7, #0]
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800435a:	f000 fed5 	bl	8005108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800435e:	4b39      	ldr	r3, [pc, #228]	@ (8004444 <xTaskResumeAll+0x118>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3b01      	subs	r3, #1
 8004364:	4a37      	ldr	r2, [pc, #220]	@ (8004444 <xTaskResumeAll+0x118>)
 8004366:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004368:	4b36      	ldr	r3, [pc, #216]	@ (8004444 <xTaskResumeAll+0x118>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d161      	bne.n	8004434 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004370:	4b35      	ldr	r3, [pc, #212]	@ (8004448 <xTaskResumeAll+0x11c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05d      	beq.n	8004434 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004378:	e02e      	b.n	80043d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800437a:	4b34      	ldr	r3, [pc, #208]	@ (800444c <xTaskResumeAll+0x120>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3318      	adds	r3, #24
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff f95e 	bl	8003648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3304      	adds	r3, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff f959 	bl	8003648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	2201      	movs	r2, #1
 800439c:	409a      	lsls	r2, r3
 800439e:	4b2c      	ldr	r3, [pc, #176]	@ (8004450 <xTaskResumeAll+0x124>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004450 <xTaskResumeAll+0x124>)
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4a27      	ldr	r2, [pc, #156]	@ (8004454 <xTaskResumeAll+0x128>)
 80043b6:	441a      	add	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f7ff f8e5 	bl	800358e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c8:	4b23      	ldr	r3, [pc, #140]	@ (8004458 <xTaskResumeAll+0x12c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80043d2:	4b22      	ldr	r3, [pc, #136]	@ (800445c <xTaskResumeAll+0x130>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043d8:	4b1c      	ldr	r3, [pc, #112]	@ (800444c <xTaskResumeAll+0x120>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1cc      	bne.n	800437a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043e6:	f000 fb1b 	bl	8004a20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004460 <xTaskResumeAll+0x134>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d010      	beq.n	8004418 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043f6:	f000 f837 	bl	8004468 <xTaskIncrementTick>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004400:	4b16      	ldr	r3, [pc, #88]	@ (800445c <xTaskResumeAll+0x130>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3b01      	subs	r3, #1
 800440a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f1      	bne.n	80043f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004412:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <xTaskResumeAll+0x134>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004418:	4b10      	ldr	r3, [pc, #64]	@ (800445c <xTaskResumeAll+0x130>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004424:	4b0f      	ldr	r3, [pc, #60]	@ (8004464 <xTaskResumeAll+0x138>)
 8004426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004434:	f000 fe9a 	bl	800516c <vPortExitCritical>

	return xAlreadyYielded;
 8004438:	68bb      	ldr	r3, [r7, #8]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	2000049c 	.word	0x2000049c
 8004448:	20000474 	.word	0x20000474
 800444c:	20000434 	.word	0x20000434
 8004450:	2000047c 	.word	0x2000047c
 8004454:	20000378 	.word	0x20000378
 8004458:	20000374 	.word	0x20000374
 800445c:	20000488 	.word	0x20000488
 8004460:	20000484 	.word	0x20000484
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004472:	4b4f      	ldr	r3, [pc, #316]	@ (80045b0 <xTaskIncrementTick+0x148>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 808f 	bne.w	800459a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800447c:	4b4d      	ldr	r3, [pc, #308]	@ (80045b4 <xTaskIncrementTick+0x14c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004484:	4a4b      	ldr	r2, [pc, #300]	@ (80045b4 <xTaskIncrementTick+0x14c>)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d121      	bne.n	80044d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004490:	4b49      	ldr	r3, [pc, #292]	@ (80045b8 <xTaskIncrementTick+0x150>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	603b      	str	r3, [r7, #0]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <xTaskIncrementTick+0x46>
 80044b2:	4b41      	ldr	r3, [pc, #260]	@ (80045b8 <xTaskIncrementTick+0x150>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	4b40      	ldr	r3, [pc, #256]	@ (80045bc <xTaskIncrementTick+0x154>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a3e      	ldr	r2, [pc, #248]	@ (80045b8 <xTaskIncrementTick+0x150>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4a3e      	ldr	r2, [pc, #248]	@ (80045bc <xTaskIncrementTick+0x154>)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b3e      	ldr	r3, [pc, #248]	@ (80045c0 <xTaskIncrementTick+0x158>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	4a3c      	ldr	r2, [pc, #240]	@ (80045c0 <xTaskIncrementTick+0x158>)
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	f000 faa6 	bl	8004a20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044d4:	4b3b      	ldr	r3, [pc, #236]	@ (80045c4 <xTaskIncrementTick+0x15c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d348      	bcc.n	8004570 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044de:	4b36      	ldr	r3, [pc, #216]	@ (80045b8 <xTaskIncrementTick+0x150>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e8:	4b36      	ldr	r3, [pc, #216]	@ (80045c4 <xTaskIncrementTick+0x15c>)
 80044ea:	f04f 32ff 	mov.w	r2, #4294967295
 80044ee:	601a      	str	r2, [r3, #0]
					break;
 80044f0:	e03e      	b.n	8004570 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f2:	4b31      	ldr	r3, [pc, #196]	@ (80045b8 <xTaskIncrementTick+0x150>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d203      	bcs.n	8004512 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800450a:	4a2e      	ldr	r2, [pc, #184]	@ (80045c4 <xTaskIncrementTick+0x15c>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004510:	e02e      	b.n	8004570 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3304      	adds	r3, #4
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f896 	bl	8003648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3318      	adds	r3, #24
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff f88d 	bl	8003648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	2201      	movs	r2, #1
 8004534:	409a      	lsls	r2, r3
 8004536:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <xTaskIncrementTick+0x160>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	4a22      	ldr	r2, [pc, #136]	@ (80045c8 <xTaskIncrementTick+0x160>)
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4a1f      	ldr	r2, [pc, #124]	@ (80045cc <xTaskIncrementTick+0x164>)
 800454e:	441a      	add	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f7ff f819 	bl	800358e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004560:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <xTaskIncrementTick+0x168>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004566:	429a      	cmp	r2, r3
 8004568:	d3b9      	bcc.n	80044de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800456a:	2301      	movs	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800456e:	e7b6      	b.n	80044de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004570:	4b17      	ldr	r3, [pc, #92]	@ (80045d0 <xTaskIncrementTick+0x168>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004576:	4915      	ldr	r1, [pc, #84]	@ (80045cc <xTaskIncrementTick+0x164>)
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d901      	bls.n	800458c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800458c:	4b11      	ldr	r3, [pc, #68]	@ (80045d4 <xTaskIncrementTick+0x16c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e004      	b.n	80045a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800459a:	4b0f      	ldr	r3, [pc, #60]	@ (80045d8 <xTaskIncrementTick+0x170>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3301      	adds	r3, #1
 80045a0:	4a0d      	ldr	r2, [pc, #52]	@ (80045d8 <xTaskIncrementTick+0x170>)
 80045a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045a4:	697b      	ldr	r3, [r7, #20]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000049c 	.word	0x2000049c
 80045b4:	20000478 	.word	0x20000478
 80045b8:	2000042c 	.word	0x2000042c
 80045bc:	20000430 	.word	0x20000430
 80045c0:	2000048c 	.word	0x2000048c
 80045c4:	20000494 	.word	0x20000494
 80045c8:	2000047c 	.word	0x2000047c
 80045cc:	20000378 	.word	0x20000378
 80045d0:	20000374 	.word	0x20000374
 80045d4:	20000488 	.word	0x20000488
 80045d8:	20000484 	.word	0x20000484

080045dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045e2:	4b27      	ldr	r3, [pc, #156]	@ (8004680 <vTaskSwitchContext+0xa4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ea:	4b26      	ldr	r3, [pc, #152]	@ (8004684 <vTaskSwitchContext+0xa8>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045f0:	e040      	b.n	8004674 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80045f2:	4b24      	ldr	r3, [pc, #144]	@ (8004684 <vTaskSwitchContext+0xa8>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f8:	4b23      	ldr	r3, [pc, #140]	@ (8004688 <vTaskSwitchContext+0xac>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	fab3 f383 	clz	r3, r3
 8004604:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004606:	7afb      	ldrb	r3, [r7, #11]
 8004608:	f1c3 031f 	rsb	r3, r3, #31
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	491f      	ldr	r1, [pc, #124]	@ (800468c <vTaskSwitchContext+0xb0>)
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10b      	bne.n	800463a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	607b      	str	r3, [r7, #4]
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	e7fd      	b.n	8004636 <vTaskSwitchContext+0x5a>
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4a11      	ldr	r2, [pc, #68]	@ (800468c <vTaskSwitchContext+0xb0>)
 8004646:	4413      	add	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	3308      	adds	r3, #8
 800465c:	429a      	cmp	r2, r3
 800465e:	d104      	bne.n	800466a <vTaskSwitchContext+0x8e>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4a07      	ldr	r2, [pc, #28]	@ (8004690 <vTaskSwitchContext+0xb4>)
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	2000049c 	.word	0x2000049c
 8004684:	20000488 	.word	0x20000488
 8004688:	2000047c 	.word	0x2000047c
 800468c:	20000378 	.word	0x20000378
 8004690:	20000374 	.word	0x20000374

08004694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	60fb      	str	r3, [r7, #12]
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046bc:	4b07      	ldr	r3, [pc, #28]	@ (80046dc <vTaskPlaceOnEventList+0x48>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3318      	adds	r3, #24
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fe ff86 	bl	80035d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046ca:	2101      	movs	r1, #1
 80046cc:	6838      	ldr	r0, [r7, #0]
 80046ce:	f000 fb87 	bl	8004de0 <prvAddCurrentTaskToDelayedList>
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000374 	.word	0x20000374

080046e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60fb      	str	r3, [r7, #12]
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	e7fd      	b.n	800470a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3318      	adds	r3, #24
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe ff98 	bl	8003648 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004718:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <xTaskRemoveFromEventList+0xb0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d11c      	bne.n	800475a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	3304      	adds	r3, #4
 8004724:	4618      	mov	r0, r3
 8004726:	f7fe ff8f 	bl	8003648 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	2201      	movs	r2, #1
 8004730:	409a      	lsls	r2, r3
 8004732:	4b18      	ldr	r3, [pc, #96]	@ (8004794 <xTaskRemoveFromEventList+0xb4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4313      	orrs	r3, r2
 8004738:	4a16      	ldr	r2, [pc, #88]	@ (8004794 <xTaskRemoveFromEventList+0xb4>)
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4a13      	ldr	r2, [pc, #76]	@ (8004798 <xTaskRemoveFromEventList+0xb8>)
 800474a:	441a      	add	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	3304      	adds	r3, #4
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f7fe ff1b 	bl	800358e <vListInsertEnd>
 8004758:	e005      	b.n	8004766 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	3318      	adds	r3, #24
 800475e:	4619      	mov	r1, r3
 8004760:	480e      	ldr	r0, [pc, #56]	@ (800479c <xTaskRemoveFromEventList+0xbc>)
 8004762:	f7fe ff14 	bl	800358e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476a:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <xTaskRemoveFromEventList+0xc0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	429a      	cmp	r2, r3
 8004772:	d905      	bls.n	8004780 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004778:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <xTaskRemoveFromEventList+0xc4>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e001      	b.n	8004784 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004784:	697b      	ldr	r3, [r7, #20]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	2000049c 	.word	0x2000049c
 8004794:	2000047c 	.word	0x2000047c
 8004798:	20000378 	.word	0x20000378
 800479c:	20000434 	.word	0x20000434
 80047a0:	20000374 	.word	0x20000374
 80047a4:	20000488 	.word	0x20000488

080047a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047b0:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <vTaskInternalSetTimeOutState+0x24>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047b8:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <vTaskInternalSetTimeOutState+0x28>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	605a      	str	r2, [r3, #4]
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	2000048c 	.word	0x2000048c
 80047d0:	20000478 	.word	0x20000478

080047d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	613b      	str	r3, [r7, #16]
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60fb      	str	r3, [r7, #12]
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	e7fd      	b.n	8004816 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800481a:	f000 fc75 	bl	8005108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800481e:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <xTaskCheckForTimeOut+0xc0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004836:	d102      	bne.n	800483e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e023      	b.n	8004886 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <xTaskCheckForTimeOut+0xc4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d007      	beq.n	800485a <xTaskCheckForTimeOut+0x86>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	429a      	cmp	r2, r3
 8004852:	d302      	bcc.n	800485a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004854:	2301      	movs	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	e015      	b.n	8004886 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d20b      	bcs.n	800487c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff ff99 	bl	80047a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	e004      	b.n	8004886 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004882:	2301      	movs	r3, #1
 8004884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004886:	f000 fc71 	bl	800516c <vPortExitCritical>

	return xReturn;
 800488a:	69fb      	ldr	r3, [r7, #28]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000478 	.word	0x20000478
 8004898:	2000048c 	.word	0x2000048c

0800489c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048a0:	4b03      	ldr	r3, [pc, #12]	@ (80048b0 <vTaskMissedYield+0x14>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
}
 80048a6:	bf00      	nop
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	20000488 	.word	0x20000488

080048b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048bc:	f000 f852 	bl	8004964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <prvIdleTask+0x28>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d9f9      	bls.n	80048bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <prvIdleTask+0x2c>)
 80048ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048d8:	e7f0      	b.n	80048bc <prvIdleTask+0x8>
 80048da:	bf00      	nop
 80048dc:	20000378 	.word	0x20000378
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048ea:	2300      	movs	r3, #0
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	e00c      	b.n	800490a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4a12      	ldr	r2, [pc, #72]	@ (8004944 <prvInitialiseTaskLists+0x60>)
 80048fc:	4413      	add	r3, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fe18 	bl	8003534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3301      	adds	r3, #1
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b06      	cmp	r3, #6
 800490e:	d9ef      	bls.n	80048f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004910:	480d      	ldr	r0, [pc, #52]	@ (8004948 <prvInitialiseTaskLists+0x64>)
 8004912:	f7fe fe0f 	bl	8003534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004916:	480d      	ldr	r0, [pc, #52]	@ (800494c <prvInitialiseTaskLists+0x68>)
 8004918:	f7fe fe0c 	bl	8003534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800491c:	480c      	ldr	r0, [pc, #48]	@ (8004950 <prvInitialiseTaskLists+0x6c>)
 800491e:	f7fe fe09 	bl	8003534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004922:	480c      	ldr	r0, [pc, #48]	@ (8004954 <prvInitialiseTaskLists+0x70>)
 8004924:	f7fe fe06 	bl	8003534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004928:	480b      	ldr	r0, [pc, #44]	@ (8004958 <prvInitialiseTaskLists+0x74>)
 800492a:	f7fe fe03 	bl	8003534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <prvInitialiseTaskLists+0x78>)
 8004930:	4a05      	ldr	r2, [pc, #20]	@ (8004948 <prvInitialiseTaskLists+0x64>)
 8004932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004934:	4b0a      	ldr	r3, [pc, #40]	@ (8004960 <prvInitialiseTaskLists+0x7c>)
 8004936:	4a05      	ldr	r2, [pc, #20]	@ (800494c <prvInitialiseTaskLists+0x68>)
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000378 	.word	0x20000378
 8004948:	20000404 	.word	0x20000404
 800494c:	20000418 	.word	0x20000418
 8004950:	20000434 	.word	0x20000434
 8004954:	20000448 	.word	0x20000448
 8004958:	20000460 	.word	0x20000460
 800495c:	2000042c 	.word	0x2000042c
 8004960:	20000430 	.word	0x20000430

08004964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800496a:	e019      	b.n	80049a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800496c:	f000 fbcc 	bl	8005108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004970:	4b10      	ldr	r3, [pc, #64]	@ (80049b4 <prvCheckTasksWaitingTermination+0x50>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe fe63 	bl	8003648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004982:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <prvCheckTasksWaitingTermination+0x54>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3b01      	subs	r3, #1
 8004988:	4a0b      	ldr	r2, [pc, #44]	@ (80049b8 <prvCheckTasksWaitingTermination+0x54>)
 800498a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800498c:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <prvCheckTasksWaitingTermination+0x58>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3b01      	subs	r3, #1
 8004992:	4a0a      	ldr	r2, [pc, #40]	@ (80049bc <prvCheckTasksWaitingTermination+0x58>)
 8004994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004996:	f000 fbe9 	bl	800516c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f810 	bl	80049c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <prvCheckTasksWaitingTermination+0x58>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e1      	bne.n	800496c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000448 	.word	0x20000448
 80049b8:	20000474 	.word	0x20000474
 80049bc:	2000045c 	.word	0x2000045c

080049c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d108      	bne.n	80049e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fd44 	bl	8005464 <vPortFree>
				vPortFree( pxTCB );
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fd41 	bl	8005464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049e2:	e019      	b.n	8004a18 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d103      	bne.n	80049f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fd38 	bl	8005464 <vPortFree>
	}
 80049f4:	e010      	b.n	8004a18 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d00b      	beq.n	8004a18 <prvDeleteTCB+0x58>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <prvDeleteTCB+0x54>
	}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a26:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <prvResetNextTaskUnblockTime+0x38>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a30:	4b0a      	ldr	r3, [pc, #40]	@ (8004a5c <prvResetNextTaskUnblockTime+0x3c>)
 8004a32:	f04f 32ff 	mov.w	r2, #4294967295
 8004a36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a38:	e008      	b.n	8004a4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a3a:	4b07      	ldr	r3, [pc, #28]	@ (8004a58 <prvResetNextTaskUnblockTime+0x38>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4a04      	ldr	r2, [pc, #16]	@ (8004a5c <prvResetNextTaskUnblockTime+0x3c>)
 8004a4a:	6013      	str	r3, [r2, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	2000042c 	.word	0x2000042c
 8004a5c:	20000494 	.word	0x20000494

08004a60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a66:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <xTaskGetSchedulerState+0x34>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	e008      	b.n	8004a86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a74:	4b08      	ldr	r3, [pc, #32]	@ (8004a98 <xTaskGetSchedulerState+0x38>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	607b      	str	r3, [r7, #4]
 8004a80:	e001      	b.n	8004a86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a82:	2300      	movs	r3, #0
 8004a84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a86:	687b      	ldr	r3, [r7, #4]
	}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	20000480 	.word	0x20000480
 8004a98:	2000049c 	.word	0x2000049c

08004a9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d05e      	beq.n	8004b70 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab6:	4b31      	ldr	r3, [pc, #196]	@ (8004b7c <xTaskPriorityInherit+0xe0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d24e      	bcs.n	8004b5e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	db06      	blt.n	8004ad6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8004b7c <xTaskPriorityInherit+0xe0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ace:	f1c3 0207 	rsb	r2, r3, #7
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6959      	ldr	r1, [r3, #20]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4a26      	ldr	r2, [pc, #152]	@ (8004b80 <xTaskPriorityInherit+0xe4>)
 8004ae8:	4413      	add	r3, r2
 8004aea:	4299      	cmp	r1, r3
 8004aec:	d12f      	bne.n	8004b4e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fda8 	bl	8003648 <uxListRemove>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	2201      	movs	r2, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b84 <xTaskPriorityInherit+0xe8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <xTaskPriorityInherit+0xe8>)
 8004b12:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b14:	4b19      	ldr	r3, [pc, #100]	@ (8004b7c <xTaskPriorityInherit+0xe0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b22:	2201      	movs	r2, #1
 8004b24:	409a      	lsls	r2, r3
 8004b26:	4b17      	ldr	r3, [pc, #92]	@ (8004b84 <xTaskPriorityInherit+0xe8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	4a15      	ldr	r2, [pc, #84]	@ (8004b84 <xTaskPriorityInherit+0xe8>)
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4a10      	ldr	r2, [pc, #64]	@ (8004b80 <xTaskPriorityInherit+0xe4>)
 8004b3e:	441a      	add	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7fe fd21 	bl	800358e <vListInsertEnd>
 8004b4c:	e004      	b.n	8004b58 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <xTaskPriorityInherit+0xe0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e008      	b.n	8004b70 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b62:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <xTaskPriorityInherit+0xe0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d201      	bcs.n	8004b70 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b70:	68fb      	ldr	r3, [r7, #12]
	}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000374 	.word	0x20000374
 8004b80:	20000378 	.word	0x20000378
 8004b84:	2000047c 	.word	0x2000047c

08004b88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d070      	beq.n	8004c80 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c8c <xTaskPriorityDisinherit+0x104>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d00b      	beq.n	8004bc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	bf00      	nop
 8004bbe:	e7fd      	b.n	8004bbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60bb      	str	r3, [r7, #8]
}
 8004bda:	bf00      	nop
 8004bdc:	bf00      	nop
 8004bde:	e7fd      	b.n	8004bdc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004be4:	1e5a      	subs	r2, r3, #1
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d044      	beq.n	8004c80 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d140      	bne.n	8004c80 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fd20 	bl	8003648 <uxListRemove>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d115      	bne.n	8004c3a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c12:	491f      	ldr	r1, [pc, #124]	@ (8004c90 <xTaskPriorityDisinherit+0x108>)
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <xTaskPriorityDisinherit+0xb2>
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	2201      	movs	r2, #1
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	4b18      	ldr	r3, [pc, #96]	@ (8004c94 <xTaskPriorityDisinherit+0x10c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4013      	ands	r3, r2
 8004c36:	4a17      	ldr	r2, [pc, #92]	@ (8004c94 <xTaskPriorityDisinherit+0x10c>)
 8004c38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	f1c3 0207 	rsb	r2, r3, #7
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	2201      	movs	r2, #1
 8004c54:	409a      	lsls	r2, r3
 8004c56:	4b0f      	ldr	r3, [pc, #60]	@ (8004c94 <xTaskPriorityDisinherit+0x10c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c94 <xTaskPriorityDisinherit+0x10c>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4a08      	ldr	r2, [pc, #32]	@ (8004c90 <xTaskPriorityDisinherit+0x108>)
 8004c6e:	441a      	add	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fe fc89 	bl	800358e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c80:	697b      	ldr	r3, [r7, #20]
	}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000374 	.word	0x20000374
 8004c90:	20000378 	.word	0x20000378
 8004c94:	2000047c 	.word	0x2000047c

08004c98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d079      	beq.n	8004da4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60fb      	str	r3, [r7, #12]
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d902      	bls.n	8004ce0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e002      	b.n	8004ce6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d059      	beq.n	8004da4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d154      	bne.n	8004da4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004dac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d10b      	bne.n	8004d1c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	60bb      	str	r3, [r7, #8]
}
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	db04      	blt.n	8004d3a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f1c3 0207 	rsb	r2, r3, #7
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	6959      	ldr	r1, [r3, #20]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004d4a:	4413      	add	r3, r2
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	d129      	bne.n	8004da4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe fc77 	bl	8003648 <uxListRemove>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	2201      	movs	r2, #1
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43da      	mvns	r2, r3
 8004d6c:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4013      	ands	r3, r2
 8004d72:	4a10      	ldr	r2, [pc, #64]	@ (8004db4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004d74:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	4a0b      	ldr	r2, [pc, #44]	@ (8004db4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4a06      	ldr	r2, [pc, #24]	@ (8004db0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004d96:	441a      	add	r2, r3
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f7fe fbf5 	bl	800358e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004da4:	bf00      	nop
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000374 	.word	0x20000374
 8004db0:	20000378 	.word	0x20000378
 8004db4:	2000047c 	.word	0x2000047c

08004db8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004dbc:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <pvTaskIncrementMutexHeldCount+0x24>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004dc4:	4b05      	ldr	r3, [pc, #20]	@ (8004ddc <pvTaskIncrementMutexHeldCount+0x24>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dca:	3201      	adds	r2, #1
 8004dcc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004dce:	4b03      	ldr	r3, [pc, #12]	@ (8004ddc <pvTaskIncrementMutexHeldCount+0x24>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
	}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	20000374 	.word	0x20000374

08004de0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dea:	4b29      	ldr	r3, [pc, #164]	@ (8004e90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004df0:	4b28      	ldr	r3, [pc, #160]	@ (8004e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fc26 	bl	8003648 <uxListRemove>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10b      	bne.n	8004e1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e02:	4b24      	ldr	r3, [pc, #144]	@ (8004e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	2201      	movs	r2, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43da      	mvns	r2, r3
 8004e10:	4b21      	ldr	r3, [pc, #132]	@ (8004e98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4013      	ands	r3, r2
 8004e16:	4a20      	ldr	r2, [pc, #128]	@ (8004e98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e20:	d10a      	bne.n	8004e38 <prvAddCurrentTaskToDelayedList+0x58>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e28:	4b1a      	ldr	r3, [pc, #104]	@ (8004e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	481a      	ldr	r0, [pc, #104]	@ (8004e9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e32:	f7fe fbac 	bl	800358e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e36:	e026      	b.n	8004e86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e40:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d209      	bcs.n	8004e64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e50:	4b13      	ldr	r3, [pc, #76]	@ (8004ea0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b0f      	ldr	r3, [pc, #60]	@ (8004e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f7fe fbba 	bl	80035d6 <vListInsert>
}
 8004e62:	e010      	b.n	8004e86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b0a      	ldr	r3, [pc, #40]	@ (8004e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f7fe fbb0 	bl	80035d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d202      	bcs.n	8004e86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e80:	4a09      	ldr	r2, [pc, #36]	@ (8004ea8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6013      	str	r3, [r2, #0]
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000478 	.word	0x20000478
 8004e94:	20000374 	.word	0x20000374
 8004e98:	2000047c 	.word	0x2000047c
 8004e9c:	20000460 	.word	0x20000460
 8004ea0:	20000430 	.word	0x20000430
 8004ea4:	2000042c 	.word	0x2000042c
 8004ea8:	20000494 	.word	0x20000494

08004eac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3b04      	subs	r3, #4
 8004ebc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f023 0201 	bic.w	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3b04      	subs	r3, #4
 8004eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004edc:	4a0c      	ldr	r2, [pc, #48]	@ (8004f10 <pxPortInitialiseStack+0x64>)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3b14      	subs	r3, #20
 8004ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f06f 0202 	mvn.w	r2, #2
 8004efa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3b20      	subs	r3, #32
 8004f00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	08004f15 	.word	0x08004f15

08004f14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f1e:	4b13      	ldr	r3, [pc, #76]	@ (8004f6c <prvTaskExitError+0x58>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d00b      	beq.n	8004f40 <prvTaskExitError+0x2c>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	60fb      	str	r3, [r7, #12]
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <prvTaskExitError+0x28>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60bb      	str	r3, [r7, #8]
}
 8004f52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f54:	bf00      	nop
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0fc      	beq.n	8004f56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	2000000c 	.word	0x2000000c

08004f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f70:	4b07      	ldr	r3, [pc, #28]	@ (8004f90 <pxCurrentTCBConst2>)
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	6808      	ldr	r0, [r1, #0]
 8004f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	f380 8809 	msr	PSP, r0
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8811 	msr	BASEPRI, r0
 8004f8a:	4770      	bx	lr
 8004f8c:	f3af 8000 	nop.w

08004f90 <pxCurrentTCBConst2>:
 8004f90:	20000374 	.word	0x20000374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f98:	4808      	ldr	r0, [pc, #32]	@ (8004fbc <prvPortStartFirstTask+0x24>)
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	6800      	ldr	r0, [r0, #0]
 8004f9e:	f380 8808 	msr	MSP, r0
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8814 	msr	CONTROL, r0
 8004faa:	b662      	cpsie	i
 8004fac:	b661      	cpsie	f
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	df00      	svc	0
 8004fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fba:	bf00      	nop
 8004fbc:	e000ed08 	.word	0xe000ed08

08004fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fc6:	4b47      	ldr	r3, [pc, #284]	@ (80050e4 <xPortStartScheduler+0x124>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a47      	ldr	r2, [pc, #284]	@ (80050e8 <xPortStartScheduler+0x128>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d10b      	bne.n	8004fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80050e4 <xPortStartScheduler+0x124>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a3f      	ldr	r2, [pc, #252]	@ (80050ec <xPortStartScheduler+0x12c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10b      	bne.n	800500a <xPortStartScheduler+0x4a>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	613b      	str	r3, [r7, #16]
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	e7fd      	b.n	8005006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800500a:	4b39      	ldr	r3, [pc, #228]	@ (80050f0 <xPortStartScheduler+0x130>)
 800500c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	22ff      	movs	r2, #255	@ 0xff
 800501a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4b31      	ldr	r3, [pc, #196]	@ (80050f4 <xPortStartScheduler+0x134>)
 8005030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005032:	4b31      	ldr	r3, [pc, #196]	@ (80050f8 <xPortStartScheduler+0x138>)
 8005034:	2207      	movs	r2, #7
 8005036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005038:	e009      	b.n	800504e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800503a:	4b2f      	ldr	r3, [pc, #188]	@ (80050f8 <xPortStartScheduler+0x138>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3b01      	subs	r3, #1
 8005040:	4a2d      	ldr	r2, [pc, #180]	@ (80050f8 <xPortStartScheduler+0x138>)
 8005042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	b2db      	uxtb	r3, r3
 800504c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005056:	2b80      	cmp	r3, #128	@ 0x80
 8005058:	d0ef      	beq.n	800503a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800505a:	4b27      	ldr	r3, [pc, #156]	@ (80050f8 <xPortStartScheduler+0x138>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1c3 0307 	rsb	r3, r3, #7
 8005062:	2b04      	cmp	r3, #4
 8005064:	d00b      	beq.n	800507e <xPortStartScheduler+0xbe>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60bb      	str	r3, [r7, #8]
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	e7fd      	b.n	800507a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800507e:	4b1e      	ldr	r3, [pc, #120]	@ (80050f8 <xPortStartScheduler+0x138>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	4a1c      	ldr	r2, [pc, #112]	@ (80050f8 <xPortStartScheduler+0x138>)
 8005086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005088:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <xPortStartScheduler+0x138>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005090:	4a19      	ldr	r2, [pc, #100]	@ (80050f8 <xPortStartScheduler+0x138>)
 8005092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800509c:	4b17      	ldr	r3, [pc, #92]	@ (80050fc <xPortStartScheduler+0x13c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a16      	ldr	r2, [pc, #88]	@ (80050fc <xPortStartScheduler+0x13c>)
 80050a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050a8:	4b14      	ldr	r3, [pc, #80]	@ (80050fc <xPortStartScheduler+0x13c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a13      	ldr	r2, [pc, #76]	@ (80050fc <xPortStartScheduler+0x13c>)
 80050ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050b4:	f000 f8da 	bl	800526c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050b8:	4b11      	ldr	r3, [pc, #68]	@ (8005100 <xPortStartScheduler+0x140>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050be:	f000 f8f9 	bl	80052b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050c2:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <xPortStartScheduler+0x144>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005104 <xPortStartScheduler+0x144>)
 80050c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80050cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050ce:	f7ff ff63 	bl	8004f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050d2:	f7ff fa83 	bl	80045dc <vTaskSwitchContext>
	prvTaskExitError();
 80050d6:	f7ff ff1d 	bl	8004f14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	e000ed00 	.word	0xe000ed00
 80050e8:	410fc271 	.word	0x410fc271
 80050ec:	410fc270 	.word	0x410fc270
 80050f0:	e000e400 	.word	0xe000e400
 80050f4:	200004a0 	.word	0x200004a0
 80050f8:	200004a4 	.word	0x200004a4
 80050fc:	e000ed20 	.word	0xe000ed20
 8005100:	2000000c 	.word	0x2000000c
 8005104:	e000ef34 	.word	0xe000ef34

08005108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	607b      	str	r3, [r7, #4]
}
 8005120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005122:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <vPortEnterCritical+0x5c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	4a0e      	ldr	r2, [pc, #56]	@ (8005164 <vPortEnterCritical+0x5c>)
 800512a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800512c:	4b0d      	ldr	r3, [pc, #52]	@ (8005164 <vPortEnterCritical+0x5c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d110      	bne.n	8005156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <vPortEnterCritical+0x60>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <vPortEnterCritical+0x4e>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	603b      	str	r3, [r7, #0]
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <vPortEnterCritical+0x4a>
	}
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	2000000c 	.word	0x2000000c
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005172:	4b12      	ldr	r3, [pc, #72]	@ (80051bc <vPortExitCritical+0x50>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <vPortExitCritical+0x26>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	607b      	str	r3, [r7, #4]
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	e7fd      	b.n	800518e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005192:	4b0a      	ldr	r3, [pc, #40]	@ (80051bc <vPortExitCritical+0x50>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3b01      	subs	r3, #1
 8005198:	4a08      	ldr	r2, [pc, #32]	@ (80051bc <vPortExitCritical+0x50>)
 800519a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800519c:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <vPortExitCritical+0x50>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <vPortExitCritical+0x44>
 80051a4:	2300      	movs	r3, #0
 80051a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	2000000c 	.word	0x2000000c

080051c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051c0:	f3ef 8009 	mrs	r0, PSP
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4b15      	ldr	r3, [pc, #84]	@ (8005220 <pxCurrentTCBConst>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f01e 0f10 	tst.w	lr, #16
 80051d0:	bf08      	it	eq
 80051d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051da:	6010      	str	r0, [r2, #0]
 80051dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051e4:	f380 8811 	msr	BASEPRI, r0
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f7ff f9f4 	bl	80045dc <vTaskSwitchContext>
 80051f4:	f04f 0000 	mov.w	r0, #0
 80051f8:	f380 8811 	msr	BASEPRI, r0
 80051fc:	bc09      	pop	{r0, r3}
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	6808      	ldr	r0, [r1, #0]
 8005202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005206:	f01e 0f10 	tst.w	lr, #16
 800520a:	bf08      	it	eq
 800520c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005210:	f380 8809 	msr	PSP, r0
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst>:
 8005220:	20000374 	.word	0x20000374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
}
 8005240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005242:	f7ff f911 	bl	8004468 <xTaskIncrementTick>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800524c:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <xPortSysTickHandler+0x40>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f383 8811 	msr	BASEPRI, r3
}
 800525e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005270:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <vPortSetupTimerInterrupt+0x34>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005276:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <vPortSetupTimerInterrupt+0x38>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800527c:	4b0a      	ldr	r3, [pc, #40]	@ (80052a8 <vPortSetupTimerInterrupt+0x3c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0a      	ldr	r2, [pc, #40]	@ (80052ac <vPortSetupTimerInterrupt+0x40>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	099b      	lsrs	r3, r3, #6
 8005288:	4a09      	ldr	r2, [pc, #36]	@ (80052b0 <vPortSetupTimerInterrupt+0x44>)
 800528a:	3b01      	subs	r3, #1
 800528c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800528e:	4b04      	ldr	r3, [pc, #16]	@ (80052a0 <vPortSetupTimerInterrupt+0x34>)
 8005290:	2207      	movs	r2, #7
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	e000e010 	.word	0xe000e010
 80052a4:	e000e018 	.word	0xe000e018
 80052a8:	20000000 	.word	0x20000000
 80052ac:	10624dd3 	.word	0x10624dd3
 80052b0:	e000e014 	.word	0xe000e014

080052b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80052c4 <vPortEnableVFP+0x10>
 80052b8:	6801      	ldr	r1, [r0, #0]
 80052ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80052be:	6001      	str	r1, [r0, #0]
 80052c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052c2:	bf00      	nop
 80052c4:	e000ed88 	.word	0xe000ed88

080052c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	@ 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052d4:	f7ff f81c 	bl	8004310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052d8:	4b5c      	ldr	r3, [pc, #368]	@ (800544c <pvPortMalloc+0x184>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052e0:	f000 f924 	bl	800552c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052e4:	4b5a      	ldr	r3, [pc, #360]	@ (8005450 <pvPortMalloc+0x188>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 8095 	bne.w	800541c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01e      	beq.n	8005336 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052f8:	2208      	movs	r2, #8
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	2b00      	cmp	r3, #0
 8005308:	d015      	beq.n	8005336 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f023 0307 	bic.w	r3, r3, #7
 8005310:	3308      	adds	r3, #8
 8005312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <pvPortMalloc+0x6e>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	617b      	str	r3, [r7, #20]
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	e7fd      	b.n	8005332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d06f      	beq.n	800541c <pvPortMalloc+0x154>
 800533c:	4b45      	ldr	r3, [pc, #276]	@ (8005454 <pvPortMalloc+0x18c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d86a      	bhi.n	800541c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005346:	4b44      	ldr	r3, [pc, #272]	@ (8005458 <pvPortMalloc+0x190>)
 8005348:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800534a:	4b43      	ldr	r3, [pc, #268]	@ (8005458 <pvPortMalloc+0x190>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005350:	e004      	b.n	800535c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d903      	bls.n	800536e <pvPortMalloc+0xa6>
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f1      	bne.n	8005352 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800536e:	4b37      	ldr	r3, [pc, #220]	@ (800544c <pvPortMalloc+0x184>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005374:	429a      	cmp	r2, r3
 8005376:	d051      	beq.n	800541c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2208      	movs	r2, #8
 800537e:	4413      	add	r3, r2
 8005380:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	1ad2      	subs	r2, r2, r3
 8005392:	2308      	movs	r3, #8
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	429a      	cmp	r2, r3
 8005398:	d920      	bls.n	80053dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800539a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4413      	add	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <pvPortMalloc+0xfc>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	613b      	str	r3, [r7, #16]
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	e7fd      	b.n	80053c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053d6:	69b8      	ldr	r0, [r7, #24]
 80053d8:	f000 f90a 	bl	80055f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005454 <pvPortMalloc+0x18c>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005454 <pvPortMalloc+0x18c>)
 80053e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005454 <pvPortMalloc+0x18c>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b1b      	ldr	r3, [pc, #108]	@ (800545c <pvPortMalloc+0x194>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d203      	bcs.n	80053fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053f6:	4b17      	ldr	r3, [pc, #92]	@ (8005454 <pvPortMalloc+0x18c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a18      	ldr	r2, [pc, #96]	@ (800545c <pvPortMalloc+0x194>)
 80053fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	4b13      	ldr	r3, [pc, #76]	@ (8005450 <pvPortMalloc+0x188>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	431a      	orrs	r2, r3
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005412:	4b13      	ldr	r3, [pc, #76]	@ (8005460 <pvPortMalloc+0x198>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	4a11      	ldr	r2, [pc, #68]	@ (8005460 <pvPortMalloc+0x198>)
 800541a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800541c:	f7fe ff86 	bl	800432c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <pvPortMalloc+0x17a>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	60fb      	str	r3, [r7, #12]
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	e7fd      	b.n	800543e <pvPortMalloc+0x176>
	return pvReturn;
 8005442:	69fb      	ldr	r3, [r7, #28]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3728      	adds	r7, #40	@ 0x28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20001068 	.word	0x20001068
 8005450:	2000107c 	.word	0x2000107c
 8005454:	2000106c 	.word	0x2000106c
 8005458:	20001060 	.word	0x20001060
 800545c:	20001070 	.word	0x20001070
 8005460:	20001074 	.word	0x20001074

08005464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d04f      	beq.n	8005516 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005476:	2308      	movs	r3, #8
 8005478:	425b      	negs	r3, r3
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4413      	add	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	4b25      	ldr	r3, [pc, #148]	@ (8005520 <vPortFree+0xbc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <vPortFree+0x46>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60fb      	str	r3, [r7, #12]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <vPortFree+0x66>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60bb      	str	r3, [r7, #8]
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	e7fd      	b.n	80054c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	4b14      	ldr	r3, [pc, #80]	@ (8005520 <vPortFree+0xbc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01e      	beq.n	8005516 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11a      	bne.n	8005516 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005520 <vPortFree+0xbc>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	401a      	ands	r2, r3
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054f0:	f7fe ff0e 	bl	8004310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005524 <vPortFree+0xc0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4413      	add	r3, r2
 80054fe:	4a09      	ldr	r2, [pc, #36]	@ (8005524 <vPortFree+0xc0>)
 8005500:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005502:	6938      	ldr	r0, [r7, #16]
 8005504:	f000 f874 	bl	80055f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005508:	4b07      	ldr	r3, [pc, #28]	@ (8005528 <vPortFree+0xc4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	4a06      	ldr	r2, [pc, #24]	@ (8005528 <vPortFree+0xc4>)
 8005510:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005512:	f7fe ff0b 	bl	800432c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	2000107c 	.word	0x2000107c
 8005524:	2000106c 	.word	0x2000106c
 8005528:	20001078 	.word	0x20001078

0800552c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005532:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005536:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005538:	4b27      	ldr	r3, [pc, #156]	@ (80055d8 <prvHeapInit+0xac>)
 800553a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00c      	beq.n	8005560 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3307      	adds	r3, #7
 800554a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0307 	bic.w	r3, r3, #7
 8005552:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	4a1f      	ldr	r2, [pc, #124]	@ (80055d8 <prvHeapInit+0xac>)
 800555c:	4413      	add	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005564:	4a1d      	ldr	r2, [pc, #116]	@ (80055dc <prvHeapInit+0xb0>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800556a:	4b1c      	ldr	r3, [pc, #112]	@ (80055dc <prvHeapInit+0xb0>)
 800556c:	2200      	movs	r2, #0
 800556e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	4413      	add	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005578:	2208      	movs	r2, #8
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0307 	bic.w	r3, r3, #7
 8005586:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a15      	ldr	r2, [pc, #84]	@ (80055e0 <prvHeapInit+0xb4>)
 800558c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800558e:	4b14      	ldr	r3, [pc, #80]	@ (80055e0 <prvHeapInit+0xb4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2200      	movs	r2, #0
 8005594:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005596:	4b12      	ldr	r3, [pc, #72]	@ (80055e0 <prvHeapInit+0xb4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055ac:	4b0c      	ldr	r3, [pc, #48]	@ (80055e0 <prvHeapInit+0xb4>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a0a      	ldr	r2, [pc, #40]	@ (80055e4 <prvHeapInit+0xb8>)
 80055ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4a09      	ldr	r2, [pc, #36]	@ (80055e8 <prvHeapInit+0xbc>)
 80055c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055c4:	4b09      	ldr	r3, [pc, #36]	@ (80055ec <prvHeapInit+0xc0>)
 80055c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055ca:	601a      	str	r2, [r3, #0]
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	200004a8 	.word	0x200004a8
 80055dc:	20001060 	.word	0x20001060
 80055e0:	20001068 	.word	0x20001068
 80055e4:	20001070 	.word	0x20001070
 80055e8:	2000106c 	.word	0x2000106c
 80055ec:	2000107c 	.word	0x2000107c

080055f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055f8:	4b28      	ldr	r3, [pc, #160]	@ (800569c <prvInsertBlockIntoFreeList+0xac>)
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	e002      	b.n	8005604 <prvInsertBlockIntoFreeList+0x14>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d8f7      	bhi.n	80055fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4413      	add	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d108      	bne.n	8005632 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	441a      	add	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	441a      	add	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d118      	bne.n	8005678 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <prvInsertBlockIntoFreeList+0xb0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d00d      	beq.n	800566e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	441a      	add	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e008      	b.n	8005680 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <prvInsertBlockIntoFreeList+0xb0>)
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e003      	b.n	8005680 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	d002      	beq.n	800568e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20001060 	.word	0x20001060
 80056a0:	20001068 	.word	0x20001068

080056a4 <rand>:
 80056a4:	4b16      	ldr	r3, [pc, #88]	@ (8005700 <rand+0x5c>)
 80056a6:	b510      	push	{r4, lr}
 80056a8:	681c      	ldr	r4, [r3, #0]
 80056aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80056ac:	b9b3      	cbnz	r3, 80056dc <rand+0x38>
 80056ae:	2018      	movs	r0, #24
 80056b0:	f000 fa2e 	bl	8005b10 <malloc>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6320      	str	r0, [r4, #48]	@ 0x30
 80056b8:	b920      	cbnz	r0, 80056c4 <rand+0x20>
 80056ba:	4b12      	ldr	r3, [pc, #72]	@ (8005704 <rand+0x60>)
 80056bc:	4812      	ldr	r0, [pc, #72]	@ (8005708 <rand+0x64>)
 80056be:	2152      	movs	r1, #82	@ 0x52
 80056c0:	f000 f9be 	bl	8005a40 <__assert_func>
 80056c4:	4911      	ldr	r1, [pc, #68]	@ (800570c <rand+0x68>)
 80056c6:	4b12      	ldr	r3, [pc, #72]	@ (8005710 <rand+0x6c>)
 80056c8:	e9c0 1300 	strd	r1, r3, [r0]
 80056cc:	4b11      	ldr	r3, [pc, #68]	@ (8005714 <rand+0x70>)
 80056ce:	6083      	str	r3, [r0, #8]
 80056d0:	230b      	movs	r3, #11
 80056d2:	8183      	strh	r3, [r0, #12]
 80056d4:	2100      	movs	r1, #0
 80056d6:	2001      	movs	r0, #1
 80056d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80056dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80056de:	480e      	ldr	r0, [pc, #56]	@ (8005718 <rand+0x74>)
 80056e0:	690b      	ldr	r3, [r1, #16]
 80056e2:	694c      	ldr	r4, [r1, #20]
 80056e4:	4a0d      	ldr	r2, [pc, #52]	@ (800571c <rand+0x78>)
 80056e6:	4358      	muls	r0, r3
 80056e8:	fb02 0004 	mla	r0, r2, r4, r0
 80056ec:	fba3 3202 	umull	r3, r2, r3, r2
 80056f0:	3301      	adds	r3, #1
 80056f2:	eb40 0002 	adc.w	r0, r0, r2
 80056f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80056fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	2000001c 	.word	0x2000001c
 8005704:	08006738 	.word	0x08006738
 8005708:	0800674f 	.word	0x0800674f
 800570c:	abcd330e 	.word	0xabcd330e
 8005710:	e66d1234 	.word	0xe66d1234
 8005714:	0005deec 	.word	0x0005deec
 8005718:	5851f42d 	.word	0x5851f42d
 800571c:	4c957f2d 	.word	0x4c957f2d

08005720 <std>:
 8005720:	2300      	movs	r3, #0
 8005722:	b510      	push	{r4, lr}
 8005724:	4604      	mov	r4, r0
 8005726:	e9c0 3300 	strd	r3, r3, [r0]
 800572a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800572e:	6083      	str	r3, [r0, #8]
 8005730:	8181      	strh	r1, [r0, #12]
 8005732:	6643      	str	r3, [r0, #100]	@ 0x64
 8005734:	81c2      	strh	r2, [r0, #14]
 8005736:	6183      	str	r3, [r0, #24]
 8005738:	4619      	mov	r1, r3
 800573a:	2208      	movs	r2, #8
 800573c:	305c      	adds	r0, #92	@ 0x5c
 800573e:	f000 f8f4 	bl	800592a <memset>
 8005742:	4b0d      	ldr	r3, [pc, #52]	@ (8005778 <std+0x58>)
 8005744:	6263      	str	r3, [r4, #36]	@ 0x24
 8005746:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <std+0x5c>)
 8005748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800574a:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <std+0x60>)
 800574c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800574e:	4b0d      	ldr	r3, [pc, #52]	@ (8005784 <std+0x64>)
 8005750:	6323      	str	r3, [r4, #48]	@ 0x30
 8005752:	4b0d      	ldr	r3, [pc, #52]	@ (8005788 <std+0x68>)
 8005754:	6224      	str	r4, [r4, #32]
 8005756:	429c      	cmp	r4, r3
 8005758:	d006      	beq.n	8005768 <std+0x48>
 800575a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800575e:	4294      	cmp	r4, r2
 8005760:	d002      	beq.n	8005768 <std+0x48>
 8005762:	33d0      	adds	r3, #208	@ 0xd0
 8005764:	429c      	cmp	r4, r3
 8005766:	d105      	bne.n	8005774 <std+0x54>
 8005768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005770:	f000 b954 	b.w	8005a1c <__retarget_lock_init_recursive>
 8005774:	bd10      	pop	{r4, pc}
 8005776:	bf00      	nop
 8005778:	080058a5 	.word	0x080058a5
 800577c:	080058c7 	.word	0x080058c7
 8005780:	080058ff 	.word	0x080058ff
 8005784:	08005923 	.word	0x08005923
 8005788:	20001080 	.word	0x20001080

0800578c <stdio_exit_handler>:
 800578c:	4a02      	ldr	r2, [pc, #8]	@ (8005798 <stdio_exit_handler+0xc>)
 800578e:	4903      	ldr	r1, [pc, #12]	@ (800579c <stdio_exit_handler+0x10>)
 8005790:	4803      	ldr	r0, [pc, #12]	@ (80057a0 <stdio_exit_handler+0x14>)
 8005792:	f000 b869 	b.w	8005868 <_fwalk_sglue>
 8005796:	bf00      	nop
 8005798:	20000010 	.word	0x20000010
 800579c:	08005d85 	.word	0x08005d85
 80057a0:	20000020 	.word	0x20000020

080057a4 <cleanup_stdio>:
 80057a4:	6841      	ldr	r1, [r0, #4]
 80057a6:	4b0c      	ldr	r3, [pc, #48]	@ (80057d8 <cleanup_stdio+0x34>)
 80057a8:	4299      	cmp	r1, r3
 80057aa:	b510      	push	{r4, lr}
 80057ac:	4604      	mov	r4, r0
 80057ae:	d001      	beq.n	80057b4 <cleanup_stdio+0x10>
 80057b0:	f000 fae8 	bl	8005d84 <_fflush_r>
 80057b4:	68a1      	ldr	r1, [r4, #8]
 80057b6:	4b09      	ldr	r3, [pc, #36]	@ (80057dc <cleanup_stdio+0x38>)
 80057b8:	4299      	cmp	r1, r3
 80057ba:	d002      	beq.n	80057c2 <cleanup_stdio+0x1e>
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 fae1 	bl	8005d84 <_fflush_r>
 80057c2:	68e1      	ldr	r1, [r4, #12]
 80057c4:	4b06      	ldr	r3, [pc, #24]	@ (80057e0 <cleanup_stdio+0x3c>)
 80057c6:	4299      	cmp	r1, r3
 80057c8:	d004      	beq.n	80057d4 <cleanup_stdio+0x30>
 80057ca:	4620      	mov	r0, r4
 80057cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d0:	f000 bad8 	b.w	8005d84 <_fflush_r>
 80057d4:	bd10      	pop	{r4, pc}
 80057d6:	bf00      	nop
 80057d8:	20001080 	.word	0x20001080
 80057dc:	200010e8 	.word	0x200010e8
 80057e0:	20001150 	.word	0x20001150

080057e4 <global_stdio_init.part.0>:
 80057e4:	b510      	push	{r4, lr}
 80057e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005814 <global_stdio_init.part.0+0x30>)
 80057e8:	4c0b      	ldr	r4, [pc, #44]	@ (8005818 <global_stdio_init.part.0+0x34>)
 80057ea:	4a0c      	ldr	r2, [pc, #48]	@ (800581c <global_stdio_init.part.0+0x38>)
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	4620      	mov	r0, r4
 80057f0:	2200      	movs	r2, #0
 80057f2:	2104      	movs	r1, #4
 80057f4:	f7ff ff94 	bl	8005720 <std>
 80057f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057fc:	2201      	movs	r2, #1
 80057fe:	2109      	movs	r1, #9
 8005800:	f7ff ff8e 	bl	8005720 <std>
 8005804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005808:	2202      	movs	r2, #2
 800580a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800580e:	2112      	movs	r1, #18
 8005810:	f7ff bf86 	b.w	8005720 <std>
 8005814:	200011b8 	.word	0x200011b8
 8005818:	20001080 	.word	0x20001080
 800581c:	0800578d 	.word	0x0800578d

08005820 <__sfp_lock_acquire>:
 8005820:	4801      	ldr	r0, [pc, #4]	@ (8005828 <__sfp_lock_acquire+0x8>)
 8005822:	f000 b8fc 	b.w	8005a1e <__retarget_lock_acquire_recursive>
 8005826:	bf00      	nop
 8005828:	200011c1 	.word	0x200011c1

0800582c <__sfp_lock_release>:
 800582c:	4801      	ldr	r0, [pc, #4]	@ (8005834 <__sfp_lock_release+0x8>)
 800582e:	f000 b8f7 	b.w	8005a20 <__retarget_lock_release_recursive>
 8005832:	bf00      	nop
 8005834:	200011c1 	.word	0x200011c1

08005838 <__sinit>:
 8005838:	b510      	push	{r4, lr}
 800583a:	4604      	mov	r4, r0
 800583c:	f7ff fff0 	bl	8005820 <__sfp_lock_acquire>
 8005840:	6a23      	ldr	r3, [r4, #32]
 8005842:	b11b      	cbz	r3, 800584c <__sinit+0x14>
 8005844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005848:	f7ff bff0 	b.w	800582c <__sfp_lock_release>
 800584c:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <__sinit+0x28>)
 800584e:	6223      	str	r3, [r4, #32]
 8005850:	4b04      	ldr	r3, [pc, #16]	@ (8005864 <__sinit+0x2c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f5      	bne.n	8005844 <__sinit+0xc>
 8005858:	f7ff ffc4 	bl	80057e4 <global_stdio_init.part.0>
 800585c:	e7f2      	b.n	8005844 <__sinit+0xc>
 800585e:	bf00      	nop
 8005860:	080057a5 	.word	0x080057a5
 8005864:	200011b8 	.word	0x200011b8

08005868 <_fwalk_sglue>:
 8005868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800586c:	4607      	mov	r7, r0
 800586e:	4688      	mov	r8, r1
 8005870:	4614      	mov	r4, r2
 8005872:	2600      	movs	r6, #0
 8005874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005878:	f1b9 0901 	subs.w	r9, r9, #1
 800587c:	d505      	bpl.n	800588a <_fwalk_sglue+0x22>
 800587e:	6824      	ldr	r4, [r4, #0]
 8005880:	2c00      	cmp	r4, #0
 8005882:	d1f7      	bne.n	8005874 <_fwalk_sglue+0xc>
 8005884:	4630      	mov	r0, r6
 8005886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800588a:	89ab      	ldrh	r3, [r5, #12]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d907      	bls.n	80058a0 <_fwalk_sglue+0x38>
 8005890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005894:	3301      	adds	r3, #1
 8005896:	d003      	beq.n	80058a0 <_fwalk_sglue+0x38>
 8005898:	4629      	mov	r1, r5
 800589a:	4638      	mov	r0, r7
 800589c:	47c0      	blx	r8
 800589e:	4306      	orrs	r6, r0
 80058a0:	3568      	adds	r5, #104	@ 0x68
 80058a2:	e7e9      	b.n	8005878 <_fwalk_sglue+0x10>

080058a4 <__sread>:
 80058a4:	b510      	push	{r4, lr}
 80058a6:	460c      	mov	r4, r1
 80058a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ac:	f000 f868 	bl	8005980 <_read_r>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	bfab      	itete	ge
 80058b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058b6:	89a3      	ldrhlt	r3, [r4, #12]
 80058b8:	181b      	addge	r3, r3, r0
 80058ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058be:	bfac      	ite	ge
 80058c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058c2:	81a3      	strhlt	r3, [r4, #12]
 80058c4:	bd10      	pop	{r4, pc}

080058c6 <__swrite>:
 80058c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ca:	461f      	mov	r7, r3
 80058cc:	898b      	ldrh	r3, [r1, #12]
 80058ce:	05db      	lsls	r3, r3, #23
 80058d0:	4605      	mov	r5, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	4616      	mov	r6, r2
 80058d6:	d505      	bpl.n	80058e4 <__swrite+0x1e>
 80058d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058dc:	2302      	movs	r3, #2
 80058de:	2200      	movs	r2, #0
 80058e0:	f000 f83c 	bl	800595c <_lseek_r>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	4632      	mov	r2, r6
 80058f2:	463b      	mov	r3, r7
 80058f4:	4628      	mov	r0, r5
 80058f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058fa:	f000 b853 	b.w	80059a4 <_write_r>

080058fe <__sseek>:
 80058fe:	b510      	push	{r4, lr}
 8005900:	460c      	mov	r4, r1
 8005902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005906:	f000 f829 	bl	800595c <_lseek_r>
 800590a:	1c43      	adds	r3, r0, #1
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	bf15      	itete	ne
 8005910:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005912:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005916:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800591a:	81a3      	strheq	r3, [r4, #12]
 800591c:	bf18      	it	ne
 800591e:	81a3      	strhne	r3, [r4, #12]
 8005920:	bd10      	pop	{r4, pc}

08005922 <__sclose>:
 8005922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005926:	f000 b809 	b.w	800593c <_close_r>

0800592a <memset>:
 800592a:	4402      	add	r2, r0
 800592c:	4603      	mov	r3, r0
 800592e:	4293      	cmp	r3, r2
 8005930:	d100      	bne.n	8005934 <memset+0xa>
 8005932:	4770      	bx	lr
 8005934:	f803 1b01 	strb.w	r1, [r3], #1
 8005938:	e7f9      	b.n	800592e <memset+0x4>
	...

0800593c <_close_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d06      	ldr	r5, [pc, #24]	@ (8005958 <_close_r+0x1c>)
 8005940:	2300      	movs	r3, #0
 8005942:	4604      	mov	r4, r0
 8005944:	4608      	mov	r0, r1
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	f7fb f8e0 	bl	8000b0c <_close>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_close_r+0x1a>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_close_r+0x1a>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	200011bc 	.word	0x200011bc

0800595c <_lseek_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d07      	ldr	r5, [pc, #28]	@ (800597c <_lseek_r+0x20>)
 8005960:	4604      	mov	r4, r0
 8005962:	4608      	mov	r0, r1
 8005964:	4611      	mov	r1, r2
 8005966:	2200      	movs	r2, #0
 8005968:	602a      	str	r2, [r5, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f7fb f8f5 	bl	8000b5a <_lseek>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d102      	bne.n	800597a <_lseek_r+0x1e>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	b103      	cbz	r3, 800597a <_lseek_r+0x1e>
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	200011bc 	.word	0x200011bc

08005980 <_read_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d07      	ldr	r5, [pc, #28]	@ (80059a0 <_read_r+0x20>)
 8005984:	4604      	mov	r4, r0
 8005986:	4608      	mov	r0, r1
 8005988:	4611      	mov	r1, r2
 800598a:	2200      	movs	r2, #0
 800598c:	602a      	str	r2, [r5, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	f7fb f883 	bl	8000a9a <_read>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_read_r+0x1e>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_read_r+0x1e>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	200011bc 	.word	0x200011bc

080059a4 <_write_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d07      	ldr	r5, [pc, #28]	@ (80059c4 <_write_r+0x20>)
 80059a8:	4604      	mov	r4, r0
 80059aa:	4608      	mov	r0, r1
 80059ac:	4611      	mov	r1, r2
 80059ae:	2200      	movs	r2, #0
 80059b0:	602a      	str	r2, [r5, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f7fb f88e 	bl	8000ad4 <_write>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_write_r+0x1e>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_write_r+0x1e>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	200011bc 	.word	0x200011bc

080059c8 <__errno>:
 80059c8:	4b01      	ldr	r3, [pc, #4]	@ (80059d0 <__errno+0x8>)
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	2000001c 	.word	0x2000001c

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	4d0d      	ldr	r5, [pc, #52]	@ (8005a0c <__libc_init_array+0x38>)
 80059d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005a10 <__libc_init_array+0x3c>)
 80059da:	1b64      	subs	r4, r4, r5
 80059dc:	10a4      	asrs	r4, r4, #2
 80059de:	2600      	movs	r6, #0
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005a14 <__libc_init_array+0x40>)
 80059e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005a18 <__libc_init_array+0x44>)
 80059e8:	f000 fe46 	bl	8006678 <_init>
 80059ec:	1b64      	subs	r4, r4, r5
 80059ee:	10a4      	asrs	r4, r4, #2
 80059f0:	2600      	movs	r6, #0
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	08006820 	.word	0x08006820
 8005a10:	08006820 	.word	0x08006820
 8005a14:	08006820 	.word	0x08006820
 8005a18:	08006824 	.word	0x08006824

08005a1c <__retarget_lock_init_recursive>:
 8005a1c:	4770      	bx	lr

08005a1e <__retarget_lock_acquire_recursive>:
 8005a1e:	4770      	bx	lr

08005a20 <__retarget_lock_release_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <memcpy>:
 8005a22:	440a      	add	r2, r1
 8005a24:	4291      	cmp	r1, r2
 8005a26:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a2a:	d100      	bne.n	8005a2e <memcpy+0xc>
 8005a2c:	4770      	bx	lr
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a38:	4291      	cmp	r1, r2
 8005a3a:	d1f9      	bne.n	8005a30 <memcpy+0xe>
 8005a3c:	bd10      	pop	{r4, pc}
	...

08005a40 <__assert_func>:
 8005a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a42:	4614      	mov	r4, r2
 8005a44:	461a      	mov	r2, r3
 8005a46:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <__assert_func+0x2c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	68d8      	ldr	r0, [r3, #12]
 8005a4e:	b14c      	cbz	r4, 8005a64 <__assert_func+0x24>
 8005a50:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <__assert_func+0x30>)
 8005a52:	9100      	str	r1, [sp, #0]
 8005a54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a58:	4906      	ldr	r1, [pc, #24]	@ (8005a74 <__assert_func+0x34>)
 8005a5a:	462b      	mov	r3, r5
 8005a5c:	f000 f9ba 	bl	8005dd4 <fiprintf>
 8005a60:	f000 f9da 	bl	8005e18 <abort>
 8005a64:	4b04      	ldr	r3, [pc, #16]	@ (8005a78 <__assert_func+0x38>)
 8005a66:	461c      	mov	r4, r3
 8005a68:	e7f3      	b.n	8005a52 <__assert_func+0x12>
 8005a6a:	bf00      	nop
 8005a6c:	2000001c 	.word	0x2000001c
 8005a70:	080067a7 	.word	0x080067a7
 8005a74:	080067b4 	.word	0x080067b4
 8005a78:	080067e2 	.word	0x080067e2

08005a7c <_free_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4605      	mov	r5, r0
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d041      	beq.n	8005b08 <_free_r+0x8c>
 8005a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a88:	1f0c      	subs	r4, r1, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bfb8      	it	lt
 8005a8e:	18e4      	addlt	r4, r4, r3
 8005a90:	f000 f8e8 	bl	8005c64 <__malloc_lock>
 8005a94:	4a1d      	ldr	r2, [pc, #116]	@ (8005b0c <_free_r+0x90>)
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	b933      	cbnz	r3, 8005aa8 <_free_r+0x2c>
 8005a9a:	6063      	str	r3, [r4, #4]
 8005a9c:	6014      	str	r4, [r2, #0]
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aa4:	f000 b8e4 	b.w	8005c70 <__malloc_unlock>
 8005aa8:	42a3      	cmp	r3, r4
 8005aaa:	d908      	bls.n	8005abe <_free_r+0x42>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	1821      	adds	r1, r4, r0
 8005ab0:	428b      	cmp	r3, r1
 8005ab2:	bf01      	itttt	eq
 8005ab4:	6819      	ldreq	r1, [r3, #0]
 8005ab6:	685b      	ldreq	r3, [r3, #4]
 8005ab8:	1809      	addeq	r1, r1, r0
 8005aba:	6021      	streq	r1, [r4, #0]
 8005abc:	e7ed      	b.n	8005a9a <_free_r+0x1e>
 8005abe:	461a      	mov	r2, r3
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	b10b      	cbz	r3, 8005ac8 <_free_r+0x4c>
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d9fa      	bls.n	8005abe <_free_r+0x42>
 8005ac8:	6811      	ldr	r1, [r2, #0]
 8005aca:	1850      	adds	r0, r2, r1
 8005acc:	42a0      	cmp	r0, r4
 8005ace:	d10b      	bne.n	8005ae8 <_free_r+0x6c>
 8005ad0:	6820      	ldr	r0, [r4, #0]
 8005ad2:	4401      	add	r1, r0
 8005ad4:	1850      	adds	r0, r2, r1
 8005ad6:	4283      	cmp	r3, r0
 8005ad8:	6011      	str	r1, [r2, #0]
 8005ada:	d1e0      	bne.n	8005a9e <_free_r+0x22>
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	6053      	str	r3, [r2, #4]
 8005ae2:	4408      	add	r0, r1
 8005ae4:	6010      	str	r0, [r2, #0]
 8005ae6:	e7da      	b.n	8005a9e <_free_r+0x22>
 8005ae8:	d902      	bls.n	8005af0 <_free_r+0x74>
 8005aea:	230c      	movs	r3, #12
 8005aec:	602b      	str	r3, [r5, #0]
 8005aee:	e7d6      	b.n	8005a9e <_free_r+0x22>
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	1821      	adds	r1, r4, r0
 8005af4:	428b      	cmp	r3, r1
 8005af6:	bf04      	itt	eq
 8005af8:	6819      	ldreq	r1, [r3, #0]
 8005afa:	685b      	ldreq	r3, [r3, #4]
 8005afc:	6063      	str	r3, [r4, #4]
 8005afe:	bf04      	itt	eq
 8005b00:	1809      	addeq	r1, r1, r0
 8005b02:	6021      	streq	r1, [r4, #0]
 8005b04:	6054      	str	r4, [r2, #4]
 8005b06:	e7ca      	b.n	8005a9e <_free_r+0x22>
 8005b08:	bd38      	pop	{r3, r4, r5, pc}
 8005b0a:	bf00      	nop
 8005b0c:	200011c8 	.word	0x200011c8

08005b10 <malloc>:
 8005b10:	4b02      	ldr	r3, [pc, #8]	@ (8005b1c <malloc+0xc>)
 8005b12:	4601      	mov	r1, r0
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	f000 b825 	b.w	8005b64 <_malloc_r>
 8005b1a:	bf00      	nop
 8005b1c:	2000001c 	.word	0x2000001c

08005b20 <sbrk_aligned>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	4e0f      	ldr	r6, [pc, #60]	@ (8005b60 <sbrk_aligned+0x40>)
 8005b24:	460c      	mov	r4, r1
 8005b26:	6831      	ldr	r1, [r6, #0]
 8005b28:	4605      	mov	r5, r0
 8005b2a:	b911      	cbnz	r1, 8005b32 <sbrk_aligned+0x12>
 8005b2c:	f000 f964 	bl	8005df8 <_sbrk_r>
 8005b30:	6030      	str	r0, [r6, #0]
 8005b32:	4621      	mov	r1, r4
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 f95f 	bl	8005df8 <_sbrk_r>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d103      	bne.n	8005b46 <sbrk_aligned+0x26>
 8005b3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b42:	4620      	mov	r0, r4
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	1cc4      	adds	r4, r0, #3
 8005b48:	f024 0403 	bic.w	r4, r4, #3
 8005b4c:	42a0      	cmp	r0, r4
 8005b4e:	d0f8      	beq.n	8005b42 <sbrk_aligned+0x22>
 8005b50:	1a21      	subs	r1, r4, r0
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 f950 	bl	8005df8 <_sbrk_r>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d1f2      	bne.n	8005b42 <sbrk_aligned+0x22>
 8005b5c:	e7ef      	b.n	8005b3e <sbrk_aligned+0x1e>
 8005b5e:	bf00      	nop
 8005b60:	200011c4 	.word	0x200011c4

08005b64 <_malloc_r>:
 8005b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b68:	1ccd      	adds	r5, r1, #3
 8005b6a:	f025 0503 	bic.w	r5, r5, #3
 8005b6e:	3508      	adds	r5, #8
 8005b70:	2d0c      	cmp	r5, #12
 8005b72:	bf38      	it	cc
 8005b74:	250c      	movcc	r5, #12
 8005b76:	2d00      	cmp	r5, #0
 8005b78:	4606      	mov	r6, r0
 8005b7a:	db01      	blt.n	8005b80 <_malloc_r+0x1c>
 8005b7c:	42a9      	cmp	r1, r5
 8005b7e:	d904      	bls.n	8005b8a <_malloc_r+0x26>
 8005b80:	230c      	movs	r3, #12
 8005b82:	6033      	str	r3, [r6, #0]
 8005b84:	2000      	movs	r0, #0
 8005b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c60 <_malloc_r+0xfc>
 8005b8e:	f000 f869 	bl	8005c64 <__malloc_lock>
 8005b92:	f8d8 3000 	ldr.w	r3, [r8]
 8005b96:	461c      	mov	r4, r3
 8005b98:	bb44      	cbnz	r4, 8005bec <_malloc_r+0x88>
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f7ff ffbf 	bl	8005b20 <sbrk_aligned>
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	d158      	bne.n	8005c5a <_malloc_r+0xf6>
 8005ba8:	f8d8 4000 	ldr.w	r4, [r8]
 8005bac:	4627      	mov	r7, r4
 8005bae:	2f00      	cmp	r7, #0
 8005bb0:	d143      	bne.n	8005c3a <_malloc_r+0xd6>
 8005bb2:	2c00      	cmp	r4, #0
 8005bb4:	d04b      	beq.n	8005c4e <_malloc_r+0xea>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	4639      	mov	r1, r7
 8005bba:	4630      	mov	r0, r6
 8005bbc:	eb04 0903 	add.w	r9, r4, r3
 8005bc0:	f000 f91a 	bl	8005df8 <_sbrk_r>
 8005bc4:	4581      	cmp	r9, r0
 8005bc6:	d142      	bne.n	8005c4e <_malloc_r+0xea>
 8005bc8:	6821      	ldr	r1, [r4, #0]
 8005bca:	1a6d      	subs	r5, r5, r1
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7ff ffa6 	bl	8005b20 <sbrk_aligned>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d03a      	beq.n	8005c4e <_malloc_r+0xea>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	442b      	add	r3, r5
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	f8d8 3000 	ldr.w	r3, [r8]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	bb62      	cbnz	r2, 8005c40 <_malloc_r+0xdc>
 8005be6:	f8c8 7000 	str.w	r7, [r8]
 8005bea:	e00f      	b.n	8005c0c <_malloc_r+0xa8>
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	1b52      	subs	r2, r2, r5
 8005bf0:	d420      	bmi.n	8005c34 <_malloc_r+0xd0>
 8005bf2:	2a0b      	cmp	r2, #11
 8005bf4:	d917      	bls.n	8005c26 <_malloc_r+0xc2>
 8005bf6:	1961      	adds	r1, r4, r5
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	6025      	str	r5, [r4, #0]
 8005bfc:	bf18      	it	ne
 8005bfe:	6059      	strne	r1, [r3, #4]
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	bf08      	it	eq
 8005c04:	f8c8 1000 	streq.w	r1, [r8]
 8005c08:	5162      	str	r2, [r4, r5]
 8005c0a:	604b      	str	r3, [r1, #4]
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f000 f82f 	bl	8005c70 <__malloc_unlock>
 8005c12:	f104 000b 	add.w	r0, r4, #11
 8005c16:	1d23      	adds	r3, r4, #4
 8005c18:	f020 0007 	bic.w	r0, r0, #7
 8005c1c:	1ac2      	subs	r2, r0, r3
 8005c1e:	bf1c      	itt	ne
 8005c20:	1a1b      	subne	r3, r3, r0
 8005c22:	50a3      	strne	r3, [r4, r2]
 8005c24:	e7af      	b.n	8005b86 <_malloc_r+0x22>
 8005c26:	6862      	ldr	r2, [r4, #4]
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	bf0c      	ite	eq
 8005c2c:	f8c8 2000 	streq.w	r2, [r8]
 8005c30:	605a      	strne	r2, [r3, #4]
 8005c32:	e7eb      	b.n	8005c0c <_malloc_r+0xa8>
 8005c34:	4623      	mov	r3, r4
 8005c36:	6864      	ldr	r4, [r4, #4]
 8005c38:	e7ae      	b.n	8005b98 <_malloc_r+0x34>
 8005c3a:	463c      	mov	r4, r7
 8005c3c:	687f      	ldr	r7, [r7, #4]
 8005c3e:	e7b6      	b.n	8005bae <_malloc_r+0x4a>
 8005c40:	461a      	mov	r2, r3
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	d1fb      	bne.n	8005c40 <_malloc_r+0xdc>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6053      	str	r3, [r2, #4]
 8005c4c:	e7de      	b.n	8005c0c <_malloc_r+0xa8>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	6033      	str	r3, [r6, #0]
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 f80c 	bl	8005c70 <__malloc_unlock>
 8005c58:	e794      	b.n	8005b84 <_malloc_r+0x20>
 8005c5a:	6005      	str	r5, [r0, #0]
 8005c5c:	e7d6      	b.n	8005c0c <_malloc_r+0xa8>
 8005c5e:	bf00      	nop
 8005c60:	200011c8 	.word	0x200011c8

08005c64 <__malloc_lock>:
 8005c64:	4801      	ldr	r0, [pc, #4]	@ (8005c6c <__malloc_lock+0x8>)
 8005c66:	f7ff beda 	b.w	8005a1e <__retarget_lock_acquire_recursive>
 8005c6a:	bf00      	nop
 8005c6c:	200011c0 	.word	0x200011c0

08005c70 <__malloc_unlock>:
 8005c70:	4801      	ldr	r0, [pc, #4]	@ (8005c78 <__malloc_unlock+0x8>)
 8005c72:	f7ff bed5 	b.w	8005a20 <__retarget_lock_release_recursive>
 8005c76:	bf00      	nop
 8005c78:	200011c0 	.word	0x200011c0

08005c7c <__sflush_r>:
 8005c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c84:	0716      	lsls	r6, r2, #28
 8005c86:	4605      	mov	r5, r0
 8005c88:	460c      	mov	r4, r1
 8005c8a:	d454      	bmi.n	8005d36 <__sflush_r+0xba>
 8005c8c:	684b      	ldr	r3, [r1, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dc02      	bgt.n	8005c98 <__sflush_r+0x1c>
 8005c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dd48      	ble.n	8005d2a <__sflush_r+0xae>
 8005c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c9a:	2e00      	cmp	r6, #0
 8005c9c:	d045      	beq.n	8005d2a <__sflush_r+0xae>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ca4:	682f      	ldr	r7, [r5, #0]
 8005ca6:	6a21      	ldr	r1, [r4, #32]
 8005ca8:	602b      	str	r3, [r5, #0]
 8005caa:	d030      	beq.n	8005d0e <__sflush_r+0x92>
 8005cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	0759      	lsls	r1, r3, #29
 8005cb2:	d505      	bpl.n	8005cc0 <__sflush_r+0x44>
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cba:	b10b      	cbz	r3, 8005cc0 <__sflush_r+0x44>
 8005cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cc4:	6a21      	ldr	r1, [r4, #32]
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	47b0      	blx	r6
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	d106      	bne.n	8005cde <__sflush_r+0x62>
 8005cd0:	6829      	ldr	r1, [r5, #0]
 8005cd2:	291d      	cmp	r1, #29
 8005cd4:	d82b      	bhi.n	8005d2e <__sflush_r+0xb2>
 8005cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d80 <__sflush_r+0x104>)
 8005cd8:	40ca      	lsrs	r2, r1
 8005cda:	07d6      	lsls	r6, r2, #31
 8005cdc:	d527      	bpl.n	8005d2e <__sflush_r+0xb2>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	6062      	str	r2, [r4, #4]
 8005ce2:	04d9      	lsls	r1, r3, #19
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	d504      	bpl.n	8005cf4 <__sflush_r+0x78>
 8005cea:	1c42      	adds	r2, r0, #1
 8005cec:	d101      	bne.n	8005cf2 <__sflush_r+0x76>
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	b903      	cbnz	r3, 8005cf4 <__sflush_r+0x78>
 8005cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cf6:	602f      	str	r7, [r5, #0]
 8005cf8:	b1b9      	cbz	r1, 8005d2a <__sflush_r+0xae>
 8005cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cfe:	4299      	cmp	r1, r3
 8005d00:	d002      	beq.n	8005d08 <__sflush_r+0x8c>
 8005d02:	4628      	mov	r0, r5
 8005d04:	f7ff feba 	bl	8005a7c <_free_r>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d0c:	e00d      	b.n	8005d2a <__sflush_r+0xae>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b0      	blx	r6
 8005d14:	4602      	mov	r2, r0
 8005d16:	1c50      	adds	r0, r2, #1
 8005d18:	d1c9      	bne.n	8005cae <__sflush_r+0x32>
 8005d1a:	682b      	ldr	r3, [r5, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0c6      	beq.n	8005cae <__sflush_r+0x32>
 8005d20:	2b1d      	cmp	r3, #29
 8005d22:	d001      	beq.n	8005d28 <__sflush_r+0xac>
 8005d24:	2b16      	cmp	r3, #22
 8005d26:	d11e      	bne.n	8005d66 <__sflush_r+0xea>
 8005d28:	602f      	str	r7, [r5, #0]
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e022      	b.n	8005d74 <__sflush_r+0xf8>
 8005d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	e01b      	b.n	8005d6e <__sflush_r+0xf2>
 8005d36:	690f      	ldr	r7, [r1, #16]
 8005d38:	2f00      	cmp	r7, #0
 8005d3a:	d0f6      	beq.n	8005d2a <__sflush_r+0xae>
 8005d3c:	0793      	lsls	r3, r2, #30
 8005d3e:	680e      	ldr	r6, [r1, #0]
 8005d40:	bf08      	it	eq
 8005d42:	694b      	ldreq	r3, [r1, #20]
 8005d44:	600f      	str	r7, [r1, #0]
 8005d46:	bf18      	it	ne
 8005d48:	2300      	movne	r3, #0
 8005d4a:	eba6 0807 	sub.w	r8, r6, r7
 8005d4e:	608b      	str	r3, [r1, #8]
 8005d50:	f1b8 0f00 	cmp.w	r8, #0
 8005d54:	dde9      	ble.n	8005d2a <__sflush_r+0xae>
 8005d56:	6a21      	ldr	r1, [r4, #32]
 8005d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d5a:	4643      	mov	r3, r8
 8005d5c:	463a      	mov	r2, r7
 8005d5e:	4628      	mov	r0, r5
 8005d60:	47b0      	blx	r6
 8005d62:	2800      	cmp	r0, #0
 8005d64:	dc08      	bgt.n	8005d78 <__sflush_r+0xfc>
 8005d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d78:	4407      	add	r7, r0
 8005d7a:	eba8 0800 	sub.w	r8, r8, r0
 8005d7e:	e7e7      	b.n	8005d50 <__sflush_r+0xd4>
 8005d80:	20400001 	.word	0x20400001

08005d84 <_fflush_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	690b      	ldr	r3, [r1, #16]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b913      	cbnz	r3, 8005d94 <_fflush_r+0x10>
 8005d8e:	2500      	movs	r5, #0
 8005d90:	4628      	mov	r0, r5
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	b118      	cbz	r0, 8005d9e <_fflush_r+0x1a>
 8005d96:	6a03      	ldr	r3, [r0, #32]
 8005d98:	b90b      	cbnz	r3, 8005d9e <_fflush_r+0x1a>
 8005d9a:	f7ff fd4d 	bl	8005838 <__sinit>
 8005d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f3      	beq.n	8005d8e <_fflush_r+0xa>
 8005da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005da8:	07d0      	lsls	r0, r2, #31
 8005daa:	d404      	bmi.n	8005db6 <_fflush_r+0x32>
 8005dac:	0599      	lsls	r1, r3, #22
 8005dae:	d402      	bmi.n	8005db6 <_fflush_r+0x32>
 8005db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005db2:	f7ff fe34 	bl	8005a1e <__retarget_lock_acquire_recursive>
 8005db6:	4628      	mov	r0, r5
 8005db8:	4621      	mov	r1, r4
 8005dba:	f7ff ff5f 	bl	8005c7c <__sflush_r>
 8005dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dc0:	07da      	lsls	r2, r3, #31
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	d4e4      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	059b      	lsls	r3, r3, #22
 8005dca:	d4e1      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dce:	f7ff fe27 	bl	8005a20 <__retarget_lock_release_recursive>
 8005dd2:	e7dd      	b.n	8005d90 <_fflush_r+0xc>

08005dd4 <fiprintf>:
 8005dd4:	b40e      	push	{r1, r2, r3}
 8005dd6:	b503      	push	{r0, r1, lr}
 8005dd8:	4601      	mov	r1, r0
 8005dda:	ab03      	add	r3, sp, #12
 8005ddc:	4805      	ldr	r0, [pc, #20]	@ (8005df4 <fiprintf+0x20>)
 8005dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de2:	6800      	ldr	r0, [r0, #0]
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	f000 f847 	bl	8005e78 <_vfiprintf_r>
 8005dea:	b002      	add	sp, #8
 8005dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005df0:	b003      	add	sp, #12
 8005df2:	4770      	bx	lr
 8005df4:	2000001c 	.word	0x2000001c

08005df8 <_sbrk_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d06      	ldr	r5, [pc, #24]	@ (8005e14 <_sbrk_r+0x1c>)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	f7fa feb6 	bl	8000b74 <_sbrk>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_sbrk_r+0x1a>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_sbrk_r+0x1a>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	200011bc 	.word	0x200011bc

08005e18 <abort>:
 8005e18:	b508      	push	{r3, lr}
 8005e1a:	2006      	movs	r0, #6
 8005e1c:	f000 fb8c 	bl	8006538 <raise>
 8005e20:	2001      	movs	r0, #1
 8005e22:	f7fa fe2f 	bl	8000a84 <_exit>

08005e26 <__sfputc_r>:
 8005e26:	6893      	ldr	r3, [r2, #8]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	b410      	push	{r4}
 8005e2e:	6093      	str	r3, [r2, #8]
 8005e30:	da08      	bge.n	8005e44 <__sfputc_r+0x1e>
 8005e32:	6994      	ldr	r4, [r2, #24]
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	db01      	blt.n	8005e3c <__sfputc_r+0x16>
 8005e38:	290a      	cmp	r1, #10
 8005e3a:	d103      	bne.n	8005e44 <__sfputc_r+0x1e>
 8005e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e40:	f000 babe 	b.w	80063c0 <__swbuf_r>
 8005e44:	6813      	ldr	r3, [r2, #0]
 8005e46:	1c58      	adds	r0, r3, #1
 8005e48:	6010      	str	r0, [r2, #0]
 8005e4a:	7019      	strb	r1, [r3, #0]
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <__sfputs_r>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	4606      	mov	r6, r0
 8005e58:	460f      	mov	r7, r1
 8005e5a:	4614      	mov	r4, r2
 8005e5c:	18d5      	adds	r5, r2, r3
 8005e5e:	42ac      	cmp	r4, r5
 8005e60:	d101      	bne.n	8005e66 <__sfputs_r+0x12>
 8005e62:	2000      	movs	r0, #0
 8005e64:	e007      	b.n	8005e76 <__sfputs_r+0x22>
 8005e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6a:	463a      	mov	r2, r7
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f7ff ffda 	bl	8005e26 <__sfputc_r>
 8005e72:	1c43      	adds	r3, r0, #1
 8005e74:	d1f3      	bne.n	8005e5e <__sfputs_r+0xa>
 8005e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e78 <_vfiprintf_r>:
 8005e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	460d      	mov	r5, r1
 8005e7e:	b09d      	sub	sp, #116	@ 0x74
 8005e80:	4614      	mov	r4, r2
 8005e82:	4698      	mov	r8, r3
 8005e84:	4606      	mov	r6, r0
 8005e86:	b118      	cbz	r0, 8005e90 <_vfiprintf_r+0x18>
 8005e88:	6a03      	ldr	r3, [r0, #32]
 8005e8a:	b90b      	cbnz	r3, 8005e90 <_vfiprintf_r+0x18>
 8005e8c:	f7ff fcd4 	bl	8005838 <__sinit>
 8005e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e92:	07d9      	lsls	r1, r3, #31
 8005e94:	d405      	bmi.n	8005ea2 <_vfiprintf_r+0x2a>
 8005e96:	89ab      	ldrh	r3, [r5, #12]
 8005e98:	059a      	lsls	r2, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_vfiprintf_r+0x2a>
 8005e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e9e:	f7ff fdbe 	bl	8005a1e <__retarget_lock_acquire_recursive>
 8005ea2:	89ab      	ldrh	r3, [r5, #12]
 8005ea4:	071b      	lsls	r3, r3, #28
 8005ea6:	d501      	bpl.n	8005eac <_vfiprintf_r+0x34>
 8005ea8:	692b      	ldr	r3, [r5, #16]
 8005eaa:	b99b      	cbnz	r3, 8005ed4 <_vfiprintf_r+0x5c>
 8005eac:	4629      	mov	r1, r5
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f000 fac4 	bl	800643c <__swsetup_r>
 8005eb4:	b170      	cbz	r0, 8005ed4 <_vfiprintf_r+0x5c>
 8005eb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eb8:	07dc      	lsls	r4, r3, #31
 8005eba:	d504      	bpl.n	8005ec6 <_vfiprintf_r+0x4e>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	b01d      	add	sp, #116	@ 0x74
 8005ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	0598      	lsls	r0, r3, #22
 8005eca:	d4f7      	bmi.n	8005ebc <_vfiprintf_r+0x44>
 8005ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ece:	f7ff fda7 	bl	8005a20 <__retarget_lock_release_recursive>
 8005ed2:	e7f3      	b.n	8005ebc <_vfiprintf_r+0x44>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ed8:	2320      	movs	r3, #32
 8005eda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee2:	2330      	movs	r3, #48	@ 0x30
 8005ee4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006094 <_vfiprintf_r+0x21c>
 8005ee8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eec:	f04f 0901 	mov.w	r9, #1
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	469a      	mov	sl, r3
 8005ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ef8:	b10a      	cbz	r2, 8005efe <_vfiprintf_r+0x86>
 8005efa:	2a25      	cmp	r2, #37	@ 0x25
 8005efc:	d1f9      	bne.n	8005ef2 <_vfiprintf_r+0x7a>
 8005efe:	ebba 0b04 	subs.w	fp, sl, r4
 8005f02:	d00b      	beq.n	8005f1c <_vfiprintf_r+0xa4>
 8005f04:	465b      	mov	r3, fp
 8005f06:	4622      	mov	r2, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f7ff ffa2 	bl	8005e54 <__sfputs_r>
 8005f10:	3001      	adds	r0, #1
 8005f12:	f000 80a7 	beq.w	8006064 <_vfiprintf_r+0x1ec>
 8005f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f18:	445a      	add	r2, fp
 8005f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 809f 	beq.w	8006064 <_vfiprintf_r+0x1ec>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f30:	f10a 0a01 	add.w	sl, sl, #1
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	9307      	str	r3, [sp, #28]
 8005f38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f3e:	4654      	mov	r4, sl
 8005f40:	2205      	movs	r2, #5
 8005f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f46:	4853      	ldr	r0, [pc, #332]	@ (8006094 <_vfiprintf_r+0x21c>)
 8005f48:	f7fa f94a 	bl	80001e0 <memchr>
 8005f4c:	9a04      	ldr	r2, [sp, #16]
 8005f4e:	b9d8      	cbnz	r0, 8005f88 <_vfiprintf_r+0x110>
 8005f50:	06d1      	lsls	r1, r2, #27
 8005f52:	bf44      	itt	mi
 8005f54:	2320      	movmi	r3, #32
 8005f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f5a:	0713      	lsls	r3, r2, #28
 8005f5c:	bf44      	itt	mi
 8005f5e:	232b      	movmi	r3, #43	@ 0x2b
 8005f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f64:	f89a 3000 	ldrb.w	r3, [sl]
 8005f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f6a:	d015      	beq.n	8005f98 <_vfiprintf_r+0x120>
 8005f6c:	9a07      	ldr	r2, [sp, #28]
 8005f6e:	4654      	mov	r4, sl
 8005f70:	2000      	movs	r0, #0
 8005f72:	f04f 0c0a 	mov.w	ip, #10
 8005f76:	4621      	mov	r1, r4
 8005f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f7c:	3b30      	subs	r3, #48	@ 0x30
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	d94b      	bls.n	800601a <_vfiprintf_r+0x1a2>
 8005f82:	b1b0      	cbz	r0, 8005fb2 <_vfiprintf_r+0x13a>
 8005f84:	9207      	str	r2, [sp, #28]
 8005f86:	e014      	b.n	8005fb2 <_vfiprintf_r+0x13a>
 8005f88:	eba0 0308 	sub.w	r3, r0, r8
 8005f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f90:	4313      	orrs	r3, r2
 8005f92:	9304      	str	r3, [sp, #16]
 8005f94:	46a2      	mov	sl, r4
 8005f96:	e7d2      	b.n	8005f3e <_vfiprintf_r+0xc6>
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	1d19      	adds	r1, r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	9103      	str	r1, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bfbb      	ittet	lt
 8005fa4:	425b      	neglt	r3, r3
 8005fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8005faa:	9307      	strge	r3, [sp, #28]
 8005fac:	9307      	strlt	r3, [sp, #28]
 8005fae:	bfb8      	it	lt
 8005fb0:	9204      	strlt	r2, [sp, #16]
 8005fb2:	7823      	ldrb	r3, [r4, #0]
 8005fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fb6:	d10a      	bne.n	8005fce <_vfiprintf_r+0x156>
 8005fb8:	7863      	ldrb	r3, [r4, #1]
 8005fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fbc:	d132      	bne.n	8006024 <_vfiprintf_r+0x1ac>
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	1d1a      	adds	r2, r3, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	9203      	str	r2, [sp, #12]
 8005fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fca:	3402      	adds	r4, #2
 8005fcc:	9305      	str	r3, [sp, #20]
 8005fce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80060a4 <_vfiprintf_r+0x22c>
 8005fd2:	7821      	ldrb	r1, [r4, #0]
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	4650      	mov	r0, sl
 8005fd8:	f7fa f902 	bl	80001e0 <memchr>
 8005fdc:	b138      	cbz	r0, 8005fee <_vfiprintf_r+0x176>
 8005fde:	9b04      	ldr	r3, [sp, #16]
 8005fe0:	eba0 000a 	sub.w	r0, r0, sl
 8005fe4:	2240      	movs	r2, #64	@ 0x40
 8005fe6:	4082      	lsls	r2, r0
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	3401      	adds	r4, #1
 8005fec:	9304      	str	r3, [sp, #16]
 8005fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff2:	4829      	ldr	r0, [pc, #164]	@ (8006098 <_vfiprintf_r+0x220>)
 8005ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ff8:	2206      	movs	r2, #6
 8005ffa:	f7fa f8f1 	bl	80001e0 <memchr>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d03f      	beq.n	8006082 <_vfiprintf_r+0x20a>
 8006002:	4b26      	ldr	r3, [pc, #152]	@ (800609c <_vfiprintf_r+0x224>)
 8006004:	bb1b      	cbnz	r3, 800604e <_vfiprintf_r+0x1d6>
 8006006:	9b03      	ldr	r3, [sp, #12]
 8006008:	3307      	adds	r3, #7
 800600a:	f023 0307 	bic.w	r3, r3, #7
 800600e:	3308      	adds	r3, #8
 8006010:	9303      	str	r3, [sp, #12]
 8006012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006014:	443b      	add	r3, r7
 8006016:	9309      	str	r3, [sp, #36]	@ 0x24
 8006018:	e76a      	b.n	8005ef0 <_vfiprintf_r+0x78>
 800601a:	fb0c 3202 	mla	r2, ip, r2, r3
 800601e:	460c      	mov	r4, r1
 8006020:	2001      	movs	r0, #1
 8006022:	e7a8      	b.n	8005f76 <_vfiprintf_r+0xfe>
 8006024:	2300      	movs	r3, #0
 8006026:	3401      	adds	r4, #1
 8006028:	9305      	str	r3, [sp, #20]
 800602a:	4619      	mov	r1, r3
 800602c:	f04f 0c0a 	mov.w	ip, #10
 8006030:	4620      	mov	r0, r4
 8006032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006036:	3a30      	subs	r2, #48	@ 0x30
 8006038:	2a09      	cmp	r2, #9
 800603a:	d903      	bls.n	8006044 <_vfiprintf_r+0x1cc>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0c6      	beq.n	8005fce <_vfiprintf_r+0x156>
 8006040:	9105      	str	r1, [sp, #20]
 8006042:	e7c4      	b.n	8005fce <_vfiprintf_r+0x156>
 8006044:	fb0c 2101 	mla	r1, ip, r1, r2
 8006048:	4604      	mov	r4, r0
 800604a:	2301      	movs	r3, #1
 800604c:	e7f0      	b.n	8006030 <_vfiprintf_r+0x1b8>
 800604e:	ab03      	add	r3, sp, #12
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	462a      	mov	r2, r5
 8006054:	4b12      	ldr	r3, [pc, #72]	@ (80060a0 <_vfiprintf_r+0x228>)
 8006056:	a904      	add	r1, sp, #16
 8006058:	4630      	mov	r0, r6
 800605a:	f3af 8000 	nop.w
 800605e:	4607      	mov	r7, r0
 8006060:	1c78      	adds	r0, r7, #1
 8006062:	d1d6      	bne.n	8006012 <_vfiprintf_r+0x19a>
 8006064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006066:	07d9      	lsls	r1, r3, #31
 8006068:	d405      	bmi.n	8006076 <_vfiprintf_r+0x1fe>
 800606a:	89ab      	ldrh	r3, [r5, #12]
 800606c:	059a      	lsls	r2, r3, #22
 800606e:	d402      	bmi.n	8006076 <_vfiprintf_r+0x1fe>
 8006070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006072:	f7ff fcd5 	bl	8005a20 <__retarget_lock_release_recursive>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	065b      	lsls	r3, r3, #25
 800607a:	f53f af1f 	bmi.w	8005ebc <_vfiprintf_r+0x44>
 800607e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006080:	e71e      	b.n	8005ec0 <_vfiprintf_r+0x48>
 8006082:	ab03      	add	r3, sp, #12
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	462a      	mov	r2, r5
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <_vfiprintf_r+0x228>)
 800608a:	a904      	add	r1, sp, #16
 800608c:	4630      	mov	r0, r6
 800608e:	f000 f879 	bl	8006184 <_printf_i>
 8006092:	e7e4      	b.n	800605e <_vfiprintf_r+0x1e6>
 8006094:	080067e3 	.word	0x080067e3
 8006098:	080067ed 	.word	0x080067ed
 800609c:	00000000 	.word	0x00000000
 80060a0:	08005e55 	.word	0x08005e55
 80060a4:	080067e9 	.word	0x080067e9

080060a8 <_printf_common>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	4616      	mov	r6, r2
 80060ae:	4698      	mov	r8, r3
 80060b0:	688a      	ldr	r2, [r1, #8]
 80060b2:	690b      	ldr	r3, [r1, #16]
 80060b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	bfb8      	it	lt
 80060bc:	4613      	movlt	r3, r2
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060c4:	4607      	mov	r7, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	b10a      	cbz	r2, 80060ce <_printf_common+0x26>
 80060ca:	3301      	adds	r3, #1
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	0699      	lsls	r1, r3, #26
 80060d2:	bf42      	ittt	mi
 80060d4:	6833      	ldrmi	r3, [r6, #0]
 80060d6:	3302      	addmi	r3, #2
 80060d8:	6033      	strmi	r3, [r6, #0]
 80060da:	6825      	ldr	r5, [r4, #0]
 80060dc:	f015 0506 	ands.w	r5, r5, #6
 80060e0:	d106      	bne.n	80060f0 <_printf_common+0x48>
 80060e2:	f104 0a19 	add.w	sl, r4, #25
 80060e6:	68e3      	ldr	r3, [r4, #12]
 80060e8:	6832      	ldr	r2, [r6, #0]
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	42ab      	cmp	r3, r5
 80060ee:	dc26      	bgt.n	800613e <_printf_common+0x96>
 80060f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	3b00      	subs	r3, #0
 80060f8:	bf18      	it	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	0692      	lsls	r2, r2, #26
 80060fe:	d42b      	bmi.n	8006158 <_printf_common+0xb0>
 8006100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006104:	4641      	mov	r1, r8
 8006106:	4638      	mov	r0, r7
 8006108:	47c8      	blx	r9
 800610a:	3001      	adds	r0, #1
 800610c:	d01e      	beq.n	800614c <_printf_common+0xa4>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	6922      	ldr	r2, [r4, #16]
 8006112:	f003 0306 	and.w	r3, r3, #6
 8006116:	2b04      	cmp	r3, #4
 8006118:	bf02      	ittt	eq
 800611a:	68e5      	ldreq	r5, [r4, #12]
 800611c:	6833      	ldreq	r3, [r6, #0]
 800611e:	1aed      	subeq	r5, r5, r3
 8006120:	68a3      	ldr	r3, [r4, #8]
 8006122:	bf0c      	ite	eq
 8006124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006128:	2500      	movne	r5, #0
 800612a:	4293      	cmp	r3, r2
 800612c:	bfc4      	itt	gt
 800612e:	1a9b      	subgt	r3, r3, r2
 8006130:	18ed      	addgt	r5, r5, r3
 8006132:	2600      	movs	r6, #0
 8006134:	341a      	adds	r4, #26
 8006136:	42b5      	cmp	r5, r6
 8006138:	d11a      	bne.n	8006170 <_printf_common+0xc8>
 800613a:	2000      	movs	r0, #0
 800613c:	e008      	b.n	8006150 <_printf_common+0xa8>
 800613e:	2301      	movs	r3, #1
 8006140:	4652      	mov	r2, sl
 8006142:	4641      	mov	r1, r8
 8006144:	4638      	mov	r0, r7
 8006146:	47c8      	blx	r9
 8006148:	3001      	adds	r0, #1
 800614a:	d103      	bne.n	8006154 <_printf_common+0xac>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	3501      	adds	r5, #1
 8006156:	e7c6      	b.n	80060e6 <_printf_common+0x3e>
 8006158:	18e1      	adds	r1, r4, r3
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	2030      	movs	r0, #48	@ 0x30
 800615e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006162:	4422      	add	r2, r4
 8006164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800616c:	3302      	adds	r3, #2
 800616e:	e7c7      	b.n	8006100 <_printf_common+0x58>
 8006170:	2301      	movs	r3, #1
 8006172:	4622      	mov	r2, r4
 8006174:	4641      	mov	r1, r8
 8006176:	4638      	mov	r0, r7
 8006178:	47c8      	blx	r9
 800617a:	3001      	adds	r0, #1
 800617c:	d0e6      	beq.n	800614c <_printf_common+0xa4>
 800617e:	3601      	adds	r6, #1
 8006180:	e7d9      	b.n	8006136 <_printf_common+0x8e>
	...

08006184 <_printf_i>:
 8006184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	7e0f      	ldrb	r7, [r1, #24]
 800618a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800618c:	2f78      	cmp	r7, #120	@ 0x78
 800618e:	4691      	mov	r9, r2
 8006190:	4680      	mov	r8, r0
 8006192:	460c      	mov	r4, r1
 8006194:	469a      	mov	sl, r3
 8006196:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800619a:	d807      	bhi.n	80061ac <_printf_i+0x28>
 800619c:	2f62      	cmp	r7, #98	@ 0x62
 800619e:	d80a      	bhi.n	80061b6 <_printf_i+0x32>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	f000 80d1 	beq.w	8006348 <_printf_i+0x1c4>
 80061a6:	2f58      	cmp	r7, #88	@ 0x58
 80061a8:	f000 80b8 	beq.w	800631c <_printf_i+0x198>
 80061ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061b4:	e03a      	b.n	800622c <_printf_i+0xa8>
 80061b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061ba:	2b15      	cmp	r3, #21
 80061bc:	d8f6      	bhi.n	80061ac <_printf_i+0x28>
 80061be:	a101      	add	r1, pc, #4	@ (adr r1, 80061c4 <_printf_i+0x40>)
 80061c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061c4:	0800621d 	.word	0x0800621d
 80061c8:	08006231 	.word	0x08006231
 80061cc:	080061ad 	.word	0x080061ad
 80061d0:	080061ad 	.word	0x080061ad
 80061d4:	080061ad 	.word	0x080061ad
 80061d8:	080061ad 	.word	0x080061ad
 80061dc:	08006231 	.word	0x08006231
 80061e0:	080061ad 	.word	0x080061ad
 80061e4:	080061ad 	.word	0x080061ad
 80061e8:	080061ad 	.word	0x080061ad
 80061ec:	080061ad 	.word	0x080061ad
 80061f0:	0800632f 	.word	0x0800632f
 80061f4:	0800625b 	.word	0x0800625b
 80061f8:	080062e9 	.word	0x080062e9
 80061fc:	080061ad 	.word	0x080061ad
 8006200:	080061ad 	.word	0x080061ad
 8006204:	08006351 	.word	0x08006351
 8006208:	080061ad 	.word	0x080061ad
 800620c:	0800625b 	.word	0x0800625b
 8006210:	080061ad 	.word	0x080061ad
 8006214:	080061ad 	.word	0x080061ad
 8006218:	080062f1 	.word	0x080062f1
 800621c:	6833      	ldr	r3, [r6, #0]
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6032      	str	r2, [r6, #0]
 8006224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800622c:	2301      	movs	r3, #1
 800622e:	e09c      	b.n	800636a <_printf_i+0x1e6>
 8006230:	6833      	ldr	r3, [r6, #0]
 8006232:	6820      	ldr	r0, [r4, #0]
 8006234:	1d19      	adds	r1, r3, #4
 8006236:	6031      	str	r1, [r6, #0]
 8006238:	0606      	lsls	r6, r0, #24
 800623a:	d501      	bpl.n	8006240 <_printf_i+0xbc>
 800623c:	681d      	ldr	r5, [r3, #0]
 800623e:	e003      	b.n	8006248 <_printf_i+0xc4>
 8006240:	0645      	lsls	r5, r0, #25
 8006242:	d5fb      	bpl.n	800623c <_printf_i+0xb8>
 8006244:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006248:	2d00      	cmp	r5, #0
 800624a:	da03      	bge.n	8006254 <_printf_i+0xd0>
 800624c:	232d      	movs	r3, #45	@ 0x2d
 800624e:	426d      	negs	r5, r5
 8006250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006254:	4858      	ldr	r0, [pc, #352]	@ (80063b8 <_printf_i+0x234>)
 8006256:	230a      	movs	r3, #10
 8006258:	e011      	b.n	800627e <_printf_i+0xfa>
 800625a:	6821      	ldr	r1, [r4, #0]
 800625c:	6833      	ldr	r3, [r6, #0]
 800625e:	0608      	lsls	r0, r1, #24
 8006260:	f853 5b04 	ldr.w	r5, [r3], #4
 8006264:	d402      	bmi.n	800626c <_printf_i+0xe8>
 8006266:	0649      	lsls	r1, r1, #25
 8006268:	bf48      	it	mi
 800626a:	b2ad      	uxthmi	r5, r5
 800626c:	2f6f      	cmp	r7, #111	@ 0x6f
 800626e:	4852      	ldr	r0, [pc, #328]	@ (80063b8 <_printf_i+0x234>)
 8006270:	6033      	str	r3, [r6, #0]
 8006272:	bf14      	ite	ne
 8006274:	230a      	movne	r3, #10
 8006276:	2308      	moveq	r3, #8
 8006278:	2100      	movs	r1, #0
 800627a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800627e:	6866      	ldr	r6, [r4, #4]
 8006280:	60a6      	str	r6, [r4, #8]
 8006282:	2e00      	cmp	r6, #0
 8006284:	db05      	blt.n	8006292 <_printf_i+0x10e>
 8006286:	6821      	ldr	r1, [r4, #0]
 8006288:	432e      	orrs	r6, r5
 800628a:	f021 0104 	bic.w	r1, r1, #4
 800628e:	6021      	str	r1, [r4, #0]
 8006290:	d04b      	beq.n	800632a <_printf_i+0x1a6>
 8006292:	4616      	mov	r6, r2
 8006294:	fbb5 f1f3 	udiv	r1, r5, r3
 8006298:	fb03 5711 	mls	r7, r3, r1, r5
 800629c:	5dc7      	ldrb	r7, [r0, r7]
 800629e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062a2:	462f      	mov	r7, r5
 80062a4:	42bb      	cmp	r3, r7
 80062a6:	460d      	mov	r5, r1
 80062a8:	d9f4      	bls.n	8006294 <_printf_i+0x110>
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d10b      	bne.n	80062c6 <_printf_i+0x142>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	07df      	lsls	r7, r3, #31
 80062b2:	d508      	bpl.n	80062c6 <_printf_i+0x142>
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	6861      	ldr	r1, [r4, #4]
 80062b8:	4299      	cmp	r1, r3
 80062ba:	bfde      	ittt	le
 80062bc:	2330      	movle	r3, #48	@ 0x30
 80062be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062c6:	1b92      	subs	r2, r2, r6
 80062c8:	6122      	str	r2, [r4, #16]
 80062ca:	f8cd a000 	str.w	sl, [sp]
 80062ce:	464b      	mov	r3, r9
 80062d0:	aa03      	add	r2, sp, #12
 80062d2:	4621      	mov	r1, r4
 80062d4:	4640      	mov	r0, r8
 80062d6:	f7ff fee7 	bl	80060a8 <_printf_common>
 80062da:	3001      	adds	r0, #1
 80062dc:	d14a      	bne.n	8006374 <_printf_i+0x1f0>
 80062de:	f04f 30ff 	mov.w	r0, #4294967295
 80062e2:	b004      	add	sp, #16
 80062e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	f043 0320 	orr.w	r3, r3, #32
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	4832      	ldr	r0, [pc, #200]	@ (80063bc <_printf_i+0x238>)
 80062f2:	2778      	movs	r7, #120	@ 0x78
 80062f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	6831      	ldr	r1, [r6, #0]
 80062fc:	061f      	lsls	r7, r3, #24
 80062fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006302:	d402      	bmi.n	800630a <_printf_i+0x186>
 8006304:	065f      	lsls	r7, r3, #25
 8006306:	bf48      	it	mi
 8006308:	b2ad      	uxthmi	r5, r5
 800630a:	6031      	str	r1, [r6, #0]
 800630c:	07d9      	lsls	r1, r3, #31
 800630e:	bf44      	itt	mi
 8006310:	f043 0320 	orrmi.w	r3, r3, #32
 8006314:	6023      	strmi	r3, [r4, #0]
 8006316:	b11d      	cbz	r5, 8006320 <_printf_i+0x19c>
 8006318:	2310      	movs	r3, #16
 800631a:	e7ad      	b.n	8006278 <_printf_i+0xf4>
 800631c:	4826      	ldr	r0, [pc, #152]	@ (80063b8 <_printf_i+0x234>)
 800631e:	e7e9      	b.n	80062f4 <_printf_i+0x170>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	f023 0320 	bic.w	r3, r3, #32
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	e7f6      	b.n	8006318 <_printf_i+0x194>
 800632a:	4616      	mov	r6, r2
 800632c:	e7bd      	b.n	80062aa <_printf_i+0x126>
 800632e:	6833      	ldr	r3, [r6, #0]
 8006330:	6825      	ldr	r5, [r4, #0]
 8006332:	6961      	ldr	r1, [r4, #20]
 8006334:	1d18      	adds	r0, r3, #4
 8006336:	6030      	str	r0, [r6, #0]
 8006338:	062e      	lsls	r6, r5, #24
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	d501      	bpl.n	8006342 <_printf_i+0x1be>
 800633e:	6019      	str	r1, [r3, #0]
 8006340:	e002      	b.n	8006348 <_printf_i+0x1c4>
 8006342:	0668      	lsls	r0, r5, #25
 8006344:	d5fb      	bpl.n	800633e <_printf_i+0x1ba>
 8006346:	8019      	strh	r1, [r3, #0]
 8006348:	2300      	movs	r3, #0
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	4616      	mov	r6, r2
 800634e:	e7bc      	b.n	80062ca <_printf_i+0x146>
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	6032      	str	r2, [r6, #0]
 8006356:	681e      	ldr	r6, [r3, #0]
 8006358:	6862      	ldr	r2, [r4, #4]
 800635a:	2100      	movs	r1, #0
 800635c:	4630      	mov	r0, r6
 800635e:	f7f9 ff3f 	bl	80001e0 <memchr>
 8006362:	b108      	cbz	r0, 8006368 <_printf_i+0x1e4>
 8006364:	1b80      	subs	r0, r0, r6
 8006366:	6060      	str	r0, [r4, #4]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	2300      	movs	r3, #0
 800636e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006372:	e7aa      	b.n	80062ca <_printf_i+0x146>
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	4632      	mov	r2, r6
 8006378:	4649      	mov	r1, r9
 800637a:	4640      	mov	r0, r8
 800637c:	47d0      	blx	sl
 800637e:	3001      	adds	r0, #1
 8006380:	d0ad      	beq.n	80062de <_printf_i+0x15a>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	079b      	lsls	r3, r3, #30
 8006386:	d413      	bmi.n	80063b0 <_printf_i+0x22c>
 8006388:	68e0      	ldr	r0, [r4, #12]
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	4298      	cmp	r0, r3
 800638e:	bfb8      	it	lt
 8006390:	4618      	movlt	r0, r3
 8006392:	e7a6      	b.n	80062e2 <_printf_i+0x15e>
 8006394:	2301      	movs	r3, #1
 8006396:	4632      	mov	r2, r6
 8006398:	4649      	mov	r1, r9
 800639a:	4640      	mov	r0, r8
 800639c:	47d0      	blx	sl
 800639e:	3001      	adds	r0, #1
 80063a0:	d09d      	beq.n	80062de <_printf_i+0x15a>
 80063a2:	3501      	adds	r5, #1
 80063a4:	68e3      	ldr	r3, [r4, #12]
 80063a6:	9903      	ldr	r1, [sp, #12]
 80063a8:	1a5b      	subs	r3, r3, r1
 80063aa:	42ab      	cmp	r3, r5
 80063ac:	dcf2      	bgt.n	8006394 <_printf_i+0x210>
 80063ae:	e7eb      	b.n	8006388 <_printf_i+0x204>
 80063b0:	2500      	movs	r5, #0
 80063b2:	f104 0619 	add.w	r6, r4, #25
 80063b6:	e7f5      	b.n	80063a4 <_printf_i+0x220>
 80063b8:	080067f4 	.word	0x080067f4
 80063bc:	08006805 	.word	0x08006805

080063c0 <__swbuf_r>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	460e      	mov	r6, r1
 80063c4:	4614      	mov	r4, r2
 80063c6:	4605      	mov	r5, r0
 80063c8:	b118      	cbz	r0, 80063d2 <__swbuf_r+0x12>
 80063ca:	6a03      	ldr	r3, [r0, #32]
 80063cc:	b90b      	cbnz	r3, 80063d2 <__swbuf_r+0x12>
 80063ce:	f7ff fa33 	bl	8005838 <__sinit>
 80063d2:	69a3      	ldr	r3, [r4, #24]
 80063d4:	60a3      	str	r3, [r4, #8]
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	071a      	lsls	r2, r3, #28
 80063da:	d501      	bpl.n	80063e0 <__swbuf_r+0x20>
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	b943      	cbnz	r3, 80063f2 <__swbuf_r+0x32>
 80063e0:	4621      	mov	r1, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 f82a 	bl	800643c <__swsetup_r>
 80063e8:	b118      	cbz	r0, 80063f2 <__swbuf_r+0x32>
 80063ea:	f04f 37ff 	mov.w	r7, #4294967295
 80063ee:	4638      	mov	r0, r7
 80063f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	1a98      	subs	r0, r3, r2
 80063f8:	6963      	ldr	r3, [r4, #20]
 80063fa:	b2f6      	uxtb	r6, r6
 80063fc:	4283      	cmp	r3, r0
 80063fe:	4637      	mov	r7, r6
 8006400:	dc05      	bgt.n	800640e <__swbuf_r+0x4e>
 8006402:	4621      	mov	r1, r4
 8006404:	4628      	mov	r0, r5
 8006406:	f7ff fcbd 	bl	8005d84 <_fflush_r>
 800640a:	2800      	cmp	r0, #0
 800640c:	d1ed      	bne.n	80063ea <__swbuf_r+0x2a>
 800640e:	68a3      	ldr	r3, [r4, #8]
 8006410:	3b01      	subs	r3, #1
 8006412:	60a3      	str	r3, [r4, #8]
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	701e      	strb	r6, [r3, #0]
 800641c:	6962      	ldr	r2, [r4, #20]
 800641e:	1c43      	adds	r3, r0, #1
 8006420:	429a      	cmp	r2, r3
 8006422:	d004      	beq.n	800642e <__swbuf_r+0x6e>
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	07db      	lsls	r3, r3, #31
 8006428:	d5e1      	bpl.n	80063ee <__swbuf_r+0x2e>
 800642a:	2e0a      	cmp	r6, #10
 800642c:	d1df      	bne.n	80063ee <__swbuf_r+0x2e>
 800642e:	4621      	mov	r1, r4
 8006430:	4628      	mov	r0, r5
 8006432:	f7ff fca7 	bl	8005d84 <_fflush_r>
 8006436:	2800      	cmp	r0, #0
 8006438:	d0d9      	beq.n	80063ee <__swbuf_r+0x2e>
 800643a:	e7d6      	b.n	80063ea <__swbuf_r+0x2a>

0800643c <__swsetup_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4b29      	ldr	r3, [pc, #164]	@ (80064e4 <__swsetup_r+0xa8>)
 8006440:	4605      	mov	r5, r0
 8006442:	6818      	ldr	r0, [r3, #0]
 8006444:	460c      	mov	r4, r1
 8006446:	b118      	cbz	r0, 8006450 <__swsetup_r+0x14>
 8006448:	6a03      	ldr	r3, [r0, #32]
 800644a:	b90b      	cbnz	r3, 8006450 <__swsetup_r+0x14>
 800644c:	f7ff f9f4 	bl	8005838 <__sinit>
 8006450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006454:	0719      	lsls	r1, r3, #28
 8006456:	d422      	bmi.n	800649e <__swsetup_r+0x62>
 8006458:	06da      	lsls	r2, r3, #27
 800645a:	d407      	bmi.n	800646c <__swsetup_r+0x30>
 800645c:	2209      	movs	r2, #9
 800645e:	602a      	str	r2, [r5, #0]
 8006460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	f04f 30ff 	mov.w	r0, #4294967295
 800646a:	e033      	b.n	80064d4 <__swsetup_r+0x98>
 800646c:	0758      	lsls	r0, r3, #29
 800646e:	d512      	bpl.n	8006496 <__swsetup_r+0x5a>
 8006470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006472:	b141      	cbz	r1, 8006486 <__swsetup_r+0x4a>
 8006474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006478:	4299      	cmp	r1, r3
 800647a:	d002      	beq.n	8006482 <__swsetup_r+0x46>
 800647c:	4628      	mov	r0, r5
 800647e:	f7ff fafd 	bl	8005a7c <_free_r>
 8006482:	2300      	movs	r3, #0
 8006484:	6363      	str	r3, [r4, #52]	@ 0x34
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	2300      	movs	r3, #0
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	f043 0308 	orr.w	r3, r3, #8
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	b94b      	cbnz	r3, 80064b6 <__swsetup_r+0x7a>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ac:	d003      	beq.n	80064b6 <__swsetup_r+0x7a>
 80064ae:	4621      	mov	r1, r4
 80064b0:	4628      	mov	r0, r5
 80064b2:	f000 f883 	bl	80065bc <__smakebuf_r>
 80064b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ba:	f013 0201 	ands.w	r2, r3, #1
 80064be:	d00a      	beq.n	80064d6 <__swsetup_r+0x9a>
 80064c0:	2200      	movs	r2, #0
 80064c2:	60a2      	str	r2, [r4, #8]
 80064c4:	6962      	ldr	r2, [r4, #20]
 80064c6:	4252      	negs	r2, r2
 80064c8:	61a2      	str	r2, [r4, #24]
 80064ca:	6922      	ldr	r2, [r4, #16]
 80064cc:	b942      	cbnz	r2, 80064e0 <__swsetup_r+0xa4>
 80064ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064d2:	d1c5      	bne.n	8006460 <__swsetup_r+0x24>
 80064d4:	bd38      	pop	{r3, r4, r5, pc}
 80064d6:	0799      	lsls	r1, r3, #30
 80064d8:	bf58      	it	pl
 80064da:	6962      	ldrpl	r2, [r4, #20]
 80064dc:	60a2      	str	r2, [r4, #8]
 80064de:	e7f4      	b.n	80064ca <__swsetup_r+0x8e>
 80064e0:	2000      	movs	r0, #0
 80064e2:	e7f7      	b.n	80064d4 <__swsetup_r+0x98>
 80064e4:	2000001c 	.word	0x2000001c

080064e8 <_raise_r>:
 80064e8:	291f      	cmp	r1, #31
 80064ea:	b538      	push	{r3, r4, r5, lr}
 80064ec:	4605      	mov	r5, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	d904      	bls.n	80064fc <_raise_r+0x14>
 80064f2:	2316      	movs	r3, #22
 80064f4:	6003      	str	r3, [r0, #0]
 80064f6:	f04f 30ff 	mov.w	r0, #4294967295
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80064fe:	b112      	cbz	r2, 8006506 <_raise_r+0x1e>
 8006500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006504:	b94b      	cbnz	r3, 800651a <_raise_r+0x32>
 8006506:	4628      	mov	r0, r5
 8006508:	f000 f830 	bl	800656c <_getpid_r>
 800650c:	4622      	mov	r2, r4
 800650e:	4601      	mov	r1, r0
 8006510:	4628      	mov	r0, r5
 8006512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006516:	f000 b817 	b.w	8006548 <_kill_r>
 800651a:	2b01      	cmp	r3, #1
 800651c:	d00a      	beq.n	8006534 <_raise_r+0x4c>
 800651e:	1c59      	adds	r1, r3, #1
 8006520:	d103      	bne.n	800652a <_raise_r+0x42>
 8006522:	2316      	movs	r3, #22
 8006524:	6003      	str	r3, [r0, #0]
 8006526:	2001      	movs	r0, #1
 8006528:	e7e7      	b.n	80064fa <_raise_r+0x12>
 800652a:	2100      	movs	r1, #0
 800652c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006530:	4620      	mov	r0, r4
 8006532:	4798      	blx	r3
 8006534:	2000      	movs	r0, #0
 8006536:	e7e0      	b.n	80064fa <_raise_r+0x12>

08006538 <raise>:
 8006538:	4b02      	ldr	r3, [pc, #8]	@ (8006544 <raise+0xc>)
 800653a:	4601      	mov	r1, r0
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	f7ff bfd3 	b.w	80064e8 <_raise_r>
 8006542:	bf00      	nop
 8006544:	2000001c 	.word	0x2000001c

08006548 <_kill_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d07      	ldr	r5, [pc, #28]	@ (8006568 <_kill_r+0x20>)
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	602b      	str	r3, [r5, #0]
 8006556:	f7fa fa85 	bl	8000a64 <_kill>
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	d102      	bne.n	8006564 <_kill_r+0x1c>
 800655e:	682b      	ldr	r3, [r5, #0]
 8006560:	b103      	cbz	r3, 8006564 <_kill_r+0x1c>
 8006562:	6023      	str	r3, [r4, #0]
 8006564:	bd38      	pop	{r3, r4, r5, pc}
 8006566:	bf00      	nop
 8006568:	200011bc 	.word	0x200011bc

0800656c <_getpid_r>:
 800656c:	f7fa ba72 	b.w	8000a54 <_getpid>

08006570 <__swhatbuf_r>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	460c      	mov	r4, r1
 8006574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006578:	2900      	cmp	r1, #0
 800657a:	b096      	sub	sp, #88	@ 0x58
 800657c:	4615      	mov	r5, r2
 800657e:	461e      	mov	r6, r3
 8006580:	da0d      	bge.n	800659e <__swhatbuf_r+0x2e>
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	bf14      	ite	ne
 800658e:	2340      	movne	r3, #64	@ 0x40
 8006590:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006594:	2000      	movs	r0, #0
 8006596:	6031      	str	r1, [r6, #0]
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	b016      	add	sp, #88	@ 0x58
 800659c:	bd70      	pop	{r4, r5, r6, pc}
 800659e:	466a      	mov	r2, sp
 80065a0:	f000 f848 	bl	8006634 <_fstat_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	dbec      	blt.n	8006582 <__swhatbuf_r+0x12>
 80065a8:	9901      	ldr	r1, [sp, #4]
 80065aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065b2:	4259      	negs	r1, r3
 80065b4:	4159      	adcs	r1, r3
 80065b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065ba:	e7eb      	b.n	8006594 <__swhatbuf_r+0x24>

080065bc <__smakebuf_r>:
 80065bc:	898b      	ldrh	r3, [r1, #12]
 80065be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c0:	079d      	lsls	r5, r3, #30
 80065c2:	4606      	mov	r6, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	d507      	bpl.n	80065d8 <__smakebuf_r+0x1c>
 80065c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	2301      	movs	r3, #1
 80065d2:	6163      	str	r3, [r4, #20]
 80065d4:	b003      	add	sp, #12
 80065d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d8:	ab01      	add	r3, sp, #4
 80065da:	466a      	mov	r2, sp
 80065dc:	f7ff ffc8 	bl	8006570 <__swhatbuf_r>
 80065e0:	9f00      	ldr	r7, [sp, #0]
 80065e2:	4605      	mov	r5, r0
 80065e4:	4639      	mov	r1, r7
 80065e6:	4630      	mov	r0, r6
 80065e8:	f7ff fabc 	bl	8005b64 <_malloc_r>
 80065ec:	b948      	cbnz	r0, 8006602 <__smakebuf_r+0x46>
 80065ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f2:	059a      	lsls	r2, r3, #22
 80065f4:	d4ee      	bmi.n	80065d4 <__smakebuf_r+0x18>
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	f043 0302 	orr.w	r3, r3, #2
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	e7e2      	b.n	80065c8 <__smakebuf_r+0xc>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	6020      	str	r0, [r4, #0]
 8006606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	9b01      	ldr	r3, [sp, #4]
 800660e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006612:	b15b      	cbz	r3, 800662c <__smakebuf_r+0x70>
 8006614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006618:	4630      	mov	r0, r6
 800661a:	f000 f81d 	bl	8006658 <_isatty_r>
 800661e:	b128      	cbz	r0, 800662c <__smakebuf_r+0x70>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f023 0303 	bic.w	r3, r3, #3
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	431d      	orrs	r5, r3
 8006630:	81a5      	strh	r5, [r4, #12]
 8006632:	e7cf      	b.n	80065d4 <__smakebuf_r+0x18>

08006634 <_fstat_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4d07      	ldr	r5, [pc, #28]	@ (8006654 <_fstat_r+0x20>)
 8006638:	2300      	movs	r3, #0
 800663a:	4604      	mov	r4, r0
 800663c:	4608      	mov	r0, r1
 800663e:	4611      	mov	r1, r2
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	f7fa fa6f 	bl	8000b24 <_fstat>
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	d102      	bne.n	8006650 <_fstat_r+0x1c>
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	b103      	cbz	r3, 8006650 <_fstat_r+0x1c>
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	bd38      	pop	{r3, r4, r5, pc}
 8006652:	bf00      	nop
 8006654:	200011bc 	.word	0x200011bc

08006658 <_isatty_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4d06      	ldr	r5, [pc, #24]	@ (8006674 <_isatty_r+0x1c>)
 800665c:	2300      	movs	r3, #0
 800665e:	4604      	mov	r4, r0
 8006660:	4608      	mov	r0, r1
 8006662:	602b      	str	r3, [r5, #0]
 8006664:	f7fa fa6e 	bl	8000b44 <_isatty>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d102      	bne.n	8006672 <_isatty_r+0x1a>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	b103      	cbz	r3, 8006672 <_isatty_r+0x1a>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	200011bc 	.word	0x200011bc

08006678 <_init>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr

08006684 <_fini>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr
