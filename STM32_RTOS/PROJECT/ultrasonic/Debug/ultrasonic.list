
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b704  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800b898  0800b898  0000c898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd44  0800bd44  0000d1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bd44  0800bd44  0000cd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd4c  0800bd4c  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd4c  0800bd4c  0000cd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd50  0800bd50  0000cd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800bd54  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000089e8  200001dc  0800bf30  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008bc4  0800bf30  0000dbc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001978c  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003720  00000000  00000000  00026998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  0002a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c8  00000000  00000000  0002b8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a802  00000000  00000000  0002cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b093  00000000  00000000  000573a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010578d  00000000  00000000  00072435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177bc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000773c  00000000  00000000  00177c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0017f344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b87c 	.word	0x0800b87c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b87c 	.word	0x0800b87c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <vApplicationGetIdleTaskMemory+0x30>)
 8000f8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f92:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	200001f8 	.word	0x200001f8
 8000fa4:	2000024c 	.word	0x2000024c

08000fa8 <W25Qxx_ReadSR1>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
// ================== Read Status Register-1 ==================
static uint8_t W25Qxx_ReadSR1(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x05; // Command: Read Status Register-1
 8000fae:	2305      	movs	r3, #5
 8000fb0:	71fb      	strb	r3, [r7, #7]
    uint8_t sr1 = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71bb      	strb	r3, [r7, #6]

    W25Q_CS_LOW();                                   // select flash chip
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <W25Qxx_ReadSR1+0x48>)
 8000fbe:	f001 fc05 	bl	80027cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, 100);          // send command
 8000fc2:	1df9      	adds	r1, r7, #7
 8000fc4:	2364      	movs	r3, #100	@ 0x64
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	480a      	ldr	r0, [pc, #40]	@ (8000ff4 <W25Qxx_ReadSR1+0x4c>)
 8000fca:	f003 fb00 	bl	80045ce <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &sr1, 1, 100);           // read one byte (status register value)
 8000fce:	1db9      	adds	r1, r7, #6
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4807      	ldr	r0, [pc, #28]	@ (8000ff4 <W25Qxx_ReadSR1+0x4c>)
 8000fd6:	f003 fc70 	bl	80048ba <HAL_SPI_Receive>
    W25Q_CS_HIGH();                                  // release flash chip
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe0:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <W25Qxx_ReadSR1+0x48>)
 8000fe2:	f001 fbf3 	bl	80027cc <HAL_GPIO_WritePin>

    return sr1;                                      // return status value
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	48000400 	.word	0x48000400
 8000ff4:	20001270 	.word	0x20001270

08000ff8 <W25Qxx_WaitBusy>:

// ================== Wait until flash is not busy ==================
static void W25Qxx_WaitBusy(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    // WIP bit (bit0) = 1 while flash is busy (erase/program in progress)
    while (W25Qxx_ReadSR1() & 0x01)
 8000ffc:	e002      	b.n	8001004 <W25Qxx_WaitBusy+0xc>
    {
        osDelay(1); // small delay so other tasks can run
 8000ffe:	2001      	movs	r0, #1
 8001000:	f005 fe8a 	bl	8006d18 <osDelay>
    while (W25Qxx_ReadSR1() & 0x01)
 8001004:	f7ff ffd0 	bl	8000fa8 <W25Qxx_ReadSR1>
 8001008:	4603      	mov	r3, r0
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f5      	bne.n	8000ffe <W25Qxx_WaitBusy+0x6>
    }
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <W25Qxx_EraseSector>:

// ================== Erase one sector (4KB) ==================
void W25Qxx_EraseSector(uint32_t addr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint8_t we = 0x06;   // Write Enable command
 8001020:	2306      	movs	r3, #6
 8001022:	72fb      	strb	r3, [r7, #11]

    // --- Send Write Enable ---
    W25Q_CS_LOW();
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800102a:	481d      	ldr	r0, [pc, #116]	@ (80010a0 <W25Qxx_EraseSector+0x88>)
 800102c:	f001 fbce 	bl	80027cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &we, 1, HAL_MAX_DELAY);
 8001030:	f107 010b 	add.w	r1, r7, #11
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	2201      	movs	r2, #1
 800103a:	481a      	ldr	r0, [pc, #104]	@ (80010a4 <W25Qxx_EraseSector+0x8c>)
 800103c:	f003 fac7 	bl	80045ce <HAL_SPI_Transmit>
    W25Q_CS_HIGH();
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001046:	4816      	ldr	r0, [pc, #88]	@ (80010a0 <W25Qxx_EraseSector+0x88>)
 8001048:	f001 fbc0 	bl	80027cc <HAL_GPIO_WritePin>

    // --- Sector Erase command + 24-bit address ---
    cmd[0] = 0x20;                         // Sector Erase (4KB)
 800104c:	2320      	movs	r3, #32
 800104e:	733b      	strb	r3, [r7, #12]
    cmd[1] = (addr >> 16) & 0xFF;          // address byte 2
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	0c1b      	lsrs	r3, r3, #16
 8001054:	b2db      	uxtb	r3, r3
 8001056:	737b      	strb	r3, [r7, #13]
    cmd[2] = (addr >> 8) & 0xFF;           // address byte 1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0a1b      	lsrs	r3, r3, #8
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73bb      	strb	r3, [r7, #14]
    cmd[3] = addr & 0xFF;                  // address byte 0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	73fb      	strb	r3, [r7, #15]

    W25Q_CS_LOW();
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <W25Qxx_EraseSector+0x88>)
 800106e:	f001 fbad 	bl	80027cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 8001072:	f107 010c 	add.w	r1, r7, #12
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	2204      	movs	r2, #4
 800107c:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <W25Qxx_EraseSector+0x8c>)
 800107e:	f003 faa6 	bl	80045ce <HAL_SPI_Transmit>
    W25Q_CS_HIGH();
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <W25Qxx_EraseSector+0x88>)
 800108a:	f001 fb9f 	bl	80027cc <HAL_GPIO_WritePin>

    W25Qxx_WaitBusy();                     // wait until erase finished
 800108e:	f7ff ffb3 	bl	8000ff8 <W25Qxx_WaitBusy>
    HAL_Delay(50);                         // extra wait (~50ms typical erase time)
 8001092:	2032      	movs	r0, #50	@ 0x32
 8001094:	f001 f8ba 	bl	800220c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	48000400 	.word	0x48000400
 80010a4:	20001270 	.word	0x20001270

080010a8 <W25Qxx_Init>:

// ================== Read flash JEDEC ID ==================
void W25Qxx_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	@ 0x40
 80010ac:	af02      	add	r7, sp, #8
    uint8_t cmd = 0x9F; // Read JEDEC ID command
 80010ae:	239f      	movs	r3, #159	@ 0x9f
 80010b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t id[3];      // buffer for manufacturer/device ID
    char buf[50];

    W25Q_CS_LOW();
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ba:	481b      	ldr	r0, [pc, #108]	@ (8001128 <W25Qxx_Init+0x80>)
 80010bc:	f001 fb86 	bl	80027cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);  // send command
 80010c0:	f107 0137 	add.w	r1, r7, #55	@ 0x37
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2201      	movs	r2, #1
 80010ca:	4818      	ldr	r0, [pc, #96]	@ (800112c <W25Qxx_Init+0x84>)
 80010cc:	f003 fa7f 	bl	80045ce <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, id, 3, HAL_MAX_DELAY);     // read 3 ID bytes
 80010d0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	2203      	movs	r2, #3
 80010da:	4814      	ldr	r0, [pc, #80]	@ (800112c <W25Qxx_Init+0x84>)
 80010dc:	f003 fbed 	bl	80048ba <HAL_SPI_Receive>
    W25Q_CS_HIGH();
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e6:	4810      	ldr	r0, [pc, #64]	@ (8001128 <W25Qxx_Init+0x80>)
 80010e8:	f001 fb70 	bl	80027cc <HAL_GPIO_WritePin>

    // Print ID over UART (e.g. EF 40 17 for W25Q64)
    sprintf(buf, "W25Q ID: %02X %02X %02X\r\n", id[0], id[1], id[2]);
 80010ec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80010f0:	461a      	mov	r2, r3
 80010f2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80010f6:	4619      	mov	r1, r3
 80010f8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80010fc:	4638      	mov	r0, r7
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	460b      	mov	r3, r1
 8001102:	490b      	ldr	r1, [pc, #44]	@ (8001130 <W25Qxx_Init+0x88>)
 8001104:	f008 fa86 	bl	8009614 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 1000);
 8001108:	463b      	mov	r3, r7
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f8b0 	bl	8000270 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4639      	mov	r1, r7
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	4806      	ldr	r0, [pc, #24]	@ (8001134 <W25Qxx_Init+0x8c>)
 800111c:	f005 f834 	bl	8006188 <HAL_UART_Transmit>
}
 8001120:	bf00      	nop
 8001122:	3738      	adds	r7, #56	@ 0x38
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	48000400 	.word	0x48000400
 800112c:	20001270 	.word	0x20001270
 8001130:	0800b898 	.word	0x0800b898
 8001134:	20001320 	.word	0x20001320

08001138 <W25Qxx_Read>:

// ================== Read data from flash ==================
void W25Qxx_Read(uint32_t addr, uint8_t *buffer, uint16_t size)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4613      	mov	r3, r2
 8001144:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];

    // --- Read Data command + 24-bit address ---
    cmd[0] = 0x03;                         // Read command
 8001146:	2303      	movs	r3, #3
 8001148:	753b      	strb	r3, [r7, #20]
    cmd[1] = (addr >> 16) & 0xFF;          // address byte 2
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	0c1b      	lsrs	r3, r3, #16
 800114e:	b2db      	uxtb	r3, r3
 8001150:	757b      	strb	r3, [r7, #21]
    cmd[2] = (addr >> 8) & 0xFF;           // address byte 1
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	b2db      	uxtb	r3, r3
 8001158:	75bb      	strb	r3, [r7, #22]
    cmd[3] = addr & 0xFF;                  // address byte 0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	75fb      	strb	r3, [r7, #23]

    W25Q_CS_LOW();
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001166:	480e      	ldr	r0, [pc, #56]	@ (80011a0 <W25Qxx_Read+0x68>)
 8001168:	f001 fb30 	bl	80027cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);   // send command + address
 800116c:	f107 0114 	add.w	r1, r7, #20
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	2204      	movs	r2, #4
 8001176:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <W25Qxx_Read+0x6c>)
 8001178:	f003 fa29 	bl	80045ce <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, buffer, size, HAL_MAX_DELAY); // read 'size' bytes into buffer
 800117c:	88fa      	ldrh	r2, [r7, #6]
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <W25Qxx_Read+0x6c>)
 8001186:	f003 fb98 	bl	80048ba <HAL_SPI_Receive>
    W25Q_CS_HIGH();
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001190:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <W25Qxx_Read+0x68>)
 8001192:	f001 fb1b 	bl	80027cc <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	48000400 	.word	0x48000400
 80011a4:	20001270 	.word	0x20001270

080011a8 <W25Qxx_Write>:

// ================== Write data to flash ==================
void W25Qxx_Write(uint32_t addr, uint8_t *buffer, uint16_t size)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    uint8_t we = 0x06;   // Write Enable command
 80011b6:	2306      	movs	r3, #6
 80011b8:	74fb      	strb	r3, [r7, #19]

    // --- Send Write Enable ---
    W25Q_CS_LOW();
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c0:	481f      	ldr	r0, [pc, #124]	@ (8001240 <W25Qxx_Write+0x98>)
 80011c2:	f001 fb03 	bl	80027cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &we, 1, HAL_MAX_DELAY);
 80011c6:	f107 0113 	add.w	r1, r7, #19
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	2201      	movs	r2, #1
 80011d0:	481c      	ldr	r0, [pc, #112]	@ (8001244 <W25Qxx_Write+0x9c>)
 80011d2:	f003 f9fc 	bl	80045ce <HAL_SPI_Transmit>
    W25Q_CS_HIGH();
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011dc:	4818      	ldr	r0, [pc, #96]	@ (8001240 <W25Qxx_Write+0x98>)
 80011de:	f001 faf5 	bl	80027cc <HAL_GPIO_WritePin>

    // --- Page Program command + 24-bit address ---
    cmd[0] = 0x02;                         // Page Program
 80011e2:	2302      	movs	r3, #2
 80011e4:	753b      	strb	r3, [r7, #20]
    cmd[1] = (addr >> 16) & 0xFF;          // address byte 2
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	0c1b      	lsrs	r3, r3, #16
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	757b      	strb	r3, [r7, #21]
    cmd[2] = (addr >> 8) & 0xFF;           // address byte 1
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	75bb      	strb	r3, [r7, #22]
    cmd[3] = addr & 0xFF;                  // address byte 0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	75fb      	strb	r3, [r7, #23]

    W25Q_CS_LOW();
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001202:	480f      	ldr	r0, [pc, #60]	@ (8001240 <W25Qxx_Write+0x98>)
 8001204:	f001 fae2 	bl	80027cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);   // send command + address
 8001208:	f107 0114 	add.w	r1, r7, #20
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	2204      	movs	r2, #4
 8001212:	480c      	ldr	r0, [pc, #48]	@ (8001244 <W25Qxx_Write+0x9c>)
 8001214:	f003 f9db 	bl	80045ce <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, buffer, size, HAL_MAX_DELAY); // send data to program
 8001218:	88fa      	ldrh	r2, [r7, #6]
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	4808      	ldr	r0, [pc, #32]	@ (8001244 <W25Qxx_Write+0x9c>)
 8001222:	f003 f9d4 	bl	80045ce <HAL_SPI_Transmit>
    W25Q_CS_HIGH();                                       // release chip
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800122c:	4804      	ldr	r0, [pc, #16]	@ (8001240 <W25Qxx_Write+0x98>)
 800122e:	f001 facd 	bl	80027cc <HAL_GPIO_WritePin>

    W25Qxx_WaitBusy();                     // wait until program finished
 8001232:	f7ff fee1 	bl	8000ff8 <W25Qxx_WaitBusy>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	48000400 	.word	0x48000400
 8001244:	20001270 	.word	0x20001270

08001248 <W25Qxx_WriteFloat>:

// ================== Write one float value ==================
void W25Qxx_WriteFloat(uint32_t addr, float value)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	ed87 0a00 	vstr	s0, [r7]
    uint8_t buffer[4];
    memcpy(buffer, &value, sizeof(float));  // copy float into 4-byte buffer
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	60fb      	str	r3, [r7, #12]
    W25Qxx_Write(addr, buffer, sizeof(float)); // write 4 bytes to flash
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2204      	movs	r2, #4
 800125e:	4619      	mov	r1, r3
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffa1 	bl	80011a8 <W25Qxx_Write>
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <W25Qxx_ReadFloat>:

// ================== Read one float value ==================
float W25Qxx_ReadFloat(uint32_t addr)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    float value;
    W25Qxx_Read(addr, buffer, sizeof(float)); // read 4 bytes from flash
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2204      	movs	r2, #4
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff5a 	bl	8001138 <W25Qxx_Read>
    memcpy(&value, buffer, sizeof(float));    // copy into float variable
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	60bb      	str	r3, [r7, #8]
    return value;
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	ee07 3a90 	vmov	s15, r3
}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HCSR04_Trigger>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to send a 10µs pulse to TRIG pin
void HCSR04_Trigger(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  //SET TRIG high
 800129e:	2201      	movs	r2, #1
 80012a0:	2102      	movs	r1, #2
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a6:	f001 fa91 	bl	80027cc <HAL_GPIO_WritePin>
 // HAL_Delay(0);  // Wait few cycles
  for (volatile int i = 0; i < 160; i++);  // ~10 µs at 16 MHz
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	e002      	b.n	80012b6 <HCSR04_Trigger+0x1e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b9f      	cmp	r3, #159	@ 0x9f
 80012ba:	ddf9      	ble.n	80012b0 <HCSR04_Trigger+0x18>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  //SET TRIG low
 80012bc:	2200      	movs	r2, #0
 80012be:	2102      	movs	r1, #2
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c4:	f001 fa82 	bl	80027cc <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <Start_HCSR04>:

// Start ultrasonic measurement
void Start_HCSR04(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  is_first_capture = 0;                                   // Reset capture flag
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <Start_HCSR04+0x1c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);             // Start Input Capture interrupt
 80012da:	2100      	movs	r1, #0
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <Start_HCSR04+0x20>)
 80012de:	f004 f857 	bl	8005390 <HAL_TIM_IC_Start_IT>
  HCSR04_Trigger();                                       // Trigger sensor
 80012e2:	f7ff ffd9 	bl	8001298 <HCSR04_Trigger>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200013cc 	.word	0x200013cc
 80012f0:	200012d4 	.word	0x200012d4
 80012f4:	00000000 	.word	0x00000000

080012f8 <HAL_TIM_IC_CaptureCallback>:

// Input Capture interrupt callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)          // Check channel
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7f1b      	ldrb	r3, [r3, #28]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d175      	bne.n	80013f4 <HAL_TIM_IC_CaptureCallback+0xfc>
  {
    if (is_first_capture == 0) // First edge (rising)
 8001308:	4b3f      	ldr	r3, [pc, #252]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x110>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d11a      	bne.n	8001346 <HAL_TIM_IC_CaptureCallback+0x4e>
    {
      ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Read first value
 8001310:	2100      	movs	r1, #0
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f004 fbe8 	bl	8005ae8 <HAL_TIM_ReadCapturedValue>
 8001318:	4603      	mov	r3, r0
 800131a:	4a3c      	ldr	r2, [pc, #240]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x114>)
 800131c:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); // Switch to falling edge
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 020a 	bic.w	r2, r2, #10
 800132c:	621a      	str	r2, [r3, #32]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a1a      	ldr	r2, [r3, #32]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0202 	orr.w	r2, r2, #2
 800133c:	621a      	str	r2, [r3, #32]
      is_first_capture = 1;  // Mark first capture done
 800133e:	4b32      	ldr	r3, [pc, #200]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]

      // Convert to distance (speed of sound 0.0343 cm/µs, divide by 2 for round trip)
      distance_cm = (float)diff * 0.0343 / 2.0;
    }
  }
}
 8001344:	e056      	b.n	80013f4 <HAL_TIM_IC_CaptureCallback+0xfc>
    else if (is_first_capture == 1) // Second edge (falling)
 8001346:	4b30      	ldr	r3, [pc, #192]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d152      	bne.n	80013f4 <HAL_TIM_IC_CaptureCallback+0xfc>
      ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Read second value
 800134e:	2100      	movs	r1, #0
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f004 fbc9 	bl	8005ae8 <HAL_TIM_ReadCapturedValue>
 8001356:	4603      	mov	r3, r0
 8001358:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <HAL_TIM_IC_CaptureCallback+0x118>)
 800135a:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // Switch back to rising
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6a1a      	ldr	r2, [r3, #32]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 020a 	bic.w	r2, r2, #10
 800136a:	621a      	str	r2, [r3, #32]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6a12      	ldr	r2, [r2, #32]
 8001376:	621a      	str	r2, [r3, #32]
      HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);                   // Stop capture
 8001378:	2100      	movs	r1, #0
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f004 f952 	bl	8005624 <HAL_TIM_IC_Stop_IT>
      if (ic_val2 > ic_val1)
 8001380:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b21      	ldr	r3, [pc, #132]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d907      	bls.n	800139c <HAL_TIM_IC_CaptureCallback+0xa4>
        diff = ic_val2 - ic_val1;
 800138c:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <HAL_TIM_IC_CaptureCallback+0x118>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	4a1f      	ldr	r2, [pc, #124]	@ (8001414 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e009      	b.n	80013b0 <HAL_TIM_IC_CaptureCallback+0xb8>
        diff = (0xFFFF - ic_val1 + ic_val2);
 800139c:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <HAL_TIM_IC_CaptureCallback+0x118>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x114>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80013aa:	33ff      	adds	r3, #255	@ 0xff
 80013ac:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80013ae:	6013      	str	r3, [r2, #0]
      distance_cm = (float)diff * 0.0343 / 2.0;
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013bc:	ee17 0a90 	vmov	r0, s15
 80013c0:	f7ff f8c2 	bl	8000548 <__aeabi_f2d>
 80013c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001400 <HAL_TIM_IC_CaptureCallback+0x108>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f915 	bl	80005f8 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013de:	f7ff fa35 	bl	800084c <__aeabi_ddiv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fbdd 	bl	8000ba8 <__aeabi_d2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a09      	ldr	r2, [pc, #36]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x120>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	f3af 8000 	nop.w
 8001400:	04816f00 	.word	0x04816f00
 8001404:	3fa18fc5 	.word	0x3fa18fc5
 8001408:	200013cc 	.word	0x200013cc
 800140c:	200013c0 	.word	0x200013c0
 8001410:	200013c4 	.word	0x200013c4
 8001414:	200013c8 	.word	0x200013c8
 8001418:	200013d0 	.word	0x200013d0

0800141c <sensorTask>:


// ================== Sensor Task ==================
void sensorTask(void *argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    while(1)
    {
        Start_HCSR04();                          // trigger ultrasonic measurement
 8001424:	f7ff ff54 	bl	80012d0 <Start_HCSR04>
   //   HAL_Delay(100);                          // (not used, we rely on vTaskDelay)
        xQueueSend(distance_q, &distance_cm, 0); // send the latest distance value to the queue
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <sensorTask+0x24>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	2200      	movs	r2, #0
 8001430:	4904      	ldr	r1, [pc, #16]	@ (8001444 <sensorTask+0x28>)
 8001432:	f005 fdfd 	bl	8007030 <xQueueGenericSend>
        vTaskDelay(pdMS_TO_TICKS(100));          // wait 100 ms before next measurement
 8001436:	2064      	movs	r0, #100	@ 0x64
 8001438:	f006 fa86 	bl	8007948 <vTaskDelay>
        Start_HCSR04();                          // trigger ultrasonic measurement
 800143c:	bf00      	nop
 800143e:	e7f1      	b.n	8001424 <sensorTask+0x8>
 8001440:	200013bc 	.word	0x200013bc
 8001444:	200013d0 	.word	0x200013d0

08001448 <flashTask>:
    }
}

// ================== Flash Task ==================
void flashTask(void *argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    static uint32_t flashAddr = 0x0001;          // flash write pointer

    while(1)
    {
        // Wait until a distance value is available in the queue
        if(xQueueReceive(distance_q, &dist, portMAX_DELAY))
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <flashTask+0x94>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f107 0118 	add.w	r1, r7, #24
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	4618      	mov	r0, r3
 800145e:	f005 fee9 	bl	8007234 <xQueueReceive>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f3      	beq.n	8001450 <flashTask+0x8>
        {
            W25Qxx_WriteFloat(flashAddr, dist);  // write distance value to flash at current address
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <flashTask+0x98>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fee7 	bl	8001248 <W25Qxx_WriteFloat>
            flashAddr += 4;                      // move write pointer
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <flashTask+0x98>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <flashTask+0x98>)
 8001482:	6013      	str	r3, [r2, #0]

            if(flashAddr >= 0x100000)            // if we reach end of memory (1 MB), wrap back to start
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <flashTask+0x98>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800148c:	d305      	bcc.n	800149a <flashTask+0x52>
            {
            	W25Qxx_EraseSector(0x0000);     //erase sector
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff fdc2 	bl	8001018 <W25Qxx_EraseSector>
            	flashAddr = 0;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <flashTask+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
            }

            dist1 = W25Qxx_ReadFloat(flashAddr); // read back value from flash (for verification/debug)
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <flashTask+0x98>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fee5 	bl	800126e <W25Qxx_ReadFloat>
 80014a4:	ed87 0a07 	vstr	s0, [r7, #28]

            sprintf(c, "%.2f\r\n", dist1);       // format the read value as string
 80014a8:	69f8      	ldr	r0, [r7, #28]
 80014aa:	f7ff f84d 	bl	8000548 <__aeabi_f2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	f107 0008 	add.w	r0, r7, #8
 80014b6:	490b      	ldr	r1, [pc, #44]	@ (80014e4 <flashTask+0x9c>)
 80014b8:	f008 f8ac 	bl	8009614 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)c, strlen(c), 1000); // send value over UART
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fed5 	bl	8000270 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f107 0108 	add.w	r1, r7, #8
 80014ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <flashTask+0xa0>)
 80014d4:	f004 fe58 	bl	8006188 <HAL_UART_Transmit>
        if(xQueueReceive(distance_q, &dist, portMAX_DELAY))
 80014d8:	e7ba      	b.n	8001450 <flashTask+0x8>
 80014da:	bf00      	nop
 80014dc:	200013bc 	.word	0x200013bc
 80014e0:	20000000 	.word	0x20000000
 80014e4:	0800b8b4 	.word	0x0800b8b4
 80014e8:	20001320 	.word	0x20001320

080014ec <alertTask>:
    }
}

// ================== Alert Task ==================
void alertTask(void *argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    float dist;

    while(1)
    {
        // Wait until a distance value is available in the queue
        if(xQueueReceive(distance_q, &dist, portMAX_DELAY))
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <alertTask+0x50>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f107 010c 	add.w	r1, r7, #12
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	4618      	mov	r0, r3
 8001502:	f005 fe97 	bl	8007234 <xQueueReceive>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f3      	beq.n	80014f4 <alertTask+0x8>
        {
            if(dist < 30)  // threshold: if object is closer than 30 cm
 800150c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001510:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	d506      	bpl.n	800152c <alertTask+0x40>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // turn LED ON (alert)
 800151e:	2201      	movs	r2, #1
 8001520:	2120      	movs	r1, #32
 8001522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001526:	f001 f951 	bl	80027cc <HAL_GPIO_WritePin>
 800152a:	e7e3      	b.n	80014f4 <alertTask+0x8>
            else
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // turn LED OFF
 800152c:	2200      	movs	r2, #0
 800152e:	2120      	movs	r1, #32
 8001530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001534:	f001 f94a 	bl	80027cc <HAL_GPIO_WritePin>
        if(xQueueReceive(distance_q, &dist, portMAX_DELAY))
 8001538:	e7dc      	b.n	80014f4 <alertTask+0x8>
 800153a:	bf00      	nop
 800153c:	200013bc 	.word	0x200013bc

08001540 <uartTask>:
    }
}

// UART Task
void uartTask(void *argument)
{
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	b09b      	sub	sp, #108	@ 0x6c
 8001544:	af06      	add	r7, sp, #24
 8001546:	60f8      	str	r0, [r7, #12]
    char msg[64];
    while(1)
    {
    	// Read current RTC time and date
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001548:	2200      	movs	r2, #0
 800154a:	4920      	ldr	r1, [pc, #128]	@ (80015cc <uartTask+0x8c>)
 800154c:	4820      	ldr	r0, [pc, #128]	@ (80015d0 <uartTask+0x90>)
 800154e:	f002 fd9a 	bl	8004086 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001552:	2200      	movs	r2, #0
 8001554:	491f      	ldr	r1, [pc, #124]	@ (80015d4 <uartTask+0x94>)
 8001556:	481e      	ldr	r0, [pc, #120]	@ (80015d0 <uartTask+0x90>)
 8001558:	f002 fe78 	bl	800424c <HAL_RTC_GetDate>
    	// Format time/date into string
    	sprintf(msg, "Distance: %.2fcm Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",distance_cm,sTime.Hours, sTime.Minutes, sTime.Seconds,
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <uartTask+0x98>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4918      	ldr	r1, [pc, #96]	@ (80015cc <uartTask+0x8c>)
 800156c:	7809      	ldrb	r1, [r1, #0]
 800156e:	460c      	mov	r4, r1
 8001570:	4916      	ldr	r1, [pc, #88]	@ (80015cc <uartTask+0x8c>)
 8001572:	7849      	ldrb	r1, [r1, #1]
 8001574:	460d      	mov	r5, r1
 8001576:	4915      	ldr	r1, [pc, #84]	@ (80015cc <uartTask+0x8c>)
 8001578:	7889      	ldrb	r1, [r1, #2]
 800157a:	460e      	mov	r6, r1
    	              sDate.Date, sDate.Month, sDate.Year);
 800157c:	4915      	ldr	r1, [pc, #84]	@ (80015d4 <uartTask+0x94>)
 800157e:	7889      	ldrb	r1, [r1, #2]
    	sprintf(msg, "Distance: %.2fcm Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",distance_cm,sTime.Hours, sTime.Minutes, sTime.Seconds,
 8001580:	60b9      	str	r1, [r7, #8]
    	              sDate.Date, sDate.Month, sDate.Year);
 8001582:	4914      	ldr	r1, [pc, #80]	@ (80015d4 <uartTask+0x94>)
 8001584:	7849      	ldrb	r1, [r1, #1]
    	sprintf(msg, "Distance: %.2fcm Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",distance_cm,sTime.Hours, sTime.Minutes, sTime.Seconds,
 8001586:	6079      	str	r1, [r7, #4]
    	              sDate.Date, sDate.Month, sDate.Year);
 8001588:	4912      	ldr	r1, [pc, #72]	@ (80015d4 <uartTask+0x94>)
 800158a:	78c9      	ldrb	r1, [r1, #3]
    	sprintf(msg, "Distance: %.2fcm Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",distance_cm,sTime.Hours, sTime.Minutes, sTime.Seconds,
 800158c:	f107 0010 	add.w	r0, r7, #16
 8001590:	9105      	str	r1, [sp, #20]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	9104      	str	r1, [sp, #16]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	9103      	str	r1, [sp, #12]
 800159a:	9602      	str	r6, [sp, #8]
 800159c:	9501      	str	r5, [sp, #4]
 800159e:	9400      	str	r4, [sp, #0]
 80015a0:	490e      	ldr	r1, [pc, #56]	@ (80015dc <uartTask+0x9c>)
 80015a2:	f008 f837 	bl	8009614 <siprintf>
    	//periodic update via UART
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fe60 	bl	8000270 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f107 0110 	add.w	r1, r7, #16
 80015b8:	2364      	movs	r3, #100	@ 0x64
 80015ba:	4809      	ldr	r0, [pc, #36]	@ (80015e0 <uartTask+0xa0>)
 80015bc:	f004 fde4 	bl	8006188 <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000));  //delay
 80015c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015c4:	f006 f9c0 	bl	8007948 <vTaskDelay>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80015c8:	bf00      	nop
 80015ca:	e7bd      	b.n	8001548 <uartTask+0x8>
 80015cc:	200013d4 	.word	0x200013d4
 80015d0:	2000124c 	.word	0x2000124c
 80015d4:	200013e8 	.word	0x200013e8
 80015d8:	200013d0 	.word	0x200013d0
 80015dc:	0800b8bc 	.word	0x0800b8bc
 80015e0:	20001320 	.word	0x20001320

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b08c      	sub	sp, #48	@ 0x30
 80015e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ea:	f000 fd93 	bl	8002114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ee:	f000 f8ff 	bl	80017f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f2:	f000 fa6f 	bl	8001ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015f6:	f000 fa3d 	bl	8001a74 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80015fa:	f000 f9a9 	bl	8001950 <MX_SPI2_Init>
  MX_TIM2_Init();
 80015fe:	f000 f9e5 	bl	80019cc <MX_TIM2_Init>
  MX_RTC_Init();
 8001602:	f000 f949 	bl	8001898 <MX_RTC_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // CS idle HIGH
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800160c:	485e      	ldr	r0, [pc, #376]	@ (8001788 <main+0x1a4>)
 800160e:	f001 f8dd 	bl	80027cc <HAL_GPIO_WritePin>

  /* USER CODE BEGIN 2 */
  uint8_t buffer[6] = {0};                  // buffer to store data read back from flash
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	809a      	strh	r2, [r3, #4]

  W25Qxx_EraseSector(0x0000);               // erase sector at address 0x0000
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fcfb 	bl	8001018 <W25Qxx_EraseSector>
  W25Qxx_Init();                            // read and print JEDEC ID of flash chip
 8001622:	f7ff fd41 	bl	80010a8 <W25Qxx_Init>
  W25Qxx_Write(0x000, (uint8_t *)"Hello", 5); // write 5 bytes ("Hello")
 8001626:	2205      	movs	r2, #5
 8001628:	4958      	ldr	r1, [pc, #352]	@ (800178c <main+0x1a8>)
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fdbc 	bl	80011a8 <W25Qxx_Write>
  W25Qxx_Read(0x000, buffer, 5);            // read 5 bytes back from address 0x0000 into buffer
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	2205      	movs	r2, #5
 8001636:	4619      	mov	r1, r3
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fd7d 	bl	8001138 <W25Qxx_Read>
  HAL_UART_Transmit(&huart2, buffer, 5, 1000); // send the read data over UART (should print "Hello")
 800163e:	f107 0120 	add.w	r1, r7, #32
 8001642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001646:	2205      	movs	r2, #5
 8001648:	4851      	ldr	r0, [pc, #324]	@ (8001790 <main+0x1ac>)
 800164a:	f004 fd9d 	bl	8006188 <HAL_UART_Transmit>


  if ((RTC->ISR & RTC_ISR_INITS) == 0)
 800164e:	4b51      	ldr	r3, [pc, #324]	@ (8001794 <main+0x1b0>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	d124      	bne.n	80016a4 <main+0xc0>
     {
       //RTC not yet initialized. Setting time and date...

       sTime.Hours = 9;
 800165a:	4b4f      	ldr	r3, [pc, #316]	@ (8001798 <main+0x1b4>)
 800165c:	2209      	movs	r2, #9
 800165e:	701a      	strb	r2, [r3, #0]
       sTime.Minutes = 30;
 8001660:	4b4d      	ldr	r3, [pc, #308]	@ (8001798 <main+0x1b4>)
 8001662:	221e      	movs	r2, #30
 8001664:	705a      	strb	r2, [r3, #1]
       sTime.Seconds = 00;
 8001666:	4b4c      	ldr	r3, [pc, #304]	@ (8001798 <main+0x1b4>)
 8001668:	2200      	movs	r2, #0
 800166a:	709a      	strb	r2, [r3, #2]
       sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800166c:	4b4a      	ldr	r3, [pc, #296]	@ (8001798 <main+0x1b4>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
       sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001672:	4b49      	ldr	r3, [pc, #292]	@ (8001798 <main+0x1b4>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
       HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001678:	2200      	movs	r2, #0
 800167a:	4947      	ldr	r1, [pc, #284]	@ (8001798 <main+0x1b4>)
 800167c:	4847      	ldr	r0, [pc, #284]	@ (800179c <main+0x1b8>)
 800167e:	f002 fc65 	bl	8003f4c <HAL_RTC_SetTime>

       sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001682:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <main+0x1bc>)
 8001684:	2203      	movs	r2, #3
 8001686:	701a      	strb	r2, [r3, #0]
       sDate.Month = RTC_MONTH_AUGUST;
 8001688:	4b45      	ldr	r3, [pc, #276]	@ (80017a0 <main+0x1bc>)
 800168a:	2208      	movs	r2, #8
 800168c:	705a      	strb	r2, [r3, #1]
       sDate.Date = 22;
 800168e:	4b44      	ldr	r3, [pc, #272]	@ (80017a0 <main+0x1bc>)
 8001690:	2216      	movs	r2, #22
 8001692:	709a      	strb	r2, [r3, #2]
       sDate.Year = 25;
 8001694:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <main+0x1bc>)
 8001696:	2219      	movs	r2, #25
 8001698:	70da      	strb	r2, [r3, #3]
       HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800169a:	2200      	movs	r2, #0
 800169c:	4940      	ldr	r1, [pc, #256]	@ (80017a0 <main+0x1bc>)
 800169e:	483f      	ldr	r0, [pc, #252]	@ (800179c <main+0x1b8>)
 80016a0:	f002 fd4d 	bl	800413e <HAL_RTC_SetDate>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80016a4:	4b3f      	ldr	r3, [pc, #252]	@ (80017a4 <main+0x1c0>)
 80016a6:	1d3c      	adds	r4, r7, #4
 80016a8:	461d      	mov	r5, r3
 80016aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f005 fae0 	bl	8006c80 <osThreadCreate>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a39      	ldr	r2, [pc, #228]	@ (80017a8 <main+0x1c4>)
 80016c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // Create a queue
  distance_q = xQueueCreate(5, sizeof(float));
 80016c6:	2200      	movs	r2, #0
 80016c8:	2104      	movs	r1, #4
 80016ca:	2005      	movs	r0, #5
 80016cc:	f005 fc56 	bl	8006f7c <xQueueGenericCreate>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a36      	ldr	r2, [pc, #216]	@ (80017ac <main+0x1c8>)
 80016d4:	6013      	str	r3, [r2, #0]

  // Create SENSOR task , check if creation failed
  if (xTaskCreate(sensorTask, "SENSOR_TASK", configMINIMAL_STACK_SIZE, NULL, 1, &sensorHandle) != pdTRUE)
 80016d6:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <main+0x1cc>)
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2301      	movs	r3, #1
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016e4:	4933      	ldr	r1, [pc, #204]	@ (80017b4 <main+0x1d0>)
 80016e6:	4834      	ldr	r0, [pc, #208]	@ (80017b8 <main+0x1d4>)
 80016e8:	f005 fff6 	bl	80076d8 <xTaskCreate>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d006      	beq.n	8001700 <main+0x11c>
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)"fail1\r\n", 7, 1000);  // send error message if task creation failed
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	2207      	movs	r2, #7
 80016f8:	4930      	ldr	r1, [pc, #192]	@ (80017bc <main+0x1d8>)
 80016fa:	4825      	ldr	r0, [pc, #148]	@ (8001790 <main+0x1ac>)
 80016fc:	f004 fd44 	bl	8006188 <HAL_UART_Transmit>
  }
  // Create FLASH task , check if creation failed
  if (xTaskCreate(flashTask, "FLASH_TASK", configMINIMAL_STACK_SIZE, NULL, 2, &flashHandle) != pdTRUE)
 8001700:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <main+0x1dc>)
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2302      	movs	r3, #2
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800170e:	492d      	ldr	r1, [pc, #180]	@ (80017c4 <main+0x1e0>)
 8001710:	482d      	ldr	r0, [pc, #180]	@ (80017c8 <main+0x1e4>)
 8001712:	f005 ffe1 	bl	80076d8 <xTaskCreate>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	d006      	beq.n	800172a <main+0x146>
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)"fail2\r\n", 7, 1000);
 800171c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001720:	2207      	movs	r2, #7
 8001722:	492a      	ldr	r1, [pc, #168]	@ (80017cc <main+0x1e8>)
 8001724:	481a      	ldr	r0, [pc, #104]	@ (8001790 <main+0x1ac>)
 8001726:	f004 fd2f 	bl	8006188 <HAL_UART_Transmit>
  }
  // Create ALERT task , check if creation failed
  if (xTaskCreate(alertTask, "ALERT_TASK", configMINIMAL_STACK_SIZE, NULL, 2, &alertHandle) != pdTRUE)
 800172a:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <main+0x1ec>)
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	2302      	movs	r3, #2
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2300      	movs	r3, #0
 8001734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001738:	4926      	ldr	r1, [pc, #152]	@ (80017d4 <main+0x1f0>)
 800173a:	4827      	ldr	r0, [pc, #156]	@ (80017d8 <main+0x1f4>)
 800173c:	f005 ffcc 	bl	80076d8 <xTaskCreate>
 8001740:	4603      	mov	r3, r0
 8001742:	2b01      	cmp	r3, #1
 8001744:	d006      	beq.n	8001754 <main+0x170>
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)"fail3\r\n", 7, 1000);
 8001746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174a:	2207      	movs	r2, #7
 800174c:	4923      	ldr	r1, [pc, #140]	@ (80017dc <main+0x1f8>)
 800174e:	4810      	ldr	r0, [pc, #64]	@ (8001790 <main+0x1ac>)
 8001750:	f004 fd1a 	bl	8006188 <HAL_UART_Transmit>
  }
  // Create UART task , check if creation failed
  if (xTaskCreate(uartTask, "UART_TASK", configMINIMAL_STACK_SIZE, NULL, 2, &uartHandle) != pdTRUE)
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <main+0x1fc>)
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	2302      	movs	r3, #2
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001762:	4920      	ldr	r1, [pc, #128]	@ (80017e4 <main+0x200>)
 8001764:	4820      	ldr	r0, [pc, #128]	@ (80017e8 <main+0x204>)
 8001766:	f005 ffb7 	bl	80076d8 <xTaskCreate>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d006      	beq.n	800177e <main+0x19a>
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)"fail4\r\n", 7, 1000);
 8001770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001774:	2207      	movs	r2, #7
 8001776:	491d      	ldr	r1, [pc, #116]	@ (80017ec <main+0x208>)
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <main+0x1ac>)
 800177a:	f004 fd05 	bl	8006188 <HAL_UART_Transmit>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800177e:	f005 fa78 	bl	8006c72 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001782:	bf00      	nop
 8001784:	e7fd      	b.n	8001782 <main+0x19e>
 8001786:	bf00      	nop
 8001788:	48000400 	.word	0x48000400
 800178c:	0800b900 	.word	0x0800b900
 8001790:	20001320 	.word	0x20001320
 8001794:	40002800 	.word	0x40002800
 8001798:	200013d4 	.word	0x200013d4
 800179c:	2000124c 	.word	0x2000124c
 80017a0:	200013e8 	.word	0x200013e8
 80017a4:	0800b964 	.word	0x0800b964
 80017a8:	200013a8 	.word	0x200013a8
 80017ac:	200013bc 	.word	0x200013bc
 80017b0:	200013ac 	.word	0x200013ac
 80017b4:	0800b908 	.word	0x0800b908
 80017b8:	0800141d 	.word	0x0800141d
 80017bc:	0800b914 	.word	0x0800b914
 80017c0:	200013b0 	.word	0x200013b0
 80017c4:	0800b91c 	.word	0x0800b91c
 80017c8:	08001449 	.word	0x08001449
 80017cc:	0800b928 	.word	0x0800b928
 80017d0:	200013b4 	.word	0x200013b4
 80017d4:	0800b930 	.word	0x0800b930
 80017d8:	080014ed 	.word	0x080014ed
 80017dc:	0800b93c 	.word	0x0800b93c
 80017e0:	200013b8 	.word	0x200013b8
 80017e4:	0800b944 	.word	0x0800b944
 80017e8:	08001541 	.word	0x08001541
 80017ec:	0800b950 	.word	0x0800b950

080017f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b096      	sub	sp, #88	@ 0x58
 80017f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	2244      	movs	r2, #68	@ 0x44
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f007 ff6d 	bl	80096de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001804:	463b      	mov	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001812:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001816:	f000 ffff 	bl	8002818 <HAL_PWREx_ControlVoltageScaling>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001820:	f000 f9de 	bl	8001be0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001824:	230a      	movs	r3, #10
 8001826:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800182c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800182e:	2310      	movs	r3, #16
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001832:	2301      	movs	r3, #1
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001836:	2302      	movs	r3, #2
 8001838:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800183a:	2302      	movs	r3, #2
 800183c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001842:	230a      	movs	r3, #10
 8001844:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001846:	2307      	movs	r3, #7
 8001848:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800184a:	2302      	movs	r3, #2
 800184c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800184e:	2302      	movs	r3, #2
 8001850:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4618      	mov	r0, r3
 8001858:	f001 f834 	bl	80028c4 <HAL_RCC_OscConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001862:	f000 f9bd 	bl	8001be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001866:	230f      	movs	r3, #15
 8001868:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186a:	2303      	movs	r3, #3
 800186c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800187a:	463b      	mov	r3, r7
 800187c:	2104      	movs	r1, #4
 800187e:	4618      	mov	r0, r3
 8001880:	f001 fbfc 	bl	800307c <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800188a:	f000 f9a9 	bl	8001be0 <Error_Handler>
  }
}
 800188e:	bf00      	nop
 8001890:	3758      	adds	r7, #88	@ 0x58
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80018ac:	2300      	movs	r3, #0
 80018ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018b0:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <MX_RTC_Init+0xb0>)
 80018b2:	4a26      	ldr	r2, [pc, #152]	@ (800194c <MX_RTC_Init+0xb4>)
 80018b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <MX_RTC_Init+0xb0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018bc:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <MX_RTC_Init+0xb0>)
 80018be:	227f      	movs	r2, #127	@ 0x7f
 80018c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018c2:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <MX_RTC_Init+0xb0>)
 80018c4:	22ff      	movs	r2, #255	@ 0xff
 80018c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <MX_RTC_Init+0xb0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <MX_RTC_Init+0xb0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <MX_RTC_Init+0xb0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018da:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <MX_RTC_Init+0xb0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018e0:	4819      	ldr	r0, [pc, #100]	@ (8001948 <MX_RTC_Init+0xb0>)
 80018e2:	f002 faab 	bl	8003e3c <HAL_RTC_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80018ec:	f000 f978 	bl	8001be0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2201      	movs	r2, #1
 8001908:	4619      	mov	r1, r3
 800190a:	480f      	ldr	r0, [pc, #60]	@ (8001948 <MX_RTC_Init+0xb0>)
 800190c:	f002 fb1e 	bl	8003f4c <HAL_RTC_SetTime>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001916:	f000 f963 	bl	8001be0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800191a:	2301      	movs	r3, #1
 800191c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800191e:	2301      	movs	r3, #1
 8001920:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001922:	2301      	movs	r3, #1
 8001924:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001926:	2300      	movs	r3, #0
 8001928:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800192a:	463b      	mov	r3, r7
 800192c:	2201      	movs	r2, #1
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_RTC_Init+0xb0>)
 8001932:	f002 fc04 	bl	800413e <HAL_RTC_SetDate>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800193c:	f000 f950 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000124c 	.word	0x2000124c
 800194c:	40002800 	.word	0x40002800

08001950 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_SPI2_Init+0x74>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <MX_SPI2_Init+0x78>)
 8001958:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_SPI2_Init+0x74>)
 800195c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001960:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_SPI2_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <MX_SPI2_Init+0x74>)
 800196a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800196e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_SPI2_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001976:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <MX_SPI2_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_SPI2_Init+0x74>)
 800197e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001982:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_SPI2_Init+0x74>)
 8001986:	2220      	movs	r2, #32
 8001988:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <MX_SPI2_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <MX_SPI2_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <MX_SPI2_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800199c:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MX_SPI2_Init+0x74>)
 800199e:	2207      	movs	r2, #7
 80019a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <MX_SPI2_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <MX_SPI2_Init+0x74>)
 80019aa:	2208      	movs	r2, #8
 80019ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_SPI2_Init+0x74>)
 80019b0:	f002 fd6a 	bl	8004488 <HAL_SPI_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f000 f911 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20001270 	.word	0x20001270
 80019c8:	40003800 	.word	0x40003800

080019cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ea:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <MX_TIM2_Init+0xa4>)
 80019ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <MX_TIM2_Init+0xa4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <MX_TIM2_Init+0xa4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <MX_TIM2_Init+0xa4>)
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_TIM2_Init+0xa4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_TIM2_Init+0xa4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a12:	4817      	ldr	r0, [pc, #92]	@ (8001a70 <MX_TIM2_Init+0xa4>)
 8001a14:	f003 fc64 	bl	80052e0 <HAL_TIM_IC_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a1e:	f000 f8df 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480f      	ldr	r0, [pc, #60]	@ (8001a70 <MX_TIM2_Init+0xa4>)
 8001a32:	f004 fab5 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001a3c:	f000 f8d0 	bl	8001be0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a44:	2301      	movs	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	@ (8001a70 <MX_TIM2_Init+0xa4>)
 8001a58:	f003 ffa9 	bl	80059ae <HAL_TIM_IC_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a62:	f000 f8bd 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200012d4 	.word	0x200012d4

08001a74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a78:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001a7a:	4a15      	ldr	r2, [pc, #84]	@ (8001ad0 <MX_USART2_UART_Init+0x5c>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001a80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	@ (8001acc <MX_USART2_UART_Init+0x58>)
 8001ab8:	f004 fb18 	bl	80060ec <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ac2:	f000 f88d 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20001320 	.word	0x20001320
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	4b36      	ldr	r3, [pc, #216]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a35      	ldr	r2, [pc, #212]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b02:	4b30      	ldr	r3, [pc, #192]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	4a29      	ldr	r2, [pc, #164]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b26:	4b27      	ldr	r3, [pc, #156]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b3e:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <MX_GPIO_Init+0xf0>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2122      	movs	r1, #34	@ 0x22
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b52:	f000 fe3b 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b5c:	481a      	ldr	r0, [pc, #104]	@ (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b5e:	f000 fe35 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b68:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <MX_GPIO_Init+0xf8>)
 8001b7a:	f000 fc7d 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8001b7e:	2322      	movs	r3, #34	@ 0x22
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b98:	f000 fc6e 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4804      	ldr	r0, [pc, #16]	@ (8001bc8 <MX_GPIO_Init+0xf4>)
 8001bb6:	f000 fc5f 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	@ 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	48000800 	.word	0x48000800

08001bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f005 f89d 	bl	8006d18 <osDelay>
 8001bde:	e7fb      	b.n	8001bd8 <StartDefaultTask+0x8>

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
}
 8001be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <Error_Handler+0x8>

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf6:	4a10      	ldr	r2, [pc, #64]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	210f      	movs	r1, #15
 8001c26:	f06f 0001 	mvn.w	r0, #1
 8001c2a:	f000 fbee 	bl	800240a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000

08001c3c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0a4      	sub	sp, #144	@ 0x90
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	2288      	movs	r2, #136	@ 0x88
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f007 fd46 	bl	80096de <memset>
  if(hrtc->Instance==RTC)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <HAL_RTC_MspInit+0x5c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d118      	bne.n	8001c8e <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 fc28 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c7a:	f7ff ffb1 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <HAL_RTC_MspInit+0x60>)
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c84:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <HAL_RTC_MspInit+0x60>)
 8001c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001c8e:	bf00      	nop
 8001c90:	3790      	adds	r7, #144	@ 0x90
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40002800 	.word	0x40002800
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a25      	ldr	r2, [pc, #148]	@ (8001d54 <HAL_SPI_MspInit+0xb4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d144      	bne.n	8001d4c <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cc2:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <HAL_SPI_MspInit+0xb8>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc6:	4a24      	ldr	r2, [pc, #144]	@ (8001d58 <HAL_SPI_MspInit+0xb8>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cce:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <HAL_SPI_MspInit+0xb8>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <HAL_SPI_MspInit+0xb8>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	4a1e      	ldr	r2, [pc, #120]	@ (8001d58 <HAL_SPI_MspInit+0xb8>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <HAL_SPI_MspInit+0xb8>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_SPI_MspInit+0xb8>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	4a18      	ldr	r2, [pc, #96]	@ (8001d58 <HAL_SPI_MspInit+0xb8>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfe:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <HAL_SPI_MspInit+0xb8>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <HAL_SPI_MspInit+0xbc>)
 8001d26:	f000 fba7 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <HAL_SPI_MspInit+0xc0>)
 8001d48:	f000 fb96 	bl	8002478 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40003800 	.word	0x40003800
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	48000800 	.word	0x48000800
 8001d60:	48000400 	.word	0x48000400

08001d64 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d84:	d130      	bne.n	8001de8 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d86:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <HAL_TIM_IC_MspInit+0x8c>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	4a19      	ldr	r2, [pc, #100]	@ (8001df0 <HAL_TIM_IC_MspInit+0x8c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d92:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <HAL_TIM_IC_MspInit+0x8c>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <HAL_TIM_IC_MspInit+0x8c>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	4a13      	ldr	r2, [pc, #76]	@ (8001df0 <HAL_TIM_IC_MspInit+0x8c>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_TIM_IC_MspInit+0x8c>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db6:	2301      	movs	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd4:	f000 fb50 	bl	8002478 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2105      	movs	r1, #5
 8001ddc:	201c      	movs	r0, #28
 8001dde:	f000 fb14 	bl	800240a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001de2:	201c      	movs	r0, #28
 8001de4:	f000 fb2d 	bl	8002442 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	@ 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b0ac      	sub	sp, #176	@ 0xb0
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2288      	movs	r2, #136	@ 0x88
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f007 fc62 	bl	80096de <memset>
  if(huart->Instance==USART2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ea4 <HAL_UART_MspInit+0xb0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d13b      	bne.n	8001e9c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 fb47 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e3c:	f7ff fed0 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_UART_MspInit+0xb4>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e44:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_UART_MspInit+0xb4>)
 8001e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_UART_MspInit+0xb4>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <HAL_UART_MspInit+0xb4>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <HAL_UART_MspInit+0xb4>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e64:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_UART_MspInit+0xb4>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e70:	230c      	movs	r3, #12
 8001e72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e88:	2307      	movs	r3, #7
 8001e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e92:	4619      	mov	r1, r3
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e98:	f000 faee 	bl	8002478 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e9c:	bf00      	nop
 8001e9e:	37b0      	adds	r7, #176	@ 0xb0
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40004400 	.word	0x40004400
 8001ea8:	40021000 	.word	0x40021000

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee6:	f000 f971 	bl	80021cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001eea:	f006 f96d 	bl	80081c8 <xTaskGetSchedulerState>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d001      	beq.n	8001ef8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ef4:	f006 fc38 	bl	8008768 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <TIM2_IRQHandler+0x10>)
 8001f02:	f003 fc4d 	bl	80057a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200012d4 	.word	0x200012d4

08001f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return 1;
 8001f14:	2301      	movs	r3, #1
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_kill>:

int _kill(int pid, int sig)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f2a:	f007 fc2b 	bl	8009784 <__errno>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2216      	movs	r2, #22
 8001f32:	601a      	str	r2, [r3, #0]
  return -1;
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_exit>:

void _exit (int status)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ffe7 	bl	8001f20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f52:	bf00      	nop
 8001f54:	e7fd      	b.n	8001f52 <_exit+0x12>

08001f56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e00a      	b.n	8001f7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f68:	f3af 8000 	nop.w
 8001f6c:	4601      	mov	r1, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	60ba      	str	r2, [r7, #8]
 8001f74:	b2ca      	uxtb	r2, r1
 8001f76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dbf0      	blt.n	8001f68 <_read+0x12>
  }

  return len;
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	e009      	b.n	8001fb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	60ba      	str	r2, [r7, #8]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dbf1      	blt.n	8001fa2 <_write+0x12>
  }
  return len;
 8001fbe:	687b      	ldr	r3, [r7, #4]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_close>:

int _close(int file)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ff0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_isatty>:

int _isatty(int file)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002008:	2301      	movs	r3, #1
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f007 fb90 	bl	8009784 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20018000 	.word	0x20018000
 8002090:	00000400 	.word	0x00000400
 8002094:	200013ec 	.word	0x200013ec
 8002098:	20008bc8 	.word	0x20008bc8

0800209c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <SystemInit+0x20>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <SystemInit+0x20>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020c4:	f7ff ffea 	bl	800209c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <LoopForever+0x6>)
  ldr r1, =_edata
 80020ca:	490d      	ldr	r1, [pc, #52]	@ (8002100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <LoopForever+0xe>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e0:	4c0a      	ldr	r4, [pc, #40]	@ (800210c <LoopForever+0x16>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ee:	f007 fb4f 	bl	8009790 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020f2:	f7ff fa77 	bl	80015e4 <main>

080020f6 <LoopForever>:

LoopForever:
    b LoopForever
 80020f6:	e7fe      	b.n	80020f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002104:	0800bd54 	.word	0x0800bd54
  ldr r2, =_sbss
 8002108:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800210c:	20008bc4 	.word	0x20008bc4

08002110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC1_2_IRQHandler>
	...

08002114 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211e:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <HAL_Init+0x3c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a0b      	ldr	r2, [pc, #44]	@ (8002150 <HAL_Init+0x3c>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002128:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212a:	2003      	movs	r0, #3
 800212c:	f000 f962 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002130:	200f      	movs	r0, #15
 8002132:	f000 f80f 	bl	8002154 <HAL_InitTick>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	71fb      	strb	r3, [r7, #7]
 8002140:	e001      	b.n	8002146 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002142:	f7ff fd53 	bl	8001bec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002146:	79fb      	ldrb	r3, [r7, #7]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40022000 	.word	0x40022000

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002160:	4b17      	ldr	r3, [pc, #92]	@ (80021c0 <HAL_InitTick+0x6c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d023      	beq.n	80021b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002168:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_InitTick+0x70>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <HAL_InitTick+0x6c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002176:	fbb3 f3f1 	udiv	r3, r3, r1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f96d 	bl	800245e <HAL_SYSTICK_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10f      	bne.n	80021aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0f      	cmp	r3, #15
 800218e:	d809      	bhi.n	80021a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002190:	2200      	movs	r2, #0
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f000 f937 	bl	800240a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800219c:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <HAL_InitTick+0x74>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e007      	b.n	80021b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e004      	b.n	80021b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e001      	b.n	80021b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000000c 	.word	0x2000000c
 80021c4:	20000004 	.word	0x20000004
 80021c8:	20000008 	.word	0x20000008

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_IncTick+0x20>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_IncTick+0x24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <HAL_IncTick+0x24>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	2000000c 	.word	0x2000000c
 80021f0:	200013f0 	.word	0x200013f0

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	200013f0 	.word	0x200013f0

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff ffee 	bl	80021f4 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002226:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffde 	bl	80021f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000000c 	.word	0x2000000c

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	@ (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	@ (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	@ 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c0:	d301      	bcc.n	80023c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00f      	b.n	80023e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c6:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <SysTick_Config+0x40>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ce:	210f      	movs	r1, #15
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f7ff ff8e 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <SysTick_Config+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023de:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <SysTick_Config+0x40>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	e000e010 	.word	0xe000e010

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff29 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800241c:	f7ff ff3e 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7ff ff8e 	bl	8002348 <NVIC_EncodePriority>
 800242c:	4602      	mov	r2, r0
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff5d 	bl	80022f4 <__NVIC_SetPriority>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff31 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffa2 	bl	80023b0 <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	e17f      	b.n	8002788 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8171 	beq.w	8002782 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d005      	beq.n	80024b8 <HAL_GPIO_Init+0x40>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d130      	bne.n	800251a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ee:	2201      	movs	r2, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 0201 	and.w	r2, r3, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b03      	cmp	r3, #3
 8002524:	d118      	bne.n	8002558 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	08db      	lsrs	r3, r3, #3
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	6939      	ldr	r1, [r7, #16]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80ac 	beq.w	8002782 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <HAL_GPIO_Init+0x330>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262e:	4a5e      	ldr	r2, [pc, #376]	@ (80027a8 <HAL_GPIO_Init+0x330>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6613      	str	r3, [r2, #96]	@ 0x60
 8002636:	4b5c      	ldr	r3, [pc, #368]	@ (80027a8 <HAL_GPIO_Init+0x330>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002642:	4a5a      	ldr	r2, [pc, #360]	@ (80027ac <HAL_GPIO_Init+0x334>)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800266c:	d025      	beq.n	80026ba <HAL_GPIO_Init+0x242>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4f      	ldr	r2, [pc, #316]	@ (80027b0 <HAL_GPIO_Init+0x338>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01f      	beq.n	80026b6 <HAL_GPIO_Init+0x23e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4e      	ldr	r2, [pc, #312]	@ (80027b4 <HAL_GPIO_Init+0x33c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_GPIO_Init+0x23a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4d      	ldr	r2, [pc, #308]	@ (80027b8 <HAL_GPIO_Init+0x340>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x236>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4c      	ldr	r2, [pc, #304]	@ (80027bc <HAL_GPIO_Init+0x344>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x232>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4b      	ldr	r2, [pc, #300]	@ (80027c0 <HAL_GPIO_Init+0x348>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x22e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4a      	ldr	r2, [pc, #296]	@ (80027c4 <HAL_GPIO_Init+0x34c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x22a>
 800269e:	2306      	movs	r3, #6
 80026a0:	e00c      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e00a      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026ba:	2300      	movs	r3, #0
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026cc:	4937      	ldr	r1, [pc, #220]	@ (80027ac <HAL_GPIO_Init+0x334>)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026da:	4b3b      	ldr	r3, [pc, #236]	@ (80027c8 <HAL_GPIO_Init+0x350>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026fe:	4a32      	ldr	r2, [pc, #200]	@ (80027c8 <HAL_GPIO_Init+0x350>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002704:	4b30      	ldr	r3, [pc, #192]	@ (80027c8 <HAL_GPIO_Init+0x350>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002728:	4a27      	ldr	r2, [pc, #156]	@ (80027c8 <HAL_GPIO_Init+0x350>)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800272e:	4b26      	ldr	r3, [pc, #152]	@ (80027c8 <HAL_GPIO_Init+0x350>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002752:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <HAL_GPIO_Init+0x350>)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002758:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <HAL_GPIO_Init+0x350>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800277c:	4a12      	ldr	r2, [pc, #72]	@ (80027c8 <HAL_GPIO_Init+0x350>)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	f47f ae78 	bne.w	8002488 <HAL_GPIO_Init+0x10>
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010000 	.word	0x40010000
 80027b0:	48000400 	.word	0x48000400
 80027b4:	48000800 	.word	0x48000800
 80027b8:	48000c00 	.word	0x48000c00
 80027bc:	48001000 	.word	0x48001000
 80027c0:	48001400 	.word	0x48001400
 80027c4:	48001800 	.word	0x48001800
 80027c8:	40010400 	.word	0x40010400

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002800:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <HAL_PWREx_GetVoltageRange+0x18>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40007000 	.word	0x40007000

08002818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002826:	d130      	bne.n	800288a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002828:	4b23      	ldr	r3, [pc, #140]	@ (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002834:	d038      	beq.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002836:	4b20      	ldr	r3, [pc, #128]	@ (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800283e:	4a1e      	ldr	r2, [pc, #120]	@ (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002840:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002846:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2232      	movs	r2, #50	@ 0x32
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9b      	lsrs	r3, r3, #18
 8002858:	3301      	adds	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800285c:	e002      	b.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3b01      	subs	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002864:	4b14      	ldr	r3, [pc, #80]	@ (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002870:	d102      	bne.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f2      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002878:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002884:	d110      	bne.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e00f      	b.n	80028aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800288a:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002896:	d007      	beq.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002898:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028a0:	4a05      	ldr	r2, [pc, #20]	@ (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40007000 	.word	0x40007000
 80028bc:	20000004 	.word	0x20000004
 80028c0:	431bde83 	.word	0x431bde83

080028c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e3ca      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d6:	4b97      	ldr	r3, [pc, #604]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e0:	4b94      	ldr	r3, [pc, #592]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80e4 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_RCC_OscConfig+0x4a>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	f040 808b 	bne.w	8002a1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b01      	cmp	r3, #1
 800290a:	f040 8087 	bne.w	8002a1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290e:	4b89      	ldr	r3, [pc, #548]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e3a2      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1a      	ldr	r2, [r3, #32]
 800292a:	4b82      	ldr	r3, [pc, #520]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_RCC_OscConfig+0x7c>
 8002936:	4b7f      	ldr	r3, [pc, #508]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800293e:	e005      	b.n	800294c <HAL_RCC_OscConfig+0x88>
 8002940:	4b7c      	ldr	r3, [pc, #496]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800294c:	4293      	cmp	r3, r2
 800294e:	d223      	bcs.n	8002998 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fd55 	bl	8003404 <RCC_SetFlashLatencyFromMSIRange>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e383      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002964:	4b73      	ldr	r3, [pc, #460]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a72      	ldr	r2, [pc, #456]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b70      	ldr	r3, [pc, #448]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	496d      	ldr	r1, [pc, #436]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002982:	4b6c      	ldr	r3, [pc, #432]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	4968      	ldr	r1, [pc, #416]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
 8002996:	e025      	b.n	80029e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002998:	4b66      	ldr	r3, [pc, #408]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a65      	ldr	r2, [pc, #404]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b63      	ldr	r3, [pc, #396]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4960      	ldr	r1, [pc, #384]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	495b      	ldr	r1, [pc, #364]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fd15 	bl	8003404 <RCC_SetFlashLatencyFromMSIRange>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e343      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e4:	f000 fc4a 	bl	800327c <HAL_RCC_GetSysClockFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b52      	ldr	r3, [pc, #328]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	4950      	ldr	r1, [pc, #320]	@ (8002b38 <HAL_RCC_OscConfig+0x274>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002a00:	4a4e      	ldr	r2, [pc, #312]	@ (8002b3c <HAL_RCC_OscConfig+0x278>)
 8002a02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a04:	4b4e      	ldr	r3, [pc, #312]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fba3 	bl	8002154 <HAL_InitTick>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d052      	beq.n	8002abe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	e327      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d032      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a24:	4b43      	ldr	r3, [pc, #268]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a42      	ldr	r2, [pc, #264]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a30:	f7ff fbe0 	bl	80021f4 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a38:	f7ff fbdc 	bl	80021f4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e310      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a56:	4b37      	ldr	r3, [pc, #220]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a36      	ldr	r2, [pc, #216]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4931      	ldr	r1, [pc, #196]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a74:	4b2f      	ldr	r3, [pc, #188]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	492c      	ldr	r1, [pc, #176]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
 8002a88:	e01a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a29      	ldr	r2, [pc, #164]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a96:	f7ff fbad 	bl	80021f4 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a9e:	f7ff fba9 	bl	80021f4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e2dd      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ab0:	4b20      	ldr	r3, [pc, #128]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x1da>
 8002abc:	e000      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002abe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d074      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x21a>
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d10e      	bne.n	8002af6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d064      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d160      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e2ba      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x24a>
 8002b00:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0b      	ldr	r2, [pc, #44]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	e026      	b.n	8002b5c <HAL_RCC_OscConfig+0x298>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b16:	d115      	bne.n	8002b44 <HAL_RCC_OscConfig+0x280>
 8002b18:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a05      	ldr	r2, [pc, #20]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b03      	ldr	r3, [pc, #12]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a02      	ldr	r2, [pc, #8]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e014      	b.n	8002b5c <HAL_RCC_OscConfig+0x298>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	0800b988 	.word	0x0800b988
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	20000008 	.word	0x20000008
 8002b44:	4ba0      	ldr	r3, [pc, #640]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a9f      	ldr	r2, [pc, #636]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b9d      	ldr	r3, [pc, #628]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a9c      	ldr	r2, [pc, #624]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7ff fb46 	bl	80021f4 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7ff fb42 	bl	80021f4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e276      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7e:	4b92      	ldr	r3, [pc, #584]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2a8>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7ff fb32 	bl	80021f4 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff fb2e 	bl	80021f4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e262      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba6:	4b88      	ldr	r3, [pc, #544]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2d0>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d060      	beq.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x310>
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d119      	bne.n	8002c02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d116      	bne.n	8002c02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd4:	4b7c      	ldr	r3, [pc, #496]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_OscConfig+0x328>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e23f      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b76      	ldr	r3, [pc, #472]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	4973      	ldr	r1, [pc, #460]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c00:	e040      	b.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d023      	beq.n	8002c52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7ff faed 	bl	80021f4 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7ff fae9 	bl	80021f4 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e21d      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c30:	4b65      	ldr	r3, [pc, #404]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b62      	ldr	r3, [pc, #392]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	495f      	ldr	r1, [pc, #380]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
 8002c50:	e018      	b.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c52:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a5c      	ldr	r2, [pc, #368]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7ff fac9 	bl	80021f4 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7ff fac5 	bl	80021f4 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e1f9      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c78:	4b53      	ldr	r3, [pc, #332]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d03c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c98:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7ff faa4 	bl	80021f4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7ff faa0 	bl	80021f4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1d4      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc2:	4b41      	ldr	r3, [pc, #260]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ef      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x3ec>
 8002cd0:	e01b      	b.n	8002d0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7ff fa87 	bl	80021f4 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cea:	f7ff fa83 	bl	80021f4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1b7      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cfc:	4b32      	ldr	r3, [pc, #200]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ef      	bne.n	8002cea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80a6 	beq.w	8002e64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	4a26      	ldr	r2, [pc, #152]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d34:	4b24      	ldr	r3, [pc, #144]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d40:	2301      	movs	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d44:	4b21      	ldr	r3, [pc, #132]	@ (8002dcc <HAL_RCC_OscConfig+0x508>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d118      	bne.n	8002d82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d50:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <HAL_RCC_OscConfig+0x508>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <HAL_RCC_OscConfig+0x508>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5c:	f7ff fa4a 	bl	80021f4 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d64:	f7ff fa46 	bl	80021f4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e17a      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d76:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <HAL_RCC_OscConfig+0x508>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d108      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4d8>
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d90:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d9a:	e029      	b.n	8002df0 <HAL_RCC_OscConfig+0x52c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d115      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x50c>
 8002da4:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002daa:	4a07      	ldr	r2, [pc, #28]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db4:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	4a03      	ldr	r2, [pc, #12]	@ (8002dc8 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x52c>
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	4b9c      	ldr	r3, [pc, #624]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd6:	4a9b      	ldr	r2, [pc, #620]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002de0:	4b98      	ldr	r3, [pc, #608]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de6:	4a97      	ldr	r2, [pc, #604]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002de8:	f023 0304 	bic.w	r3, r3, #4
 8002dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d016      	beq.n	8002e26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7ff f9fc 	bl	80021f4 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7ff f9f8 	bl	80021f4 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e12a      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e16:	4b8b      	ldr	r3, [pc, #556]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ed      	beq.n	8002e00 <HAL_RCC_OscConfig+0x53c>
 8002e24:	e015      	b.n	8002e52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e26:	f7ff f9e5 	bl	80021f4 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7ff f9e1 	bl	80021f4 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e113      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e44:	4b7f      	ldr	r3, [pc, #508]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ed      	bne.n	8002e2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e52:	7ffb      	ldrb	r3, [r7, #31]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e58:	4b7a      	ldr	r3, [pc, #488]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5c:	4a79      	ldr	r2, [pc, #484]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80fe 	beq.w	800306a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	f040 80d0 	bne.w	8003018 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e78:	4b72      	ldr	r3, [pc, #456]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0203 	and.w	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d130      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	3b01      	subs	r3, #1
 8002e98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d127      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11f      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002eb8:	2a07      	cmp	r2, #7
 8002eba:	bf14      	ite	ne
 8002ebc:	2201      	movne	r2, #1
 8002ebe:	2200      	moveq	r2, #0
 8002ec0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d113      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d109      	bne.n	8002eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d06e      	beq.n	8002fcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d069      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ef4:	4b53      	ldr	r3, [pc, #332]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f00:	4b50      	ldr	r3, [pc, #320]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0ad      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f10:	4b4c      	ldr	r3, [pc, #304]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a4b      	ldr	r2, [pc, #300]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f1c:	f7ff f96a 	bl	80021f4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7ff f966 	bl	80021f4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e09a      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f36:	4b43      	ldr	r3, [pc, #268]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f42:	4b40      	ldr	r3, [pc, #256]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	4b40      	ldr	r3, [pc, #256]	@ (8003048 <HAL_RCC_OscConfig+0x784>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f52:	3a01      	subs	r2, #1
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f5c:	0212      	lsls	r2, r2, #8
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f64:	0852      	lsrs	r2, r2, #1
 8002f66:	3a01      	subs	r2, #1
 8002f68:	0552      	lsls	r2, r2, #21
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f70:	0852      	lsrs	r2, r2, #1
 8002f72:	3a01      	subs	r2, #1
 8002f74:	0652      	lsls	r2, r2, #25
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f7c:	0912      	lsrs	r2, r2, #4
 8002f7e:	0452      	lsls	r2, r2, #17
 8002f80:	430a      	orrs	r2, r1
 8002f82:	4930      	ldr	r1, [pc, #192]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f88:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f94:	4b2b      	ldr	r3, [pc, #172]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a2a      	ldr	r2, [pc, #168]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa0:	f7ff f928 	bl	80021f4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7ff f924 	bl	80021f4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e058      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	4b22      	ldr	r3, [pc, #136]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fc6:	e050      	b.n	800306a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e04f      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d148      	bne.n	800306a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a19      	ldr	r2, [pc, #100]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fe4:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a16      	ldr	r2, [pc, #88]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8002fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ff0:	f7ff f900 	bl	80021f4 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7ff f8fc 	bl	80021f4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e030      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300a:	4b0e      	ldr	r3, [pc, #56]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x734>
 8003016:	e028      	b.n	800306a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b0c      	cmp	r3, #12
 800301c:	d023      	beq.n	8003066 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b09      	ldr	r3, [pc, #36]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a08      	ldr	r2, [pc, #32]	@ (8003044 <HAL_RCC_OscConfig+0x780>)
 8003024:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7ff f8e3 	bl	80021f4 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003030:	e00c      	b.n	800304c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003032:	f7ff f8df 	bl	80021f4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d905      	bls.n	800304c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e013      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
 8003044:	40021000 	.word	0x40021000
 8003048:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_RCC_OscConfig+0x7b0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1ec      	bne.n	8003032 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003058:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_OscConfig+0x7b0>)
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4905      	ldr	r1, [pc, #20]	@ (8003074 <HAL_RCC_OscConfig+0x7b0>)
 800305e:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <HAL_RCC_OscConfig+0x7b4>)
 8003060:	4013      	ands	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
 8003064:	e001      	b.n	800306a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	feeefffc 	.word	0xfeeefffc

0800307c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0e7      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b75      	ldr	r3, [pc, #468]	@ (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d910      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b72      	ldr	r3, [pc, #456]	@ (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	4970      	ldr	r1, [pc, #448]	@ (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0cf      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	4b66      	ldr	r3, [pc, #408]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030d8:	429a      	cmp	r2, r3
 80030da:	d908      	bls.n	80030ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b63      	ldr	r3, [pc, #396]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4960      	ldr	r1, [pc, #384]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d04c      	beq.n	8003194 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003102:	4b5a      	ldr	r3, [pc, #360]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d121      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0a6      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800311a:	4b54      	ldr	r3, [pc, #336]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e09a      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003132:	4b4e      	ldr	r3, [pc, #312]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e08e      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003142:	4b4a      	ldr	r3, [pc, #296]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e086      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b46      	ldr	r3, [pc, #280]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4943      	ldr	r1, [pc, #268]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7ff f846 	bl	80021f4 <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7ff f842 	bl	80021f4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e06e      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b3a      	ldr	r3, [pc, #232]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d010      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4b31      	ldr	r3, [pc, #196]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d208      	bcs.n	80031c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b2e      	ldr	r3, [pc, #184]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	492b      	ldr	r1, [pc, #172]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c2:	4b29      	ldr	r3, [pc, #164]	@ (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d210      	bcs.n	80031f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d0:	4b25      	ldr	r3, [pc, #148]	@ (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 0207 	bic.w	r2, r3, #7
 80031d8:	4923      	ldr	r1, [pc, #140]	@ (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e0:	4b21      	ldr	r3, [pc, #132]	@ (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e036      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031fe:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4918      	ldr	r1, [pc, #96]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800321c:	4b13      	ldr	r3, [pc, #76]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4910      	ldr	r1, [pc, #64]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003230:	f000 f824 	bl	800327c <HAL_RCC_GetSysClockFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	490b      	ldr	r1, [pc, #44]	@ (8003270 <HAL_RCC_ClockConfig+0x1f4>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	4a09      	ldr	r2, [pc, #36]	@ (8003274 <HAL_RCC_ClockConfig+0x1f8>)
 800324e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003250:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <HAL_RCC_ClockConfig+0x1fc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe ff7d 	bl	8002154 <HAL_InitTick>
 800325a:	4603      	mov	r3, r0
 800325c:	72fb      	strb	r3, [r7, #11]

  return status;
 800325e:	7afb      	ldrb	r3, [r7, #11]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40022000 	.word	0x40022000
 800326c:	40021000 	.word	0x40021000
 8003270:	0800b988 	.word	0x0800b988
 8003274:	20000004 	.word	0x20000004
 8003278:	20000008 	.word	0x20000008

0800327c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	@ 0x24
 8003280:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328a:	4b3e      	ldr	r3, [pc, #248]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003294:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x34>
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d121      	bne.n	80032ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d11e      	bne.n	80032ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032b0:	4b34      	ldr	r3, [pc, #208]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032bc:	4b31      	ldr	r3, [pc, #196]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e005      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003388 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10d      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d102      	bne.n	80032fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032f4:	4b25      	ldr	r3, [pc, #148]	@ (800338c <HAL_RCC_GetSysClockFreq+0x110>)
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e004      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003300:	4b23      	ldr	r3, [pc, #140]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x114>)
 8003302:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d134      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800330a:	4b1e      	ldr	r3, [pc, #120]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d003      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0xa6>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d003      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0xac>
 8003320:	e005      	b.n	800332e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003322:	4b1a      	ldr	r3, [pc, #104]	@ (800338c <HAL_RCC_GetSysClockFreq+0x110>)
 8003324:	617b      	str	r3, [r7, #20]
      break;
 8003326:	e005      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x114>)
 800332a:	617b      	str	r3, [r7, #20]
      break;
 800332c:	e002      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	617b      	str	r3, [r7, #20]
      break;
 8003332:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003334:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	3301      	adds	r3, #1
 8003340:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003342:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	fb03 f202 	mul.w	r2, r3, r2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800335a:	4b0a      	ldr	r3, [pc, #40]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	0e5b      	lsrs	r3, r3, #25
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	3301      	adds	r3, #1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003374:	69bb      	ldr	r3, [r7, #24]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	@ 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	0800b9a0 	.word	0x0800b9a0
 800338c:	00f42400 	.word	0x00f42400
 8003390:	007a1200 	.word	0x007a1200

08003394 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003398:	4b03      	ldr	r3, [pc, #12]	@ (80033a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033b0:	f7ff fff0 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4904      	ldr	r1, [pc, #16]	@ (80033d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033c2:	5ccb      	ldrb	r3, [r1, r3]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	0800b998 	.word	0x0800b998

080033d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033dc:	f7ff ffda 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	0adb      	lsrs	r3, r3, #11
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4904      	ldr	r1, [pc, #16]	@ (8003400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	0800b998 	.word	0x0800b998

08003404 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003410:	4b2a      	ldr	r3, [pc, #168]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800341c:	f7ff f9ee 	bl	80027fc <HAL_PWREx_GetVoltageRange>
 8003420:	6178      	str	r0, [r7, #20]
 8003422:	e014      	b.n	800344e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	4b25      	ldr	r3, [pc, #148]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	4a24      	ldr	r2, [pc, #144]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003430:	4b22      	ldr	r3, [pc, #136]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800343c:	f7ff f9de 	bl	80027fc <HAL_PWREx_GetVoltageRange>
 8003440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003442:	4b1e      	ldr	r3, [pc, #120]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	4a1d      	ldr	r2, [pc, #116]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800344c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003454:	d10b      	bne.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b80      	cmp	r3, #128	@ 0x80
 800345a:	d919      	bls.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003460:	d902      	bls.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003462:	2302      	movs	r3, #2
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e013      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003468:	2301      	movs	r3, #1
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e010      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b80      	cmp	r3, #128	@ 0x80
 8003472:	d902      	bls.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003474:	2303      	movs	r3, #3
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e00a      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b80      	cmp	r3, #128	@ 0x80
 800347e:	d102      	bne.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003480:	2302      	movs	r3, #2
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	e004      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b70      	cmp	r3, #112	@ 0x70
 800348a:	d101      	bne.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800348c:	2301      	movs	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003490:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 0207 	bic.w	r2, r3, #7
 8003498:	4909      	ldr	r1, [pc, #36]	@ (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034a0:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d001      	beq.n	80034b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40022000 	.word	0x40022000

080034c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d0:	2300      	movs	r3, #0
 80034d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d041      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034e8:	d02a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034ee:	d824      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034f4:	d008      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034fa:	d81e      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003504:	d010      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003506:	e018      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003508:	4b86      	ldr	r3, [pc, #536]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a85      	ldr	r2, [pc, #532]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003512:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003514:	e015      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fabb 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003526:	e00c      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3320      	adds	r3, #32
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fba6 	bl	8003c80 <RCCEx_PLLSAI2_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	74fb      	strb	r3, [r7, #19]
      break;
 800353e:	e000      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003548:	4b76      	ldr	r3, [pc, #472]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003556:	4973      	ldr	r1, [pc, #460]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800355e:	e001      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d041      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003574:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003578:	d02a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800357a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800357e:	d824      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003580:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003584:	d008      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800358a:	d81e      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003594:	d010      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003596:	e018      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003598:	4b62      	ldr	r3, [pc, #392]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4a61      	ldr	r2, [pc, #388]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035a4:	e015      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fa73 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035b6:	e00c      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3320      	adds	r3, #32
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fb5e 	bl	8003c80 <RCCEx_PLLSAI2_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	74fb      	strb	r3, [r7, #19]
      break;
 80035ce:	e000      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035d8:	4b52      	ldr	r3, [pc, #328]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035e6:	494f      	ldr	r1, [pc, #316]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035ee:	e001      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a0 	beq.w	8003742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003602:	2300      	movs	r3, #0
 8003604:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003606:	4b47      	ldr	r3, [pc, #284]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	4b41      	ldr	r3, [pc, #260]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	4a40      	ldr	r2, [pc, #256]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003626:	6593      	str	r3, [r2, #88]	@ 0x58
 8003628:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003634:	2301      	movs	r3, #1
 8003636:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003638:	4b3b      	ldr	r3, [pc, #236]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a3a      	ldr	r2, [pc, #232]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800363e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003644:	f7fe fdd6 	bl	80021f4 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800364a:	e009      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364c:	f7fe fdd2 	bl	80021f4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d902      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	74fb      	strb	r3, [r7, #19]
        break;
 800365e:	e005      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003660:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0ef      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d15c      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003672:	4b2c      	ldr	r3, [pc, #176]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01f      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	d019      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003690:	4b24      	ldr	r3, [pc, #144]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800369a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800369c:	4b21      	ldr	r3, [pc, #132]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	4a20      	ldr	r2, [pc, #128]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036bc:	4a19      	ldr	r2, [pc, #100]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fe fd91 	bl	80021f4 <HAL_GetTick>
 80036d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d4:	e00b      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fe fd8d 	bl	80021f4 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d902      	bls.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	74fb      	strb	r3, [r7, #19]
            break;
 80036ec:	e006      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ec      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003702:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003712:	4904      	ldr	r1, [pc, #16]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800371a:	e009      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	74bb      	strb	r3, [r7, #18]
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
 8003728:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003730:	7c7b      	ldrb	r3, [r7, #17]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b9e      	ldr	r3, [pc, #632]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	4a9d      	ldr	r2, [pc, #628]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003740:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800374e:	4b98      	ldr	r3, [pc, #608]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003754:	f023 0203 	bic.w	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375c:	4994      	ldr	r1, [pc, #592]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003770:	4b8f      	ldr	r3, [pc, #572]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f023 020c 	bic.w	r2, r3, #12
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377e:	498c      	ldr	r1, [pc, #560]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003792:	4b87      	ldr	r3, [pc, #540]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003798:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	4983      	ldr	r1, [pc, #524]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b4:	4b7e      	ldr	r3, [pc, #504]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	497b      	ldr	r1, [pc, #492]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037d6:	4b76      	ldr	r3, [pc, #472]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e4:	4972      	ldr	r1, [pc, #456]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f8:	4b6d      	ldr	r3, [pc, #436]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003806:	496a      	ldr	r1, [pc, #424]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800381a:	4b65      	ldr	r3, [pc, #404]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003820:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003828:	4961      	ldr	r1, [pc, #388]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800383c:	4b5c      	ldr	r3, [pc, #368]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384a:	4959      	ldr	r1, [pc, #356]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800385e:	4b54      	ldr	r3, [pc, #336]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003864:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386c:	4950      	ldr	r1, [pc, #320]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003880:	4b4b      	ldr	r3, [pc, #300]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003886:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388e:	4948      	ldr	r1, [pc, #288]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038a2:	4b43      	ldr	r3, [pc, #268]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b0:	493f      	ldr	r1, [pc, #252]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d028      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038c4:	4b3a      	ldr	r3, [pc, #232]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d2:	4937      	ldr	r1, [pc, #220]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038e2:	d106      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e4:	4b32      	ldr	r3, [pc, #200]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a31      	ldr	r2, [pc, #196]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ee:	60d3      	str	r3, [r2, #12]
 80038f0:	e011      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038fa:	d10c      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f8c8 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800390c:	7cfb      	ldrb	r3, [r7, #19]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d028      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003922:	4b23      	ldr	r3, [pc, #140]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003928:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	491f      	ldr	r1, [pc, #124]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003940:	d106      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003942:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	4a1a      	ldr	r2, [pc, #104]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800394c:	60d3      	str	r3, [r2, #12]
 800394e:	e011      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003958:	d10c      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2101      	movs	r1, #1
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f899 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800396a:	7cfb      	ldrb	r3, [r7, #19]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02b      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	4908      	ldr	r1, [pc, #32]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800399e:	d109      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a0:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a02      	ldr	r2, [pc, #8]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039aa:	60d3      	str	r3, [r2, #12]
 80039ac:	e014      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f867 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d02f      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039f2:	4928      	ldr	r1, [pc, #160]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a02:	d10d      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	2102      	movs	r1, #2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f844 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d014      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	74bb      	strb	r3, [r7, #18]
 8003a1e:	e011      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3320      	adds	r3, #32
 8003a2e:	2102      	movs	r1, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 f925 	bl	8003c80 <RCCEx_PLLSAI2_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3a:	7cfb      	ldrb	r3, [r7, #19]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a50:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a5e:	490d      	ldr	r1, [pc, #52]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a82:	4904      	ldr	r1, [pc, #16]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000

08003a98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aa6:	4b75      	ldr	r3, [pc, #468]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d018      	beq.n	8003ae4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ab2:	4b72      	ldr	r3, [pc, #456]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0203 	and.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d10d      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003aca:	4b6c      	ldr	r3, [pc, #432]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
       ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d047      	beq.n	8003b6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	e044      	b.n	8003b6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d018      	beq.n	8003b1e <RCCEx_PLLSAI1_Config+0x86>
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d825      	bhi.n	8003b3c <RCCEx_PLLSAI1_Config+0xa4>
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d002      	beq.n	8003afa <RCCEx_PLLSAI1_Config+0x62>
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d009      	beq.n	8003b0c <RCCEx_PLLSAI1_Config+0x74>
 8003af8:	e020      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003afa:	4b60      	ldr	r3, [pc, #384]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11d      	bne.n	8003b42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b0a:	e01a      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b0c:	4b5b      	ldr	r3, [pc, #364]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b1c:	e013      	b.n	8003b46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b1e:	4b57      	ldr	r3, [pc, #348]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b2a:	4b54      	ldr	r3, [pc, #336]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b3a:	e006      	b.n	8003b4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b40:	e004      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b52:	4b4a      	ldr	r3, [pc, #296]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6819      	ldr	r1, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	430b      	orrs	r3, r1
 8003b68:	4944      	ldr	r1, [pc, #272]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d17d      	bne.n	8003c70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b74:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a40      	ldr	r2, [pc, #256]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fe fb38 	bl	80021f4 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b86:	e009      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b88:	f7fe fb34 	bl	80021f4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	73fb      	strb	r3, [r7, #15]
        break;
 8003b9a:	e005      	b.n	8003ba8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b9c:	4b37      	ldr	r3, [pc, #220]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ef      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d160      	bne.n	8003c70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d111      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb4:	4b31      	ldr	r3, [pc, #196]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6892      	ldr	r2, [r2, #8]
 8003bc4:	0211      	lsls	r1, r2, #8
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68d2      	ldr	r2, [r2, #12]
 8003bca:	0912      	lsrs	r2, r2, #4
 8003bcc:	0452      	lsls	r2, r2, #17
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	492a      	ldr	r1, [pc, #168]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	610b      	str	r3, [r1, #16]
 8003bd6:	e027      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d112      	bne.n	8003c04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bde:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003be6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6892      	ldr	r2, [r2, #8]
 8003bee:	0211      	lsls	r1, r2, #8
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6912      	ldr	r2, [r2, #16]
 8003bf4:	0852      	lsrs	r2, r2, #1
 8003bf6:	3a01      	subs	r2, #1
 8003bf8:	0552      	lsls	r2, r2, #21
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	491f      	ldr	r1, [pc, #124]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	610b      	str	r3, [r1, #16]
 8003c02:	e011      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c04:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6892      	ldr	r2, [r2, #8]
 8003c14:	0211      	lsls	r1, r2, #8
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6952      	ldr	r2, [r2, #20]
 8003c1a:	0852      	lsrs	r2, r2, #1
 8003c1c:	3a01      	subs	r2, #1
 8003c1e:	0652      	lsls	r2, r2, #25
 8003c20:	430a      	orrs	r2, r1
 8003c22:	4916      	ldr	r1, [pc, #88]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c28:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fe fade 	bl	80021f4 <HAL_GetTick>
 8003c38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c3a:	e009      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c3c:	f7fe fada 	bl	80021f4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d902      	bls.n	8003c50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c4e:	e005      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c50:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ef      	beq.n	8003c3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	4904      	ldr	r1, [pc, #16]	@ (8003c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000

08003c80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c9a:	4b67      	ldr	r3, [pc, #412]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0203 	and.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d10d      	bne.n	8003cc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
       ||
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003cb2:	4b61      	ldr	r3, [pc, #388]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
       ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d047      	beq.n	8003d56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
 8003cca:	e044      	b.n	8003d56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d018      	beq.n	8003d06 <RCCEx_PLLSAI2_Config+0x86>
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d825      	bhi.n	8003d24 <RCCEx_PLLSAI2_Config+0xa4>
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d002      	beq.n	8003ce2 <RCCEx_PLLSAI2_Config+0x62>
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d009      	beq.n	8003cf4 <RCCEx_PLLSAI2_Config+0x74>
 8003ce0:	e020      	b.n	8003d24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ce2:	4b55      	ldr	r3, [pc, #340]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11d      	bne.n	8003d2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf2:	e01a      	b.n	8003d2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cf4:	4b50      	ldr	r3, [pc, #320]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d116      	bne.n	8003d2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d04:	e013      	b.n	8003d2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d06:	4b4c      	ldr	r3, [pc, #304]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d12:	4b49      	ldr	r3, [pc, #292]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d22:	e006      	b.n	8003d32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      break;
 8003d28:	e004      	b.n	8003d34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e002      	b.n	8003d34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10d      	bne.n	8003d56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6819      	ldr	r1, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	4939      	ldr	r1, [pc, #228]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d167      	bne.n	8003e2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d5c:	4b36      	ldr	r3, [pc, #216]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a35      	ldr	r2, [pc, #212]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d68:	f7fe fa44 	bl	80021f4 <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d6e:	e009      	b.n	8003d84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d70:	f7fe fa40 	bl	80021f4 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73fb      	strb	r3, [r7, #15]
        break;
 8003d82:	e005      	b.n	8003d90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d84:	4b2c      	ldr	r3, [pc, #176]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ef      	bne.n	8003d70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d14a      	bne.n	8003e2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d111      	bne.n	8003dc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d9c:	4b26      	ldr	r3, [pc, #152]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6892      	ldr	r2, [r2, #8]
 8003dac:	0211      	lsls	r1, r2, #8
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	0912      	lsrs	r2, r2, #4
 8003db4:	0452      	lsls	r2, r2, #17
 8003db6:	430a      	orrs	r2, r1
 8003db8:	491f      	ldr	r1, [pc, #124]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	614b      	str	r3, [r1, #20]
 8003dbe:	e011      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003dc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6892      	ldr	r2, [r2, #8]
 8003dd0:	0211      	lsls	r1, r2, #8
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6912      	ldr	r2, [r2, #16]
 8003dd6:	0852      	lsrs	r2, r2, #1
 8003dd8:	3a01      	subs	r2, #1
 8003dda:	0652      	lsls	r2, r2, #25
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	4916      	ldr	r1, [pc, #88]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003de4:	4b14      	ldr	r3, [pc, #80]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a13      	ldr	r2, [pc, #76]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fe fa00 	bl	80021f4 <HAL_GetTick>
 8003df4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003df6:	e009      	b.n	8003e0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003df8:	f7fe f9fc 	bl	80021f4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d902      	bls.n	8003e0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	73fb      	strb	r3, [r7, #15]
          break;
 8003e0a:	e005      	b.n	8003e18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ef      	beq.n	8003df8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e1e:	4b06      	ldr	r3, [pc, #24]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4904      	ldr	r1, [pc, #16]	@ (8003e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000

08003e3c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d079      	beq.n	8003f42 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd feea 	bl	8001c3c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d058      	beq.n	8003f30 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	22ca      	movs	r2, #202	@ 0xca
 8003e84:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2253      	movs	r2, #83	@ 0x53
 8003e8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fa4e 	bl	8004330 <RTC_EnterInitMode>
 8003e94:	4603      	mov	r3, r0
 8003e96:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d127      	bne.n	8003eee <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eb0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6899      	ldr	r1, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68d2      	ldr	r2, [r2, #12]
 8003ed8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6919      	ldr	r1, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	041a      	lsls	r2, r3, #16
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa52 	bl	8004398 <RTC_ExitInitMode>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d113      	bne.n	8003f26 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0203 	bic.w	r2, r2, #3
 8003f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	22ff      	movs	r2, #255	@ 0xff
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f2e:	e001      	b.n	8003f34 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d103      	bne.n	8003f42 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_RTC_SetTime+0x1a>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e08b      	b.n	800407e <HAL_RTC_SetTime+0x132>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	22ca      	movs	r2, #202	@ 0xca
 8003f7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2253      	movs	r2, #83	@ 0x53
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f9d2 	bl	8004330 <RTC_EnterInitMode>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d163      	bne.n	800405e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d126      	bne.n	8003fea <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fa2d 	bl	8004414 <RTC_ByteToBcd2>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	785b      	ldrb	r3, [r3, #1]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fa26 	bl	8004414 <RTC_ByteToBcd2>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003fcc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	789b      	ldrb	r3, [r3, #2]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fa1e 	bl	8004414 <RTC_ByteToBcd2>
 8003fd8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fda:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	78db      	ldrb	r3, [r3, #3]
 8003fe2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e018      	b.n	800401c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800400a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004010:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	78db      	ldrb	r3, [r3, #3]
 8004016:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004026:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800402a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800403a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6899      	ldr	r1, [r3, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f99f 	bl	8004398 <RTC_ExitInitMode>
 800405a:	4603      	mov	r3, r0
 800405c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	22ff      	movs	r2, #255	@ 0xff
 8004064:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004066:	7cfb      	ldrb	r3, [r7, #19]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800407c:	7cfb      	ldrb	r3, [r7, #19]
}
 800407e:	4618      	mov	r0, r3
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd90      	pop	{r4, r7, pc}

08004086 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b086      	sub	sp, #24
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80040b4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80040b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	0d9b      	lsrs	r3, r3, #22
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11a      	bne.n	8004134 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f9a6 	bl	8004454 <RTC_Bcd2ToByte>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 f99d 	bl	8004454 <RTC_Bcd2ToByte>
 800411a:	4603      	mov	r3, r0
 800411c:	461a      	mov	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	789b      	ldrb	r3, [r3, #2]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f994 	bl	8004454 <RTC_Bcd2ToByte>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800413e:	b590      	push	{r4, r7, lr}
 8004140:	b087      	sub	sp, #28
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_RTC_SetDate+0x1a>
 8004154:	2302      	movs	r3, #2
 8004156:	e075      	b.n	8004244 <HAL_RTC_SetDate+0x106>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10e      	bne.n	800418c <HAL_RTC_SetDate+0x4e>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	f023 0310 	bic.w	r3, r3, #16
 8004182:	b2db      	uxtb	r3, r3
 8004184:	330a      	adds	r3, #10
 8004186:	b2da      	uxtb	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11c      	bne.n	80041cc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	78db      	ldrb	r3, [r3, #3]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f93c 	bl	8004414 <RTC_ByteToBcd2>
 800419c:	4603      	mov	r3, r0
 800419e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	785b      	ldrb	r3, [r3, #1]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f935 	bl	8004414 <RTC_ByteToBcd2>
 80041aa:	4603      	mov	r3, r0
 80041ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80041ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	789b      	ldrb	r3, [r3, #2]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f92d 	bl	8004414 <RTC_ByteToBcd2>
 80041ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	e00e      	b.n	80041ea <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	78db      	ldrb	r3, [r3, #3]
 80041d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80041d8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80041de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	22ca      	movs	r2, #202	@ 0xca
 80041f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2253      	movs	r2, #83	@ 0x53
 80041f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f898 	bl	8004330 <RTC_EnterInitMode>
 8004200:	4603      	mov	r3, r0
 8004202:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10c      	bne.n	8004224 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004214:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004218:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f8bc 	bl	8004398 <RTC_ExitInitMode>
 8004220:	4603      	mov	r3, r0
 8004222:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	22ff      	movs	r2, #255	@ 0xff
 800422a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004242:	7cfb      	ldrb	r3, [r7, #19]
}
 8004244:	4618      	mov	r0, r3
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd90      	pop	{r4, r7, pc}

0800424c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004262:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004266:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	0c1b      	lsrs	r3, r3, #16
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	0a1b      	lsrs	r3, r3, #8
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	0b5b      	lsrs	r3, r3, #13
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11a      	bne.n	80042dc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	78db      	ldrb	r3, [r3, #3]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f8d2 	bl	8004454 <RTC_Bcd2ToByte>
 80042b0:	4603      	mov	r3, r0
 80042b2:	461a      	mov	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 f8c9 	bl	8004454 <RTC_Bcd2ToByte>
 80042c2:	4603      	mov	r3, r0
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	789b      	ldrb	r3, [r3, #2]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f8c0 	bl	8004454 <RTC_Bcd2ToByte>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461a      	mov	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0d      	ldr	r2, [pc, #52]	@ (800432c <HAL_RTC_WaitForSynchro+0x44>)
 80042f6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80042f8:	f7fd ff7c 	bl	80021f4 <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042fe:	e009      	b.n	8004314 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004300:	f7fd ff78 	bl	80021f4 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800430e:	d901      	bls.n	8004314 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e007      	b.n	8004324 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ee      	beq.n	8004300 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	0003ff5f 	.word	0x0003ff5f

08004330 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d120      	bne.n	800438c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f04f 32ff 	mov.w	r2, #4294967295
 8004352:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004354:	f7fd ff4e 	bl	80021f4 <HAL_GetTick>
 8004358:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800435a:	e00d      	b.n	8004378 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800435c:	f7fd ff4a 	bl	80021f4 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800436a:	d905      	bls.n	8004378 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2203      	movs	r2, #3
 8004374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <RTC_EnterInitMode+0x5c>
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d1e7      	bne.n	800435c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80043a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004410 <RTC_ExitInitMode+0x78>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a19      	ldr	r2, [pc, #100]	@ (8004410 <RTC_ExitInitMode+0x78>)
 80043aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80043b0:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <RTC_ExitInitMode+0x78>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10c      	bne.n	80043d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff93 	bl	80042e8 <HAL_RTC_WaitForSynchro>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01e      	beq.n	8004406 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2203      	movs	r2, #3
 80043cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	73fb      	strb	r3, [r7, #15]
 80043d4:	e017      	b.n	8004406 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004410 <RTC_ExitInitMode+0x78>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4a0d      	ldr	r2, [pc, #52]	@ (8004410 <RTC_ExitInitMode+0x78>)
 80043dc:	f023 0320 	bic.w	r3, r3, #32
 80043e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff ff80 	bl	80042e8 <HAL_RTC_WaitForSynchro>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2203      	movs	r2, #3
 80043f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043fa:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <RTC_ExitInitMode+0x78>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	4a04      	ldr	r2, [pc, #16]	@ (8004410 <RTC_ExitInitMode+0x78>)
 8004400:	f043 0320 	orr.w	r3, r3, #32
 8004404:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40002800 	.word	0x40002800

08004414 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004426:	e005      	b.n	8004434 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3301      	adds	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	3b0a      	subs	r3, #10
 8004432:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004434:	7afb      	ldrb	r3, [r7, #11]
 8004436:	2b09      	cmp	r3, #9
 8004438:	d8f6      	bhi.n	8004428 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	b2da      	uxtb	r2, r3
 8004442:	7afb      	ldrb	r3, [r7, #11]
 8004444:	4313      	orrs	r3, r2
 8004446:	b2db      	uxtb	r3, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	0092      	lsls	r2, r2, #2
 8004468:	4413      	add	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	4413      	add	r3, r2
 800447a:	b2db      	uxtb	r3, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e095      	b.n	80045c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044aa:	d009      	beq.n	80044c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	61da      	str	r2, [r3, #28]
 80044b2:	e005      	b.n	80044c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd fbe0 	bl	8001ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004500:	d902      	bls.n	8004508 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e002      	b.n	800450e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800450c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004516:	d007      	beq.n	8004528 <HAL_SPI_Init+0xa0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004520:	d002      	beq.n	8004528 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456a:	ea42 0103 	orr.w	r1, r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	f003 0204 	and.w	r2, r3, #4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045a4:	ea42 0103 	orr.w	r1, r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045de:	f7fd fe09 	bl	80021f4 <HAL_GetTick>
 80045e2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d001      	beq.n	80045f8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
 80045f6:	e15c      	b.n	80048b2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_SPI_Transmit+0x36>
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e154      	b.n	80048b2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_SPI_Transmit+0x48>
 8004612:	2302      	movs	r3, #2
 8004614:	e14d      	b.n	80048b2 <HAL_SPI_Transmit+0x2e4>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2203      	movs	r2, #3
 8004622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	88fa      	ldrh	r2, [r7, #6]
 8004636:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004668:	d10f      	bne.n	800468a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004678:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004688:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d007      	beq.n	80046a8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046b0:	d952      	bls.n	8004758 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_SPI_Transmit+0xf2>
 80046ba:	8b7b      	ldrh	r3, [r7, #26]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d145      	bne.n	800474c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	881a      	ldrh	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	1c9a      	adds	r2, r3, #2
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046e4:	e032      	b.n	800474c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d112      	bne.n	800471a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	881a      	ldrh	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	1c9a      	adds	r2, r3, #2
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004718:	e018      	b.n	800474c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800471a:	f7fd fd6b 	bl	80021f4 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d803      	bhi.n	8004732 <HAL_SPI_Transmit+0x164>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d102      	bne.n	8004738 <HAL_SPI_Transmit+0x16a>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0b2      	b.n	80048b2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1c7      	bne.n	80046e6 <HAL_SPI_Transmit+0x118>
 8004756:	e083      	b.n	8004860 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_SPI_Transmit+0x198>
 8004760:	8b7b      	ldrh	r3, [r7, #26]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d177      	bne.n	8004856 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d912      	bls.n	8004796 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004774:	881a      	ldrh	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	1c9a      	adds	r2, r3, #2
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b02      	subs	r3, #2
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004794:	e05f      	b.n	8004856 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	7812      	ldrb	r2, [r2, #0]
 80047a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047bc:	e04b      	b.n	8004856 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d12b      	bne.n	8004824 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d912      	bls.n	80047fc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047da:	881a      	ldrh	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e6:	1c9a      	adds	r2, r3, #2
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b02      	subs	r3, #2
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047fa:	e02c      	b.n	8004856 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	7812      	ldrb	r2, [r2, #0]
 8004808:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004822:	e018      	b.n	8004856 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004824:	f7fd fce6 	bl	80021f4 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d803      	bhi.n	800483c <HAL_SPI_Transmit+0x26e>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d102      	bne.n	8004842 <HAL_SPI_Transmit+0x274>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e02d      	b.n	80048b2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ae      	bne.n	80047be <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	6839      	ldr	r1, [r7, #0]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fcf5 	bl	8005254 <SPI_EndRxTxTransaction>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
  }
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b088      	sub	sp, #32
 80048be:	af02      	add	r7, sp, #8
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d001      	beq.n	80048da <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80048d6:	2302      	movs	r3, #2
 80048d8:	e123      	b.n	8004b22 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048e2:	d112      	bne.n	800490a <HAL_SPI_Receive+0x50>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10e      	bne.n	800490a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2204      	movs	r2, #4
 80048f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f912 	bl	8004b2a <HAL_SPI_TransmitReceive>
 8004906:	4603      	mov	r3, r0
 8004908:	e10b      	b.n	8004b22 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800490a:	f7fd fc73 	bl	80021f4 <HAL_GetTick>
 800490e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_SPI_Receive+0x62>
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e100      	b.n	8004b22 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_SPI_Receive+0x74>
 800492a:	2302      	movs	r3, #2
 800492c:	e0f9      	b.n	8004b22 <HAL_SPI_Receive+0x268>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2204      	movs	r2, #4
 800493a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	88fa      	ldrh	r2, [r7, #6]
 800494e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	88fa      	ldrh	r2, [r7, #6]
 8004956:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004980:	d908      	bls.n	8004994 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	e007      	b.n	80049a4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ac:	d10f      	bne.n	80049ce <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d8:	2b40      	cmp	r3, #64	@ 0x40
 80049da:	d007      	beq.n	80049ec <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049f4:	d875      	bhi.n	8004ae2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049f6:	e037      	b.n	8004a68 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d117      	bne.n	8004a36 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f103 020c 	add.w	r2, r3, #12
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004a34:	e018      	b.n	8004a68 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a36:	f7fd fbdd 	bl	80021f4 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d803      	bhi.n	8004a4e <HAL_SPI_Receive+0x194>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d102      	bne.n	8004a54 <HAL_SPI_Receive+0x19a>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e05c      	b.n	8004b22 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1c1      	bne.n	80049f8 <HAL_SPI_Receive+0x13e>
 8004a74:	e03b      	b.n	8004aee <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d115      	bne.n	8004ab0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	b292      	uxth	r2, r2
 8004a90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	1c9a      	adds	r2, r3, #2
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004aae:	e018      	b.n	8004ae2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab0:	f7fd fba0 	bl	80021f4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d803      	bhi.n	8004ac8 <HAL_SPI_Receive+0x20e>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d102      	bne.n	8004ace <HAL_SPI_Receive+0x214>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e01f      	b.n	8004b22 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1c3      	bne.n	8004a76 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fb56 	bl	80051a4 <SPI_EndRxTransaction>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b08a      	sub	sp, #40	@ 0x28
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
 8004b36:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b3c:	f7fd fb5a 	bl	80021f4 <HAL_GetTick>
 8004b40:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b48:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004b54:	887b      	ldrh	r3, [r7, #2]
 8004b56:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b58:	7ffb      	ldrb	r3, [r7, #31]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d00c      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x4e>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b64:	d106      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x4a>
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d001      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004b74:	2302      	movs	r3, #2
 8004b76:	e1f3      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_SPI_TransmitReceive+0x60>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_SPI_TransmitReceive+0x60>
 8004b84:	887b      	ldrh	r3, [r7, #2]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e1e8      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x72>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e1e1      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x436>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d003      	beq.n	8004bb8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2205      	movs	r2, #5
 8004bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	887a      	ldrh	r2, [r7, #2]
 8004bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	887a      	ldrh	r2, [r7, #2]
 8004bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	887a      	ldrh	r2, [r7, #2]
 8004be4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bfa:	d802      	bhi.n	8004c02 <HAL_SPI_TransmitReceive+0xd8>
 8004bfc:	8abb      	ldrh	r3, [r7, #20]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d908      	bls.n	8004c14 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	e007      	b.n	8004c24 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c22:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2e:	2b40      	cmp	r3, #64	@ 0x40
 8004c30:	d007      	beq.n	8004c42 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c4a:	f240 8083 	bls.w	8004d54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_TransmitReceive+0x132>
 8004c56:	8afb      	ldrh	r3, [r7, #22]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d16f      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c80:	e05c      	b.n	8004d3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_SPI_TransmitReceive+0x19e>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <HAL_SPI_TransmitReceive+0x19e>
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d113      	bne.n	8004cc8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca4:	881a      	ldrh	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	1c9a      	adds	r2, r3, #2
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d11c      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x1e6>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	b292      	uxth	r2, r2
 8004cee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	1c9a      	adds	r2, r3, #2
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d10:	f7fd fa70 	bl	80021f4 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d80d      	bhi.n	8004d3c <HAL_SPI_TransmitReceive+0x212>
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d009      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e111      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d19d      	bne.n	8004c82 <HAL_SPI_TransmitReceive+0x158>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d197      	bne.n	8004c82 <HAL_SPI_TransmitReceive+0x158>
 8004d52:	e0e5      	b.n	8004f20 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x23a>
 8004d5c:	8afb      	ldrh	r3, [r7, #22]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	f040 80d1 	bne.w	8004f06 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d912      	bls.n	8004d94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b02      	subs	r3, #2
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d92:	e0b8      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	7812      	ldrb	r2, [r2, #0]
 8004da0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dba:	e0a4      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d134      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x30a>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d02f      	beq.n	8004e34 <HAL_SPI_TransmitReceive+0x30a>
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d12c      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d912      	bls.n	8004e0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	881a      	ldrh	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	1c9a      	adds	r2, r3, #2
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b02      	subs	r3, #2
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e08:	e012      	b.n	8004e30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d148      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x3aa>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d042      	beq.n	8004ed4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d923      	bls.n	8004ea2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	b292      	uxth	r2, r2
 8004e66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	1c9a      	adds	r2, r3, #2
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b02      	subs	r3, #2
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d81f      	bhi.n	8004ed0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	e016      	b.n	8004ed0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f103 020c 	add.w	r2, r3, #12
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ed4:	f7fd f98e 	bl	80021f4 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d803      	bhi.n	8004eec <HAL_SPI_TransmitReceive+0x3c2>
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eea:	d102      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x3c8>
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e02c      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f47f af55 	bne.w	8004dbc <HAL_SPI_TransmitReceive+0x292>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f47f af4e 	bne.w	8004dbc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f20:	6a3a      	ldr	r2, [r7, #32]
 8004f22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f995 	bl	8005254 <SPI_EndRxTxTransaction>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e00e      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
  }
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3728      	adds	r7, #40	@ 0x28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f78:	f7fd f93c 	bl	80021f4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	4413      	add	r3, r2
 8004f86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f88:	f7fd f934 	bl	80021f4 <HAL_GetTick>
 8004f8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f8e:	4b39      	ldr	r3, [pc, #228]	@ (8005074 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	015b      	lsls	r3, r3, #5
 8004f94:	0d1b      	lsrs	r3, r3, #20
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9e:	e054      	b.n	800504a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d050      	beq.n	800504a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fa8:	f7fd f924 	bl	80021f4 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d902      	bls.n	8004fbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d13d      	bne.n	800503a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fd6:	d111      	bne.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe0:	d004      	beq.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fea:	d107      	bne.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ffa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005004:	d10f      	bne.n	8005026 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005024:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e017      	b.n	800506a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3b01      	subs	r3, #1
 8005048:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4013      	ands	r3, r2
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	bf0c      	ite	eq
 800505a:	2301      	moveq	r3, #1
 800505c:	2300      	movne	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	429a      	cmp	r2, r3
 8005066:	d19b      	bne.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3720      	adds	r7, #32
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000004 	.word	0x20000004

08005078 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	@ 0x28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800508a:	f7fd f8b3 	bl	80021f4 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	4413      	add	r3, r2
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800509a:	f7fd f8ab 	bl	80021f4 <HAL_GetTick>
 800509e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050a8:	4b3d      	ldr	r3, [pc, #244]	@ (80051a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	00da      	lsls	r2, r3, #3
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	0d1b      	lsrs	r3, r3, #20
 80050b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050c0:	e060      	b.n	8005184 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80050c8:	d107      	bne.n	80050da <SPI_WaitFifoStateUntilTimeout+0x62>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	d050      	beq.n	8005184 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050e2:	f7fd f887 	bl	80021f4 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d902      	bls.n	80050f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d13d      	bne.n	8005174 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005106:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005110:	d111      	bne.n	8005136 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800511a:	d004      	beq.n	8005126 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005124:	d107      	bne.n	8005136 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005134:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513e:	d10f      	bne.n	8005160 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800515e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e010      	b.n	8005196 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	3b01      	subs	r3, #1
 8005182:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d196      	bne.n	80050c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3728      	adds	r7, #40	@ 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000004 	.word	0x20000004

080051a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051b8:	d111      	bne.n	80051de <SPI_EndRxTransaction+0x3a>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051c2:	d004      	beq.n	80051ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051cc:	d107      	bne.n	80051de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2200      	movs	r2, #0
 80051e6:	2180      	movs	r1, #128	@ 0x80
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7ff febd 	bl	8004f68 <SPI_WaitFlagStateUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f8:	f043 0220 	orr.w	r2, r3, #32
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e023      	b.n	800524c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800520c:	d11d      	bne.n	800524a <SPI_EndRxTransaction+0xa6>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005216:	d004      	beq.n	8005222 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005220:	d113      	bne.n	800524a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2200      	movs	r2, #0
 800522a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff ff22 	bl	8005078 <SPI_WaitFifoStateUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800523e:	f043 0220 	orr.w	r2, r3, #32
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e000      	b.n	800524c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2200      	movs	r2, #0
 8005268:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff ff03 	bl	8005078 <SPI_WaitFifoStateUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e027      	b.n	80052d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	2180      	movs	r1, #128	@ 0x80
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff fe68 	bl	8004f68 <SPI_WaitFlagStateUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e014      	b.n	80052d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7ff fedc 	bl	8005078 <SPI_WaitFifoStateUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e000      	b.n	80052d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e049      	b.n	8005386 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc fd2c 	bl	8001d64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3304      	adds	r3, #4
 800531c:	4619      	mov	r1, r3
 800531e:	4610      	mov	r0, r2
 8005320:	f000 fc4e 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_IC_Start_IT+0x1e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	e023      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x66>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d104      	bne.n	80053be <HAL_TIM_IC_Start_IT+0x2e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e01b      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x66>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_IC_Start_IT+0x3e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	e013      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x66>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	d104      	bne.n	80053de <HAL_TIM_IC_Start_IT+0x4e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	e00b      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x66>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_IC_Start_IT+0x5e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	e003      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x66>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <HAL_TIM_IC_Start_IT+0x78>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e013      	b.n	8005430 <HAL_TIM_IC_Start_IT+0xa0>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d104      	bne.n	8005418 <HAL_TIM_IC_Start_IT+0x88>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e00b      	b.n	8005430 <HAL_TIM_IC_Start_IT+0xa0>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b08      	cmp	r3, #8
 800541c:	d104      	bne.n	8005428 <HAL_TIM_IC_Start_IT+0x98>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005424:	b2db      	uxtb	r3, r3
 8005426:	e003      	b.n	8005430 <HAL_TIM_IC_Start_IT+0xa0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800542e:	b2db      	uxtb	r3, r3
 8005430:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005432:	7bbb      	ldrb	r3, [r7, #14]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d102      	bne.n	800543e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005438:	7b7b      	ldrb	r3, [r7, #13]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0dd      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <HAL_TIM_IC_Start_IT+0xc2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005450:	e023      	b.n	800549a <HAL_TIM_IC_Start_IT+0x10a>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d104      	bne.n	8005462 <HAL_TIM_IC_Start_IT+0xd2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005460:	e01b      	b.n	800549a <HAL_TIM_IC_Start_IT+0x10a>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d104      	bne.n	8005472 <HAL_TIM_IC_Start_IT+0xe2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005470:	e013      	b.n	800549a <HAL_TIM_IC_Start_IT+0x10a>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b0c      	cmp	r3, #12
 8005476:	d104      	bne.n	8005482 <HAL_TIM_IC_Start_IT+0xf2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005480:	e00b      	b.n	800549a <HAL_TIM_IC_Start_IT+0x10a>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b10      	cmp	r3, #16
 8005486:	d104      	bne.n	8005492 <HAL_TIM_IC_Start_IT+0x102>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005490:	e003      	b.n	800549a <HAL_TIM_IC_Start_IT+0x10a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <HAL_TIM_IC_Start_IT+0x11a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a8:	e013      	b.n	80054d2 <HAL_TIM_IC_Start_IT+0x142>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_IC_Start_IT+0x12a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054b8:	e00b      	b.n	80054d2 <HAL_TIM_IC_Start_IT+0x142>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d104      	bne.n	80054ca <HAL_TIM_IC_Start_IT+0x13a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054c8:	e003      	b.n	80054d2 <HAL_TIM_IC_Start_IT+0x142>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d841      	bhi.n	800555c <HAL_TIM_IC_Start_IT+0x1cc>
 80054d8:	a201      	add	r2, pc, #4	@ (adr r2, 80054e0 <HAL_TIM_IC_Start_IT+0x150>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005515 	.word	0x08005515
 80054e4:	0800555d 	.word	0x0800555d
 80054e8:	0800555d 	.word	0x0800555d
 80054ec:	0800555d 	.word	0x0800555d
 80054f0:	08005527 	.word	0x08005527
 80054f4:	0800555d 	.word	0x0800555d
 80054f8:	0800555d 	.word	0x0800555d
 80054fc:	0800555d 	.word	0x0800555d
 8005500:	08005539 	.word	0x08005539
 8005504:	0800555d 	.word	0x0800555d
 8005508:	0800555d 	.word	0x0800555d
 800550c:	0800555d 	.word	0x0800555d
 8005510:	0800554b 	.word	0x0800554b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0202 	orr.w	r2, r2, #2
 8005522:	60da      	str	r2, [r3, #12]
      break;
 8005524:	e01d      	b.n	8005562 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0204 	orr.w	r2, r2, #4
 8005534:	60da      	str	r2, [r3, #12]
      break;
 8005536:	e014      	b.n	8005562 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	60da      	str	r2, [r3, #12]
      break;
 8005548:	e00b      	b.n	8005562 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0210 	orr.w	r2, r2, #16
 8005558:	60da      	str	r2, [r3, #12]
      break;
 800555a:	e002      	b.n	8005562 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
      break;
 8005560:	bf00      	nop
  }

  if (status == HAL_OK)
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d149      	bne.n	80055fc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2201      	movs	r2, #1
 800556e:	6839      	ldr	r1, [r7, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fcef 	bl	8005f54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a23      	ldr	r2, [pc, #140]	@ (8005608 <HAL_TIM_IC_Start_IT+0x278>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d01d      	beq.n	80055bc <HAL_TIM_IC_Start_IT+0x22c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005588:	d018      	beq.n	80055bc <HAL_TIM_IC_Start_IT+0x22c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1f      	ldr	r2, [pc, #124]	@ (800560c <HAL_TIM_IC_Start_IT+0x27c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <HAL_TIM_IC_Start_IT+0x22c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1d      	ldr	r2, [pc, #116]	@ (8005610 <HAL_TIM_IC_Start_IT+0x280>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <HAL_TIM_IC_Start_IT+0x22c>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005614 <HAL_TIM_IC_Start_IT+0x284>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d009      	beq.n	80055bc <HAL_TIM_IC_Start_IT+0x22c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005618 <HAL_TIM_IC_Start_IT+0x288>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIM_IC_Start_IT+0x22c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a19      	ldr	r2, [pc, #100]	@ (800561c <HAL_TIM_IC_Start_IT+0x28c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d115      	bne.n	80055e8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	4b17      	ldr	r3, [pc, #92]	@ (8005620 <HAL_TIM_IC_Start_IT+0x290>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d015      	beq.n	80055fa <HAL_TIM_IC_Start_IT+0x26a>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d4:	d011      	beq.n	80055fa <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0201 	orr.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	e008      	b.n	80055fa <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e000      	b.n	80055fc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40013400 	.word	0x40013400
 800561c:	40014000 	.word	0x40014000
 8005620:	00010007 	.word	0x00010007

08005624 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d841      	bhi.n	80056bc <HAL_TIM_IC_Stop_IT+0x98>
 8005638:	a201      	add	r2, pc, #4	@ (adr r2, 8005640 <HAL_TIM_IC_Stop_IT+0x1c>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005675 	.word	0x08005675
 8005644:	080056bd 	.word	0x080056bd
 8005648:	080056bd 	.word	0x080056bd
 800564c:	080056bd 	.word	0x080056bd
 8005650:	08005687 	.word	0x08005687
 8005654:	080056bd 	.word	0x080056bd
 8005658:	080056bd 	.word	0x080056bd
 800565c:	080056bd 	.word	0x080056bd
 8005660:	08005699 	.word	0x08005699
 8005664:	080056bd 	.word	0x080056bd
 8005668:	080056bd 	.word	0x080056bd
 800566c:	080056bd 	.word	0x080056bd
 8005670:	080056ab 	.word	0x080056ab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0202 	bic.w	r2, r2, #2
 8005682:	60da      	str	r2, [r3, #12]
      break;
 8005684:	e01d      	b.n	80056c2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0204 	bic.w	r2, r2, #4
 8005694:	60da      	str	r2, [r3, #12]
      break;
 8005696:	e014      	b.n	80056c2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0208 	bic.w	r2, r2, #8
 80056a6:	60da      	str	r2, [r3, #12]
      break;
 80056a8:	e00b      	b.n	80056c2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0210 	bic.w	r2, r2, #16
 80056b8:	60da      	str	r2, [r3, #12]
      break;
 80056ba:	e002      	b.n	80056c2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
      break;
 80056c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d166      	bne.n	8005796 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2200      	movs	r2, #0
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fc3f 	bl	8005f54 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6a1a      	ldr	r2, [r3, #32]
 80056dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10f      	bne.n	8005706 <HAL_TIM_IC_Stop_IT+0xe2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d107      	bne.n	8005706 <HAL_TIM_IC_Stop_IT+0xe2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <HAL_TIM_IC_Stop_IT+0xf2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005714:	e023      	b.n	800575e <HAL_TIM_IC_Stop_IT+0x13a>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b04      	cmp	r3, #4
 800571a:	d104      	bne.n	8005726 <HAL_TIM_IC_Stop_IT+0x102>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005724:	e01b      	b.n	800575e <HAL_TIM_IC_Stop_IT+0x13a>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d104      	bne.n	8005736 <HAL_TIM_IC_Stop_IT+0x112>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005734:	e013      	b.n	800575e <HAL_TIM_IC_Stop_IT+0x13a>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b0c      	cmp	r3, #12
 800573a:	d104      	bne.n	8005746 <HAL_TIM_IC_Stop_IT+0x122>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005744:	e00b      	b.n	800575e <HAL_TIM_IC_Stop_IT+0x13a>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b10      	cmp	r3, #16
 800574a:	d104      	bne.n	8005756 <HAL_TIM_IC_Stop_IT+0x132>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005754:	e003      	b.n	800575e <HAL_TIM_IC_Stop_IT+0x13a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <HAL_TIM_IC_Stop_IT+0x14a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800576c:	e013      	b.n	8005796 <HAL_TIM_IC_Stop_IT+0x172>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b04      	cmp	r3, #4
 8005772:	d104      	bne.n	800577e <HAL_TIM_IC_Stop_IT+0x15a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800577c:	e00b      	b.n	8005796 <HAL_TIM_IC_Stop_IT+0x172>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b08      	cmp	r3, #8
 8005782:	d104      	bne.n	800578e <HAL_TIM_IC_Stop_IT+0x16a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800578c:	e003      	b.n	8005796 <HAL_TIM_IC_Stop_IT+0x172>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d020      	beq.n	8005804 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01b      	beq.n	8005804 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0202 	mvn.w	r2, #2
 80057d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fb fd84 	bl	80012f8 <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9c6 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f9cd 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d020      	beq.n	8005850 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01b      	beq.n	8005850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0204 	mvn.w	r2, #4
 8005820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fb fd5e 	bl	80012f8 <HAL_TIM_IC_CaptureCallback>
 800583c:	e005      	b.n	800584a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f9a0 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f9a7 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d020      	beq.n	800589c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01b      	beq.n	800589c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0208 	mvn.w	r2, #8
 800586c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2204      	movs	r2, #4
 8005872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fb fd38 	bl	80012f8 <HAL_TIM_IC_CaptureCallback>
 8005888:	e005      	b.n	8005896 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f97a 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f981 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d020      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01b      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0210 	mvn.w	r2, #16
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2208      	movs	r2, #8
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fd12 	bl	80012f8 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f954 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f95b 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00c      	beq.n	800590c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0201 	mvn.w	r2, #1
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f932 	bl	8005b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00c      	beq.n	800593a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fbc5 	bl	80060c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00c      	beq.n	800595e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fbbd 	bl	80060d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00c      	beq.n	8005982 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800597a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f915 	bl	8005bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f06f 0220 	mvn.w	r2, #32
 800599e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fb85 	bl	80060b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e088      	b.n	8005ade <HAL_TIM_IC_ConfigChannel+0x130>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d11b      	bne.n	8005a12 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80059ea:	f000 f98f 	bl	8005d0c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699a      	ldr	r2, [r3, #24]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 020c 	bic.w	r2, r2, #12
 80059fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6999      	ldr	r1, [r3, #24]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	619a      	str	r2, [r3, #24]
 8005a10:	e060      	b.n	8005ad4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d11c      	bne.n	8005a52 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005a28:	f000 f9de 	bl	8005de8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a3a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6999      	ldr	r1, [r3, #24]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	021a      	lsls	r2, r3, #8
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	619a      	str	r2, [r3, #24]
 8005a50:	e040      	b.n	8005ad4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a68:	f000 f9fb 	bl	8005e62 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69da      	ldr	r2, [r3, #28]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 020c 	bic.w	r2, r2, #12
 8005a7a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69d9      	ldr	r1, [r3, #28]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	61da      	str	r2, [r3, #28]
 8005a8e:	e021      	b.n	8005ad4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b0c      	cmp	r3, #12
 8005a94:	d11c      	bne.n	8005ad0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005aa6:	f000 fa18 	bl	8005eda <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005ab8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69d9      	ldr	r1, [r3, #28]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	021a      	lsls	r2, r3, #8
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	61da      	str	r2, [r3, #28]
 8005ace:	e001      	b.n	8005ad4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d831      	bhi.n	8005b60 <HAL_TIM_ReadCapturedValue+0x78>
 8005afc:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005b39 	.word	0x08005b39
 8005b08:	08005b61 	.word	0x08005b61
 8005b0c:	08005b61 	.word	0x08005b61
 8005b10:	08005b61 	.word	0x08005b61
 8005b14:	08005b43 	.word	0x08005b43
 8005b18:	08005b61 	.word	0x08005b61
 8005b1c:	08005b61 	.word	0x08005b61
 8005b20:	08005b61 	.word	0x08005b61
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005b61 	.word	0x08005b61
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005b61 	.word	0x08005b61
 8005b34:	08005b57 	.word	0x08005b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3e:	60fb      	str	r3, [r7, #12]

      break;
 8005b40:	e00f      	b.n	8005b62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	60fb      	str	r3, [r7, #12]

      break;
 8005b4a:	e00a      	b.n	8005b62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	60fb      	str	r3, [r7, #12]

      break;
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5c:	60fb      	str	r3, [r7, #12]

      break;
 8005b5e:	e000      	b.n	8005b62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b60:	bf00      	nop
  }

  return tmpreg;
 8005b62:	68fb      	ldr	r3, [r7, #12]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a46      	ldr	r2, [pc, #280]	@ (8005cec <TIM_Base_SetConfig+0x12c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bde:	d00f      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a43      	ldr	r2, [pc, #268]	@ (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a42      	ldr	r2, [pc, #264]	@ (8005cf4 <TIM_Base_SetConfig+0x134>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a41      	ldr	r2, [pc, #260]	@ (8005cf8 <TIM_Base_SetConfig+0x138>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a40      	ldr	r2, [pc, #256]	@ (8005cfc <TIM_Base_SetConfig+0x13c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a35      	ldr	r2, [pc, #212]	@ (8005cec <TIM_Base_SetConfig+0x12c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01f      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c20:	d01b      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a32      	ldr	r2, [pc, #200]	@ (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d017      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a31      	ldr	r2, [pc, #196]	@ (8005cf4 <TIM_Base_SetConfig+0x134>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a30      	ldr	r2, [pc, #192]	@ (8005cf8 <TIM_Base_SetConfig+0x138>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00f      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005cfc <TIM_Base_SetConfig+0x13c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2e      	ldr	r2, [pc, #184]	@ (8005d00 <TIM_Base_SetConfig+0x140>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d04 <TIM_Base_SetConfig+0x144>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2c      	ldr	r2, [pc, #176]	@ (8005d08 <TIM_Base_SetConfig+0x148>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a16      	ldr	r2, [pc, #88]	@ (8005cec <TIM_Base_SetConfig+0x12c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00f      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a18      	ldr	r2, [pc, #96]	@ (8005cfc <TIM_Base_SetConfig+0x13c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	@ (8005d00 <TIM_Base_SetConfig+0x140>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a16      	ldr	r2, [pc, #88]	@ (8005d04 <TIM_Base_SetConfig+0x144>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a15      	ldr	r2, [pc, #84]	@ (8005d08 <TIM_Base_SetConfig+0x148>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d103      	bne.n	8005cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d105      	bne.n	8005cde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f023 0201 	bic.w	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	611a      	str	r2, [r3, #16]
  }
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	40000800 	.word	0x40000800
 8005cf8:	40000c00 	.word	0x40000c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800

08005d0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f023 0201 	bic.w	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a26      	ldr	r2, [pc, #152]	@ (8005dd0 <TIM_TI1_SetConfig+0xc4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d017      	beq.n	8005d6a <TIM_TI1_SetConfig+0x5e>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d40:	d013      	beq.n	8005d6a <TIM_TI1_SetConfig+0x5e>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a23      	ldr	r2, [pc, #140]	@ (8005dd4 <TIM_TI1_SetConfig+0xc8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00f      	beq.n	8005d6a <TIM_TI1_SetConfig+0x5e>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4a22      	ldr	r2, [pc, #136]	@ (8005dd8 <TIM_TI1_SetConfig+0xcc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <TIM_TI1_SetConfig+0x5e>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a21      	ldr	r2, [pc, #132]	@ (8005ddc <TIM_TI1_SetConfig+0xd0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <TIM_TI1_SetConfig+0x5e>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	@ (8005de0 <TIM_TI1_SetConfig+0xd4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_TI1_SetConfig+0x5e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4a1f      	ldr	r2, [pc, #124]	@ (8005de4 <TIM_TI1_SetConfig+0xd8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d101      	bne.n	8005d6e <TIM_TI1_SetConfig+0x62>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <TIM_TI1_SetConfig+0x64>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e003      	b.n	8005d8e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f023 030a 	bic.w	r3, r3, #10
 8005da8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f003 030a 	and.w	r3, r3, #10
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40013400 	.word	0x40013400
 8005de4:	40014000 	.word	0x40014000

08005de8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f023 0210 	bic.w	r2, r3, #16
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	031b      	lsls	r3, r3, #12
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e3a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005eb2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	621a      	str	r2, [r3, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b087      	sub	sp, #28
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	031b      	lsls	r3, r3, #12
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	621a      	str	r2, [r3, #32]
}
 8005f48:	bf00      	nop
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	2201      	movs	r2, #1
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1a      	ldr	r2, [r3, #32]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	43db      	mvns	r3, r3
 8005f76:	401a      	ands	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a1a      	ldr	r2, [r3, #32]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e068      	b.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800609c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d108      	bne.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ff2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4313      	orrs	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1e      	ldr	r2, [pc, #120]	@ (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d01d      	beq.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800602a:	d018      	beq.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1b      	ldr	r2, [pc, #108]	@ (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1a      	ldr	r2, [pc, #104]	@ (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00e      	beq.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a18      	ldr	r2, [pc, #96]	@ (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d009      	beq.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a13      	ldr	r2, [pc, #76]	@ (800609c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d004      	beq.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a14      	ldr	r2, [pc, #80]	@ (80060ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d10c      	bne.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	4313      	orrs	r3, r2
 800606e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40013400 	.word	0x40013400
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40014000 	.word	0x40014000

080060b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e040      	b.n	8006180 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fb fe70 	bl	8001df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2224      	movs	r2, #36	@ 0x24
 8006118:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fb6a 	bl	800680c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f8af 	bl	800629c <UART_SetConfig>
 800613e:	4603      	mov	r3, r0
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e01b      	b.n	8006180 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fbe9 	bl	8006950 <UART_CheckIdleState>
 800617e:	4603      	mov	r3, r0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	@ 0x28
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	4613      	mov	r3, r2
 8006196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800619c:	2b20      	cmp	r3, #32
 800619e:	d177      	bne.n	8006290 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_UART_Transmit+0x24>
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e070      	b.n	8006292 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2221      	movs	r2, #33	@ 0x21
 80061bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061be:	f7fc f819 	bl	80021f4 <HAL_GetTick>
 80061c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	88fa      	ldrh	r2, [r7, #6]
 80061d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061dc:	d108      	bne.n	80061f0 <HAL_UART_Transmit+0x68>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d104      	bne.n	80061f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	e003      	b.n	80061f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061f8:	e02f      	b.n	800625a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2200      	movs	r2, #0
 8006202:	2180      	movs	r1, #128	@ 0x80
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fc4b 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d004      	beq.n	800621a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e03b      	b.n	8006292 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	881a      	ldrh	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622c:	b292      	uxth	r2, r2
 800622e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	3302      	adds	r3, #2
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	e007      	b.n	8006248 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	3301      	adds	r3, #1
 8006246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1c9      	bne.n	80061fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2200      	movs	r2, #0
 800626e:	2140      	movs	r1, #64	@ 0x40
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fc15 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d004      	beq.n	8006286 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e005      	b.n	8006292 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e000      	b.n	8006292 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006290:	2302      	movs	r3, #2
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800629c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a0:	b08a      	sub	sp, #40	@ 0x28
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	431a      	orrs	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4ba4      	ldr	r3, [pc, #656]	@ (800655c <UART_SetConfig+0x2c0>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062d4:	430b      	orrs	r3, r1
 80062d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a99      	ldr	r2, [pc, #612]	@ (8006560 <UART_SetConfig+0x2c4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006304:	4313      	orrs	r3, r2
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006318:	430a      	orrs	r2, r1
 800631a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a90      	ldr	r2, [pc, #576]	@ (8006564 <UART_SetConfig+0x2c8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d126      	bne.n	8006374 <UART_SetConfig+0xd8>
 8006326:	4b90      	ldr	r3, [pc, #576]	@ (8006568 <UART_SetConfig+0x2cc>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	2b03      	cmp	r3, #3
 8006332:	d81b      	bhi.n	800636c <UART_SetConfig+0xd0>
 8006334:	a201      	add	r2, pc, #4	@ (adr r2, 800633c <UART_SetConfig+0xa0>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	0800634d 	.word	0x0800634d
 8006340:	0800635d 	.word	0x0800635d
 8006344:	08006355 	.word	0x08006355
 8006348:	08006365 	.word	0x08006365
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006352:	e116      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006354:	2302      	movs	r3, #2
 8006356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635a:	e112      	b.n	8006582 <UART_SetConfig+0x2e6>
 800635c:	2304      	movs	r3, #4
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006362:	e10e      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006364:	2308      	movs	r3, #8
 8006366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800636a:	e10a      	b.n	8006582 <UART_SetConfig+0x2e6>
 800636c:	2310      	movs	r3, #16
 800636e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006372:	e106      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a7c      	ldr	r2, [pc, #496]	@ (800656c <UART_SetConfig+0x2d0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d138      	bne.n	80063f0 <UART_SetConfig+0x154>
 800637e:	4b7a      	ldr	r3, [pc, #488]	@ (8006568 <UART_SetConfig+0x2cc>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006384:	f003 030c 	and.w	r3, r3, #12
 8006388:	2b0c      	cmp	r3, #12
 800638a:	d82d      	bhi.n	80063e8 <UART_SetConfig+0x14c>
 800638c:	a201      	add	r2, pc, #4	@ (adr r2, 8006394 <UART_SetConfig+0xf8>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063c9 	.word	0x080063c9
 8006398:	080063e9 	.word	0x080063e9
 800639c:	080063e9 	.word	0x080063e9
 80063a0:	080063e9 	.word	0x080063e9
 80063a4:	080063d9 	.word	0x080063d9
 80063a8:	080063e9 	.word	0x080063e9
 80063ac:	080063e9 	.word	0x080063e9
 80063b0:	080063e9 	.word	0x080063e9
 80063b4:	080063d1 	.word	0x080063d1
 80063b8:	080063e9 	.word	0x080063e9
 80063bc:	080063e9 	.word	0x080063e9
 80063c0:	080063e9 	.word	0x080063e9
 80063c4:	080063e1 	.word	0x080063e1
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ce:	e0d8      	b.n	8006582 <UART_SetConfig+0x2e6>
 80063d0:	2302      	movs	r3, #2
 80063d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d6:	e0d4      	b.n	8006582 <UART_SetConfig+0x2e6>
 80063d8:	2304      	movs	r3, #4
 80063da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063de:	e0d0      	b.n	8006582 <UART_SetConfig+0x2e6>
 80063e0:	2308      	movs	r3, #8
 80063e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e6:	e0cc      	b.n	8006582 <UART_SetConfig+0x2e6>
 80063e8:	2310      	movs	r3, #16
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ee:	e0c8      	b.n	8006582 <UART_SetConfig+0x2e6>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a5e      	ldr	r2, [pc, #376]	@ (8006570 <UART_SetConfig+0x2d4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d125      	bne.n	8006446 <UART_SetConfig+0x1aa>
 80063fa:	4b5b      	ldr	r3, [pc, #364]	@ (8006568 <UART_SetConfig+0x2cc>)
 80063fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006400:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006404:	2b30      	cmp	r3, #48	@ 0x30
 8006406:	d016      	beq.n	8006436 <UART_SetConfig+0x19a>
 8006408:	2b30      	cmp	r3, #48	@ 0x30
 800640a:	d818      	bhi.n	800643e <UART_SetConfig+0x1a2>
 800640c:	2b20      	cmp	r3, #32
 800640e:	d00a      	beq.n	8006426 <UART_SetConfig+0x18a>
 8006410:	2b20      	cmp	r3, #32
 8006412:	d814      	bhi.n	800643e <UART_SetConfig+0x1a2>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <UART_SetConfig+0x182>
 8006418:	2b10      	cmp	r3, #16
 800641a:	d008      	beq.n	800642e <UART_SetConfig+0x192>
 800641c:	e00f      	b.n	800643e <UART_SetConfig+0x1a2>
 800641e:	2300      	movs	r3, #0
 8006420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006424:	e0ad      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006426:	2302      	movs	r3, #2
 8006428:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800642c:	e0a9      	b.n	8006582 <UART_SetConfig+0x2e6>
 800642e:	2304      	movs	r3, #4
 8006430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006434:	e0a5      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006436:	2308      	movs	r3, #8
 8006438:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800643c:	e0a1      	b.n	8006582 <UART_SetConfig+0x2e6>
 800643e:	2310      	movs	r3, #16
 8006440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006444:	e09d      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a4a      	ldr	r2, [pc, #296]	@ (8006574 <UART_SetConfig+0x2d8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d125      	bne.n	800649c <UART_SetConfig+0x200>
 8006450:	4b45      	ldr	r3, [pc, #276]	@ (8006568 <UART_SetConfig+0x2cc>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006456:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800645a:	2bc0      	cmp	r3, #192	@ 0xc0
 800645c:	d016      	beq.n	800648c <UART_SetConfig+0x1f0>
 800645e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006460:	d818      	bhi.n	8006494 <UART_SetConfig+0x1f8>
 8006462:	2b80      	cmp	r3, #128	@ 0x80
 8006464:	d00a      	beq.n	800647c <UART_SetConfig+0x1e0>
 8006466:	2b80      	cmp	r3, #128	@ 0x80
 8006468:	d814      	bhi.n	8006494 <UART_SetConfig+0x1f8>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <UART_SetConfig+0x1d8>
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	d008      	beq.n	8006484 <UART_SetConfig+0x1e8>
 8006472:	e00f      	b.n	8006494 <UART_SetConfig+0x1f8>
 8006474:	2300      	movs	r3, #0
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647a:	e082      	b.n	8006582 <UART_SetConfig+0x2e6>
 800647c:	2302      	movs	r3, #2
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006482:	e07e      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006484:	2304      	movs	r3, #4
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648a:	e07a      	b.n	8006582 <UART_SetConfig+0x2e6>
 800648c:	2308      	movs	r3, #8
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006492:	e076      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006494:	2310      	movs	r3, #16
 8006496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800649a:	e072      	b.n	8006582 <UART_SetConfig+0x2e6>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a35      	ldr	r2, [pc, #212]	@ (8006578 <UART_SetConfig+0x2dc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d12a      	bne.n	80064fc <UART_SetConfig+0x260>
 80064a6:	4b30      	ldr	r3, [pc, #192]	@ (8006568 <UART_SetConfig+0x2cc>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064b4:	d01a      	beq.n	80064ec <UART_SetConfig+0x250>
 80064b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ba:	d81b      	bhi.n	80064f4 <UART_SetConfig+0x258>
 80064bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c0:	d00c      	beq.n	80064dc <UART_SetConfig+0x240>
 80064c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c6:	d815      	bhi.n	80064f4 <UART_SetConfig+0x258>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <UART_SetConfig+0x238>
 80064cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d0:	d008      	beq.n	80064e4 <UART_SetConfig+0x248>
 80064d2:	e00f      	b.n	80064f4 <UART_SetConfig+0x258>
 80064d4:	2300      	movs	r3, #0
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064da:	e052      	b.n	8006582 <UART_SetConfig+0x2e6>
 80064dc:	2302      	movs	r3, #2
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e2:	e04e      	b.n	8006582 <UART_SetConfig+0x2e6>
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ea:	e04a      	b.n	8006582 <UART_SetConfig+0x2e6>
 80064ec:	2308      	movs	r3, #8
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f2:	e046      	b.n	8006582 <UART_SetConfig+0x2e6>
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fa:	e042      	b.n	8006582 <UART_SetConfig+0x2e6>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a17      	ldr	r2, [pc, #92]	@ (8006560 <UART_SetConfig+0x2c4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d13a      	bne.n	800657c <UART_SetConfig+0x2e0>
 8006506:	4b18      	ldr	r3, [pc, #96]	@ (8006568 <UART_SetConfig+0x2cc>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006510:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006514:	d01a      	beq.n	800654c <UART_SetConfig+0x2b0>
 8006516:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800651a:	d81b      	bhi.n	8006554 <UART_SetConfig+0x2b8>
 800651c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006520:	d00c      	beq.n	800653c <UART_SetConfig+0x2a0>
 8006522:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006526:	d815      	bhi.n	8006554 <UART_SetConfig+0x2b8>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <UART_SetConfig+0x298>
 800652c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006530:	d008      	beq.n	8006544 <UART_SetConfig+0x2a8>
 8006532:	e00f      	b.n	8006554 <UART_SetConfig+0x2b8>
 8006534:	2300      	movs	r3, #0
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653a:	e022      	b.n	8006582 <UART_SetConfig+0x2e6>
 800653c:	2302      	movs	r3, #2
 800653e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006542:	e01e      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006544:	2304      	movs	r3, #4
 8006546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654a:	e01a      	b.n	8006582 <UART_SetConfig+0x2e6>
 800654c:	2308      	movs	r3, #8
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006552:	e016      	b.n	8006582 <UART_SetConfig+0x2e6>
 8006554:	2310      	movs	r3, #16
 8006556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655a:	e012      	b.n	8006582 <UART_SetConfig+0x2e6>
 800655c:	efff69f3 	.word	0xefff69f3
 8006560:	40008000 	.word	0x40008000
 8006564:	40013800 	.word	0x40013800
 8006568:	40021000 	.word	0x40021000
 800656c:	40004400 	.word	0x40004400
 8006570:	40004800 	.word	0x40004800
 8006574:	40004c00 	.word	0x40004c00
 8006578:	40005000 	.word	0x40005000
 800657c:	2310      	movs	r3, #16
 800657e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a9f      	ldr	r2, [pc, #636]	@ (8006804 <UART_SetConfig+0x568>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d17a      	bne.n	8006682 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800658c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006590:	2b08      	cmp	r3, #8
 8006592:	d824      	bhi.n	80065de <UART_SetConfig+0x342>
 8006594:	a201      	add	r2, pc, #4	@ (adr r2, 800659c <UART_SetConfig+0x300>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065df 	.word	0x080065df
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065df 	.word	0x080065df
 80065ac:	080065cf 	.word	0x080065cf
 80065b0:	080065df 	.word	0x080065df
 80065b4:	080065df 	.word	0x080065df
 80065b8:	080065df 	.word	0x080065df
 80065bc:	080065d7 	.word	0x080065d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c0:	f7fc fef4 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 80065c4:	61f8      	str	r0, [r7, #28]
        break;
 80065c6:	e010      	b.n	80065ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c8:	4b8f      	ldr	r3, [pc, #572]	@ (8006808 <UART_SetConfig+0x56c>)
 80065ca:	61fb      	str	r3, [r7, #28]
        break;
 80065cc:	e00d      	b.n	80065ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ce:	f7fc fe55 	bl	800327c <HAL_RCC_GetSysClockFreq>
 80065d2:	61f8      	str	r0, [r7, #28]
        break;
 80065d4:	e009      	b.n	80065ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065da:	61fb      	str	r3, [r7, #28]
        break;
 80065dc:	e005      	b.n	80065ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80fb 	beq.w	80067e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4413      	add	r3, r2
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d305      	bcc.n	800660e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	429a      	cmp	r2, r3
 800660c:	d903      	bls.n	8006616 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006614:	e0e8      	b.n	80067e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	2200      	movs	r2, #0
 800661a:	461c      	mov	r4, r3
 800661c:	4615      	mov	r5, r2
 800661e:	f04f 0200 	mov.w	r2, #0
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	022b      	lsls	r3, r5, #8
 8006628:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800662c:	0222      	lsls	r2, r4, #8
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	6849      	ldr	r1, [r1, #4]
 8006632:	0849      	lsrs	r1, r1, #1
 8006634:	2000      	movs	r0, #0
 8006636:	4688      	mov	r8, r1
 8006638:	4681      	mov	r9, r0
 800663a:	eb12 0a08 	adds.w	sl, r2, r8
 800663e:	eb43 0b09 	adc.w	fp, r3, r9
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	603b      	str	r3, [r7, #0]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006650:	4650      	mov	r0, sl
 8006652:	4659      	mov	r1, fp
 8006654:	f7fa faf8 	bl	8000c48 <__aeabi_uldivmod>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4613      	mov	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006666:	d308      	bcc.n	800667a <UART_SetConfig+0x3de>
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800666e:	d204      	bcs.n	800667a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	60da      	str	r2, [r3, #12]
 8006678:	e0b6      	b.n	80067e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006680:	e0b2      	b.n	80067e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800668a:	d15e      	bne.n	800674a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800668c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006690:	2b08      	cmp	r3, #8
 8006692:	d828      	bhi.n	80066e6 <UART_SetConfig+0x44a>
 8006694:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <UART_SetConfig+0x400>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	080066e7 	.word	0x080066e7
 80066ac:	080066d7 	.word	0x080066d7
 80066b0:	080066e7 	.word	0x080066e7
 80066b4:	080066e7 	.word	0x080066e7
 80066b8:	080066e7 	.word	0x080066e7
 80066bc:	080066df 	.word	0x080066df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fc fe74 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 80066c4:	61f8      	str	r0, [r7, #28]
        break;
 80066c6:	e014      	b.n	80066f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c8:	f7fc fe86 	bl	80033d8 <HAL_RCC_GetPCLK2Freq>
 80066cc:	61f8      	str	r0, [r7, #28]
        break;
 80066ce:	e010      	b.n	80066f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006808 <UART_SetConfig+0x56c>)
 80066d2:	61fb      	str	r3, [r7, #28]
        break;
 80066d4:	e00d      	b.n	80066f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d6:	f7fc fdd1 	bl	800327c <HAL_RCC_GetSysClockFreq>
 80066da:	61f8      	str	r0, [r7, #28]
        break;
 80066dc:	e009      	b.n	80066f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066e2:	61fb      	str	r3, [r7, #28]
        break;
 80066e4:	e005      	b.n	80066f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d077      	beq.n	80067e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	005a      	lsls	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	085b      	lsrs	r3, r3, #1
 8006702:	441a      	add	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	fbb2 f3f3 	udiv	r3, r2, r3
 800670c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b0f      	cmp	r3, #15
 8006712:	d916      	bls.n	8006742 <UART_SetConfig+0x4a6>
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800671a:	d212      	bcs.n	8006742 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f023 030f 	bic.w	r3, r3, #15
 8006724:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	085b      	lsrs	r3, r3, #1
 800672a:	b29b      	uxth	r3, r3
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	b29a      	uxth	r2, r3
 8006732:	8afb      	ldrh	r3, [r7, #22]
 8006734:	4313      	orrs	r3, r2
 8006736:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	8afa      	ldrh	r2, [r7, #22]
 800673e:	60da      	str	r2, [r3, #12]
 8006740:	e052      	b.n	80067e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006748:	e04e      	b.n	80067e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800674a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800674e:	2b08      	cmp	r3, #8
 8006750:	d827      	bhi.n	80067a2 <UART_SetConfig+0x506>
 8006752:	a201      	add	r2, pc, #4	@ (adr r2, 8006758 <UART_SetConfig+0x4bc>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	0800677d 	.word	0x0800677d
 800675c:	08006785 	.word	0x08006785
 8006760:	0800678d 	.word	0x0800678d
 8006764:	080067a3 	.word	0x080067a3
 8006768:	08006793 	.word	0x08006793
 800676c:	080067a3 	.word	0x080067a3
 8006770:	080067a3 	.word	0x080067a3
 8006774:	080067a3 	.word	0x080067a3
 8006778:	0800679b 	.word	0x0800679b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800677c:	f7fc fe16 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8006780:	61f8      	str	r0, [r7, #28]
        break;
 8006782:	e014      	b.n	80067ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006784:	f7fc fe28 	bl	80033d8 <HAL_RCC_GetPCLK2Freq>
 8006788:	61f8      	str	r0, [r7, #28]
        break;
 800678a:	e010      	b.n	80067ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800678c:	4b1e      	ldr	r3, [pc, #120]	@ (8006808 <UART_SetConfig+0x56c>)
 800678e:	61fb      	str	r3, [r7, #28]
        break;
 8006790:	e00d      	b.n	80067ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006792:	f7fc fd73 	bl	800327c <HAL_RCC_GetSysClockFreq>
 8006796:	61f8      	str	r0, [r7, #28]
        break;
 8006798:	e009      	b.n	80067ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800679e:	61fb      	str	r3, [r7, #28]
        break;
 80067a0:	e005      	b.n	80067ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067ac:	bf00      	nop
    }

    if (pclk != 0U)
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d019      	beq.n	80067e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	085a      	lsrs	r2, r3, #1
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	441a      	add	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	2b0f      	cmp	r3, #15
 80067cc:	d909      	bls.n	80067e2 <UART_SetConfig+0x546>
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d4:	d205      	bcs.n	80067e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60da      	str	r2, [r3, #12]
 80067e0:	e002      	b.n	80067e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80067f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3728      	adds	r7, #40	@ 0x28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006802:	bf00      	nop
 8006804:	40008000 	.word	0x40008000
 8006808:	00f42400 	.word	0x00f42400

0800680c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01a      	beq.n	8006922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690a:	d10a      	bne.n	8006922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b098      	sub	sp, #96	@ 0x60
 8006954:	af02      	add	r7, sp, #8
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006960:	f7fb fc48 	bl	80021f4 <HAL_GetTick>
 8006964:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b08      	cmp	r3, #8
 8006972:	d12e      	bne.n	80069d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006974:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800697c:	2200      	movs	r2, #0
 800697e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f88c 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d021      	beq.n	80069d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800699c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e6      	bne.n	800698e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e062      	b.n	8006a98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d149      	bne.n	8006a74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069e8:	2200      	movs	r2, #0
 80069ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f856 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d03c      	beq.n	8006a74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	623b      	str	r3, [r7, #32]
   return(result);
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a4c:	61fa      	str	r2, [r7, #28]
 8006a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	617b      	str	r3, [r7, #20]
   return(result);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e5      	bne.n	8006a2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e011      	b.n	8006a98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3758      	adds	r7, #88	@ 0x58
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab0:	e04f      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d04b      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aba:	f7fb fb9b 	bl	80021f4 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e04e      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d037      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b80      	cmp	r3, #128	@ 0x80
 8006ae6:	d034      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	d031      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d110      	bne.n	8006b1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2208      	movs	r2, #8
 8006b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f838 	bl	8006b7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e029      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b2c:	d111      	bne.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f81e 	bl	8006b7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e00f      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	bf0c      	ite	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	2300      	movne	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d0a0      	beq.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b095      	sub	sp, #84	@ 0x54
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ba2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ba6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e5      	bne.n	8006bb4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d118      	bne.n	8006c22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f023 0310 	bic.w	r3, r3, #16
 8006c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6979      	ldr	r1, [r7, #20]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e6      	bne.n	8006bf0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c36:	bf00      	nop
 8006c38:	3754      	adds	r7, #84	@ 0x54
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	4603      	mov	r3, r0
 8006c4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c54:	2b84      	cmp	r3, #132	@ 0x84
 8006c56:	d005      	beq.n	8006c64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	3303      	adds	r3, #3
 8006c62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006c64:	68fb      	ldr	r3, [r7, #12]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c76:	f000 fe9d 	bl	80079b4 <vTaskStartScheduler>
  
  return osOK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c82:	b089      	sub	sp, #36	@ 0x24
 8006c84:	af04      	add	r7, sp, #16
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d020      	beq.n	8006cd4 <osThreadCreate+0x54>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01c      	beq.n	8006cd4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685c      	ldr	r4, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691e      	ldr	r6, [r3, #16]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff ffc8 	bl	8006c42 <makeFreeRtosPriority>
 8006cb2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cbc:	9202      	str	r2, [sp, #8]
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	9100      	str	r1, [sp, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 fca5 	bl	8007618 <xTaskCreateStatic>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e01c      	b.n	8006d0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685c      	ldr	r4, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ce0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff ffaa 	bl	8006c42 <makeFreeRtosPriority>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	f107 030c 	add.w	r3, r7, #12
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	9200      	str	r2, [sp, #0]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 fcea 	bl	80076d8 <xTaskCreate>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d001      	beq.n	8006d0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e000      	b.n	8006d10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <osDelay+0x16>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	e000      	b.n	8006d30 <osDelay+0x18>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fe09 	bl	8007948 <vTaskDelay>
  
  return osOK;
 8006d36:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f103 0208 	add.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295
 8006d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f103 0208 	add.w	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f103 0208 	add.w	r2, r3, #8
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d103      	bne.n	8006e02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e00c      	b.n	8006e1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3308      	adds	r3, #8
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e002      	b.n	8006e10 <vListInsert+0x2e>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d2f6      	bcs.n	8006e0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6892      	ldr	r2, [r2, #8]
 8006e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6852      	ldr	r2, [r2, #4]
 8006e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d103      	bne.n	8006e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1e5a      	subs	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ed4:	f001 fbb8 	bl	8008648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee0:	68f9      	ldr	r1, [r7, #12]
 8006ee2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ee4:	fb01 f303 	mul.w	r3, r1, r3
 8006ee8:	441a      	add	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f04:	3b01      	subs	r3, #1
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	441a      	add	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	22ff      	movs	r2, #255	@ 0xff
 8006f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	22ff      	movs	r2, #255	@ 0xff
 8006f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d114      	bne.n	8006f54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01a      	beq.n	8006f68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3310      	adds	r3, #16
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 ff86 	bl	8007e48 <xTaskRemoveFromEventList>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d012      	beq.n	8006f68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f42:	4b0d      	ldr	r3, [pc, #52]	@ (8006f78 <xQueueGenericReset+0xd0>)
 8006f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	e009      	b.n	8006f68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3310      	adds	r3, #16
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fef1 	bl	8006d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3324      	adds	r3, #36	@ 0x24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff feec 	bl	8006d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f68:	f001 fba0 	bl	80086ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f6c:	2301      	movs	r3, #1
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	@ 0x28
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	613b      	str	r3, [r7, #16]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	fb02 f303 	mul.w	r3, r2, r3
 8006fb0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3348      	adds	r3, #72	@ 0x48
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fc26 	bl	8008808 <pvPortMalloc>
 8006fbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d011      	beq.n	8006fe8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	3348      	adds	r3, #72	@ 0x48
 8006fcc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fd6:	79fa      	ldrb	r2, [r7, #7]
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f805 	bl	8006ff2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
	}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3720      	adds	r7, #32
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d103      	bne.n	800700e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e002      	b.n	8007014 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007020:	2101      	movs	r1, #1
 8007022:	69b8      	ldr	r0, [r7, #24]
 8007024:	f7ff ff40 	bl	8006ea8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08e      	sub	sp, #56	@ 0x38
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10b      	bne.n	8007064 <xQueueGenericSend+0x34>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800705e:	bf00      	nop
 8007060:	bf00      	nop
 8007062:	e7fd      	b.n	8007060 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d103      	bne.n	8007072 <xQueueGenericSend+0x42>
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <xQueueGenericSend+0x46>
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <xQueueGenericSend+0x48>
 8007076:	2300      	movs	r3, #0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10b      	bne.n	8007094 <xQueueGenericSend+0x64>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d103      	bne.n	80070a2 <xQueueGenericSend+0x72>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <xQueueGenericSend+0x76>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <xQueueGenericSend+0x78>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <xQueueGenericSend+0x94>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	623b      	str	r3, [r7, #32]
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	e7fd      	b.n	80070c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070c4:	f001 f880 	bl	80081c8 <xTaskGetSchedulerState>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <xQueueGenericSend+0xa4>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <xQueueGenericSend+0xa8>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <xQueueGenericSend+0xaa>
 80070d8:	2300      	movs	r3, #0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10b      	bne.n	80070f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	61fb      	str	r3, [r7, #28]
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	e7fd      	b.n	80070f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070f6:	f001 faa7 	bl	8008648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007102:	429a      	cmp	r2, r3
 8007104:	d302      	bcc.n	800710c <xQueueGenericSend+0xdc>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d129      	bne.n	8007160 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007112:	f000 f971 	bl	80073f8 <prvCopyDataToQueue>
 8007116:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	d010      	beq.n	8007142 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007122:	3324      	adds	r3, #36	@ 0x24
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fe8f 	bl	8007e48 <xTaskRemoveFromEventList>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d013      	beq.n	8007158 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007130:	4b3f      	ldr	r3, [pc, #252]	@ (8007230 <xQueueGenericSend+0x200>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	e00a      	b.n	8007158 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d007      	beq.n	8007158 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007148:	4b39      	ldr	r3, [pc, #228]	@ (8007230 <xQueueGenericSend+0x200>)
 800714a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007158:	f001 faa8 	bl	80086ac <vPortExitCritical>
				return pdPASS;
 800715c:	2301      	movs	r3, #1
 800715e:	e063      	b.n	8007228 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d103      	bne.n	800716e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007166:	f001 faa1 	bl	80086ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800716a:	2300      	movs	r3, #0
 800716c:	e05c      	b.n	8007228 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800716e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007170:	2b00      	cmp	r3, #0
 8007172:	d106      	bne.n	8007182 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007174:	f107 0314 	add.w	r3, r7, #20
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fec9 	bl	8007f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800717e:	2301      	movs	r3, #1
 8007180:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007182:	f001 fa93 	bl	80086ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007186:	f000 fc77 	bl	8007a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800718a:	f001 fa5d 	bl	8008648 <vPortEnterCritical>
 800718e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007194:	b25b      	sxtb	r3, r3
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d103      	bne.n	80071a4 <xQueueGenericSend+0x174>
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071aa:	b25b      	sxtb	r3, r3
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d103      	bne.n	80071ba <xQueueGenericSend+0x18a>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071ba:	f001 fa77 	bl	80086ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071be:	1d3a      	adds	r2, r7, #4
 80071c0:	f107 0314 	add.w	r3, r7, #20
 80071c4:	4611      	mov	r1, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 feb8 	bl	8007f3c <xTaskCheckForTimeOut>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d124      	bne.n	800721c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071d4:	f000 fa08 	bl	80075e8 <prvIsQueueFull>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d018      	beq.n	8007210 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	3310      	adds	r3, #16
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4611      	mov	r1, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 fe08 	bl	8007dfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071ee:	f000 f993 	bl	8007518 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071f2:	f000 fc4f 	bl	8007a94 <xTaskResumeAll>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f47f af7c 	bne.w	80070f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80071fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007230 <xQueueGenericSend+0x200>)
 8007200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	e772      	b.n	80070f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007212:	f000 f981 	bl	8007518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007216:	f000 fc3d 	bl	8007a94 <xTaskResumeAll>
 800721a:	e76c      	b.n	80070f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800721c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800721e:	f000 f97b 	bl	8007518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007222:	f000 fc37 	bl	8007a94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007226:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007228:	4618      	mov	r0, r3
 800722a:	3738      	adds	r7, #56	@ 0x38
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	e000ed04 	.word	0xe000ed04

08007234 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08c      	sub	sp, #48	@ 0x30
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007240:	2300      	movs	r3, #0
 8007242:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10b      	bne.n	8007266 <xQueueReceive+0x32>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	623b      	str	r3, [r7, #32]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <xQueueReceive+0x40>
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <xQueueReceive+0x44>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <xQueueReceive+0x46>
 8007278:	2300      	movs	r3, #0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <xQueueReceive+0x62>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	61fb      	str	r3, [r7, #28]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007296:	f000 ff97 	bl	80081c8 <xTaskGetSchedulerState>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <xQueueReceive+0x72>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <xQueueReceive+0x76>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <xQueueReceive+0x78>
 80072aa:	2300      	movs	r3, #0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10b      	bne.n	80072c8 <xQueueReceive+0x94>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	61bb      	str	r3, [r7, #24]
}
 80072c2:	bf00      	nop
 80072c4:	bf00      	nop
 80072c6:	e7fd      	b.n	80072c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072c8:	f001 f9be 	bl	8008648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01f      	beq.n	8007318 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072dc:	f000 f8f6 	bl	80074cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	1e5a      	subs	r2, r3, #1
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00f      	beq.n	8007310 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	3310      	adds	r3, #16
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fda7 	bl	8007e48 <xTaskRemoveFromEventList>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007300:	4b3c      	ldr	r3, [pc, #240]	@ (80073f4 <xQueueReceive+0x1c0>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007310:	f001 f9cc 	bl	80086ac <vPortExitCritical>
				return pdPASS;
 8007314:	2301      	movs	r3, #1
 8007316:	e069      	b.n	80073ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800731e:	f001 f9c5 	bl	80086ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007322:	2300      	movs	r3, #0
 8007324:	e062      	b.n	80073ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d106      	bne.n	800733a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800732c:	f107 0310 	add.w	r3, r7, #16
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fded 	bl	8007f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007336:	2301      	movs	r3, #1
 8007338:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800733a:	f001 f9b7 	bl	80086ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800733e:	f000 fb9b 	bl	8007a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007342:	f001 f981 	bl	8008648 <vPortEnterCritical>
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800734c:	b25b      	sxtb	r3, r3
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d103      	bne.n	800735c <xQueueReceive+0x128>
 8007354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800735c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007362:	b25b      	sxtb	r3, r3
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d103      	bne.n	8007372 <xQueueReceive+0x13e>
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007372:	f001 f99b 	bl	80086ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007376:	1d3a      	adds	r2, r7, #4
 8007378:	f107 0310 	add.w	r3, r7, #16
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fddc 	bl	8007f3c <xTaskCheckForTimeOut>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d123      	bne.n	80073d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800738a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800738c:	f000 f916 	bl	80075bc <prvIsQueueEmpty>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d017      	beq.n	80073c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007398:	3324      	adds	r3, #36	@ 0x24
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	4611      	mov	r1, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fd2c 	bl	8007dfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073a6:	f000 f8b7 	bl	8007518 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073aa:	f000 fb73 	bl	8007a94 <xTaskResumeAll>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d189      	bne.n	80072c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80073b4:	4b0f      	ldr	r3, [pc, #60]	@ (80073f4 <xQueueReceive+0x1c0>)
 80073b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	e780      	b.n	80072c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073c8:	f000 f8a6 	bl	8007518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073cc:	f000 fb62 	bl	8007a94 <xTaskResumeAll>
 80073d0:	e77a      	b.n	80072c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80073d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073d4:	f000 f8a0 	bl	8007518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073d8:	f000 fb5c 	bl	8007a94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073de:	f000 f8ed 	bl	80075bc <prvIsQueueEmpty>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f43f af6f 	beq.w	80072c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3730      	adds	r7, #48	@ 0x30
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10d      	bne.n	8007432 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d14d      	bne.n	80074ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 feee 	bl	8008204 <xTaskPriorityDisinherit>
 8007428:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	609a      	str	r2, [r3, #8]
 8007430:	e043      	b.n	80074ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d119      	bne.n	800746c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6858      	ldr	r0, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007440:	461a      	mov	r2, r3
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	f002 f9cb 	bl	80097de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007450:	441a      	add	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	429a      	cmp	r2, r3
 8007460:	d32b      	bcc.n	80074ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	e026      	b.n	80074ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68d8      	ldr	r0, [r3, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007474:	461a      	mov	r2, r3
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	f002 f9b1 	bl	80097de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007484:	425b      	negs	r3, r3
 8007486:	441a      	add	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d207      	bcs.n	80074a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a0:	425b      	negs	r3, r3
 80074a2:	441a      	add	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d105      	bne.n	80074ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80074c2:	697b      	ldr	r3, [r7, #20]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d018      	beq.n	8007510 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e6:	441a      	add	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d303      	bcc.n	8007500 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68d9      	ldr	r1, [r3, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007508:	461a      	mov	r2, r3
 800750a:	6838      	ldr	r0, [r7, #0]
 800750c:	f002 f967 	bl	80097de <memcpy>
	}
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007520:	f001 f892 	bl	8008648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800752a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800752c:	e011      	b.n	8007552 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007532:	2b00      	cmp	r3, #0
 8007534:	d012      	beq.n	800755c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3324      	adds	r3, #36	@ 0x24
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fc84 	bl	8007e48 <xTaskRemoveFromEventList>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007546:	f000 fd5d 	bl	8008004 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	3b01      	subs	r3, #1
 800754e:	b2db      	uxtb	r3, r3
 8007550:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007556:	2b00      	cmp	r3, #0
 8007558:	dce9      	bgt.n	800752e <prvUnlockQueue+0x16>
 800755a:	e000      	b.n	800755e <prvUnlockQueue+0x46>
					break;
 800755c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	22ff      	movs	r2, #255	@ 0xff
 8007562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007566:	f001 f8a1 	bl	80086ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800756a:	f001 f86d 	bl	8008648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007574:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007576:	e011      	b.n	800759c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d012      	beq.n	80075a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3310      	adds	r3, #16
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fc5f 	bl	8007e48 <xTaskRemoveFromEventList>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007590:	f000 fd38 	bl	8008004 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	3b01      	subs	r3, #1
 8007598:	b2db      	uxtb	r3, r3
 800759a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800759c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dce9      	bgt.n	8007578 <prvUnlockQueue+0x60>
 80075a4:	e000      	b.n	80075a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80075a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	22ff      	movs	r2, #255	@ 0xff
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80075b0:	f001 f87c 	bl	80086ac <vPortExitCritical>
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075c4:	f001 f840 	bl	8008648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d102      	bne.n	80075d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e001      	b.n	80075da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075da:	f001 f867 	bl	80086ac <vPortExitCritical>

	return xReturn;
 80075de:	68fb      	ldr	r3, [r7, #12]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075f0:	f001 f82a 	bl	8008648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d102      	bne.n	8007606 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	e001      	b.n	800760a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800760a:	f001 f84f 	bl	80086ac <vPortExitCritical>

	return xReturn;
 800760e:	68fb      	ldr	r3, [r7, #12]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08e      	sub	sp, #56	@ 0x38
 800761c:	af04      	add	r7, sp, #16
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10b      	bne.n	8007644 <xTaskCreateStatic+0x2c>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	623b      	str	r3, [r7, #32]
}
 800763e:	bf00      	nop
 8007640:	bf00      	nop
 8007642:	e7fd      	b.n	8007640 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10b      	bne.n	8007662 <xTaskCreateStatic+0x4a>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	61fb      	str	r3, [r7, #28]
}
 800765c:	bf00      	nop
 800765e:	bf00      	nop
 8007660:	e7fd      	b.n	800765e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007662:	2354      	movs	r3, #84	@ 0x54
 8007664:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b54      	cmp	r3, #84	@ 0x54
 800766a:	d00b      	beq.n	8007684 <xTaskCreateStatic+0x6c>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	61bb      	str	r3, [r7, #24]
}
 800767e:	bf00      	nop
 8007680:	bf00      	nop
 8007682:	e7fd      	b.n	8007680 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007684:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01e      	beq.n	80076ca <xTaskCreateStatic+0xb2>
 800768c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01b      	beq.n	80076ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800769a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076a4:	2300      	movs	r3, #0
 80076a6:	9303      	str	r3, [sp, #12]
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	9302      	str	r3, [sp, #8]
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f850 	bl	8007762 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076c4:	f000 f8d6 	bl	8007874 <prvAddNewTaskToReadyList>
 80076c8:	e001      	b.n	80076ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076ce:	697b      	ldr	r3, [r7, #20]
	}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3728      	adds	r7, #40	@ 0x28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08c      	sub	sp, #48	@ 0x30
 80076dc:	af04      	add	r7, sp, #16
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 f88b 	bl	8008808 <pvPortMalloc>
 80076f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076fa:	2054      	movs	r0, #84	@ 0x54
 80076fc:	f001 f884 	bl	8008808 <pvPortMalloc>
 8007700:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	631a      	str	r2, [r3, #48]	@ 0x30
 800770e:	e005      	b.n	800771c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007710:	6978      	ldr	r0, [r7, #20]
 8007712:	f001 f947 	bl	80089a4 <vPortFree>
 8007716:	e001      	b.n	800771c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d017      	beq.n	8007752 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800772a:	88fa      	ldrh	r2, [r7, #6]
 800772c:	2300      	movs	r3, #0
 800772e:	9303      	str	r3, [sp, #12]
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	9302      	str	r3, [sp, #8]
 8007734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007736:	9301      	str	r3, [sp, #4]
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f80e 	bl	8007762 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007746:	69f8      	ldr	r0, [r7, #28]
 8007748:	f000 f894 	bl	8007874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800774c:	2301      	movs	r3, #1
 800774e:	61bb      	str	r3, [r7, #24]
 8007750:	e002      	b.n	8007758 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007752:	f04f 33ff 	mov.w	r3, #4294967295
 8007756:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007758:	69bb      	ldr	r3, [r7, #24]
	}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b088      	sub	sp, #32
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800777a:	3b01      	subs	r3, #1
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	f023 0307 	bic.w	r3, r3, #7
 8007788:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	617b      	str	r3, [r7, #20]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01f      	beq.n	80077f2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077b2:	2300      	movs	r3, #0
 80077b4:	61fb      	str	r3, [r7, #28]
 80077b6:	e012      	b.n	80077de <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	7819      	ldrb	r1, [r3, #0]
 80077c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4413      	add	r3, r2
 80077c6:	3334      	adds	r3, #52	@ 0x34
 80077c8:	460a      	mov	r2, r1
 80077ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	4413      	add	r3, r2
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d006      	beq.n	80077e6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	3301      	adds	r3, #1
 80077dc:	61fb      	str	r3, [r7, #28]
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2b0f      	cmp	r3, #15
 80077e2:	d9e9      	bls.n	80077b8 <prvInitialiseNewTask+0x56>
 80077e4:	e000      	b.n	80077e8 <prvInitialiseNewTask+0x86>
			{
				break;
 80077e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077f0:	e003      	b.n	80077fa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	2b06      	cmp	r3, #6
 80077fe:	d901      	bls.n	8007804 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007800:	2306      	movs	r3, #6
 8007802:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007808:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800780e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007812:	2200      	movs	r2, #0
 8007814:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	3304      	adds	r3, #4
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff fab0 	bl	8006d80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	3318      	adds	r3, #24
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff faab 	bl	8006d80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800782e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007832:	f1c3 0207 	rsb	r2, r3, #7
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	2200      	movs	r2, #0
 8007844:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	68f9      	ldr	r1, [r7, #12]
 8007852:	69b8      	ldr	r0, [r7, #24]
 8007854:	f000 fdc4 	bl	80083e0 <pxPortInitialiseStack>
 8007858:	4602      	mov	r2, r0
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800785e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800786a:	bf00      	nop
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800787c:	f000 fee4 	bl	8008648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007880:	4b2a      	ldr	r3, [pc, #168]	@ (800792c <prvAddNewTaskToReadyList+0xb8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3301      	adds	r3, #1
 8007886:	4a29      	ldr	r2, [pc, #164]	@ (800792c <prvAddNewTaskToReadyList+0xb8>)
 8007888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800788a:	4b29      	ldr	r3, [pc, #164]	@ (8007930 <prvAddNewTaskToReadyList+0xbc>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007892:	4a27      	ldr	r2, [pc, #156]	@ (8007930 <prvAddNewTaskToReadyList+0xbc>)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007898:	4b24      	ldr	r3, [pc, #144]	@ (800792c <prvAddNewTaskToReadyList+0xb8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d110      	bne.n	80078c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078a0:	f000 fbd4 	bl	800804c <prvInitialiseTaskLists>
 80078a4:	e00d      	b.n	80078c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078a6:	4b23      	ldr	r3, [pc, #140]	@ (8007934 <prvAddNewTaskToReadyList+0xc0>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078ae:	4b20      	ldr	r3, [pc, #128]	@ (8007930 <prvAddNewTaskToReadyList+0xbc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d802      	bhi.n	80078c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007930 <prvAddNewTaskToReadyList+0xbc>)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <prvAddNewTaskToReadyList+0xc4>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3301      	adds	r3, #1
 80078c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007938 <prvAddNewTaskToReadyList+0xc4>)
 80078ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d0:	2201      	movs	r2, #1
 80078d2:	409a      	lsls	r2, r3
 80078d4:	4b19      	ldr	r3, [pc, #100]	@ (800793c <prvAddNewTaskToReadyList+0xc8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4313      	orrs	r3, r2
 80078da:	4a18      	ldr	r2, [pc, #96]	@ (800793c <prvAddNewTaskToReadyList+0xc8>)
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4a15      	ldr	r2, [pc, #84]	@ (8007940 <prvAddNewTaskToReadyList+0xcc>)
 80078ec:	441a      	add	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7ff fa50 	bl	8006d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078fa:	f000 fed7 	bl	80086ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007934 <prvAddNewTaskToReadyList+0xc0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00e      	beq.n	8007924 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007906:	4b0a      	ldr	r3, [pc, #40]	@ (8007930 <prvAddNewTaskToReadyList+0xbc>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	429a      	cmp	r2, r3
 8007912:	d207      	bcs.n	8007924 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007914:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <prvAddNewTaskToReadyList+0xd0>)
 8007916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	200014f4 	.word	0x200014f4
 8007930:	200013f4 	.word	0x200013f4
 8007934:	20001500 	.word	0x20001500
 8007938:	20001510 	.word	0x20001510
 800793c:	200014fc 	.word	0x200014fc
 8007940:	200013f8 	.word	0x200013f8
 8007944:	e000ed04 	.word	0xe000ed04

08007948 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d018      	beq.n	800798c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800795a:	4b14      	ldr	r3, [pc, #80]	@ (80079ac <vTaskDelay+0x64>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <vTaskDelay+0x32>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	60bb      	str	r3, [r7, #8]
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	e7fd      	b.n	8007976 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800797a:	f000 f87d 	bl	8007a78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800797e:	2100      	movs	r1, #0
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fcc7 	bl	8008314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007986:	f000 f885 	bl	8007a94 <xTaskResumeAll>
 800798a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d107      	bne.n	80079a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007992:	4b07      	ldr	r3, [pc, #28]	@ (80079b0 <vTaskDelay+0x68>)
 8007994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	2000151c 	.word	0x2000151c
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	@ 0x28
 80079b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079c2:	463a      	mov	r2, r7
 80079c4:	1d39      	adds	r1, r7, #4
 80079c6:	f107 0308 	add.w	r3, r7, #8
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7f9 fad2 	bl	8000f74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	9202      	str	r2, [sp, #8]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	2300      	movs	r3, #0
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	2300      	movs	r3, #0
 80079e0:	460a      	mov	r2, r1
 80079e2:	491f      	ldr	r1, [pc, #124]	@ (8007a60 <vTaskStartScheduler+0xac>)
 80079e4:	481f      	ldr	r0, [pc, #124]	@ (8007a64 <vTaskStartScheduler+0xb0>)
 80079e6:	f7ff fe17 	bl	8007618 <xTaskCreateStatic>
 80079ea:	4603      	mov	r3, r0
 80079ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007a68 <vTaskStartScheduler+0xb4>)
 80079ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a68 <vTaskStartScheduler+0xb4>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	e001      	b.n	8007a02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d116      	bne.n	8007a36 <vTaskStartScheduler+0x82>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	613b      	str	r3, [r7, #16]
}
 8007a1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a1c:	4b13      	ldr	r3, [pc, #76]	@ (8007a6c <vTaskStartScheduler+0xb8>)
 8007a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a24:	4b12      	ldr	r3, [pc, #72]	@ (8007a70 <vTaskStartScheduler+0xbc>)
 8007a26:	2201      	movs	r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a2a:	4b12      	ldr	r3, [pc, #72]	@ (8007a74 <vTaskStartScheduler+0xc0>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a30:	f000 fd66 	bl	8008500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a34:	e00f      	b.n	8007a56 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3c:	d10b      	bne.n	8007a56 <vTaskStartScheduler+0xa2>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60fb      	str	r3, [r7, #12]
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	e7fd      	b.n	8007a52 <vTaskStartScheduler+0x9e>
}
 8007a56:	bf00      	nop
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	0800b980 	.word	0x0800b980
 8007a64:	0800801d 	.word	0x0800801d
 8007a68:	20001518 	.word	0x20001518
 8007a6c:	20001514 	.word	0x20001514
 8007a70:	20001500 	.word	0x20001500
 8007a74:	200014f8 	.word	0x200014f8

08007a78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a7c:	4b04      	ldr	r3, [pc, #16]	@ (8007a90 <vTaskSuspendAll+0x18>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	4a03      	ldr	r2, [pc, #12]	@ (8007a90 <vTaskSuspendAll+0x18>)
 8007a84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a86:	bf00      	nop
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	2000151c 	.word	0x2000151c

08007a94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007aa2:	4b42      	ldr	r3, [pc, #264]	@ (8007bac <xTaskResumeAll+0x118>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10b      	bne.n	8007ac2 <xTaskResumeAll+0x2e>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	603b      	str	r3, [r7, #0]
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	e7fd      	b.n	8007abe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ac2:	f000 fdc1 	bl	8008648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ac6:	4b39      	ldr	r3, [pc, #228]	@ (8007bac <xTaskResumeAll+0x118>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	4a37      	ldr	r2, [pc, #220]	@ (8007bac <xTaskResumeAll+0x118>)
 8007ace:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ad0:	4b36      	ldr	r3, [pc, #216]	@ (8007bac <xTaskResumeAll+0x118>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d161      	bne.n	8007b9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ad8:	4b35      	ldr	r3, [pc, #212]	@ (8007bb0 <xTaskResumeAll+0x11c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d05d      	beq.n	8007b9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ae0:	e02e      	b.n	8007b40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae2:	4b34      	ldr	r3, [pc, #208]	@ (8007bb4 <xTaskResumeAll+0x120>)
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3318      	adds	r3, #24
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff f9b0 	bl	8006e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff f9ab 	bl	8006e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b02:	2201      	movs	r2, #1
 8007b04:	409a      	lsls	r2, r3
 8007b06:	4b2c      	ldr	r3, [pc, #176]	@ (8007bb8 <xTaskResumeAll+0x124>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8007bb8 <xTaskResumeAll+0x124>)
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4a27      	ldr	r2, [pc, #156]	@ (8007bbc <xTaskResumeAll+0x128>)
 8007b1e:	441a      	add	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4619      	mov	r1, r3
 8007b26:	4610      	mov	r0, r2
 8007b28:	f7ff f937 	bl	8006d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b30:	4b23      	ldr	r3, [pc, #140]	@ (8007bc0 <xTaskResumeAll+0x12c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d302      	bcc.n	8007b40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b3a:	4b22      	ldr	r3, [pc, #136]	@ (8007bc4 <xTaskResumeAll+0x130>)
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b40:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb4 <xTaskResumeAll+0x120>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1cc      	bne.n	8007ae2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b4e:	f000 fb1b 	bl	8008188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b52:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc8 <xTaskResumeAll+0x134>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d010      	beq.n	8007b80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b5e:	f000 f837 	bl	8007bd0 <xTaskIncrementTick>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b68:	4b16      	ldr	r3, [pc, #88]	@ (8007bc4 <xTaskResumeAll+0x130>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f1      	bne.n	8007b5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b7a:	4b13      	ldr	r3, [pc, #76]	@ (8007bc8 <xTaskResumeAll+0x134>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b80:	4b10      	ldr	r3, [pc, #64]	@ (8007bc4 <xTaskResumeAll+0x130>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d009      	beq.n	8007b9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007bcc <xTaskResumeAll+0x138>)
 8007b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b9c:	f000 fd86 	bl	80086ac <vPortExitCritical>

	return xAlreadyYielded;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	2000151c 	.word	0x2000151c
 8007bb0:	200014f4 	.word	0x200014f4
 8007bb4:	200014b4 	.word	0x200014b4
 8007bb8:	200014fc 	.word	0x200014fc
 8007bbc:	200013f8 	.word	0x200013f8
 8007bc0:	200013f4 	.word	0x200013f4
 8007bc4:	20001508 	.word	0x20001508
 8007bc8:	20001504 	.word	0x20001504
 8007bcc:	e000ed04 	.word	0xe000ed04

08007bd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bda:	4b4f      	ldr	r3, [pc, #316]	@ (8007d18 <xTaskIncrementTick+0x148>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f040 808f 	bne.w	8007d02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007be4:	4b4d      	ldr	r3, [pc, #308]	@ (8007d1c <xTaskIncrementTick+0x14c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3301      	adds	r3, #1
 8007bea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bec:	4a4b      	ldr	r2, [pc, #300]	@ (8007d1c <xTaskIncrementTick+0x14c>)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d121      	bne.n	8007c3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bf8:	4b49      	ldr	r3, [pc, #292]	@ (8007d20 <xTaskIncrementTick+0x150>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00b      	beq.n	8007c1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	603b      	str	r3, [r7, #0]
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop
 8007c18:	e7fd      	b.n	8007c16 <xTaskIncrementTick+0x46>
 8007c1a:	4b41      	ldr	r3, [pc, #260]	@ (8007d20 <xTaskIncrementTick+0x150>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	4b40      	ldr	r3, [pc, #256]	@ (8007d24 <xTaskIncrementTick+0x154>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a3e      	ldr	r2, [pc, #248]	@ (8007d20 <xTaskIncrementTick+0x150>)
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	4a3e      	ldr	r2, [pc, #248]	@ (8007d24 <xTaskIncrementTick+0x154>)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d28 <xTaskIncrementTick+0x158>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3301      	adds	r3, #1
 8007c34:	4a3c      	ldr	r2, [pc, #240]	@ (8007d28 <xTaskIncrementTick+0x158>)
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	f000 faa6 	bl	8008188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8007d2c <xTaskIncrementTick+0x15c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d348      	bcc.n	8007cd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c46:	4b36      	ldr	r3, [pc, #216]	@ (8007d20 <xTaskIncrementTick+0x150>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d104      	bne.n	8007c5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c50:	4b36      	ldr	r3, [pc, #216]	@ (8007d2c <xTaskIncrementTick+0x15c>)
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	601a      	str	r2, [r3, #0]
					break;
 8007c58:	e03e      	b.n	8007cd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c5a:	4b31      	ldr	r3, [pc, #196]	@ (8007d20 <xTaskIncrementTick+0x150>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d203      	bcs.n	8007c7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c72:	4a2e      	ldr	r2, [pc, #184]	@ (8007d2c <xTaskIncrementTick+0x15c>)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c78:	e02e      	b.n	8007cd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff f8e8 	bl	8006e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	3318      	adds	r3, #24
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff f8df 	bl	8006e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	409a      	lsls	r2, r3
 8007c9e:	4b24      	ldr	r3, [pc, #144]	@ (8007d30 <xTaskIncrementTick+0x160>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	4a22      	ldr	r2, [pc, #136]	@ (8007d30 <xTaskIncrementTick+0x160>)
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d34 <xTaskIncrementTick+0x164>)
 8007cb6:	441a      	add	r2, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	f7ff f86b 	bl	8006d9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d38 <xTaskIncrementTick+0x168>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d3b9      	bcc.n	8007c46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cd6:	e7b6      	b.n	8007c46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cd8:	4b17      	ldr	r3, [pc, #92]	@ (8007d38 <xTaskIncrementTick+0x168>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cde:	4915      	ldr	r1, [pc, #84]	@ (8007d34 <xTaskIncrementTick+0x164>)
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d901      	bls.n	8007cf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007cf4:	4b11      	ldr	r3, [pc, #68]	@ (8007d3c <xTaskIncrementTick+0x16c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d007      	beq.n	8007d0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	e004      	b.n	8007d0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d02:	4b0f      	ldr	r3, [pc, #60]	@ (8007d40 <xTaskIncrementTick+0x170>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3301      	adds	r3, #1
 8007d08:	4a0d      	ldr	r2, [pc, #52]	@ (8007d40 <xTaskIncrementTick+0x170>)
 8007d0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d0c:	697b      	ldr	r3, [r7, #20]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	2000151c 	.word	0x2000151c
 8007d1c:	200014f8 	.word	0x200014f8
 8007d20:	200014ac 	.word	0x200014ac
 8007d24:	200014b0 	.word	0x200014b0
 8007d28:	2000150c 	.word	0x2000150c
 8007d2c:	20001514 	.word	0x20001514
 8007d30:	200014fc 	.word	0x200014fc
 8007d34:	200013f8 	.word	0x200013f8
 8007d38:	200013f4 	.word	0x200013f4
 8007d3c:	20001508 	.word	0x20001508
 8007d40:	20001504 	.word	0x20001504

08007d44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d4a:	4b27      	ldr	r3, [pc, #156]	@ (8007de8 <vTaskSwitchContext+0xa4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d52:	4b26      	ldr	r3, [pc, #152]	@ (8007dec <vTaskSwitchContext+0xa8>)
 8007d54:	2201      	movs	r2, #1
 8007d56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d58:	e040      	b.n	8007ddc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007d5a:	4b24      	ldr	r3, [pc, #144]	@ (8007dec <vTaskSwitchContext+0xa8>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d60:	4b23      	ldr	r3, [pc, #140]	@ (8007df0 <vTaskSwitchContext+0xac>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	fab3 f383 	clz	r3, r3
 8007d6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	f1c3 031f 	rsb	r3, r3, #31
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	491f      	ldr	r1, [pc, #124]	@ (8007df4 <vTaskSwitchContext+0xb0>)
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	440b      	add	r3, r1
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	607b      	str	r3, [r7, #4]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <vTaskSwitchContext+0x5a>
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	4613      	mov	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4a11      	ldr	r2, [pc, #68]	@ (8007df4 <vTaskSwitchContext+0xb0>)
 8007dae:	4413      	add	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	605a      	str	r2, [r3, #4]
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d104      	bne.n	8007dd2 <vTaskSwitchContext+0x8e>
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	605a      	str	r2, [r3, #4]
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	4a07      	ldr	r2, [pc, #28]	@ (8007df8 <vTaskSwitchContext+0xb4>)
 8007dda:	6013      	str	r3, [r2, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	2000151c 	.word	0x2000151c
 8007dec:	20001508 	.word	0x20001508
 8007df0:	200014fc 	.word	0x200014fc
 8007df4:	200013f8 	.word	0x200013f8
 8007df8:	200013f4 	.word	0x200013f4

08007dfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	60fb      	str	r3, [r7, #12]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e24:	4b07      	ldr	r3, [pc, #28]	@ (8007e44 <vTaskPlaceOnEventList+0x48>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3318      	adds	r3, #24
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7fe ffd8 	bl	8006de2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e32:	2101      	movs	r1, #1
 8007e34:	6838      	ldr	r0, [r7, #0]
 8007e36:	f000 fa6d 	bl	8008314 <prvAddCurrentTaskToDelayedList>
}
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	200013f4 	.word	0x200013f4

08007e48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10b      	bne.n	8007e76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	60fb      	str	r3, [r7, #12]
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	3318      	adds	r3, #24
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe ffea 	bl	8006e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e80:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef8 <xTaskRemoveFromEventList+0xb0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d11c      	bne.n	8007ec2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe ffe1 	bl	8006e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	2201      	movs	r2, #1
 8007e98:	409a      	lsls	r2, r3
 8007e9a:	4b18      	ldr	r3, [pc, #96]	@ (8007efc <xTaskRemoveFromEventList+0xb4>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	4a16      	ldr	r2, [pc, #88]	@ (8007efc <xTaskRemoveFromEventList+0xb4>)
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4a13      	ldr	r2, [pc, #76]	@ (8007f00 <xTaskRemoveFromEventList+0xb8>)
 8007eb2:	441a      	add	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7fe ff6d 	bl	8006d9a <vListInsertEnd>
 8007ec0:	e005      	b.n	8007ece <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	3318      	adds	r3, #24
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	480e      	ldr	r0, [pc, #56]	@ (8007f04 <xTaskRemoveFromEventList+0xbc>)
 8007eca:	f7fe ff66 	bl	8006d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f08 <xTaskRemoveFromEventList+0xc0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d905      	bls.n	8007ee8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007edc:	2301      	movs	r3, #1
 8007ede:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <xTaskRemoveFromEventList+0xc4>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e001      	b.n	8007eec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007eec:	697b      	ldr	r3, [r7, #20]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	2000151c 	.word	0x2000151c
 8007efc:	200014fc 	.word	0x200014fc
 8007f00:	200013f8 	.word	0x200013f8
 8007f04:	200014b4 	.word	0x200014b4
 8007f08:	200013f4 	.word	0x200013f4
 8007f0c:	20001508 	.word	0x20001508

08007f10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f18:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <vTaskInternalSetTimeOutState+0x24>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f20:	4b05      	ldr	r3, [pc, #20]	@ (8007f38 <vTaskInternalSetTimeOutState+0x28>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	605a      	str	r2, [r3, #4]
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	2000150c 	.word	0x2000150c
 8007f38:	200014f8 	.word	0x200014f8

08007f3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10b      	bne.n	8007f64 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	613b      	str	r3, [r7, #16]
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10b      	bne.n	8007f82 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	60fb      	str	r3, [r7, #12]
}
 8007f7c:	bf00      	nop
 8007f7e:	bf00      	nop
 8007f80:	e7fd      	b.n	8007f7e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f82:	f000 fb61 	bl	8008648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f86:	4b1d      	ldr	r3, [pc, #116]	@ (8007ffc <xTaskCheckForTimeOut+0xc0>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9e:	d102      	bne.n	8007fa6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	e023      	b.n	8007fee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4b15      	ldr	r3, [pc, #84]	@ (8008000 <xTaskCheckForTimeOut+0xc4>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d007      	beq.n	8007fc2 <xTaskCheckForTimeOut+0x86>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d302      	bcc.n	8007fc2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	e015      	b.n	8007fee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d20b      	bcs.n	8007fe4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff ff99 	bl	8007f10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	e004      	b.n	8007fee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fea:	2301      	movs	r3, #1
 8007fec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fee:	f000 fb5d 	bl	80086ac <vPortExitCritical>

	return xReturn;
 8007ff2:	69fb      	ldr	r3, [r7, #28]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3720      	adds	r7, #32
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	200014f8 	.word	0x200014f8
 8008000:	2000150c 	.word	0x2000150c

08008004 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008004:	b480      	push	{r7}
 8008006:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008008:	4b03      	ldr	r3, [pc, #12]	@ (8008018 <vTaskMissedYield+0x14>)
 800800a:	2201      	movs	r2, #1
 800800c:	601a      	str	r2, [r3, #0]
}
 800800e:	bf00      	nop
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	20001508 	.word	0x20001508

0800801c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008024:	f000 f852 	bl	80080cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008028:	4b06      	ldr	r3, [pc, #24]	@ (8008044 <prvIdleTask+0x28>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d9f9      	bls.n	8008024 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008030:	4b05      	ldr	r3, [pc, #20]	@ (8008048 <prvIdleTask+0x2c>)
 8008032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008040:	e7f0      	b.n	8008024 <prvIdleTask+0x8>
 8008042:	bf00      	nop
 8008044:	200013f8 	.word	0x200013f8
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008052:	2300      	movs	r3, #0
 8008054:	607b      	str	r3, [r7, #4]
 8008056:	e00c      	b.n	8008072 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4a12      	ldr	r2, [pc, #72]	@ (80080ac <prvInitialiseTaskLists+0x60>)
 8008064:	4413      	add	r3, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fe6a 	bl	8006d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3301      	adds	r3, #1
 8008070:	607b      	str	r3, [r7, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b06      	cmp	r3, #6
 8008076:	d9ef      	bls.n	8008058 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008078:	480d      	ldr	r0, [pc, #52]	@ (80080b0 <prvInitialiseTaskLists+0x64>)
 800807a:	f7fe fe61 	bl	8006d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800807e:	480d      	ldr	r0, [pc, #52]	@ (80080b4 <prvInitialiseTaskLists+0x68>)
 8008080:	f7fe fe5e 	bl	8006d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008084:	480c      	ldr	r0, [pc, #48]	@ (80080b8 <prvInitialiseTaskLists+0x6c>)
 8008086:	f7fe fe5b 	bl	8006d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800808a:	480c      	ldr	r0, [pc, #48]	@ (80080bc <prvInitialiseTaskLists+0x70>)
 800808c:	f7fe fe58 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008090:	480b      	ldr	r0, [pc, #44]	@ (80080c0 <prvInitialiseTaskLists+0x74>)
 8008092:	f7fe fe55 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008096:	4b0b      	ldr	r3, [pc, #44]	@ (80080c4 <prvInitialiseTaskLists+0x78>)
 8008098:	4a05      	ldr	r2, [pc, #20]	@ (80080b0 <prvInitialiseTaskLists+0x64>)
 800809a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800809c:	4b0a      	ldr	r3, [pc, #40]	@ (80080c8 <prvInitialiseTaskLists+0x7c>)
 800809e:	4a05      	ldr	r2, [pc, #20]	@ (80080b4 <prvInitialiseTaskLists+0x68>)
 80080a0:	601a      	str	r2, [r3, #0]
}
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	200013f8 	.word	0x200013f8
 80080b0:	20001484 	.word	0x20001484
 80080b4:	20001498 	.word	0x20001498
 80080b8:	200014b4 	.word	0x200014b4
 80080bc:	200014c8 	.word	0x200014c8
 80080c0:	200014e0 	.word	0x200014e0
 80080c4:	200014ac 	.word	0x200014ac
 80080c8:	200014b0 	.word	0x200014b0

080080cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080d2:	e019      	b.n	8008108 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080d4:	f000 fab8 	bl	8008648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d8:	4b10      	ldr	r3, [pc, #64]	@ (800811c <prvCheckTasksWaitingTermination+0x50>)
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3304      	adds	r3, #4
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe feb5 	bl	8006e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008120 <prvCheckTasksWaitingTermination+0x54>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008120 <prvCheckTasksWaitingTermination+0x54>)
 80080f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008124 <prvCheckTasksWaitingTermination+0x58>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008124 <prvCheckTasksWaitingTermination+0x58>)
 80080fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080fe:	f000 fad5 	bl	80086ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f810 	bl	8008128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008108:	4b06      	ldr	r3, [pc, #24]	@ (8008124 <prvCheckTasksWaitingTermination+0x58>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e1      	bne.n	80080d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	200014c8 	.word	0x200014c8
 8008120:	200014f4 	.word	0x200014f4
 8008124:	200014dc 	.word	0x200014dc

08008128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008136:	2b00      	cmp	r3, #0
 8008138:	d108      	bne.n	800814c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fc30 	bl	80089a4 <vPortFree>
				vPortFree( pxTCB );
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc2d 	bl	80089a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800814a:	e019      	b.n	8008180 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008152:	2b01      	cmp	r3, #1
 8008154:	d103      	bne.n	800815e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fc24 	bl	80089a4 <vPortFree>
	}
 800815c:	e010      	b.n	8008180 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008164:	2b02      	cmp	r3, #2
 8008166:	d00b      	beq.n	8008180 <prvDeleteTCB+0x58>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	60fb      	str	r3, [r7, #12]
}
 800817a:	bf00      	nop
 800817c:	bf00      	nop
 800817e:	e7fd      	b.n	800817c <prvDeleteTCB+0x54>
	}
 8008180:	bf00      	nop
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800818e:	4b0c      	ldr	r3, [pc, #48]	@ (80081c0 <prvResetNextTaskUnblockTime+0x38>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d104      	bne.n	80081a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008198:	4b0a      	ldr	r3, [pc, #40]	@ (80081c4 <prvResetNextTaskUnblockTime+0x3c>)
 800819a:	f04f 32ff 	mov.w	r2, #4294967295
 800819e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081a0:	e008      	b.n	80081b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081a2:	4b07      	ldr	r3, [pc, #28]	@ (80081c0 <prvResetNextTaskUnblockTime+0x38>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4a04      	ldr	r2, [pc, #16]	@ (80081c4 <prvResetNextTaskUnblockTime+0x3c>)
 80081b2:	6013      	str	r3, [r2, #0]
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	200014ac 	.word	0x200014ac
 80081c4:	20001514 	.word	0x20001514

080081c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081ce:	4b0b      	ldr	r3, [pc, #44]	@ (80081fc <xTaskGetSchedulerState+0x34>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081d6:	2301      	movs	r3, #1
 80081d8:	607b      	str	r3, [r7, #4]
 80081da:	e008      	b.n	80081ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081dc:	4b08      	ldr	r3, [pc, #32]	@ (8008200 <xTaskGetSchedulerState+0x38>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d102      	bne.n	80081ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081e4:	2302      	movs	r3, #2
 80081e6:	607b      	str	r3, [r7, #4]
 80081e8:	e001      	b.n	80081ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081ea:	2300      	movs	r3, #0
 80081ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081ee:	687b      	ldr	r3, [r7, #4]
	}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	20001500 	.word	0x20001500
 8008200:	2000151c 	.word	0x2000151c

08008204 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d070      	beq.n	80082fc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800821a:	4b3b      	ldr	r3, [pc, #236]	@ (8008308 <xTaskPriorityDisinherit+0x104>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	429a      	cmp	r2, r3
 8008222:	d00b      	beq.n	800823c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	60fb      	str	r3, [r7, #12]
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10b      	bne.n	800825c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	60bb      	str	r3, [r7, #8]
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008260:	1e5a      	subs	r2, r3, #1
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800826e:	429a      	cmp	r2, r3
 8008270:	d044      	beq.n	80082fc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008276:	2b00      	cmp	r3, #0
 8008278:	d140      	bne.n	80082fc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	3304      	adds	r3, #4
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe fde8 	bl	8006e54 <uxListRemove>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d115      	bne.n	80082b6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828e:	491f      	ldr	r1, [pc, #124]	@ (800830c <xTaskPriorityDisinherit+0x108>)
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xTaskPriorityDisinherit+0xb2>
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a4:	2201      	movs	r2, #1
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	43da      	mvns	r2, r3
 80082ac:	4b18      	ldr	r3, [pc, #96]	@ (8008310 <xTaskPriorityDisinherit+0x10c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4013      	ands	r3, r2
 80082b2:	4a17      	ldr	r2, [pc, #92]	@ (8008310 <xTaskPriorityDisinherit+0x10c>)
 80082b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c2:	f1c3 0207 	rsb	r2, r3, #7
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ce:	2201      	movs	r2, #1
 80082d0:	409a      	lsls	r2, r3
 80082d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008310 <xTaskPriorityDisinherit+0x10c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008310 <xTaskPriorityDisinherit+0x10c>)
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4a08      	ldr	r2, [pc, #32]	@ (800830c <xTaskPriorityDisinherit+0x108>)
 80082ea:	441a      	add	r2, r3
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f7fe fd51 	bl	8006d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082f8:	2301      	movs	r3, #1
 80082fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082fc:	697b      	ldr	r3, [r7, #20]
	}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	200013f4 	.word	0x200013f4
 800830c:	200013f8 	.word	0x200013f8
 8008310:	200014fc 	.word	0x200014fc

08008314 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800831e:	4b29      	ldr	r3, [pc, #164]	@ (80083c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008324:	4b28      	ldr	r3, [pc, #160]	@ (80083c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3304      	adds	r3, #4
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fd92 	bl	8006e54 <uxListRemove>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10b      	bne.n	800834e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008336:	4b24      	ldr	r3, [pc, #144]	@ (80083c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	2201      	movs	r2, #1
 800833e:	fa02 f303 	lsl.w	r3, r2, r3
 8008342:	43da      	mvns	r2, r3
 8008344:	4b21      	ldr	r3, [pc, #132]	@ (80083cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4013      	ands	r3, r2
 800834a:	4a20      	ldr	r2, [pc, #128]	@ (80083cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800834c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008354:	d10a      	bne.n	800836c <prvAddCurrentTaskToDelayedList+0x58>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d007      	beq.n	800836c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800835c:	4b1a      	ldr	r3, [pc, #104]	@ (80083c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3304      	adds	r3, #4
 8008362:	4619      	mov	r1, r3
 8008364:	481a      	ldr	r0, [pc, #104]	@ (80083d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008366:	f7fe fd18 	bl	8006d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800836a:	e026      	b.n	80083ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4413      	add	r3, r2
 8008372:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008374:	4b14      	ldr	r3, [pc, #80]	@ (80083c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	429a      	cmp	r2, r3
 8008382:	d209      	bcs.n	8008398 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008384:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	4b0f      	ldr	r3, [pc, #60]	@ (80083c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3304      	adds	r3, #4
 800838e:	4619      	mov	r1, r3
 8008390:	4610      	mov	r0, r2
 8008392:	f7fe fd26 	bl	8006de2 <vListInsert>
}
 8008396:	e010      	b.n	80083ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008398:	4b0f      	ldr	r3, [pc, #60]	@ (80083d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	4b0a      	ldr	r3, [pc, #40]	@ (80083c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3304      	adds	r3, #4
 80083a2:	4619      	mov	r1, r3
 80083a4:	4610      	mov	r0, r2
 80083a6:	f7fe fd1c 	bl	8006de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083aa:	4b0c      	ldr	r3, [pc, #48]	@ (80083dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d202      	bcs.n	80083ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80083b4:	4a09      	ldr	r2, [pc, #36]	@ (80083dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6013      	str	r3, [r2, #0]
}
 80083ba:	bf00      	nop
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	200014f8 	.word	0x200014f8
 80083c8:	200013f4 	.word	0x200013f4
 80083cc:	200014fc 	.word	0x200014fc
 80083d0:	200014e0 	.word	0x200014e0
 80083d4:	200014b0 	.word	0x200014b0
 80083d8:	200014ac 	.word	0x200014ac
 80083dc:	20001514 	.word	0x20001514

080083e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3b04      	subs	r3, #4
 80083f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80083f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3b04      	subs	r3, #4
 80083fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f023 0201 	bic.w	r2, r3, #1
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3b04      	subs	r3, #4
 800840e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008410:	4a0c      	ldr	r2, [pc, #48]	@ (8008444 <pxPortInitialiseStack+0x64>)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3b14      	subs	r3, #20
 800841a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3b04      	subs	r3, #4
 8008426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f06f 0202 	mvn.w	r2, #2
 800842e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3b20      	subs	r3, #32
 8008434:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008436:	68fb      	ldr	r3, [r7, #12]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	08008449 	.word	0x08008449

08008448 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008452:	4b13      	ldr	r3, [pc, #76]	@ (80084a0 <prvTaskExitError+0x58>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845a:	d00b      	beq.n	8008474 <prvTaskExitError+0x2c>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60fb      	str	r3, [r7, #12]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <prvTaskExitError+0x28>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60bb      	str	r3, [r7, #8]
}
 8008486:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008488:	bf00      	nop
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0fc      	beq.n	800848a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	20000010 	.word	0x20000010
	...

080084b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084b0:	4b07      	ldr	r3, [pc, #28]	@ (80084d0 <pxCurrentTCBConst2>)
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	6808      	ldr	r0, [r1, #0]
 80084b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	f380 8809 	msr	PSP, r0
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f04f 0000 	mov.w	r0, #0
 80084c6:	f380 8811 	msr	BASEPRI, r0
 80084ca:	4770      	bx	lr
 80084cc:	f3af 8000 	nop.w

080084d0 <pxCurrentTCBConst2>:
 80084d0:	200013f4 	.word	0x200013f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084d8:	4808      	ldr	r0, [pc, #32]	@ (80084fc <prvPortStartFirstTask+0x24>)
 80084da:	6800      	ldr	r0, [r0, #0]
 80084dc:	6800      	ldr	r0, [r0, #0]
 80084de:	f380 8808 	msr	MSP, r0
 80084e2:	f04f 0000 	mov.w	r0, #0
 80084e6:	f380 8814 	msr	CONTROL, r0
 80084ea:	b662      	cpsie	i
 80084ec:	b661      	cpsie	f
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	df00      	svc	0
 80084f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084fa:	bf00      	nop
 80084fc:	e000ed08 	.word	0xe000ed08

08008500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008506:	4b47      	ldr	r3, [pc, #284]	@ (8008624 <xPortStartScheduler+0x124>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a47      	ldr	r2, [pc, #284]	@ (8008628 <xPortStartScheduler+0x128>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d10b      	bne.n	8008528 <xPortStartScheduler+0x28>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60fb      	str	r3, [r7, #12]
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008528:	4b3e      	ldr	r3, [pc, #248]	@ (8008624 <xPortStartScheduler+0x124>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a3f      	ldr	r2, [pc, #252]	@ (800862c <xPortStartScheduler+0x12c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d10b      	bne.n	800854a <xPortStartScheduler+0x4a>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	613b      	str	r3, [r7, #16]
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	e7fd      	b.n	8008546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800854a:	4b39      	ldr	r3, [pc, #228]	@ (8008630 <xPortStartScheduler+0x130>)
 800854c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	22ff      	movs	r2, #255	@ 0xff
 800855a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800856c:	b2da      	uxtb	r2, r3
 800856e:	4b31      	ldr	r3, [pc, #196]	@ (8008634 <xPortStartScheduler+0x134>)
 8008570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008572:	4b31      	ldr	r3, [pc, #196]	@ (8008638 <xPortStartScheduler+0x138>)
 8008574:	2207      	movs	r2, #7
 8008576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008578:	e009      	b.n	800858e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800857a:	4b2f      	ldr	r3, [pc, #188]	@ (8008638 <xPortStartScheduler+0x138>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3b01      	subs	r3, #1
 8008580:	4a2d      	ldr	r2, [pc, #180]	@ (8008638 <xPortStartScheduler+0x138>)
 8008582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	b2db      	uxtb	r3, r3
 800858c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008596:	2b80      	cmp	r3, #128	@ 0x80
 8008598:	d0ef      	beq.n	800857a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800859a:	4b27      	ldr	r3, [pc, #156]	@ (8008638 <xPortStartScheduler+0x138>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f1c3 0307 	rsb	r3, r3, #7
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d00b      	beq.n	80085be <xPortStartScheduler+0xbe>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	60bb      	str	r3, [r7, #8]
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	e7fd      	b.n	80085ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085be:	4b1e      	ldr	r3, [pc, #120]	@ (8008638 <xPortStartScheduler+0x138>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008638 <xPortStartScheduler+0x138>)
 80085c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008638 <xPortStartScheduler+0x138>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085d0:	4a19      	ldr	r2, [pc, #100]	@ (8008638 <xPortStartScheduler+0x138>)
 80085d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085dc:	4b17      	ldr	r3, [pc, #92]	@ (800863c <xPortStartScheduler+0x13c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a16      	ldr	r2, [pc, #88]	@ (800863c <xPortStartScheduler+0x13c>)
 80085e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085e8:	4b14      	ldr	r3, [pc, #80]	@ (800863c <xPortStartScheduler+0x13c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a13      	ldr	r2, [pc, #76]	@ (800863c <xPortStartScheduler+0x13c>)
 80085ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085f4:	f000 f8da 	bl	80087ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085f8:	4b11      	ldr	r3, [pc, #68]	@ (8008640 <xPortStartScheduler+0x140>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085fe:	f000 f8f9 	bl	80087f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008602:	4b10      	ldr	r3, [pc, #64]	@ (8008644 <xPortStartScheduler+0x144>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a0f      	ldr	r2, [pc, #60]	@ (8008644 <xPortStartScheduler+0x144>)
 8008608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800860c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800860e:	f7ff ff63 	bl	80084d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008612:	f7ff fb97 	bl	8007d44 <vTaskSwitchContext>
	prvTaskExitError();
 8008616:	f7ff ff17 	bl	8008448 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	e000ed00 	.word	0xe000ed00
 8008628:	410fc271 	.word	0x410fc271
 800862c:	410fc270 	.word	0x410fc270
 8008630:	e000e400 	.word	0xe000e400
 8008634:	20001520 	.word	0x20001520
 8008638:	20001524 	.word	0x20001524
 800863c:	e000ed20 	.word	0xe000ed20
 8008640:	20000010 	.word	0x20000010
 8008644:	e000ef34 	.word	0xe000ef34

08008648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	607b      	str	r3, [r7, #4]
}
 8008660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008662:	4b10      	ldr	r3, [pc, #64]	@ (80086a4 <vPortEnterCritical+0x5c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3301      	adds	r3, #1
 8008668:	4a0e      	ldr	r2, [pc, #56]	@ (80086a4 <vPortEnterCritical+0x5c>)
 800866a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800866c:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <vPortEnterCritical+0x5c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d110      	bne.n	8008696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008674:	4b0c      	ldr	r3, [pc, #48]	@ (80086a8 <vPortEnterCritical+0x60>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00b      	beq.n	8008696 <vPortEnterCritical+0x4e>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	603b      	str	r3, [r7, #0]
}
 8008690:	bf00      	nop
 8008692:	bf00      	nop
 8008694:	e7fd      	b.n	8008692 <vPortEnterCritical+0x4a>
	}
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20000010 	.word	0x20000010
 80086a8:	e000ed04 	.word	0xe000ed04

080086ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086b2:	4b12      	ldr	r3, [pc, #72]	@ (80086fc <vPortExitCritical+0x50>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10b      	bne.n	80086d2 <vPortExitCritical+0x26>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	607b      	str	r3, [r7, #4]
}
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	e7fd      	b.n	80086ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086d2:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <vPortExitCritical+0x50>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	4a08      	ldr	r2, [pc, #32]	@ (80086fc <vPortExitCritical+0x50>)
 80086da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086dc:	4b07      	ldr	r3, [pc, #28]	@ (80086fc <vPortExitCritical+0x50>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d105      	bne.n	80086f0 <vPortExitCritical+0x44>
 80086e4:	2300      	movs	r3, #0
 80086e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	20000010 	.word	0x20000010

08008700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008700:	f3ef 8009 	mrs	r0, PSP
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	4b15      	ldr	r3, [pc, #84]	@ (8008760 <pxCurrentTCBConst>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	f01e 0f10 	tst.w	lr, #16
 8008710:	bf08      	it	eq
 8008712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871a:	6010      	str	r0, [r2, #0]
 800871c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008724:	f380 8811 	msr	BASEPRI, r0
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f7ff fb08 	bl	8007d44 <vTaskSwitchContext>
 8008734:	f04f 0000 	mov.w	r0, #0
 8008738:	f380 8811 	msr	BASEPRI, r0
 800873c:	bc09      	pop	{r0, r3}
 800873e:	6819      	ldr	r1, [r3, #0]
 8008740:	6808      	ldr	r0, [r1, #0]
 8008742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008746:	f01e 0f10 	tst.w	lr, #16
 800874a:	bf08      	it	eq
 800874c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008750:	f380 8809 	msr	PSP, r0
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	f3af 8000 	nop.w

08008760 <pxCurrentTCBConst>:
 8008760:	200013f4 	.word	0x200013f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop

08008768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	607b      	str	r3, [r7, #4]
}
 8008780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008782:	f7ff fa25 	bl	8007bd0 <xTaskIncrementTick>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800878c:	4b06      	ldr	r3, [pc, #24]	@ (80087a8 <xPortSysTickHandler+0x40>)
 800878e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	2300      	movs	r3, #0
 8008796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f383 8811 	msr	BASEPRI, r3
}
 800879e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	e000ed04 	.word	0xe000ed04

080087ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087b0:	4b0b      	ldr	r3, [pc, #44]	@ (80087e0 <vPortSetupTimerInterrupt+0x34>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087b6:	4b0b      	ldr	r3, [pc, #44]	@ (80087e4 <vPortSetupTimerInterrupt+0x38>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087bc:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <vPortSetupTimerInterrupt+0x3c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a0a      	ldr	r2, [pc, #40]	@ (80087ec <vPortSetupTimerInterrupt+0x40>)
 80087c2:	fba2 2303 	umull	r2, r3, r2, r3
 80087c6:	099b      	lsrs	r3, r3, #6
 80087c8:	4a09      	ldr	r2, [pc, #36]	@ (80087f0 <vPortSetupTimerInterrupt+0x44>)
 80087ca:	3b01      	subs	r3, #1
 80087cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087ce:	4b04      	ldr	r3, [pc, #16]	@ (80087e0 <vPortSetupTimerInterrupt+0x34>)
 80087d0:	2207      	movs	r2, #7
 80087d2:	601a      	str	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	e000e010 	.word	0xe000e010
 80087e4:	e000e018 	.word	0xe000e018
 80087e8:	20000004 	.word	0x20000004
 80087ec:	10624dd3 	.word	0x10624dd3
 80087f0:	e000e014 	.word	0xe000e014

080087f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008804 <vPortEnableVFP+0x10>
 80087f8:	6801      	ldr	r1, [r0, #0]
 80087fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087fe:	6001      	str	r1, [r0, #0]
 8008800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008802:	bf00      	nop
 8008804:	e000ed88 	.word	0xe000ed88

08008808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	@ 0x28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008814:	f7ff f930 	bl	8007a78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008818:	4b5c      	ldr	r3, [pc, #368]	@ (800898c <pvPortMalloc+0x184>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008820:	f000 f924 	bl	8008a6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008824:	4b5a      	ldr	r3, [pc, #360]	@ (8008990 <pvPortMalloc+0x188>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4013      	ands	r3, r2
 800882c:	2b00      	cmp	r3, #0
 800882e:	f040 8095 	bne.w	800895c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d01e      	beq.n	8008876 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008838:	2208      	movs	r2, #8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4413      	add	r3, r2
 800883e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	2b00      	cmp	r3, #0
 8008848:	d015      	beq.n	8008876 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f023 0307 	bic.w	r3, r3, #7
 8008850:	3308      	adds	r3, #8
 8008852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00b      	beq.n	8008876 <pvPortMalloc+0x6e>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	617b      	str	r3, [r7, #20]
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	e7fd      	b.n	8008872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d06f      	beq.n	800895c <pvPortMalloc+0x154>
 800887c:	4b45      	ldr	r3, [pc, #276]	@ (8008994 <pvPortMalloc+0x18c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	429a      	cmp	r2, r3
 8008884:	d86a      	bhi.n	800895c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008886:	4b44      	ldr	r3, [pc, #272]	@ (8008998 <pvPortMalloc+0x190>)
 8008888:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800888a:	4b43      	ldr	r3, [pc, #268]	@ (8008998 <pvPortMalloc+0x190>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008890:	e004      	b.n	800889c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d903      	bls.n	80088ae <pvPortMalloc+0xa6>
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f1      	bne.n	8008892 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088ae:	4b37      	ldr	r3, [pc, #220]	@ (800898c <pvPortMalloc+0x184>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d051      	beq.n	800895c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2208      	movs	r2, #8
 80088be:	4413      	add	r3, r2
 80088c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	1ad2      	subs	r2, r2, r3
 80088d2:	2308      	movs	r3, #8
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d920      	bls.n	800891c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4413      	add	r3, r2
 80088e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <pvPortMalloc+0xfc>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	613b      	str	r3, [r7, #16]
}
 80088fe:	bf00      	nop
 8008900:	bf00      	nop
 8008902:	e7fd      	b.n	8008900 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	1ad2      	subs	r2, r2, r3
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008916:	69b8      	ldr	r0, [r7, #24]
 8008918:	f000 f90a 	bl	8008b30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800891c:	4b1d      	ldr	r3, [pc, #116]	@ (8008994 <pvPortMalloc+0x18c>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	4a1b      	ldr	r2, [pc, #108]	@ (8008994 <pvPortMalloc+0x18c>)
 8008928:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800892a:	4b1a      	ldr	r3, [pc, #104]	@ (8008994 <pvPortMalloc+0x18c>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	4b1b      	ldr	r3, [pc, #108]	@ (800899c <pvPortMalloc+0x194>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d203      	bcs.n	800893e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008936:	4b17      	ldr	r3, [pc, #92]	@ (8008994 <pvPortMalloc+0x18c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a18      	ldr	r2, [pc, #96]	@ (800899c <pvPortMalloc+0x194>)
 800893c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	4b13      	ldr	r3, [pc, #76]	@ (8008990 <pvPortMalloc+0x188>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	431a      	orrs	r2, r3
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008952:	4b13      	ldr	r3, [pc, #76]	@ (80089a0 <pvPortMalloc+0x198>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3301      	adds	r3, #1
 8008958:	4a11      	ldr	r2, [pc, #68]	@ (80089a0 <pvPortMalloc+0x198>)
 800895a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800895c:	f7ff f89a 	bl	8007a94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	f003 0307 	and.w	r3, r3, #7
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <pvPortMalloc+0x17a>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	60fb      	str	r3, [r7, #12]
}
 800897c:	bf00      	nop
 800897e:	bf00      	nop
 8008980:	e7fd      	b.n	800897e <pvPortMalloc+0x176>
	return pvReturn;
 8008982:	69fb      	ldr	r3, [r7, #28]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3728      	adds	r7, #40	@ 0x28
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20008a60 	.word	0x20008a60
 8008990:	20008a74 	.word	0x20008a74
 8008994:	20008a64 	.word	0x20008a64
 8008998:	20008a58 	.word	0x20008a58
 800899c:	20008a68 	.word	0x20008a68
 80089a0:	20008a6c 	.word	0x20008a6c

080089a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d04f      	beq.n	8008a56 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089b6:	2308      	movs	r3, #8
 80089b8:	425b      	negs	r3, r3
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	4413      	add	r3, r2
 80089be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	4b25      	ldr	r3, [pc, #148]	@ (8008a60 <vPortFree+0xbc>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4013      	ands	r3, r2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10b      	bne.n	80089ea <vPortFree+0x46>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	60fb      	str	r3, [r7, #12]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <vPortFree+0x66>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	60bb      	str	r3, [r7, #8]
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	e7fd      	b.n	8008a06 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	4b14      	ldr	r3, [pc, #80]	@ (8008a60 <vPortFree+0xbc>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01e      	beq.n	8008a56 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d11a      	bne.n	8008a56 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	4b0e      	ldr	r3, [pc, #56]	@ (8008a60 <vPortFree+0xbc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	43db      	mvns	r3, r3
 8008a2a:	401a      	ands	r2, r3
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a30:	f7ff f822 	bl	8007a78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <vPortFree+0xc0>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	4a09      	ldr	r2, [pc, #36]	@ (8008a64 <vPortFree+0xc0>)
 8008a40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a42:	6938      	ldr	r0, [r7, #16]
 8008a44:	f000 f874 	bl	8008b30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a48:	4b07      	ldr	r3, [pc, #28]	@ (8008a68 <vPortFree+0xc4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	4a06      	ldr	r2, [pc, #24]	@ (8008a68 <vPortFree+0xc4>)
 8008a50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a52:	f7ff f81f 	bl	8007a94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a56:	bf00      	nop
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20008a74 	.word	0x20008a74
 8008a64:	20008a64 	.word	0x20008a64
 8008a68:	20008a70 	.word	0x20008a70

08008a6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a72:	f247 5330 	movw	r3, #30000	@ 0x7530
 8008a76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a78:	4b27      	ldr	r3, [pc, #156]	@ (8008b18 <prvHeapInit+0xac>)
 8008a7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00c      	beq.n	8008aa0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3307      	adds	r3, #7
 8008a8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0307 	bic.w	r3, r3, #7
 8008a92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008b18 <prvHeapInit+0xac>)
 8008a9c:	4413      	add	r3, r2
 8008a9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b1c <prvHeapInit+0xb0>)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8008b1c <prvHeapInit+0xb0>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ab8:	2208      	movs	r2, #8
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0307 	bic.w	r3, r3, #7
 8008ac6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4a15      	ldr	r2, [pc, #84]	@ (8008b20 <prvHeapInit+0xb4>)
 8008acc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ace:	4b14      	ldr	r3, [pc, #80]	@ (8008b20 <prvHeapInit+0xb4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ad6:	4b12      	ldr	r3, [pc, #72]	@ (8008b20 <prvHeapInit+0xb4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	1ad2      	subs	r2, r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008aec:	4b0c      	ldr	r3, [pc, #48]	@ (8008b20 <prvHeapInit+0xb4>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	4a0a      	ldr	r2, [pc, #40]	@ (8008b24 <prvHeapInit+0xb8>)
 8008afa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	4a09      	ldr	r2, [pc, #36]	@ (8008b28 <prvHeapInit+0xbc>)
 8008b02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b04:	4b09      	ldr	r3, [pc, #36]	@ (8008b2c <prvHeapInit+0xc0>)
 8008b06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b0a:	601a      	str	r2, [r3, #0]
}
 8008b0c:	bf00      	nop
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	20001528 	.word	0x20001528
 8008b1c:	20008a58 	.word	0x20008a58
 8008b20:	20008a60 	.word	0x20008a60
 8008b24:	20008a68 	.word	0x20008a68
 8008b28:	20008a64 	.word	0x20008a64
 8008b2c:	20008a74 	.word	0x20008a74

08008b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b38:	4b28      	ldr	r3, [pc, #160]	@ (8008bdc <prvInsertBlockIntoFreeList+0xac>)
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	e002      	b.n	8008b44 <prvInsertBlockIntoFreeList+0x14>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d8f7      	bhi.n	8008b3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d108      	bne.n	8008b72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	441a      	add	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d118      	bne.n	8008bb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4b15      	ldr	r3, [pc, #84]	@ (8008be0 <prvInsertBlockIntoFreeList+0xb0>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d00d      	beq.n	8008bae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	441a      	add	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	e008      	b.n	8008bc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bae:	4b0c      	ldr	r3, [pc, #48]	@ (8008be0 <prvInsertBlockIntoFreeList+0xb0>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	e003      	b.n	8008bc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d002      	beq.n	8008bce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	20008a58 	.word	0x20008a58
 8008be0:	20008a60 	.word	0x20008a60

08008be4 <__cvt>:
 8008be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	ec57 6b10 	vmov	r6, r7, d0
 8008bec:	2f00      	cmp	r7, #0
 8008bee:	460c      	mov	r4, r1
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	bfbb      	ittet	lt
 8008bf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008bfa:	461f      	movlt	r7, r3
 8008bfc:	2300      	movge	r3, #0
 8008bfe:	232d      	movlt	r3, #45	@ 0x2d
 8008c00:	700b      	strb	r3, [r1, #0]
 8008c02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008c08:	4691      	mov	r9, r2
 8008c0a:	f023 0820 	bic.w	r8, r3, #32
 8008c0e:	bfbc      	itt	lt
 8008c10:	4632      	movlt	r2, r6
 8008c12:	4616      	movlt	r6, r2
 8008c14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c18:	d005      	beq.n	8008c26 <__cvt+0x42>
 8008c1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c1e:	d100      	bne.n	8008c22 <__cvt+0x3e>
 8008c20:	3401      	adds	r4, #1
 8008c22:	2102      	movs	r1, #2
 8008c24:	e000      	b.n	8008c28 <__cvt+0x44>
 8008c26:	2103      	movs	r1, #3
 8008c28:	ab03      	add	r3, sp, #12
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	ab02      	add	r3, sp, #8
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	ec47 6b10 	vmov	d0, r6, r7
 8008c34:	4653      	mov	r3, sl
 8008c36:	4622      	mov	r2, r4
 8008c38:	f000 fe6a 	bl	8009910 <_dtoa_r>
 8008c3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c40:	4605      	mov	r5, r0
 8008c42:	d119      	bne.n	8008c78 <__cvt+0x94>
 8008c44:	f019 0f01 	tst.w	r9, #1
 8008c48:	d00e      	beq.n	8008c68 <__cvt+0x84>
 8008c4a:	eb00 0904 	add.w	r9, r0, r4
 8008c4e:	2200      	movs	r2, #0
 8008c50:	2300      	movs	r3, #0
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	f7f7 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c5a:	b108      	cbz	r0, 8008c60 <__cvt+0x7c>
 8008c5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c60:	2230      	movs	r2, #48	@ 0x30
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	454b      	cmp	r3, r9
 8008c66:	d31e      	bcc.n	8008ca6 <__cvt+0xc2>
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c6c:	1b5b      	subs	r3, r3, r5
 8008c6e:	4628      	mov	r0, r5
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	b004      	add	sp, #16
 8008c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c7c:	eb00 0904 	add.w	r9, r0, r4
 8008c80:	d1e5      	bne.n	8008c4e <__cvt+0x6a>
 8008c82:	7803      	ldrb	r3, [r0, #0]
 8008c84:	2b30      	cmp	r3, #48	@ 0x30
 8008c86:	d10a      	bne.n	8008c9e <__cvt+0xba>
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	4639      	mov	r1, r7
 8008c90:	f7f7 ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c94:	b918      	cbnz	r0, 8008c9e <__cvt+0xba>
 8008c96:	f1c4 0401 	rsb	r4, r4, #1
 8008c9a:	f8ca 4000 	str.w	r4, [sl]
 8008c9e:	f8da 3000 	ldr.w	r3, [sl]
 8008ca2:	4499      	add	r9, r3
 8008ca4:	e7d3      	b.n	8008c4e <__cvt+0x6a>
 8008ca6:	1c59      	adds	r1, r3, #1
 8008ca8:	9103      	str	r1, [sp, #12]
 8008caa:	701a      	strb	r2, [r3, #0]
 8008cac:	e7d9      	b.n	8008c62 <__cvt+0x7e>

08008cae <__exponent>:
 8008cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cb0:	2900      	cmp	r1, #0
 8008cb2:	bfba      	itte	lt
 8008cb4:	4249      	neglt	r1, r1
 8008cb6:	232d      	movlt	r3, #45	@ 0x2d
 8008cb8:	232b      	movge	r3, #43	@ 0x2b
 8008cba:	2909      	cmp	r1, #9
 8008cbc:	7002      	strb	r2, [r0, #0]
 8008cbe:	7043      	strb	r3, [r0, #1]
 8008cc0:	dd29      	ble.n	8008d16 <__exponent+0x68>
 8008cc2:	f10d 0307 	add.w	r3, sp, #7
 8008cc6:	461d      	mov	r5, r3
 8008cc8:	270a      	movs	r7, #10
 8008cca:	461a      	mov	r2, r3
 8008ccc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008cd0:	fb07 1416 	mls	r4, r7, r6, r1
 8008cd4:	3430      	adds	r4, #48	@ 0x30
 8008cd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008cda:	460c      	mov	r4, r1
 8008cdc:	2c63      	cmp	r4, #99	@ 0x63
 8008cde:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	dcf1      	bgt.n	8008cca <__exponent+0x1c>
 8008ce6:	3130      	adds	r1, #48	@ 0x30
 8008ce8:	1e94      	subs	r4, r2, #2
 8008cea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008cee:	1c41      	adds	r1, r0, #1
 8008cf0:	4623      	mov	r3, r4
 8008cf2:	42ab      	cmp	r3, r5
 8008cf4:	d30a      	bcc.n	8008d0c <__exponent+0x5e>
 8008cf6:	f10d 0309 	add.w	r3, sp, #9
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	42ac      	cmp	r4, r5
 8008cfe:	bf88      	it	hi
 8008d00:	2300      	movhi	r3, #0
 8008d02:	3302      	adds	r3, #2
 8008d04:	4403      	add	r3, r0
 8008d06:	1a18      	subs	r0, r3, r0
 8008d08:	b003      	add	sp, #12
 8008d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d14:	e7ed      	b.n	8008cf2 <__exponent+0x44>
 8008d16:	2330      	movs	r3, #48	@ 0x30
 8008d18:	3130      	adds	r1, #48	@ 0x30
 8008d1a:	7083      	strb	r3, [r0, #2]
 8008d1c:	70c1      	strb	r1, [r0, #3]
 8008d1e:	1d03      	adds	r3, r0, #4
 8008d20:	e7f1      	b.n	8008d06 <__exponent+0x58>
	...

08008d24 <_printf_float>:
 8008d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d28:	b08d      	sub	sp, #52	@ 0x34
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008d30:	4616      	mov	r6, r2
 8008d32:	461f      	mov	r7, r3
 8008d34:	4605      	mov	r5, r0
 8008d36:	f000 fcdb 	bl	80096f0 <_localeconv_r>
 8008d3a:	6803      	ldr	r3, [r0, #0]
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f7 fa96 	bl	8000270 <strlen>
 8008d44:	2300      	movs	r3, #0
 8008d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d48:	f8d8 3000 	ldr.w	r3, [r8]
 8008d4c:	9005      	str	r0, [sp, #20]
 8008d4e:	3307      	adds	r3, #7
 8008d50:	f023 0307 	bic.w	r3, r3, #7
 8008d54:	f103 0208 	add.w	r2, r3, #8
 8008d58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d5c:	f8d4 b000 	ldr.w	fp, [r4]
 8008d60:	f8c8 2000 	str.w	r2, [r8]
 8008d64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d6c:	9307      	str	r3, [sp, #28]
 8008d6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d7a:	4b9c      	ldr	r3, [pc, #624]	@ (8008fec <_printf_float+0x2c8>)
 8008d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d80:	f7f7 fed4 	bl	8000b2c <__aeabi_dcmpun>
 8008d84:	bb70      	cbnz	r0, 8008de4 <_printf_float+0xc0>
 8008d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d8a:	4b98      	ldr	r3, [pc, #608]	@ (8008fec <_printf_float+0x2c8>)
 8008d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d90:	f7f7 feae 	bl	8000af0 <__aeabi_dcmple>
 8008d94:	bb30      	cbnz	r0, 8008de4 <_printf_float+0xc0>
 8008d96:	2200      	movs	r2, #0
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	4649      	mov	r1, r9
 8008d9e:	f7f7 fe9d 	bl	8000adc <__aeabi_dcmplt>
 8008da2:	b110      	cbz	r0, 8008daa <_printf_float+0x86>
 8008da4:	232d      	movs	r3, #45	@ 0x2d
 8008da6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008daa:	4a91      	ldr	r2, [pc, #580]	@ (8008ff0 <_printf_float+0x2cc>)
 8008dac:	4b91      	ldr	r3, [pc, #580]	@ (8008ff4 <_printf_float+0x2d0>)
 8008dae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008db2:	bf8c      	ite	hi
 8008db4:	4690      	movhi	r8, r2
 8008db6:	4698      	movls	r8, r3
 8008db8:	2303      	movs	r3, #3
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	f02b 0304 	bic.w	r3, fp, #4
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	f04f 0900 	mov.w	r9, #0
 8008dc6:	9700      	str	r7, [sp, #0]
 8008dc8:	4633      	mov	r3, r6
 8008dca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f000 f9d2 	bl	8009178 <_printf_common>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f040 808d 	bne.w	8008ef4 <_printf_float+0x1d0>
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295
 8008dde:	b00d      	add	sp, #52	@ 0x34
 8008de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de4:	4642      	mov	r2, r8
 8008de6:	464b      	mov	r3, r9
 8008de8:	4640      	mov	r0, r8
 8008dea:	4649      	mov	r1, r9
 8008dec:	f7f7 fe9e 	bl	8000b2c <__aeabi_dcmpun>
 8008df0:	b140      	cbz	r0, 8008e04 <_printf_float+0xe0>
 8008df2:	464b      	mov	r3, r9
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfbc      	itt	lt
 8008df8:	232d      	movlt	r3, #45	@ 0x2d
 8008dfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8008ff8 <_printf_float+0x2d4>)
 8008e00:	4b7e      	ldr	r3, [pc, #504]	@ (8008ffc <_printf_float+0x2d8>)
 8008e02:	e7d4      	b.n	8008dae <_printf_float+0x8a>
 8008e04:	6863      	ldr	r3, [r4, #4]
 8008e06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008e0a:	9206      	str	r2, [sp, #24]
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	d13b      	bne.n	8008e88 <_printf_float+0x164>
 8008e10:	2306      	movs	r3, #6
 8008e12:	6063      	str	r3, [r4, #4]
 8008e14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008e18:	2300      	movs	r3, #0
 8008e1a:	6022      	str	r2, [r4, #0]
 8008e1c:	9303      	str	r3, [sp, #12]
 8008e1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e24:	ab09      	add	r3, sp, #36	@ 0x24
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	6861      	ldr	r1, [r4, #4]
 8008e2a:	ec49 8b10 	vmov	d0, r8, r9
 8008e2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008e32:	4628      	mov	r0, r5
 8008e34:	f7ff fed6 	bl	8008be4 <__cvt>
 8008e38:	9b06      	ldr	r3, [sp, #24]
 8008e3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e3c:	2b47      	cmp	r3, #71	@ 0x47
 8008e3e:	4680      	mov	r8, r0
 8008e40:	d129      	bne.n	8008e96 <_printf_float+0x172>
 8008e42:	1cc8      	adds	r0, r1, #3
 8008e44:	db02      	blt.n	8008e4c <_printf_float+0x128>
 8008e46:	6863      	ldr	r3, [r4, #4]
 8008e48:	4299      	cmp	r1, r3
 8008e4a:	dd41      	ble.n	8008ed0 <_printf_float+0x1ac>
 8008e4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e50:	fa5f fa8a 	uxtb.w	sl, sl
 8008e54:	3901      	subs	r1, #1
 8008e56:	4652      	mov	r2, sl
 8008e58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e5e:	f7ff ff26 	bl	8008cae <__exponent>
 8008e62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e64:	1813      	adds	r3, r2, r0
 8008e66:	2a01      	cmp	r2, #1
 8008e68:	4681      	mov	r9, r0
 8008e6a:	6123      	str	r3, [r4, #16]
 8008e6c:	dc02      	bgt.n	8008e74 <_printf_float+0x150>
 8008e6e:	6822      	ldr	r2, [r4, #0]
 8008e70:	07d2      	lsls	r2, r2, #31
 8008e72:	d501      	bpl.n	8008e78 <_printf_float+0x154>
 8008e74:	3301      	adds	r3, #1
 8008e76:	6123      	str	r3, [r4, #16]
 8008e78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0a2      	beq.n	8008dc6 <_printf_float+0xa2>
 8008e80:	232d      	movs	r3, #45	@ 0x2d
 8008e82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e86:	e79e      	b.n	8008dc6 <_printf_float+0xa2>
 8008e88:	9a06      	ldr	r2, [sp, #24]
 8008e8a:	2a47      	cmp	r2, #71	@ 0x47
 8008e8c:	d1c2      	bne.n	8008e14 <_printf_float+0xf0>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1c0      	bne.n	8008e14 <_printf_float+0xf0>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e7bd      	b.n	8008e12 <_printf_float+0xee>
 8008e96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e9a:	d9db      	bls.n	8008e54 <_printf_float+0x130>
 8008e9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ea0:	d118      	bne.n	8008ed4 <_printf_float+0x1b0>
 8008ea2:	2900      	cmp	r1, #0
 8008ea4:	6863      	ldr	r3, [r4, #4]
 8008ea6:	dd0b      	ble.n	8008ec0 <_printf_float+0x19c>
 8008ea8:	6121      	str	r1, [r4, #16]
 8008eaa:	b913      	cbnz	r3, 8008eb2 <_printf_float+0x18e>
 8008eac:	6822      	ldr	r2, [r4, #0]
 8008eae:	07d0      	lsls	r0, r2, #31
 8008eb0:	d502      	bpl.n	8008eb8 <_printf_float+0x194>
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	440b      	add	r3, r1
 8008eb6:	6123      	str	r3, [r4, #16]
 8008eb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008eba:	f04f 0900 	mov.w	r9, #0
 8008ebe:	e7db      	b.n	8008e78 <_printf_float+0x154>
 8008ec0:	b913      	cbnz	r3, 8008ec8 <_printf_float+0x1a4>
 8008ec2:	6822      	ldr	r2, [r4, #0]
 8008ec4:	07d2      	lsls	r2, r2, #31
 8008ec6:	d501      	bpl.n	8008ecc <_printf_float+0x1a8>
 8008ec8:	3302      	adds	r3, #2
 8008eca:	e7f4      	b.n	8008eb6 <_printf_float+0x192>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e7f2      	b.n	8008eb6 <_printf_float+0x192>
 8008ed0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	db05      	blt.n	8008ee6 <_printf_float+0x1c2>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	6121      	str	r1, [r4, #16]
 8008ede:	07d8      	lsls	r0, r3, #31
 8008ee0:	d5ea      	bpl.n	8008eb8 <_printf_float+0x194>
 8008ee2:	1c4b      	adds	r3, r1, #1
 8008ee4:	e7e7      	b.n	8008eb6 <_printf_float+0x192>
 8008ee6:	2900      	cmp	r1, #0
 8008ee8:	bfd4      	ite	le
 8008eea:	f1c1 0202 	rsble	r2, r1, #2
 8008eee:	2201      	movgt	r2, #1
 8008ef0:	4413      	add	r3, r2
 8008ef2:	e7e0      	b.n	8008eb6 <_printf_float+0x192>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	055a      	lsls	r2, r3, #21
 8008ef8:	d407      	bmi.n	8008f0a <_printf_float+0x1e6>
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	4642      	mov	r2, r8
 8008efe:	4631      	mov	r1, r6
 8008f00:	4628      	mov	r0, r5
 8008f02:	47b8      	blx	r7
 8008f04:	3001      	adds	r0, #1
 8008f06:	d12b      	bne.n	8008f60 <_printf_float+0x23c>
 8008f08:	e767      	b.n	8008dda <_printf_float+0xb6>
 8008f0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f0e:	f240 80dd 	bls.w	80090cc <_printf_float+0x3a8>
 8008f12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f16:	2200      	movs	r2, #0
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f7f7 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d033      	beq.n	8008f8a <_printf_float+0x266>
 8008f22:	4a37      	ldr	r2, [pc, #220]	@ (8009000 <_printf_float+0x2dc>)
 8008f24:	2301      	movs	r3, #1
 8008f26:	4631      	mov	r1, r6
 8008f28:	4628      	mov	r0, r5
 8008f2a:	47b8      	blx	r7
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	f43f af54 	beq.w	8008dda <_printf_float+0xb6>
 8008f32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008f36:	4543      	cmp	r3, r8
 8008f38:	db02      	blt.n	8008f40 <_printf_float+0x21c>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	07d8      	lsls	r0, r3, #31
 8008f3e:	d50f      	bpl.n	8008f60 <_printf_float+0x23c>
 8008f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b8      	blx	r7
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	f43f af45 	beq.w	8008dda <_printf_float+0xb6>
 8008f50:	f04f 0900 	mov.w	r9, #0
 8008f54:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f58:	f104 0a1a 	add.w	sl, r4, #26
 8008f5c:	45c8      	cmp	r8, r9
 8008f5e:	dc09      	bgt.n	8008f74 <_printf_float+0x250>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	079b      	lsls	r3, r3, #30
 8008f64:	f100 8103 	bmi.w	800916e <_printf_float+0x44a>
 8008f68:	68e0      	ldr	r0, [r4, #12]
 8008f6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f6c:	4298      	cmp	r0, r3
 8008f6e:	bfb8      	it	lt
 8008f70:	4618      	movlt	r0, r3
 8008f72:	e734      	b.n	8008dde <_printf_float+0xba>
 8008f74:	2301      	movs	r3, #1
 8008f76:	4652      	mov	r2, sl
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	47b8      	blx	r7
 8008f7e:	3001      	adds	r0, #1
 8008f80:	f43f af2b 	beq.w	8008dda <_printf_float+0xb6>
 8008f84:	f109 0901 	add.w	r9, r9, #1
 8008f88:	e7e8      	b.n	8008f5c <_printf_float+0x238>
 8008f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	dc39      	bgt.n	8009004 <_printf_float+0x2e0>
 8008f90:	4a1b      	ldr	r2, [pc, #108]	@ (8009000 <_printf_float+0x2dc>)
 8008f92:	2301      	movs	r3, #1
 8008f94:	4631      	mov	r1, r6
 8008f96:	4628      	mov	r0, r5
 8008f98:	47b8      	blx	r7
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	f43f af1d 	beq.w	8008dda <_printf_float+0xb6>
 8008fa0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008fa4:	ea59 0303 	orrs.w	r3, r9, r3
 8008fa8:	d102      	bne.n	8008fb0 <_printf_float+0x28c>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	07d9      	lsls	r1, r3, #31
 8008fae:	d5d7      	bpl.n	8008f60 <_printf_float+0x23c>
 8008fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	f43f af0d 	beq.w	8008dda <_printf_float+0xb6>
 8008fc0:	f04f 0a00 	mov.w	sl, #0
 8008fc4:	f104 0b1a 	add.w	fp, r4, #26
 8008fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fca:	425b      	negs	r3, r3
 8008fcc:	4553      	cmp	r3, sl
 8008fce:	dc01      	bgt.n	8008fd4 <_printf_float+0x2b0>
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	e793      	b.n	8008efc <_printf_float+0x1d8>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	465a      	mov	r2, fp
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4628      	mov	r0, r5
 8008fdc:	47b8      	blx	r7
 8008fde:	3001      	adds	r0, #1
 8008fe0:	f43f aefb 	beq.w	8008dda <_printf_float+0xb6>
 8008fe4:	f10a 0a01 	add.w	sl, sl, #1
 8008fe8:	e7ee      	b.n	8008fc8 <_printf_float+0x2a4>
 8008fea:	bf00      	nop
 8008fec:	7fefffff 	.word	0x7fefffff
 8008ff0:	0800b9d4 	.word	0x0800b9d4
 8008ff4:	0800b9d0 	.word	0x0800b9d0
 8008ff8:	0800b9dc 	.word	0x0800b9dc
 8008ffc:	0800b9d8 	.word	0x0800b9d8
 8009000:	0800b9e0 	.word	0x0800b9e0
 8009004:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009006:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800900a:	4553      	cmp	r3, sl
 800900c:	bfa8      	it	ge
 800900e:	4653      	movge	r3, sl
 8009010:	2b00      	cmp	r3, #0
 8009012:	4699      	mov	r9, r3
 8009014:	dc36      	bgt.n	8009084 <_printf_float+0x360>
 8009016:	f04f 0b00 	mov.w	fp, #0
 800901a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800901e:	f104 021a 	add.w	r2, r4, #26
 8009022:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009024:	9306      	str	r3, [sp, #24]
 8009026:	eba3 0309 	sub.w	r3, r3, r9
 800902a:	455b      	cmp	r3, fp
 800902c:	dc31      	bgt.n	8009092 <_printf_float+0x36e>
 800902e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009030:	459a      	cmp	sl, r3
 8009032:	dc3a      	bgt.n	80090aa <_printf_float+0x386>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	07da      	lsls	r2, r3, #31
 8009038:	d437      	bmi.n	80090aa <_printf_float+0x386>
 800903a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800903c:	ebaa 0903 	sub.w	r9, sl, r3
 8009040:	9b06      	ldr	r3, [sp, #24]
 8009042:	ebaa 0303 	sub.w	r3, sl, r3
 8009046:	4599      	cmp	r9, r3
 8009048:	bfa8      	it	ge
 800904a:	4699      	movge	r9, r3
 800904c:	f1b9 0f00 	cmp.w	r9, #0
 8009050:	dc33      	bgt.n	80090ba <_printf_float+0x396>
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800905a:	f104 0b1a 	add.w	fp, r4, #26
 800905e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009060:	ebaa 0303 	sub.w	r3, sl, r3
 8009064:	eba3 0309 	sub.w	r3, r3, r9
 8009068:	4543      	cmp	r3, r8
 800906a:	f77f af79 	ble.w	8008f60 <_printf_float+0x23c>
 800906e:	2301      	movs	r3, #1
 8009070:	465a      	mov	r2, fp
 8009072:	4631      	mov	r1, r6
 8009074:	4628      	mov	r0, r5
 8009076:	47b8      	blx	r7
 8009078:	3001      	adds	r0, #1
 800907a:	f43f aeae 	beq.w	8008dda <_printf_float+0xb6>
 800907e:	f108 0801 	add.w	r8, r8, #1
 8009082:	e7ec      	b.n	800905e <_printf_float+0x33a>
 8009084:	4642      	mov	r2, r8
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	d1c2      	bne.n	8009016 <_printf_float+0x2f2>
 8009090:	e6a3      	b.n	8008dda <_printf_float+0xb6>
 8009092:	2301      	movs	r3, #1
 8009094:	4631      	mov	r1, r6
 8009096:	4628      	mov	r0, r5
 8009098:	9206      	str	r2, [sp, #24]
 800909a:	47b8      	blx	r7
 800909c:	3001      	adds	r0, #1
 800909e:	f43f ae9c 	beq.w	8008dda <_printf_float+0xb6>
 80090a2:	9a06      	ldr	r2, [sp, #24]
 80090a4:	f10b 0b01 	add.w	fp, fp, #1
 80090a8:	e7bb      	b.n	8009022 <_printf_float+0x2fe>
 80090aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ae:	4631      	mov	r1, r6
 80090b0:	4628      	mov	r0, r5
 80090b2:	47b8      	blx	r7
 80090b4:	3001      	adds	r0, #1
 80090b6:	d1c0      	bne.n	800903a <_printf_float+0x316>
 80090b8:	e68f      	b.n	8008dda <_printf_float+0xb6>
 80090ba:	9a06      	ldr	r2, [sp, #24]
 80090bc:	464b      	mov	r3, r9
 80090be:	4442      	add	r2, r8
 80090c0:	4631      	mov	r1, r6
 80090c2:	4628      	mov	r0, r5
 80090c4:	47b8      	blx	r7
 80090c6:	3001      	adds	r0, #1
 80090c8:	d1c3      	bne.n	8009052 <_printf_float+0x32e>
 80090ca:	e686      	b.n	8008dda <_printf_float+0xb6>
 80090cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090d0:	f1ba 0f01 	cmp.w	sl, #1
 80090d4:	dc01      	bgt.n	80090da <_printf_float+0x3b6>
 80090d6:	07db      	lsls	r3, r3, #31
 80090d8:	d536      	bpl.n	8009148 <_printf_float+0x424>
 80090da:	2301      	movs	r3, #1
 80090dc:	4642      	mov	r2, r8
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b8      	blx	r7
 80090e4:	3001      	adds	r0, #1
 80090e6:	f43f ae78 	beq.w	8008dda <_printf_float+0xb6>
 80090ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ee:	4631      	mov	r1, r6
 80090f0:	4628      	mov	r0, r5
 80090f2:	47b8      	blx	r7
 80090f4:	3001      	adds	r0, #1
 80090f6:	f43f ae70 	beq.w	8008dda <_printf_float+0xb6>
 80090fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090fe:	2200      	movs	r2, #0
 8009100:	2300      	movs	r3, #0
 8009102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009106:	f7f7 fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800910a:	b9c0      	cbnz	r0, 800913e <_printf_float+0x41a>
 800910c:	4653      	mov	r3, sl
 800910e:	f108 0201 	add.w	r2, r8, #1
 8009112:	4631      	mov	r1, r6
 8009114:	4628      	mov	r0, r5
 8009116:	47b8      	blx	r7
 8009118:	3001      	adds	r0, #1
 800911a:	d10c      	bne.n	8009136 <_printf_float+0x412>
 800911c:	e65d      	b.n	8008dda <_printf_float+0xb6>
 800911e:	2301      	movs	r3, #1
 8009120:	465a      	mov	r2, fp
 8009122:	4631      	mov	r1, r6
 8009124:	4628      	mov	r0, r5
 8009126:	47b8      	blx	r7
 8009128:	3001      	adds	r0, #1
 800912a:	f43f ae56 	beq.w	8008dda <_printf_float+0xb6>
 800912e:	f108 0801 	add.w	r8, r8, #1
 8009132:	45d0      	cmp	r8, sl
 8009134:	dbf3      	blt.n	800911e <_printf_float+0x3fa>
 8009136:	464b      	mov	r3, r9
 8009138:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800913c:	e6df      	b.n	8008efe <_printf_float+0x1da>
 800913e:	f04f 0800 	mov.w	r8, #0
 8009142:	f104 0b1a 	add.w	fp, r4, #26
 8009146:	e7f4      	b.n	8009132 <_printf_float+0x40e>
 8009148:	2301      	movs	r3, #1
 800914a:	4642      	mov	r2, r8
 800914c:	e7e1      	b.n	8009112 <_printf_float+0x3ee>
 800914e:	2301      	movs	r3, #1
 8009150:	464a      	mov	r2, r9
 8009152:	4631      	mov	r1, r6
 8009154:	4628      	mov	r0, r5
 8009156:	47b8      	blx	r7
 8009158:	3001      	adds	r0, #1
 800915a:	f43f ae3e 	beq.w	8008dda <_printf_float+0xb6>
 800915e:	f108 0801 	add.w	r8, r8, #1
 8009162:	68e3      	ldr	r3, [r4, #12]
 8009164:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009166:	1a5b      	subs	r3, r3, r1
 8009168:	4543      	cmp	r3, r8
 800916a:	dcf0      	bgt.n	800914e <_printf_float+0x42a>
 800916c:	e6fc      	b.n	8008f68 <_printf_float+0x244>
 800916e:	f04f 0800 	mov.w	r8, #0
 8009172:	f104 0919 	add.w	r9, r4, #25
 8009176:	e7f4      	b.n	8009162 <_printf_float+0x43e>

08009178 <_printf_common>:
 8009178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917c:	4616      	mov	r6, r2
 800917e:	4698      	mov	r8, r3
 8009180:	688a      	ldr	r2, [r1, #8]
 8009182:	690b      	ldr	r3, [r1, #16]
 8009184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009188:	4293      	cmp	r3, r2
 800918a:	bfb8      	it	lt
 800918c:	4613      	movlt	r3, r2
 800918e:	6033      	str	r3, [r6, #0]
 8009190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009194:	4607      	mov	r7, r0
 8009196:	460c      	mov	r4, r1
 8009198:	b10a      	cbz	r2, 800919e <_printf_common+0x26>
 800919a:	3301      	adds	r3, #1
 800919c:	6033      	str	r3, [r6, #0]
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	0699      	lsls	r1, r3, #26
 80091a2:	bf42      	ittt	mi
 80091a4:	6833      	ldrmi	r3, [r6, #0]
 80091a6:	3302      	addmi	r3, #2
 80091a8:	6033      	strmi	r3, [r6, #0]
 80091aa:	6825      	ldr	r5, [r4, #0]
 80091ac:	f015 0506 	ands.w	r5, r5, #6
 80091b0:	d106      	bne.n	80091c0 <_printf_common+0x48>
 80091b2:	f104 0a19 	add.w	sl, r4, #25
 80091b6:	68e3      	ldr	r3, [r4, #12]
 80091b8:	6832      	ldr	r2, [r6, #0]
 80091ba:	1a9b      	subs	r3, r3, r2
 80091bc:	42ab      	cmp	r3, r5
 80091be:	dc26      	bgt.n	800920e <_printf_common+0x96>
 80091c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091c4:	6822      	ldr	r2, [r4, #0]
 80091c6:	3b00      	subs	r3, #0
 80091c8:	bf18      	it	ne
 80091ca:	2301      	movne	r3, #1
 80091cc:	0692      	lsls	r2, r2, #26
 80091ce:	d42b      	bmi.n	8009228 <_printf_common+0xb0>
 80091d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091d4:	4641      	mov	r1, r8
 80091d6:	4638      	mov	r0, r7
 80091d8:	47c8      	blx	r9
 80091da:	3001      	adds	r0, #1
 80091dc:	d01e      	beq.n	800921c <_printf_common+0xa4>
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	6922      	ldr	r2, [r4, #16]
 80091e2:	f003 0306 	and.w	r3, r3, #6
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	bf02      	ittt	eq
 80091ea:	68e5      	ldreq	r5, [r4, #12]
 80091ec:	6833      	ldreq	r3, [r6, #0]
 80091ee:	1aed      	subeq	r5, r5, r3
 80091f0:	68a3      	ldr	r3, [r4, #8]
 80091f2:	bf0c      	ite	eq
 80091f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091f8:	2500      	movne	r5, #0
 80091fa:	4293      	cmp	r3, r2
 80091fc:	bfc4      	itt	gt
 80091fe:	1a9b      	subgt	r3, r3, r2
 8009200:	18ed      	addgt	r5, r5, r3
 8009202:	2600      	movs	r6, #0
 8009204:	341a      	adds	r4, #26
 8009206:	42b5      	cmp	r5, r6
 8009208:	d11a      	bne.n	8009240 <_printf_common+0xc8>
 800920a:	2000      	movs	r0, #0
 800920c:	e008      	b.n	8009220 <_printf_common+0xa8>
 800920e:	2301      	movs	r3, #1
 8009210:	4652      	mov	r2, sl
 8009212:	4641      	mov	r1, r8
 8009214:	4638      	mov	r0, r7
 8009216:	47c8      	blx	r9
 8009218:	3001      	adds	r0, #1
 800921a:	d103      	bne.n	8009224 <_printf_common+0xac>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009224:	3501      	adds	r5, #1
 8009226:	e7c6      	b.n	80091b6 <_printf_common+0x3e>
 8009228:	18e1      	adds	r1, r4, r3
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	2030      	movs	r0, #48	@ 0x30
 800922e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009232:	4422      	add	r2, r4
 8009234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800923c:	3302      	adds	r3, #2
 800923e:	e7c7      	b.n	80091d0 <_printf_common+0x58>
 8009240:	2301      	movs	r3, #1
 8009242:	4622      	mov	r2, r4
 8009244:	4641      	mov	r1, r8
 8009246:	4638      	mov	r0, r7
 8009248:	47c8      	blx	r9
 800924a:	3001      	adds	r0, #1
 800924c:	d0e6      	beq.n	800921c <_printf_common+0xa4>
 800924e:	3601      	adds	r6, #1
 8009250:	e7d9      	b.n	8009206 <_printf_common+0x8e>
	...

08009254 <_printf_i>:
 8009254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	7e0f      	ldrb	r7, [r1, #24]
 800925a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800925c:	2f78      	cmp	r7, #120	@ 0x78
 800925e:	4691      	mov	r9, r2
 8009260:	4680      	mov	r8, r0
 8009262:	460c      	mov	r4, r1
 8009264:	469a      	mov	sl, r3
 8009266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800926a:	d807      	bhi.n	800927c <_printf_i+0x28>
 800926c:	2f62      	cmp	r7, #98	@ 0x62
 800926e:	d80a      	bhi.n	8009286 <_printf_i+0x32>
 8009270:	2f00      	cmp	r7, #0
 8009272:	f000 80d1 	beq.w	8009418 <_printf_i+0x1c4>
 8009276:	2f58      	cmp	r7, #88	@ 0x58
 8009278:	f000 80b8 	beq.w	80093ec <_printf_i+0x198>
 800927c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009284:	e03a      	b.n	80092fc <_printf_i+0xa8>
 8009286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800928a:	2b15      	cmp	r3, #21
 800928c:	d8f6      	bhi.n	800927c <_printf_i+0x28>
 800928e:	a101      	add	r1, pc, #4	@ (adr r1, 8009294 <_printf_i+0x40>)
 8009290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009294:	080092ed 	.word	0x080092ed
 8009298:	08009301 	.word	0x08009301
 800929c:	0800927d 	.word	0x0800927d
 80092a0:	0800927d 	.word	0x0800927d
 80092a4:	0800927d 	.word	0x0800927d
 80092a8:	0800927d 	.word	0x0800927d
 80092ac:	08009301 	.word	0x08009301
 80092b0:	0800927d 	.word	0x0800927d
 80092b4:	0800927d 	.word	0x0800927d
 80092b8:	0800927d 	.word	0x0800927d
 80092bc:	0800927d 	.word	0x0800927d
 80092c0:	080093ff 	.word	0x080093ff
 80092c4:	0800932b 	.word	0x0800932b
 80092c8:	080093b9 	.word	0x080093b9
 80092cc:	0800927d 	.word	0x0800927d
 80092d0:	0800927d 	.word	0x0800927d
 80092d4:	08009421 	.word	0x08009421
 80092d8:	0800927d 	.word	0x0800927d
 80092dc:	0800932b 	.word	0x0800932b
 80092e0:	0800927d 	.word	0x0800927d
 80092e4:	0800927d 	.word	0x0800927d
 80092e8:	080093c1 	.word	0x080093c1
 80092ec:	6833      	ldr	r3, [r6, #0]
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6032      	str	r2, [r6, #0]
 80092f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092fc:	2301      	movs	r3, #1
 80092fe:	e09c      	b.n	800943a <_printf_i+0x1e6>
 8009300:	6833      	ldr	r3, [r6, #0]
 8009302:	6820      	ldr	r0, [r4, #0]
 8009304:	1d19      	adds	r1, r3, #4
 8009306:	6031      	str	r1, [r6, #0]
 8009308:	0606      	lsls	r6, r0, #24
 800930a:	d501      	bpl.n	8009310 <_printf_i+0xbc>
 800930c:	681d      	ldr	r5, [r3, #0]
 800930e:	e003      	b.n	8009318 <_printf_i+0xc4>
 8009310:	0645      	lsls	r5, r0, #25
 8009312:	d5fb      	bpl.n	800930c <_printf_i+0xb8>
 8009314:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009318:	2d00      	cmp	r5, #0
 800931a:	da03      	bge.n	8009324 <_printf_i+0xd0>
 800931c:	232d      	movs	r3, #45	@ 0x2d
 800931e:	426d      	negs	r5, r5
 8009320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009324:	4858      	ldr	r0, [pc, #352]	@ (8009488 <_printf_i+0x234>)
 8009326:	230a      	movs	r3, #10
 8009328:	e011      	b.n	800934e <_printf_i+0xfa>
 800932a:	6821      	ldr	r1, [r4, #0]
 800932c:	6833      	ldr	r3, [r6, #0]
 800932e:	0608      	lsls	r0, r1, #24
 8009330:	f853 5b04 	ldr.w	r5, [r3], #4
 8009334:	d402      	bmi.n	800933c <_printf_i+0xe8>
 8009336:	0649      	lsls	r1, r1, #25
 8009338:	bf48      	it	mi
 800933a:	b2ad      	uxthmi	r5, r5
 800933c:	2f6f      	cmp	r7, #111	@ 0x6f
 800933e:	4852      	ldr	r0, [pc, #328]	@ (8009488 <_printf_i+0x234>)
 8009340:	6033      	str	r3, [r6, #0]
 8009342:	bf14      	ite	ne
 8009344:	230a      	movne	r3, #10
 8009346:	2308      	moveq	r3, #8
 8009348:	2100      	movs	r1, #0
 800934a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800934e:	6866      	ldr	r6, [r4, #4]
 8009350:	60a6      	str	r6, [r4, #8]
 8009352:	2e00      	cmp	r6, #0
 8009354:	db05      	blt.n	8009362 <_printf_i+0x10e>
 8009356:	6821      	ldr	r1, [r4, #0]
 8009358:	432e      	orrs	r6, r5
 800935a:	f021 0104 	bic.w	r1, r1, #4
 800935e:	6021      	str	r1, [r4, #0]
 8009360:	d04b      	beq.n	80093fa <_printf_i+0x1a6>
 8009362:	4616      	mov	r6, r2
 8009364:	fbb5 f1f3 	udiv	r1, r5, r3
 8009368:	fb03 5711 	mls	r7, r3, r1, r5
 800936c:	5dc7      	ldrb	r7, [r0, r7]
 800936e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009372:	462f      	mov	r7, r5
 8009374:	42bb      	cmp	r3, r7
 8009376:	460d      	mov	r5, r1
 8009378:	d9f4      	bls.n	8009364 <_printf_i+0x110>
 800937a:	2b08      	cmp	r3, #8
 800937c:	d10b      	bne.n	8009396 <_printf_i+0x142>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	07df      	lsls	r7, r3, #31
 8009382:	d508      	bpl.n	8009396 <_printf_i+0x142>
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	6861      	ldr	r1, [r4, #4]
 8009388:	4299      	cmp	r1, r3
 800938a:	bfde      	ittt	le
 800938c:	2330      	movle	r3, #48	@ 0x30
 800938e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009392:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009396:	1b92      	subs	r2, r2, r6
 8009398:	6122      	str	r2, [r4, #16]
 800939a:	f8cd a000 	str.w	sl, [sp]
 800939e:	464b      	mov	r3, r9
 80093a0:	aa03      	add	r2, sp, #12
 80093a2:	4621      	mov	r1, r4
 80093a4:	4640      	mov	r0, r8
 80093a6:	f7ff fee7 	bl	8009178 <_printf_common>
 80093aa:	3001      	adds	r0, #1
 80093ac:	d14a      	bne.n	8009444 <_printf_i+0x1f0>
 80093ae:	f04f 30ff 	mov.w	r0, #4294967295
 80093b2:	b004      	add	sp, #16
 80093b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	f043 0320 	orr.w	r3, r3, #32
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	4832      	ldr	r0, [pc, #200]	@ (800948c <_printf_i+0x238>)
 80093c2:	2778      	movs	r7, #120	@ 0x78
 80093c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	6831      	ldr	r1, [r6, #0]
 80093cc:	061f      	lsls	r7, r3, #24
 80093ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80093d2:	d402      	bmi.n	80093da <_printf_i+0x186>
 80093d4:	065f      	lsls	r7, r3, #25
 80093d6:	bf48      	it	mi
 80093d8:	b2ad      	uxthmi	r5, r5
 80093da:	6031      	str	r1, [r6, #0]
 80093dc:	07d9      	lsls	r1, r3, #31
 80093de:	bf44      	itt	mi
 80093e0:	f043 0320 	orrmi.w	r3, r3, #32
 80093e4:	6023      	strmi	r3, [r4, #0]
 80093e6:	b11d      	cbz	r5, 80093f0 <_printf_i+0x19c>
 80093e8:	2310      	movs	r3, #16
 80093ea:	e7ad      	b.n	8009348 <_printf_i+0xf4>
 80093ec:	4826      	ldr	r0, [pc, #152]	@ (8009488 <_printf_i+0x234>)
 80093ee:	e7e9      	b.n	80093c4 <_printf_i+0x170>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	f023 0320 	bic.w	r3, r3, #32
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	e7f6      	b.n	80093e8 <_printf_i+0x194>
 80093fa:	4616      	mov	r6, r2
 80093fc:	e7bd      	b.n	800937a <_printf_i+0x126>
 80093fe:	6833      	ldr	r3, [r6, #0]
 8009400:	6825      	ldr	r5, [r4, #0]
 8009402:	6961      	ldr	r1, [r4, #20]
 8009404:	1d18      	adds	r0, r3, #4
 8009406:	6030      	str	r0, [r6, #0]
 8009408:	062e      	lsls	r6, r5, #24
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	d501      	bpl.n	8009412 <_printf_i+0x1be>
 800940e:	6019      	str	r1, [r3, #0]
 8009410:	e002      	b.n	8009418 <_printf_i+0x1c4>
 8009412:	0668      	lsls	r0, r5, #25
 8009414:	d5fb      	bpl.n	800940e <_printf_i+0x1ba>
 8009416:	8019      	strh	r1, [r3, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	6123      	str	r3, [r4, #16]
 800941c:	4616      	mov	r6, r2
 800941e:	e7bc      	b.n	800939a <_printf_i+0x146>
 8009420:	6833      	ldr	r3, [r6, #0]
 8009422:	1d1a      	adds	r2, r3, #4
 8009424:	6032      	str	r2, [r6, #0]
 8009426:	681e      	ldr	r6, [r3, #0]
 8009428:	6862      	ldr	r2, [r4, #4]
 800942a:	2100      	movs	r1, #0
 800942c:	4630      	mov	r0, r6
 800942e:	f7f6 fecf 	bl	80001d0 <memchr>
 8009432:	b108      	cbz	r0, 8009438 <_printf_i+0x1e4>
 8009434:	1b80      	subs	r0, r0, r6
 8009436:	6060      	str	r0, [r4, #4]
 8009438:	6863      	ldr	r3, [r4, #4]
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	2300      	movs	r3, #0
 800943e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009442:	e7aa      	b.n	800939a <_printf_i+0x146>
 8009444:	6923      	ldr	r3, [r4, #16]
 8009446:	4632      	mov	r2, r6
 8009448:	4649      	mov	r1, r9
 800944a:	4640      	mov	r0, r8
 800944c:	47d0      	blx	sl
 800944e:	3001      	adds	r0, #1
 8009450:	d0ad      	beq.n	80093ae <_printf_i+0x15a>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	079b      	lsls	r3, r3, #30
 8009456:	d413      	bmi.n	8009480 <_printf_i+0x22c>
 8009458:	68e0      	ldr	r0, [r4, #12]
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	4298      	cmp	r0, r3
 800945e:	bfb8      	it	lt
 8009460:	4618      	movlt	r0, r3
 8009462:	e7a6      	b.n	80093b2 <_printf_i+0x15e>
 8009464:	2301      	movs	r3, #1
 8009466:	4632      	mov	r2, r6
 8009468:	4649      	mov	r1, r9
 800946a:	4640      	mov	r0, r8
 800946c:	47d0      	blx	sl
 800946e:	3001      	adds	r0, #1
 8009470:	d09d      	beq.n	80093ae <_printf_i+0x15a>
 8009472:	3501      	adds	r5, #1
 8009474:	68e3      	ldr	r3, [r4, #12]
 8009476:	9903      	ldr	r1, [sp, #12]
 8009478:	1a5b      	subs	r3, r3, r1
 800947a:	42ab      	cmp	r3, r5
 800947c:	dcf2      	bgt.n	8009464 <_printf_i+0x210>
 800947e:	e7eb      	b.n	8009458 <_printf_i+0x204>
 8009480:	2500      	movs	r5, #0
 8009482:	f104 0619 	add.w	r6, r4, #25
 8009486:	e7f5      	b.n	8009474 <_printf_i+0x220>
 8009488:	0800b9e2 	.word	0x0800b9e2
 800948c:	0800b9f3 	.word	0x0800b9f3

08009490 <std>:
 8009490:	2300      	movs	r3, #0
 8009492:	b510      	push	{r4, lr}
 8009494:	4604      	mov	r4, r0
 8009496:	e9c0 3300 	strd	r3, r3, [r0]
 800949a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800949e:	6083      	str	r3, [r0, #8]
 80094a0:	8181      	strh	r1, [r0, #12]
 80094a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80094a4:	81c2      	strh	r2, [r0, #14]
 80094a6:	6183      	str	r3, [r0, #24]
 80094a8:	4619      	mov	r1, r3
 80094aa:	2208      	movs	r2, #8
 80094ac:	305c      	adds	r0, #92	@ 0x5c
 80094ae:	f000 f916 	bl	80096de <memset>
 80094b2:	4b0d      	ldr	r3, [pc, #52]	@ (80094e8 <std+0x58>)
 80094b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80094b6:	4b0d      	ldr	r3, [pc, #52]	@ (80094ec <std+0x5c>)
 80094b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094ba:	4b0d      	ldr	r3, [pc, #52]	@ (80094f0 <std+0x60>)
 80094bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094be:	4b0d      	ldr	r3, [pc, #52]	@ (80094f4 <std+0x64>)
 80094c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80094c2:	4b0d      	ldr	r3, [pc, #52]	@ (80094f8 <std+0x68>)
 80094c4:	6224      	str	r4, [r4, #32]
 80094c6:	429c      	cmp	r4, r3
 80094c8:	d006      	beq.n	80094d8 <std+0x48>
 80094ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094ce:	4294      	cmp	r4, r2
 80094d0:	d002      	beq.n	80094d8 <std+0x48>
 80094d2:	33d0      	adds	r3, #208	@ 0xd0
 80094d4:	429c      	cmp	r4, r3
 80094d6:	d105      	bne.n	80094e4 <std+0x54>
 80094d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80094dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e0:	f000 b97a 	b.w	80097d8 <__retarget_lock_init_recursive>
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	bf00      	nop
 80094e8:	08009659 	.word	0x08009659
 80094ec:	0800967b 	.word	0x0800967b
 80094f0:	080096b3 	.word	0x080096b3
 80094f4:	080096d7 	.word	0x080096d7
 80094f8:	20008a78 	.word	0x20008a78

080094fc <stdio_exit_handler>:
 80094fc:	4a02      	ldr	r2, [pc, #8]	@ (8009508 <stdio_exit_handler+0xc>)
 80094fe:	4903      	ldr	r1, [pc, #12]	@ (800950c <stdio_exit_handler+0x10>)
 8009500:	4803      	ldr	r0, [pc, #12]	@ (8009510 <stdio_exit_handler+0x14>)
 8009502:	f000 b869 	b.w	80095d8 <_fwalk_sglue>
 8009506:	bf00      	nop
 8009508:	20000014 	.word	0x20000014
 800950c:	0800b15d 	.word	0x0800b15d
 8009510:	20000024 	.word	0x20000024

08009514 <cleanup_stdio>:
 8009514:	6841      	ldr	r1, [r0, #4]
 8009516:	4b0c      	ldr	r3, [pc, #48]	@ (8009548 <cleanup_stdio+0x34>)
 8009518:	4299      	cmp	r1, r3
 800951a:	b510      	push	{r4, lr}
 800951c:	4604      	mov	r4, r0
 800951e:	d001      	beq.n	8009524 <cleanup_stdio+0x10>
 8009520:	f001 fe1c 	bl	800b15c <_fflush_r>
 8009524:	68a1      	ldr	r1, [r4, #8]
 8009526:	4b09      	ldr	r3, [pc, #36]	@ (800954c <cleanup_stdio+0x38>)
 8009528:	4299      	cmp	r1, r3
 800952a:	d002      	beq.n	8009532 <cleanup_stdio+0x1e>
 800952c:	4620      	mov	r0, r4
 800952e:	f001 fe15 	bl	800b15c <_fflush_r>
 8009532:	68e1      	ldr	r1, [r4, #12]
 8009534:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <cleanup_stdio+0x3c>)
 8009536:	4299      	cmp	r1, r3
 8009538:	d004      	beq.n	8009544 <cleanup_stdio+0x30>
 800953a:	4620      	mov	r0, r4
 800953c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009540:	f001 be0c 	b.w	800b15c <_fflush_r>
 8009544:	bd10      	pop	{r4, pc}
 8009546:	bf00      	nop
 8009548:	20008a78 	.word	0x20008a78
 800954c:	20008ae0 	.word	0x20008ae0
 8009550:	20008b48 	.word	0x20008b48

08009554 <global_stdio_init.part.0>:
 8009554:	b510      	push	{r4, lr}
 8009556:	4b0b      	ldr	r3, [pc, #44]	@ (8009584 <global_stdio_init.part.0+0x30>)
 8009558:	4c0b      	ldr	r4, [pc, #44]	@ (8009588 <global_stdio_init.part.0+0x34>)
 800955a:	4a0c      	ldr	r2, [pc, #48]	@ (800958c <global_stdio_init.part.0+0x38>)
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	4620      	mov	r0, r4
 8009560:	2200      	movs	r2, #0
 8009562:	2104      	movs	r1, #4
 8009564:	f7ff ff94 	bl	8009490 <std>
 8009568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800956c:	2201      	movs	r2, #1
 800956e:	2109      	movs	r1, #9
 8009570:	f7ff ff8e 	bl	8009490 <std>
 8009574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009578:	2202      	movs	r2, #2
 800957a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800957e:	2112      	movs	r1, #18
 8009580:	f7ff bf86 	b.w	8009490 <std>
 8009584:	20008bb0 	.word	0x20008bb0
 8009588:	20008a78 	.word	0x20008a78
 800958c:	080094fd 	.word	0x080094fd

08009590 <__sfp_lock_acquire>:
 8009590:	4801      	ldr	r0, [pc, #4]	@ (8009598 <__sfp_lock_acquire+0x8>)
 8009592:	f000 b922 	b.w	80097da <__retarget_lock_acquire_recursive>
 8009596:	bf00      	nop
 8009598:	20008bb9 	.word	0x20008bb9

0800959c <__sfp_lock_release>:
 800959c:	4801      	ldr	r0, [pc, #4]	@ (80095a4 <__sfp_lock_release+0x8>)
 800959e:	f000 b91d 	b.w	80097dc <__retarget_lock_release_recursive>
 80095a2:	bf00      	nop
 80095a4:	20008bb9 	.word	0x20008bb9

080095a8 <__sinit>:
 80095a8:	b510      	push	{r4, lr}
 80095aa:	4604      	mov	r4, r0
 80095ac:	f7ff fff0 	bl	8009590 <__sfp_lock_acquire>
 80095b0:	6a23      	ldr	r3, [r4, #32]
 80095b2:	b11b      	cbz	r3, 80095bc <__sinit+0x14>
 80095b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b8:	f7ff bff0 	b.w	800959c <__sfp_lock_release>
 80095bc:	4b04      	ldr	r3, [pc, #16]	@ (80095d0 <__sinit+0x28>)
 80095be:	6223      	str	r3, [r4, #32]
 80095c0:	4b04      	ldr	r3, [pc, #16]	@ (80095d4 <__sinit+0x2c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1f5      	bne.n	80095b4 <__sinit+0xc>
 80095c8:	f7ff ffc4 	bl	8009554 <global_stdio_init.part.0>
 80095cc:	e7f2      	b.n	80095b4 <__sinit+0xc>
 80095ce:	bf00      	nop
 80095d0:	08009515 	.word	0x08009515
 80095d4:	20008bb0 	.word	0x20008bb0

080095d8 <_fwalk_sglue>:
 80095d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095dc:	4607      	mov	r7, r0
 80095de:	4688      	mov	r8, r1
 80095e0:	4614      	mov	r4, r2
 80095e2:	2600      	movs	r6, #0
 80095e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095e8:	f1b9 0901 	subs.w	r9, r9, #1
 80095ec:	d505      	bpl.n	80095fa <_fwalk_sglue+0x22>
 80095ee:	6824      	ldr	r4, [r4, #0]
 80095f0:	2c00      	cmp	r4, #0
 80095f2:	d1f7      	bne.n	80095e4 <_fwalk_sglue+0xc>
 80095f4:	4630      	mov	r0, r6
 80095f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095fa:	89ab      	ldrh	r3, [r5, #12]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d907      	bls.n	8009610 <_fwalk_sglue+0x38>
 8009600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009604:	3301      	adds	r3, #1
 8009606:	d003      	beq.n	8009610 <_fwalk_sglue+0x38>
 8009608:	4629      	mov	r1, r5
 800960a:	4638      	mov	r0, r7
 800960c:	47c0      	blx	r8
 800960e:	4306      	orrs	r6, r0
 8009610:	3568      	adds	r5, #104	@ 0x68
 8009612:	e7e9      	b.n	80095e8 <_fwalk_sglue+0x10>

08009614 <siprintf>:
 8009614:	b40e      	push	{r1, r2, r3}
 8009616:	b510      	push	{r4, lr}
 8009618:	b09d      	sub	sp, #116	@ 0x74
 800961a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800961c:	9002      	str	r0, [sp, #8]
 800961e:	9006      	str	r0, [sp, #24]
 8009620:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009624:	480a      	ldr	r0, [pc, #40]	@ (8009650 <siprintf+0x3c>)
 8009626:	9107      	str	r1, [sp, #28]
 8009628:	9104      	str	r1, [sp, #16]
 800962a:	490a      	ldr	r1, [pc, #40]	@ (8009654 <siprintf+0x40>)
 800962c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009630:	9105      	str	r1, [sp, #20]
 8009632:	2400      	movs	r4, #0
 8009634:	a902      	add	r1, sp, #8
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800963c:	f001 fc0e 	bl	800ae5c <_svfiprintf_r>
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	701c      	strb	r4, [r3, #0]
 8009644:	b01d      	add	sp, #116	@ 0x74
 8009646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964a:	b003      	add	sp, #12
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	20000020 	.word	0x20000020
 8009654:	ffff0208 	.word	0xffff0208

08009658 <__sread>:
 8009658:	b510      	push	{r4, lr}
 800965a:	460c      	mov	r4, r1
 800965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009660:	f000 f86c 	bl	800973c <_read_r>
 8009664:	2800      	cmp	r0, #0
 8009666:	bfab      	itete	ge
 8009668:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800966a:	89a3      	ldrhlt	r3, [r4, #12]
 800966c:	181b      	addge	r3, r3, r0
 800966e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009672:	bfac      	ite	ge
 8009674:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009676:	81a3      	strhlt	r3, [r4, #12]
 8009678:	bd10      	pop	{r4, pc}

0800967a <__swrite>:
 800967a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	461f      	mov	r7, r3
 8009680:	898b      	ldrh	r3, [r1, #12]
 8009682:	05db      	lsls	r3, r3, #23
 8009684:	4605      	mov	r5, r0
 8009686:	460c      	mov	r4, r1
 8009688:	4616      	mov	r6, r2
 800968a:	d505      	bpl.n	8009698 <__swrite+0x1e>
 800968c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009690:	2302      	movs	r3, #2
 8009692:	2200      	movs	r2, #0
 8009694:	f000 f840 	bl	8009718 <_lseek_r>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800969e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	4632      	mov	r2, r6
 80096a6:	463b      	mov	r3, r7
 80096a8:	4628      	mov	r0, r5
 80096aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ae:	f000 b857 	b.w	8009760 <_write_r>

080096b2 <__sseek>:
 80096b2:	b510      	push	{r4, lr}
 80096b4:	460c      	mov	r4, r1
 80096b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ba:	f000 f82d 	bl	8009718 <_lseek_r>
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	bf15      	itete	ne
 80096c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096ce:	81a3      	strheq	r3, [r4, #12]
 80096d0:	bf18      	it	ne
 80096d2:	81a3      	strhne	r3, [r4, #12]
 80096d4:	bd10      	pop	{r4, pc}

080096d6 <__sclose>:
 80096d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096da:	f000 b80d 	b.w	80096f8 <_close_r>

080096de <memset>:
 80096de:	4402      	add	r2, r0
 80096e0:	4603      	mov	r3, r0
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d100      	bne.n	80096e8 <memset+0xa>
 80096e6:	4770      	bx	lr
 80096e8:	f803 1b01 	strb.w	r1, [r3], #1
 80096ec:	e7f9      	b.n	80096e2 <memset+0x4>
	...

080096f0 <_localeconv_r>:
 80096f0:	4800      	ldr	r0, [pc, #0]	@ (80096f4 <_localeconv_r+0x4>)
 80096f2:	4770      	bx	lr
 80096f4:	20000160 	.word	0x20000160

080096f8 <_close_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d06      	ldr	r5, [pc, #24]	@ (8009714 <_close_r+0x1c>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7f8 fc60 	bl	8001fc8 <_close>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_close_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_close_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20008bb4 	.word	0x20008bb4

08009718 <_lseek_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4d07      	ldr	r5, [pc, #28]	@ (8009738 <_lseek_r+0x20>)
 800971c:	4604      	mov	r4, r0
 800971e:	4608      	mov	r0, r1
 8009720:	4611      	mov	r1, r2
 8009722:	2200      	movs	r2, #0
 8009724:	602a      	str	r2, [r5, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	f7f8 fc75 	bl	8002016 <_lseek>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_lseek_r+0x1e>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_lseek_r+0x1e>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	20008bb4 	.word	0x20008bb4

0800973c <_read_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	@ (800975c <_read_r+0x20>)
 8009740:	4604      	mov	r4, r0
 8009742:	4608      	mov	r0, r1
 8009744:	4611      	mov	r1, r2
 8009746:	2200      	movs	r2, #0
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f7f8 fc03 	bl	8001f56 <_read>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_read_r+0x1e>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_read_r+0x1e>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20008bb4 	.word	0x20008bb4

08009760 <_write_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d07      	ldr	r5, [pc, #28]	@ (8009780 <_write_r+0x20>)
 8009764:	4604      	mov	r4, r0
 8009766:	4608      	mov	r0, r1
 8009768:	4611      	mov	r1, r2
 800976a:	2200      	movs	r2, #0
 800976c:	602a      	str	r2, [r5, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	f7f8 fc0e 	bl	8001f90 <_write>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_write_r+0x1e>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_write_r+0x1e>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	20008bb4 	.word	0x20008bb4

08009784 <__errno>:
 8009784:	4b01      	ldr	r3, [pc, #4]	@ (800978c <__errno+0x8>)
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	20000020 	.word	0x20000020

08009790 <__libc_init_array>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	4d0d      	ldr	r5, [pc, #52]	@ (80097c8 <__libc_init_array+0x38>)
 8009794:	4c0d      	ldr	r4, [pc, #52]	@ (80097cc <__libc_init_array+0x3c>)
 8009796:	1b64      	subs	r4, r4, r5
 8009798:	10a4      	asrs	r4, r4, #2
 800979a:	2600      	movs	r6, #0
 800979c:	42a6      	cmp	r6, r4
 800979e:	d109      	bne.n	80097b4 <__libc_init_array+0x24>
 80097a0:	4d0b      	ldr	r5, [pc, #44]	@ (80097d0 <__libc_init_array+0x40>)
 80097a2:	4c0c      	ldr	r4, [pc, #48]	@ (80097d4 <__libc_init_array+0x44>)
 80097a4:	f002 f86a 	bl	800b87c <_init>
 80097a8:	1b64      	subs	r4, r4, r5
 80097aa:	10a4      	asrs	r4, r4, #2
 80097ac:	2600      	movs	r6, #0
 80097ae:	42a6      	cmp	r6, r4
 80097b0:	d105      	bne.n	80097be <__libc_init_array+0x2e>
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b8:	4798      	blx	r3
 80097ba:	3601      	adds	r6, #1
 80097bc:	e7ee      	b.n	800979c <__libc_init_array+0xc>
 80097be:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c2:	4798      	blx	r3
 80097c4:	3601      	adds	r6, #1
 80097c6:	e7f2      	b.n	80097ae <__libc_init_array+0x1e>
 80097c8:	0800bd4c 	.word	0x0800bd4c
 80097cc:	0800bd4c 	.word	0x0800bd4c
 80097d0:	0800bd4c 	.word	0x0800bd4c
 80097d4:	0800bd50 	.word	0x0800bd50

080097d8 <__retarget_lock_init_recursive>:
 80097d8:	4770      	bx	lr

080097da <__retarget_lock_acquire_recursive>:
 80097da:	4770      	bx	lr

080097dc <__retarget_lock_release_recursive>:
 80097dc:	4770      	bx	lr

080097de <memcpy>:
 80097de:	440a      	add	r2, r1
 80097e0:	4291      	cmp	r1, r2
 80097e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80097e6:	d100      	bne.n	80097ea <memcpy+0xc>
 80097e8:	4770      	bx	lr
 80097ea:	b510      	push	{r4, lr}
 80097ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097f4:	4291      	cmp	r1, r2
 80097f6:	d1f9      	bne.n	80097ec <memcpy+0xe>
 80097f8:	bd10      	pop	{r4, pc}

080097fa <quorem>:
 80097fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fe:	6903      	ldr	r3, [r0, #16]
 8009800:	690c      	ldr	r4, [r1, #16]
 8009802:	42a3      	cmp	r3, r4
 8009804:	4607      	mov	r7, r0
 8009806:	db7e      	blt.n	8009906 <quorem+0x10c>
 8009808:	3c01      	subs	r4, #1
 800980a:	f101 0814 	add.w	r8, r1, #20
 800980e:	00a3      	lsls	r3, r4, #2
 8009810:	f100 0514 	add.w	r5, r0, #20
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009824:	3301      	adds	r3, #1
 8009826:	429a      	cmp	r2, r3
 8009828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800982c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009830:	d32e      	bcc.n	8009890 <quorem+0x96>
 8009832:	f04f 0a00 	mov.w	sl, #0
 8009836:	46c4      	mov	ip, r8
 8009838:	46ae      	mov	lr, r5
 800983a:	46d3      	mov	fp, sl
 800983c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009840:	b298      	uxth	r0, r3
 8009842:	fb06 a000 	mla	r0, r6, r0, sl
 8009846:	0c02      	lsrs	r2, r0, #16
 8009848:	0c1b      	lsrs	r3, r3, #16
 800984a:	fb06 2303 	mla	r3, r6, r3, r2
 800984e:	f8de 2000 	ldr.w	r2, [lr]
 8009852:	b280      	uxth	r0, r0
 8009854:	b292      	uxth	r2, r2
 8009856:	1a12      	subs	r2, r2, r0
 8009858:	445a      	add	r2, fp
 800985a:	f8de 0000 	ldr.w	r0, [lr]
 800985e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009862:	b29b      	uxth	r3, r3
 8009864:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009868:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800986c:	b292      	uxth	r2, r2
 800986e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009872:	45e1      	cmp	r9, ip
 8009874:	f84e 2b04 	str.w	r2, [lr], #4
 8009878:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800987c:	d2de      	bcs.n	800983c <quorem+0x42>
 800987e:	9b00      	ldr	r3, [sp, #0]
 8009880:	58eb      	ldr	r3, [r5, r3]
 8009882:	b92b      	cbnz	r3, 8009890 <quorem+0x96>
 8009884:	9b01      	ldr	r3, [sp, #4]
 8009886:	3b04      	subs	r3, #4
 8009888:	429d      	cmp	r5, r3
 800988a:	461a      	mov	r2, r3
 800988c:	d32f      	bcc.n	80098ee <quorem+0xf4>
 800988e:	613c      	str	r4, [r7, #16]
 8009890:	4638      	mov	r0, r7
 8009892:	f001 f97f 	bl	800ab94 <__mcmp>
 8009896:	2800      	cmp	r0, #0
 8009898:	db25      	blt.n	80098e6 <quorem+0xec>
 800989a:	4629      	mov	r1, r5
 800989c:	2000      	movs	r0, #0
 800989e:	f858 2b04 	ldr.w	r2, [r8], #4
 80098a2:	f8d1 c000 	ldr.w	ip, [r1]
 80098a6:	fa1f fe82 	uxth.w	lr, r2
 80098aa:	fa1f f38c 	uxth.w	r3, ip
 80098ae:	eba3 030e 	sub.w	r3, r3, lr
 80098b2:	4403      	add	r3, r0
 80098b4:	0c12      	lsrs	r2, r2, #16
 80098b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80098ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80098be:	b29b      	uxth	r3, r3
 80098c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098c4:	45c1      	cmp	r9, r8
 80098c6:	f841 3b04 	str.w	r3, [r1], #4
 80098ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80098ce:	d2e6      	bcs.n	800989e <quorem+0xa4>
 80098d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098d8:	b922      	cbnz	r2, 80098e4 <quorem+0xea>
 80098da:	3b04      	subs	r3, #4
 80098dc:	429d      	cmp	r5, r3
 80098de:	461a      	mov	r2, r3
 80098e0:	d30b      	bcc.n	80098fa <quorem+0x100>
 80098e2:	613c      	str	r4, [r7, #16]
 80098e4:	3601      	adds	r6, #1
 80098e6:	4630      	mov	r0, r6
 80098e8:	b003      	add	sp, #12
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	6812      	ldr	r2, [r2, #0]
 80098f0:	3b04      	subs	r3, #4
 80098f2:	2a00      	cmp	r2, #0
 80098f4:	d1cb      	bne.n	800988e <quorem+0x94>
 80098f6:	3c01      	subs	r4, #1
 80098f8:	e7c6      	b.n	8009888 <quorem+0x8e>
 80098fa:	6812      	ldr	r2, [r2, #0]
 80098fc:	3b04      	subs	r3, #4
 80098fe:	2a00      	cmp	r2, #0
 8009900:	d1ef      	bne.n	80098e2 <quorem+0xe8>
 8009902:	3c01      	subs	r4, #1
 8009904:	e7ea      	b.n	80098dc <quorem+0xe2>
 8009906:	2000      	movs	r0, #0
 8009908:	e7ee      	b.n	80098e8 <quorem+0xee>
 800990a:	0000      	movs	r0, r0
 800990c:	0000      	movs	r0, r0
	...

08009910 <_dtoa_r>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	69c7      	ldr	r7, [r0, #28]
 8009916:	b097      	sub	sp, #92	@ 0x5c
 8009918:	ed8d 0b04 	vstr	d0, [sp, #16]
 800991c:	ec55 4b10 	vmov	r4, r5, d0
 8009920:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009922:	9107      	str	r1, [sp, #28]
 8009924:	4681      	mov	r9, r0
 8009926:	920c      	str	r2, [sp, #48]	@ 0x30
 8009928:	9311      	str	r3, [sp, #68]	@ 0x44
 800992a:	b97f      	cbnz	r7, 800994c <_dtoa_r+0x3c>
 800992c:	2010      	movs	r0, #16
 800992e:	f000 fe09 	bl	800a544 <malloc>
 8009932:	4602      	mov	r2, r0
 8009934:	f8c9 001c 	str.w	r0, [r9, #28]
 8009938:	b920      	cbnz	r0, 8009944 <_dtoa_r+0x34>
 800993a:	4ba9      	ldr	r3, [pc, #676]	@ (8009be0 <_dtoa_r+0x2d0>)
 800993c:	21ef      	movs	r1, #239	@ 0xef
 800993e:	48a9      	ldr	r0, [pc, #676]	@ (8009be4 <_dtoa_r+0x2d4>)
 8009940:	f001 fc5e 	bl	800b200 <__assert_func>
 8009944:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009948:	6007      	str	r7, [r0, #0]
 800994a:	60c7      	str	r7, [r0, #12]
 800994c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009950:	6819      	ldr	r1, [r3, #0]
 8009952:	b159      	cbz	r1, 800996c <_dtoa_r+0x5c>
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	604a      	str	r2, [r1, #4]
 8009958:	2301      	movs	r3, #1
 800995a:	4093      	lsls	r3, r2
 800995c:	608b      	str	r3, [r1, #8]
 800995e:	4648      	mov	r0, r9
 8009960:	f000 fee6 	bl	800a730 <_Bfree>
 8009964:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	1e2b      	subs	r3, r5, #0
 800996e:	bfb9      	ittee	lt
 8009970:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009974:	9305      	strlt	r3, [sp, #20]
 8009976:	2300      	movge	r3, #0
 8009978:	6033      	strge	r3, [r6, #0]
 800997a:	9f05      	ldr	r7, [sp, #20]
 800997c:	4b9a      	ldr	r3, [pc, #616]	@ (8009be8 <_dtoa_r+0x2d8>)
 800997e:	bfbc      	itt	lt
 8009980:	2201      	movlt	r2, #1
 8009982:	6032      	strlt	r2, [r6, #0]
 8009984:	43bb      	bics	r3, r7
 8009986:	d112      	bne.n	80099ae <_dtoa_r+0x9e>
 8009988:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800998a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009994:	4323      	orrs	r3, r4
 8009996:	f000 855a 	beq.w	800a44e <_dtoa_r+0xb3e>
 800999a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800999c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009bfc <_dtoa_r+0x2ec>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 855c 	beq.w	800a45e <_dtoa_r+0xb4e>
 80099a6:	f10a 0303 	add.w	r3, sl, #3
 80099aa:	f000 bd56 	b.w	800a45a <_dtoa_r+0xb4a>
 80099ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80099b2:	2200      	movs	r2, #0
 80099b4:	ec51 0b17 	vmov	r0, r1, d7
 80099b8:	2300      	movs	r3, #0
 80099ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80099be:	f7f7 f883 	bl	8000ac8 <__aeabi_dcmpeq>
 80099c2:	4680      	mov	r8, r0
 80099c4:	b158      	cbz	r0, 80099de <_dtoa_r+0xce>
 80099c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80099c8:	2301      	movs	r3, #1
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099ce:	b113      	cbz	r3, 80099d6 <_dtoa_r+0xc6>
 80099d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80099d2:	4b86      	ldr	r3, [pc, #536]	@ (8009bec <_dtoa_r+0x2dc>)
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009c00 <_dtoa_r+0x2f0>
 80099da:	f000 bd40 	b.w	800a45e <_dtoa_r+0xb4e>
 80099de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80099e2:	aa14      	add	r2, sp, #80	@ 0x50
 80099e4:	a915      	add	r1, sp, #84	@ 0x54
 80099e6:	4648      	mov	r0, r9
 80099e8:	f001 f984 	bl	800acf4 <__d2b>
 80099ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80099f0:	9002      	str	r0, [sp, #8]
 80099f2:	2e00      	cmp	r6, #0
 80099f4:	d078      	beq.n	8009ae8 <_dtoa_r+0x1d8>
 80099f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80099fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a10:	4619      	mov	r1, r3
 8009a12:	2200      	movs	r2, #0
 8009a14:	4b76      	ldr	r3, [pc, #472]	@ (8009bf0 <_dtoa_r+0x2e0>)
 8009a16:	f7f6 fc37 	bl	8000288 <__aeabi_dsub>
 8009a1a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009bc8 <_dtoa_r+0x2b8>)
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	f7f6 fdea 	bl	80005f8 <__aeabi_dmul>
 8009a24:	a36a      	add	r3, pc, #424	@ (adr r3, 8009bd0 <_dtoa_r+0x2c0>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f7f6 fc2f 	bl	800028c <__adddf3>
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4630      	mov	r0, r6
 8009a32:	460d      	mov	r5, r1
 8009a34:	f7f6 fd76 	bl	8000524 <__aeabi_i2d>
 8009a38:	a367      	add	r3, pc, #412	@ (adr r3, 8009bd8 <_dtoa_r+0x2c8>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	f7f6 fddb 	bl	80005f8 <__aeabi_dmul>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f6 fc1f 	bl	800028c <__adddf3>
 8009a4e:	4604      	mov	r4, r0
 8009a50:	460d      	mov	r5, r1
 8009a52:	f7f7 f881 	bl	8000b58 <__aeabi_d2iz>
 8009a56:	2200      	movs	r2, #0
 8009a58:	4607      	mov	r7, r0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f7 f83c 	bl	8000adc <__aeabi_dcmplt>
 8009a64:	b140      	cbz	r0, 8009a78 <_dtoa_r+0x168>
 8009a66:	4638      	mov	r0, r7
 8009a68:	f7f6 fd5c 	bl	8000524 <__aeabi_i2d>
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	462b      	mov	r3, r5
 8009a70:	f7f7 f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a74:	b900      	cbnz	r0, 8009a78 <_dtoa_r+0x168>
 8009a76:	3f01      	subs	r7, #1
 8009a78:	2f16      	cmp	r7, #22
 8009a7a:	d852      	bhi.n	8009b22 <_dtoa_r+0x212>
 8009a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8009bf4 <_dtoa_r+0x2e4>)
 8009a7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a8a:	f7f7 f827 	bl	8000adc <__aeabi_dcmplt>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d049      	beq.n	8009b26 <_dtoa_r+0x216>
 8009a92:	3f01      	subs	r7, #1
 8009a94:	2300      	movs	r3, #0
 8009a96:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a9a:	1b9b      	subs	r3, r3, r6
 8009a9c:	1e5a      	subs	r2, r3, #1
 8009a9e:	bf45      	ittet	mi
 8009aa0:	f1c3 0301 	rsbmi	r3, r3, #1
 8009aa4:	9300      	strmi	r3, [sp, #0]
 8009aa6:	2300      	movpl	r3, #0
 8009aa8:	2300      	movmi	r3, #0
 8009aaa:	9206      	str	r2, [sp, #24]
 8009aac:	bf54      	ite	pl
 8009aae:	9300      	strpl	r3, [sp, #0]
 8009ab0:	9306      	strmi	r3, [sp, #24]
 8009ab2:	2f00      	cmp	r7, #0
 8009ab4:	db39      	blt.n	8009b2a <_dtoa_r+0x21a>
 8009ab6:	9b06      	ldr	r3, [sp, #24]
 8009ab8:	970d      	str	r7, [sp, #52]	@ 0x34
 8009aba:	443b      	add	r3, r7
 8009abc:	9306      	str	r3, [sp, #24]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9308      	str	r3, [sp, #32]
 8009ac2:	9b07      	ldr	r3, [sp, #28]
 8009ac4:	2b09      	cmp	r3, #9
 8009ac6:	d863      	bhi.n	8009b90 <_dtoa_r+0x280>
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	bfc4      	itt	gt
 8009acc:	3b04      	subgt	r3, #4
 8009ace:	9307      	strgt	r3, [sp, #28]
 8009ad0:	9b07      	ldr	r3, [sp, #28]
 8009ad2:	f1a3 0302 	sub.w	r3, r3, #2
 8009ad6:	bfcc      	ite	gt
 8009ad8:	2400      	movgt	r4, #0
 8009ada:	2401      	movle	r4, #1
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d863      	bhi.n	8009ba8 <_dtoa_r+0x298>
 8009ae0:	e8df f003 	tbb	[pc, r3]
 8009ae4:	2b375452 	.word	0x2b375452
 8009ae8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009aec:	441e      	add	r6, r3
 8009aee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	bfc1      	itttt	gt
 8009af6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009afa:	409f      	lslgt	r7, r3
 8009afc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b00:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b04:	bfd6      	itet	le
 8009b06:	f1c3 0320 	rsble	r3, r3, #32
 8009b0a:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b0e:	fa04 f003 	lslle.w	r0, r4, r3
 8009b12:	f7f6 fcf7 	bl	8000504 <__aeabi_ui2d>
 8009b16:	2201      	movs	r2, #1
 8009b18:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b1c:	3e01      	subs	r6, #1
 8009b1e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009b20:	e776      	b.n	8009a10 <_dtoa_r+0x100>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e7b7      	b.n	8009a96 <_dtoa_r+0x186>
 8009b26:	9010      	str	r0, [sp, #64]	@ 0x40
 8009b28:	e7b6      	b.n	8009a98 <_dtoa_r+0x188>
 8009b2a:	9b00      	ldr	r3, [sp, #0]
 8009b2c:	1bdb      	subs	r3, r3, r7
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	427b      	negs	r3, r7
 8009b32:	9308      	str	r3, [sp, #32]
 8009b34:	2300      	movs	r3, #0
 8009b36:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b38:	e7c3      	b.n	8009ac2 <_dtoa_r+0x1b2>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b40:	eb07 0b03 	add.w	fp, r7, r3
 8009b44:	f10b 0301 	add.w	r3, fp, #1
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	9303      	str	r3, [sp, #12]
 8009b4c:	bfb8      	it	lt
 8009b4e:	2301      	movlt	r3, #1
 8009b50:	e006      	b.n	8009b60 <_dtoa_r+0x250>
 8009b52:	2301      	movs	r3, #1
 8009b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dd28      	ble.n	8009bae <_dtoa_r+0x29e>
 8009b5c:	469b      	mov	fp, r3
 8009b5e:	9303      	str	r3, [sp, #12]
 8009b60:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009b64:	2100      	movs	r1, #0
 8009b66:	2204      	movs	r2, #4
 8009b68:	f102 0514 	add.w	r5, r2, #20
 8009b6c:	429d      	cmp	r5, r3
 8009b6e:	d926      	bls.n	8009bbe <_dtoa_r+0x2ae>
 8009b70:	6041      	str	r1, [r0, #4]
 8009b72:	4648      	mov	r0, r9
 8009b74:	f000 fd9c 	bl	800a6b0 <_Balloc>
 8009b78:	4682      	mov	sl, r0
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d142      	bne.n	8009c04 <_dtoa_r+0x2f4>
 8009b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8009bf8 <_dtoa_r+0x2e8>)
 8009b80:	4602      	mov	r2, r0
 8009b82:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b86:	e6da      	b.n	800993e <_dtoa_r+0x2e>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e7e3      	b.n	8009b54 <_dtoa_r+0x244>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e7d5      	b.n	8009b3c <_dtoa_r+0x22c>
 8009b90:	2401      	movs	r4, #1
 8009b92:	2300      	movs	r3, #0
 8009b94:	9307      	str	r3, [sp, #28]
 8009b96:	9409      	str	r4, [sp, #36]	@ 0x24
 8009b98:	f04f 3bff 	mov.w	fp, #4294967295
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009ba2:	2312      	movs	r3, #18
 8009ba4:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ba6:	e7db      	b.n	8009b60 <_dtoa_r+0x250>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bac:	e7f4      	b.n	8009b98 <_dtoa_r+0x288>
 8009bae:	f04f 0b01 	mov.w	fp, #1
 8009bb2:	f8cd b00c 	str.w	fp, [sp, #12]
 8009bb6:	465b      	mov	r3, fp
 8009bb8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009bbc:	e7d0      	b.n	8009b60 <_dtoa_r+0x250>
 8009bbe:	3101      	adds	r1, #1
 8009bc0:	0052      	lsls	r2, r2, #1
 8009bc2:	e7d1      	b.n	8009b68 <_dtoa_r+0x258>
 8009bc4:	f3af 8000 	nop.w
 8009bc8:	636f4361 	.word	0x636f4361
 8009bcc:	3fd287a7 	.word	0x3fd287a7
 8009bd0:	8b60c8b3 	.word	0x8b60c8b3
 8009bd4:	3fc68a28 	.word	0x3fc68a28
 8009bd8:	509f79fb 	.word	0x509f79fb
 8009bdc:	3fd34413 	.word	0x3fd34413
 8009be0:	0800ba11 	.word	0x0800ba11
 8009be4:	0800ba28 	.word	0x0800ba28
 8009be8:	7ff00000 	.word	0x7ff00000
 8009bec:	0800b9e1 	.word	0x0800b9e1
 8009bf0:	3ff80000 	.word	0x3ff80000
 8009bf4:	0800bb78 	.word	0x0800bb78
 8009bf8:	0800ba80 	.word	0x0800ba80
 8009bfc:	0800ba0d 	.word	0x0800ba0d
 8009c00:	0800b9e0 	.word	0x0800b9e0
 8009c04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009c08:	6018      	str	r0, [r3, #0]
 8009c0a:	9b03      	ldr	r3, [sp, #12]
 8009c0c:	2b0e      	cmp	r3, #14
 8009c0e:	f200 80a1 	bhi.w	8009d54 <_dtoa_r+0x444>
 8009c12:	2c00      	cmp	r4, #0
 8009c14:	f000 809e 	beq.w	8009d54 <_dtoa_r+0x444>
 8009c18:	2f00      	cmp	r7, #0
 8009c1a:	dd33      	ble.n	8009c84 <_dtoa_r+0x374>
 8009c1c:	4b9c      	ldr	r3, [pc, #624]	@ (8009e90 <_dtoa_r+0x580>)
 8009c1e:	f007 020f 	and.w	r2, r7, #15
 8009c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c26:	ed93 7b00 	vldr	d7, [r3]
 8009c2a:	05f8      	lsls	r0, r7, #23
 8009c2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009c30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009c34:	d516      	bpl.n	8009c64 <_dtoa_r+0x354>
 8009c36:	4b97      	ldr	r3, [pc, #604]	@ (8009e94 <_dtoa_r+0x584>)
 8009c38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c40:	f7f6 fe04 	bl	800084c <__aeabi_ddiv>
 8009c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c48:	f004 040f 	and.w	r4, r4, #15
 8009c4c:	2603      	movs	r6, #3
 8009c4e:	4d91      	ldr	r5, [pc, #580]	@ (8009e94 <_dtoa_r+0x584>)
 8009c50:	b954      	cbnz	r4, 8009c68 <_dtoa_r+0x358>
 8009c52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c5a:	f7f6 fdf7 	bl	800084c <__aeabi_ddiv>
 8009c5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c62:	e028      	b.n	8009cb6 <_dtoa_r+0x3a6>
 8009c64:	2602      	movs	r6, #2
 8009c66:	e7f2      	b.n	8009c4e <_dtoa_r+0x33e>
 8009c68:	07e1      	lsls	r1, r4, #31
 8009c6a:	d508      	bpl.n	8009c7e <_dtoa_r+0x36e>
 8009c6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009c70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c74:	f7f6 fcc0 	bl	80005f8 <__aeabi_dmul>
 8009c78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c7c:	3601      	adds	r6, #1
 8009c7e:	1064      	asrs	r4, r4, #1
 8009c80:	3508      	adds	r5, #8
 8009c82:	e7e5      	b.n	8009c50 <_dtoa_r+0x340>
 8009c84:	f000 80af 	beq.w	8009de6 <_dtoa_r+0x4d6>
 8009c88:	427c      	negs	r4, r7
 8009c8a:	4b81      	ldr	r3, [pc, #516]	@ (8009e90 <_dtoa_r+0x580>)
 8009c8c:	4d81      	ldr	r5, [pc, #516]	@ (8009e94 <_dtoa_r+0x584>)
 8009c8e:	f004 020f 	and.w	r2, r4, #15
 8009c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c9e:	f7f6 fcab 	bl	80005f8 <__aeabi_dmul>
 8009ca2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ca6:	1124      	asrs	r4, r4, #4
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2602      	movs	r6, #2
 8009cac:	2c00      	cmp	r4, #0
 8009cae:	f040 808f 	bne.w	8009dd0 <_dtoa_r+0x4c0>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1d3      	bne.n	8009c5e <_dtoa_r+0x34e>
 8009cb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cb8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 8094 	beq.w	8009dea <_dtoa_r+0x4da>
 8009cc2:	4b75      	ldr	r3, [pc, #468]	@ (8009e98 <_dtoa_r+0x588>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	f7f6 ff07 	bl	8000adc <__aeabi_dcmplt>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f000 808b 	beq.w	8009dea <_dtoa_r+0x4da>
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 8087 	beq.w	8009dea <_dtoa_r+0x4da>
 8009cdc:	f1bb 0f00 	cmp.w	fp, #0
 8009ce0:	dd34      	ble.n	8009d4c <_dtoa_r+0x43c>
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8009e9c <_dtoa_r+0x58c>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	4629      	mov	r1, r5
 8009cea:	f7f6 fc85 	bl	80005f8 <__aeabi_dmul>
 8009cee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cf2:	f107 38ff 	add.w	r8, r7, #4294967295
 8009cf6:	3601      	adds	r6, #1
 8009cf8:	465c      	mov	r4, fp
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f7f6 fc12 	bl	8000524 <__aeabi_i2d>
 8009d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d04:	f7f6 fc78 	bl	80005f8 <__aeabi_dmul>
 8009d08:	4b65      	ldr	r3, [pc, #404]	@ (8009ea0 <_dtoa_r+0x590>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f7f6 fabe 	bl	800028c <__adddf3>
 8009d10:	4605      	mov	r5, r0
 8009d12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d16:	2c00      	cmp	r4, #0
 8009d18:	d16a      	bne.n	8009df0 <_dtoa_r+0x4e0>
 8009d1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d1e:	4b61      	ldr	r3, [pc, #388]	@ (8009ea4 <_dtoa_r+0x594>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	f7f6 fab1 	bl	8000288 <__aeabi_dsub>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d2e:	462a      	mov	r2, r5
 8009d30:	4633      	mov	r3, r6
 8009d32:	f7f6 fef1 	bl	8000b18 <__aeabi_dcmpgt>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	f040 8298 	bne.w	800a26c <_dtoa_r+0x95c>
 8009d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d40:	462a      	mov	r2, r5
 8009d42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009d46:	f7f6 fec9 	bl	8000adc <__aeabi_dcmplt>
 8009d4a:	bb38      	cbnz	r0, 8009d9c <_dtoa_r+0x48c>
 8009d4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009d50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f2c0 8157 	blt.w	800a00a <_dtoa_r+0x6fa>
 8009d5c:	2f0e      	cmp	r7, #14
 8009d5e:	f300 8154 	bgt.w	800a00a <_dtoa_r+0x6fa>
 8009d62:	4b4b      	ldr	r3, [pc, #300]	@ (8009e90 <_dtoa_r+0x580>)
 8009d64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d68:	ed93 7b00 	vldr	d7, [r3]
 8009d6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	ed8d 7b00 	vstr	d7, [sp]
 8009d74:	f280 80e5 	bge.w	8009f42 <_dtoa_r+0x632>
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f300 80e1 	bgt.w	8009f42 <_dtoa_r+0x632>
 8009d80:	d10c      	bne.n	8009d9c <_dtoa_r+0x48c>
 8009d82:	4b48      	ldr	r3, [pc, #288]	@ (8009ea4 <_dtoa_r+0x594>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	ec51 0b17 	vmov	r0, r1, d7
 8009d8a:	f7f6 fc35 	bl	80005f8 <__aeabi_dmul>
 8009d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d92:	f7f6 feb7 	bl	8000b04 <__aeabi_dcmpge>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f000 8266 	beq.w	800a268 <_dtoa_r+0x958>
 8009d9c:	2400      	movs	r4, #0
 8009d9e:	4625      	mov	r5, r4
 8009da0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009da2:	4656      	mov	r6, sl
 8009da4:	ea6f 0803 	mvn.w	r8, r3
 8009da8:	2700      	movs	r7, #0
 8009daa:	4621      	mov	r1, r4
 8009dac:	4648      	mov	r0, r9
 8009dae:	f000 fcbf 	bl	800a730 <_Bfree>
 8009db2:	2d00      	cmp	r5, #0
 8009db4:	f000 80bd 	beq.w	8009f32 <_dtoa_r+0x622>
 8009db8:	b12f      	cbz	r7, 8009dc6 <_dtoa_r+0x4b6>
 8009dba:	42af      	cmp	r7, r5
 8009dbc:	d003      	beq.n	8009dc6 <_dtoa_r+0x4b6>
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	4648      	mov	r0, r9
 8009dc2:	f000 fcb5 	bl	800a730 <_Bfree>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4648      	mov	r0, r9
 8009dca:	f000 fcb1 	bl	800a730 <_Bfree>
 8009dce:	e0b0      	b.n	8009f32 <_dtoa_r+0x622>
 8009dd0:	07e2      	lsls	r2, r4, #31
 8009dd2:	d505      	bpl.n	8009de0 <_dtoa_r+0x4d0>
 8009dd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009dd8:	f7f6 fc0e 	bl	80005f8 <__aeabi_dmul>
 8009ddc:	3601      	adds	r6, #1
 8009dde:	2301      	movs	r3, #1
 8009de0:	1064      	asrs	r4, r4, #1
 8009de2:	3508      	adds	r5, #8
 8009de4:	e762      	b.n	8009cac <_dtoa_r+0x39c>
 8009de6:	2602      	movs	r6, #2
 8009de8:	e765      	b.n	8009cb6 <_dtoa_r+0x3a6>
 8009dea:	9c03      	ldr	r4, [sp, #12]
 8009dec:	46b8      	mov	r8, r7
 8009dee:	e784      	b.n	8009cfa <_dtoa_r+0x3ea>
 8009df0:	4b27      	ldr	r3, [pc, #156]	@ (8009e90 <_dtoa_r+0x580>)
 8009df2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009df4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009df8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009dfc:	4454      	add	r4, sl
 8009dfe:	2900      	cmp	r1, #0
 8009e00:	d054      	beq.n	8009eac <_dtoa_r+0x59c>
 8009e02:	4929      	ldr	r1, [pc, #164]	@ (8009ea8 <_dtoa_r+0x598>)
 8009e04:	2000      	movs	r0, #0
 8009e06:	f7f6 fd21 	bl	800084c <__aeabi_ddiv>
 8009e0a:	4633      	mov	r3, r6
 8009e0c:	462a      	mov	r2, r5
 8009e0e:	f7f6 fa3b 	bl	8000288 <__aeabi_dsub>
 8009e12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e16:	4656      	mov	r6, sl
 8009e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e1c:	f7f6 fe9c 	bl	8000b58 <__aeabi_d2iz>
 8009e20:	4605      	mov	r5, r0
 8009e22:	f7f6 fb7f 	bl	8000524 <__aeabi_i2d>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e2e:	f7f6 fa2b 	bl	8000288 <__aeabi_dsub>
 8009e32:	3530      	adds	r5, #48	@ 0x30
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e3c:	f806 5b01 	strb.w	r5, [r6], #1
 8009e40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e44:	f7f6 fe4a 	bl	8000adc <__aeabi_dcmplt>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d172      	bne.n	8009f32 <_dtoa_r+0x622>
 8009e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e50:	4911      	ldr	r1, [pc, #68]	@ (8009e98 <_dtoa_r+0x588>)
 8009e52:	2000      	movs	r0, #0
 8009e54:	f7f6 fa18 	bl	8000288 <__aeabi_dsub>
 8009e58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e5c:	f7f6 fe3e 	bl	8000adc <__aeabi_dcmplt>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	f040 80b4 	bne.w	8009fce <_dtoa_r+0x6be>
 8009e66:	42a6      	cmp	r6, r4
 8009e68:	f43f af70 	beq.w	8009d4c <_dtoa_r+0x43c>
 8009e6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009e70:	4b0a      	ldr	r3, [pc, #40]	@ (8009e9c <_dtoa_r+0x58c>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	f7f6 fbc0 	bl	80005f8 <__aeabi_dmul>
 8009e78:	4b08      	ldr	r3, [pc, #32]	@ (8009e9c <_dtoa_r+0x58c>)
 8009e7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e7e:	2200      	movs	r2, #0
 8009e80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e8c:	e7c4      	b.n	8009e18 <_dtoa_r+0x508>
 8009e8e:	bf00      	nop
 8009e90:	0800bb78 	.word	0x0800bb78
 8009e94:	0800bb50 	.word	0x0800bb50
 8009e98:	3ff00000 	.word	0x3ff00000
 8009e9c:	40240000 	.word	0x40240000
 8009ea0:	401c0000 	.word	0x401c0000
 8009ea4:	40140000 	.word	0x40140000
 8009ea8:	3fe00000 	.word	0x3fe00000
 8009eac:	4631      	mov	r1, r6
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f7f6 fba2 	bl	80005f8 <__aeabi_dmul>
 8009eb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009eb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009eba:	4656      	mov	r6, sl
 8009ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ec0:	f7f6 fe4a 	bl	8000b58 <__aeabi_d2iz>
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	f7f6 fb2d 	bl	8000524 <__aeabi_i2d>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ed2:	f7f6 f9d9 	bl	8000288 <__aeabi_dsub>
 8009ed6:	3530      	adds	r5, #48	@ 0x30
 8009ed8:	f806 5b01 	strb.w	r5, [r6], #1
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	42a6      	cmp	r6, r4
 8009ee2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	d124      	bne.n	8009f36 <_dtoa_r+0x626>
 8009eec:	4baf      	ldr	r3, [pc, #700]	@ (800a1ac <_dtoa_r+0x89c>)
 8009eee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ef2:	f7f6 f9cb 	bl	800028c <__adddf3>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009efe:	f7f6 fe0b 	bl	8000b18 <__aeabi_dcmpgt>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d163      	bne.n	8009fce <_dtoa_r+0x6be>
 8009f06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009f0a:	49a8      	ldr	r1, [pc, #672]	@ (800a1ac <_dtoa_r+0x89c>)
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	f7f6 f9bb 	bl	8000288 <__aeabi_dsub>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f1a:	f7f6 fddf 	bl	8000adc <__aeabi_dcmplt>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f43f af14 	beq.w	8009d4c <_dtoa_r+0x43c>
 8009f24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009f26:	1e73      	subs	r3, r6, #1
 8009f28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f2e:	2b30      	cmp	r3, #48	@ 0x30
 8009f30:	d0f8      	beq.n	8009f24 <_dtoa_r+0x614>
 8009f32:	4647      	mov	r7, r8
 8009f34:	e03b      	b.n	8009fae <_dtoa_r+0x69e>
 8009f36:	4b9e      	ldr	r3, [pc, #632]	@ (800a1b0 <_dtoa_r+0x8a0>)
 8009f38:	f7f6 fb5e 	bl	80005f8 <__aeabi_dmul>
 8009f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f40:	e7bc      	b.n	8009ebc <_dtoa_r+0x5ac>
 8009f42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009f46:	4656      	mov	r6, sl
 8009f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	4629      	mov	r1, r5
 8009f50:	f7f6 fc7c 	bl	800084c <__aeabi_ddiv>
 8009f54:	f7f6 fe00 	bl	8000b58 <__aeabi_d2iz>
 8009f58:	4680      	mov	r8, r0
 8009f5a:	f7f6 fae3 	bl	8000524 <__aeabi_i2d>
 8009f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f62:	f7f6 fb49 	bl	80005f8 <__aeabi_dmul>
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009f72:	f7f6 f989 	bl	8000288 <__aeabi_dsub>
 8009f76:	f806 4b01 	strb.w	r4, [r6], #1
 8009f7a:	9d03      	ldr	r5, [sp, #12]
 8009f7c:	eba6 040a 	sub.w	r4, r6, sl
 8009f80:	42a5      	cmp	r5, r4
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	d133      	bne.n	8009ff0 <_dtoa_r+0x6e0>
 8009f88:	f7f6 f980 	bl	800028c <__adddf3>
 8009f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	f7f6 fdc0 	bl	8000b18 <__aeabi_dcmpgt>
 8009f98:	b9c0      	cbnz	r0, 8009fcc <_dtoa_r+0x6bc>
 8009f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	f7f6 fd91 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa6:	b110      	cbz	r0, 8009fae <_dtoa_r+0x69e>
 8009fa8:	f018 0f01 	tst.w	r8, #1
 8009fac:	d10e      	bne.n	8009fcc <_dtoa_r+0x6bc>
 8009fae:	9902      	ldr	r1, [sp, #8]
 8009fb0:	4648      	mov	r0, r9
 8009fb2:	f000 fbbd 	bl	800a730 <_Bfree>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	7033      	strb	r3, [r6, #0]
 8009fba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fbc:	3701      	adds	r7, #1
 8009fbe:	601f      	str	r7, [r3, #0]
 8009fc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 824b 	beq.w	800a45e <_dtoa_r+0xb4e>
 8009fc8:	601e      	str	r6, [r3, #0]
 8009fca:	e248      	b.n	800a45e <_dtoa_r+0xb4e>
 8009fcc:	46b8      	mov	r8, r7
 8009fce:	4633      	mov	r3, r6
 8009fd0:	461e      	mov	r6, r3
 8009fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fd6:	2a39      	cmp	r2, #57	@ 0x39
 8009fd8:	d106      	bne.n	8009fe8 <_dtoa_r+0x6d8>
 8009fda:	459a      	cmp	sl, r3
 8009fdc:	d1f8      	bne.n	8009fd0 <_dtoa_r+0x6c0>
 8009fde:	2230      	movs	r2, #48	@ 0x30
 8009fe0:	f108 0801 	add.w	r8, r8, #1
 8009fe4:	f88a 2000 	strb.w	r2, [sl]
 8009fe8:	781a      	ldrb	r2, [r3, #0]
 8009fea:	3201      	adds	r2, #1
 8009fec:	701a      	strb	r2, [r3, #0]
 8009fee:	e7a0      	b.n	8009f32 <_dtoa_r+0x622>
 8009ff0:	4b6f      	ldr	r3, [pc, #444]	@ (800a1b0 <_dtoa_r+0x8a0>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f7f6 fb00 	bl	80005f8 <__aeabi_dmul>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	460d      	mov	r5, r1
 800a000:	f7f6 fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 800a004:	2800      	cmp	r0, #0
 800a006:	d09f      	beq.n	8009f48 <_dtoa_r+0x638>
 800a008:	e7d1      	b.n	8009fae <_dtoa_r+0x69e>
 800a00a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a00c:	2a00      	cmp	r2, #0
 800a00e:	f000 80ea 	beq.w	800a1e6 <_dtoa_r+0x8d6>
 800a012:	9a07      	ldr	r2, [sp, #28]
 800a014:	2a01      	cmp	r2, #1
 800a016:	f300 80cd 	bgt.w	800a1b4 <_dtoa_r+0x8a4>
 800a01a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a01c:	2a00      	cmp	r2, #0
 800a01e:	f000 80c1 	beq.w	800a1a4 <_dtoa_r+0x894>
 800a022:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a026:	9c08      	ldr	r4, [sp, #32]
 800a028:	9e00      	ldr	r6, [sp, #0]
 800a02a:	9a00      	ldr	r2, [sp, #0]
 800a02c:	441a      	add	r2, r3
 800a02e:	9200      	str	r2, [sp, #0]
 800a030:	9a06      	ldr	r2, [sp, #24]
 800a032:	2101      	movs	r1, #1
 800a034:	441a      	add	r2, r3
 800a036:	4648      	mov	r0, r9
 800a038:	9206      	str	r2, [sp, #24]
 800a03a:	f000 fc2d 	bl	800a898 <__i2b>
 800a03e:	4605      	mov	r5, r0
 800a040:	b166      	cbz	r6, 800a05c <_dtoa_r+0x74c>
 800a042:	9b06      	ldr	r3, [sp, #24]
 800a044:	2b00      	cmp	r3, #0
 800a046:	dd09      	ble.n	800a05c <_dtoa_r+0x74c>
 800a048:	42b3      	cmp	r3, r6
 800a04a:	9a00      	ldr	r2, [sp, #0]
 800a04c:	bfa8      	it	ge
 800a04e:	4633      	movge	r3, r6
 800a050:	1ad2      	subs	r2, r2, r3
 800a052:	9200      	str	r2, [sp, #0]
 800a054:	9a06      	ldr	r2, [sp, #24]
 800a056:	1af6      	subs	r6, r6, r3
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	9306      	str	r3, [sp, #24]
 800a05c:	9b08      	ldr	r3, [sp, #32]
 800a05e:	b30b      	cbz	r3, 800a0a4 <_dtoa_r+0x794>
 800a060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 80c6 	beq.w	800a1f4 <_dtoa_r+0x8e4>
 800a068:	2c00      	cmp	r4, #0
 800a06a:	f000 80c0 	beq.w	800a1ee <_dtoa_r+0x8de>
 800a06e:	4629      	mov	r1, r5
 800a070:	4622      	mov	r2, r4
 800a072:	4648      	mov	r0, r9
 800a074:	f000 fcc8 	bl	800aa08 <__pow5mult>
 800a078:	9a02      	ldr	r2, [sp, #8]
 800a07a:	4601      	mov	r1, r0
 800a07c:	4605      	mov	r5, r0
 800a07e:	4648      	mov	r0, r9
 800a080:	f000 fc20 	bl	800a8c4 <__multiply>
 800a084:	9902      	ldr	r1, [sp, #8]
 800a086:	4680      	mov	r8, r0
 800a088:	4648      	mov	r0, r9
 800a08a:	f000 fb51 	bl	800a730 <_Bfree>
 800a08e:	9b08      	ldr	r3, [sp, #32]
 800a090:	1b1b      	subs	r3, r3, r4
 800a092:	9308      	str	r3, [sp, #32]
 800a094:	f000 80b1 	beq.w	800a1fa <_dtoa_r+0x8ea>
 800a098:	9a08      	ldr	r2, [sp, #32]
 800a09a:	4641      	mov	r1, r8
 800a09c:	4648      	mov	r0, r9
 800a09e:	f000 fcb3 	bl	800aa08 <__pow5mult>
 800a0a2:	9002      	str	r0, [sp, #8]
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4648      	mov	r0, r9
 800a0a8:	f000 fbf6 	bl	800a898 <__i2b>
 800a0ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 81d8 	beq.w	800a466 <_dtoa_r+0xb56>
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	4601      	mov	r1, r0
 800a0ba:	4648      	mov	r0, r9
 800a0bc:	f000 fca4 	bl	800aa08 <__pow5mult>
 800a0c0:	9b07      	ldr	r3, [sp, #28]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	f300 809f 	bgt.w	800a208 <_dtoa_r+0x8f8>
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 8097 	bne.w	800a200 <_dtoa_r+0x8f0>
 800a0d2:	9b05      	ldr	r3, [sp, #20]
 800a0d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f040 8093 	bne.w	800a204 <_dtoa_r+0x8f4>
 800a0de:	9b05      	ldr	r3, [sp, #20]
 800a0e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0e4:	0d1b      	lsrs	r3, r3, #20
 800a0e6:	051b      	lsls	r3, r3, #20
 800a0e8:	b133      	cbz	r3, 800a0f8 <_dtoa_r+0x7e8>
 800a0ea:	9b00      	ldr	r3, [sp, #0]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	9b06      	ldr	r3, [sp, #24]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	9306      	str	r3, [sp, #24]
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	9308      	str	r3, [sp, #32]
 800a0fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 81b8 	beq.w	800a472 <_dtoa_r+0xb62>
 800a102:	6923      	ldr	r3, [r4, #16]
 800a104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a108:	6918      	ldr	r0, [r3, #16]
 800a10a:	f000 fb79 	bl	800a800 <__hi0bits>
 800a10e:	f1c0 0020 	rsb	r0, r0, #32
 800a112:	9b06      	ldr	r3, [sp, #24]
 800a114:	4418      	add	r0, r3
 800a116:	f010 001f 	ands.w	r0, r0, #31
 800a11a:	f000 8082 	beq.w	800a222 <_dtoa_r+0x912>
 800a11e:	f1c0 0320 	rsb	r3, r0, #32
 800a122:	2b04      	cmp	r3, #4
 800a124:	dd73      	ble.n	800a20e <_dtoa_r+0x8fe>
 800a126:	9b00      	ldr	r3, [sp, #0]
 800a128:	f1c0 001c 	rsb	r0, r0, #28
 800a12c:	4403      	add	r3, r0
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	9b06      	ldr	r3, [sp, #24]
 800a132:	4403      	add	r3, r0
 800a134:	4406      	add	r6, r0
 800a136:	9306      	str	r3, [sp, #24]
 800a138:	9b00      	ldr	r3, [sp, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	dd05      	ble.n	800a14a <_dtoa_r+0x83a>
 800a13e:	9902      	ldr	r1, [sp, #8]
 800a140:	461a      	mov	r2, r3
 800a142:	4648      	mov	r0, r9
 800a144:	f000 fcba 	bl	800aabc <__lshift>
 800a148:	9002      	str	r0, [sp, #8]
 800a14a:	9b06      	ldr	r3, [sp, #24]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dd05      	ble.n	800a15c <_dtoa_r+0x84c>
 800a150:	4621      	mov	r1, r4
 800a152:	461a      	mov	r2, r3
 800a154:	4648      	mov	r0, r9
 800a156:	f000 fcb1 	bl	800aabc <__lshift>
 800a15a:	4604      	mov	r4, r0
 800a15c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d061      	beq.n	800a226 <_dtoa_r+0x916>
 800a162:	9802      	ldr	r0, [sp, #8]
 800a164:	4621      	mov	r1, r4
 800a166:	f000 fd15 	bl	800ab94 <__mcmp>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	da5b      	bge.n	800a226 <_dtoa_r+0x916>
 800a16e:	2300      	movs	r3, #0
 800a170:	9902      	ldr	r1, [sp, #8]
 800a172:	220a      	movs	r2, #10
 800a174:	4648      	mov	r0, r9
 800a176:	f000 fafd 	bl	800a774 <__multadd>
 800a17a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a17c:	9002      	str	r0, [sp, #8]
 800a17e:	f107 38ff 	add.w	r8, r7, #4294967295
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 8177 	beq.w	800a476 <_dtoa_r+0xb66>
 800a188:	4629      	mov	r1, r5
 800a18a:	2300      	movs	r3, #0
 800a18c:	220a      	movs	r2, #10
 800a18e:	4648      	mov	r0, r9
 800a190:	f000 faf0 	bl	800a774 <__multadd>
 800a194:	f1bb 0f00 	cmp.w	fp, #0
 800a198:	4605      	mov	r5, r0
 800a19a:	dc6f      	bgt.n	800a27c <_dtoa_r+0x96c>
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	dc49      	bgt.n	800a236 <_dtoa_r+0x926>
 800a1a2:	e06b      	b.n	800a27c <_dtoa_r+0x96c>
 800a1a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a1a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a1aa:	e73c      	b.n	800a026 <_dtoa_r+0x716>
 800a1ac:	3fe00000 	.word	0x3fe00000
 800a1b0:	40240000 	.word	0x40240000
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	1e5c      	subs	r4, r3, #1
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	42a3      	cmp	r3, r4
 800a1bc:	db09      	blt.n	800a1d2 <_dtoa_r+0x8c2>
 800a1be:	1b1c      	subs	r4, r3, r4
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f6bf af30 	bge.w	800a028 <_dtoa_r+0x718>
 800a1c8:	9b00      	ldr	r3, [sp, #0]
 800a1ca:	9a03      	ldr	r2, [sp, #12]
 800a1cc:	1a9e      	subs	r6, r3, r2
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e72b      	b.n	800a02a <_dtoa_r+0x71a>
 800a1d2:	9b08      	ldr	r3, [sp, #32]
 800a1d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1d6:	9408      	str	r4, [sp, #32]
 800a1d8:	1ae3      	subs	r3, r4, r3
 800a1da:	441a      	add	r2, r3
 800a1dc:	9e00      	ldr	r6, [sp, #0]
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	920d      	str	r2, [sp, #52]	@ 0x34
 800a1e2:	2400      	movs	r4, #0
 800a1e4:	e721      	b.n	800a02a <_dtoa_r+0x71a>
 800a1e6:	9c08      	ldr	r4, [sp, #32]
 800a1e8:	9e00      	ldr	r6, [sp, #0]
 800a1ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a1ec:	e728      	b.n	800a040 <_dtoa_r+0x730>
 800a1ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a1f2:	e751      	b.n	800a098 <_dtoa_r+0x788>
 800a1f4:	9a08      	ldr	r2, [sp, #32]
 800a1f6:	9902      	ldr	r1, [sp, #8]
 800a1f8:	e750      	b.n	800a09c <_dtoa_r+0x78c>
 800a1fa:	f8cd 8008 	str.w	r8, [sp, #8]
 800a1fe:	e751      	b.n	800a0a4 <_dtoa_r+0x794>
 800a200:	2300      	movs	r3, #0
 800a202:	e779      	b.n	800a0f8 <_dtoa_r+0x7e8>
 800a204:	9b04      	ldr	r3, [sp, #16]
 800a206:	e777      	b.n	800a0f8 <_dtoa_r+0x7e8>
 800a208:	2300      	movs	r3, #0
 800a20a:	9308      	str	r3, [sp, #32]
 800a20c:	e779      	b.n	800a102 <_dtoa_r+0x7f2>
 800a20e:	d093      	beq.n	800a138 <_dtoa_r+0x828>
 800a210:	9a00      	ldr	r2, [sp, #0]
 800a212:	331c      	adds	r3, #28
 800a214:	441a      	add	r2, r3
 800a216:	9200      	str	r2, [sp, #0]
 800a218:	9a06      	ldr	r2, [sp, #24]
 800a21a:	441a      	add	r2, r3
 800a21c:	441e      	add	r6, r3
 800a21e:	9206      	str	r2, [sp, #24]
 800a220:	e78a      	b.n	800a138 <_dtoa_r+0x828>
 800a222:	4603      	mov	r3, r0
 800a224:	e7f4      	b.n	800a210 <_dtoa_r+0x900>
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	46b8      	mov	r8, r7
 800a22c:	dc20      	bgt.n	800a270 <_dtoa_r+0x960>
 800a22e:	469b      	mov	fp, r3
 800a230:	9b07      	ldr	r3, [sp, #28]
 800a232:	2b02      	cmp	r3, #2
 800a234:	dd1e      	ble.n	800a274 <_dtoa_r+0x964>
 800a236:	f1bb 0f00 	cmp.w	fp, #0
 800a23a:	f47f adb1 	bne.w	8009da0 <_dtoa_r+0x490>
 800a23e:	4621      	mov	r1, r4
 800a240:	465b      	mov	r3, fp
 800a242:	2205      	movs	r2, #5
 800a244:	4648      	mov	r0, r9
 800a246:	f000 fa95 	bl	800a774 <__multadd>
 800a24a:	4601      	mov	r1, r0
 800a24c:	4604      	mov	r4, r0
 800a24e:	9802      	ldr	r0, [sp, #8]
 800a250:	f000 fca0 	bl	800ab94 <__mcmp>
 800a254:	2800      	cmp	r0, #0
 800a256:	f77f ada3 	ble.w	8009da0 <_dtoa_r+0x490>
 800a25a:	4656      	mov	r6, sl
 800a25c:	2331      	movs	r3, #49	@ 0x31
 800a25e:	f806 3b01 	strb.w	r3, [r6], #1
 800a262:	f108 0801 	add.w	r8, r8, #1
 800a266:	e59f      	b.n	8009da8 <_dtoa_r+0x498>
 800a268:	9c03      	ldr	r4, [sp, #12]
 800a26a:	46b8      	mov	r8, r7
 800a26c:	4625      	mov	r5, r4
 800a26e:	e7f4      	b.n	800a25a <_dtoa_r+0x94a>
 800a270:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 8101 	beq.w	800a47e <_dtoa_r+0xb6e>
 800a27c:	2e00      	cmp	r6, #0
 800a27e:	dd05      	ble.n	800a28c <_dtoa_r+0x97c>
 800a280:	4629      	mov	r1, r5
 800a282:	4632      	mov	r2, r6
 800a284:	4648      	mov	r0, r9
 800a286:	f000 fc19 	bl	800aabc <__lshift>
 800a28a:	4605      	mov	r5, r0
 800a28c:	9b08      	ldr	r3, [sp, #32]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d05c      	beq.n	800a34c <_dtoa_r+0xa3c>
 800a292:	6869      	ldr	r1, [r5, #4]
 800a294:	4648      	mov	r0, r9
 800a296:	f000 fa0b 	bl	800a6b0 <_Balloc>
 800a29a:	4606      	mov	r6, r0
 800a29c:	b928      	cbnz	r0, 800a2aa <_dtoa_r+0x99a>
 800a29e:	4b82      	ldr	r3, [pc, #520]	@ (800a4a8 <_dtoa_r+0xb98>)
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a2a6:	f7ff bb4a 	b.w	800993e <_dtoa_r+0x2e>
 800a2aa:	692a      	ldr	r2, [r5, #16]
 800a2ac:	3202      	adds	r2, #2
 800a2ae:	0092      	lsls	r2, r2, #2
 800a2b0:	f105 010c 	add.w	r1, r5, #12
 800a2b4:	300c      	adds	r0, #12
 800a2b6:	f7ff fa92 	bl	80097de <memcpy>
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	4631      	mov	r1, r6
 800a2be:	4648      	mov	r0, r9
 800a2c0:	f000 fbfc 	bl	800aabc <__lshift>
 800a2c4:	f10a 0301 	add.w	r3, sl, #1
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	eb0a 030b 	add.w	r3, sl, fp
 800a2ce:	9308      	str	r3, [sp, #32]
 800a2d0:	9b04      	ldr	r3, [sp, #16]
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	462f      	mov	r7, r5
 800a2d8:	9306      	str	r3, [sp, #24]
 800a2da:	4605      	mov	r5, r0
 800a2dc:	9b00      	ldr	r3, [sp, #0]
 800a2de:	9802      	ldr	r0, [sp, #8]
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a2e6:	f7ff fa88 	bl	80097fa <quorem>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	3330      	adds	r3, #48	@ 0x30
 800a2ee:	9003      	str	r0, [sp, #12]
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	9802      	ldr	r0, [sp, #8]
 800a2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2f6:	f000 fc4d 	bl	800ab94 <__mcmp>
 800a2fa:	462a      	mov	r2, r5
 800a2fc:	9004      	str	r0, [sp, #16]
 800a2fe:	4621      	mov	r1, r4
 800a300:	4648      	mov	r0, r9
 800a302:	f000 fc63 	bl	800abcc <__mdiff>
 800a306:	68c2      	ldr	r2, [r0, #12]
 800a308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a30a:	4606      	mov	r6, r0
 800a30c:	bb02      	cbnz	r2, 800a350 <_dtoa_r+0xa40>
 800a30e:	4601      	mov	r1, r0
 800a310:	9802      	ldr	r0, [sp, #8]
 800a312:	f000 fc3f 	bl	800ab94 <__mcmp>
 800a316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a318:	4602      	mov	r2, r0
 800a31a:	4631      	mov	r1, r6
 800a31c:	4648      	mov	r0, r9
 800a31e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a320:	9309      	str	r3, [sp, #36]	@ 0x24
 800a322:	f000 fa05 	bl	800a730 <_Bfree>
 800a326:	9b07      	ldr	r3, [sp, #28]
 800a328:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a32a:	9e00      	ldr	r6, [sp, #0]
 800a32c:	ea42 0103 	orr.w	r1, r2, r3
 800a330:	9b06      	ldr	r3, [sp, #24]
 800a332:	4319      	orrs	r1, r3
 800a334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a336:	d10d      	bne.n	800a354 <_dtoa_r+0xa44>
 800a338:	2b39      	cmp	r3, #57	@ 0x39
 800a33a:	d027      	beq.n	800a38c <_dtoa_r+0xa7c>
 800a33c:	9a04      	ldr	r2, [sp, #16]
 800a33e:	2a00      	cmp	r2, #0
 800a340:	dd01      	ble.n	800a346 <_dtoa_r+0xa36>
 800a342:	9b03      	ldr	r3, [sp, #12]
 800a344:	3331      	adds	r3, #49	@ 0x31
 800a346:	f88b 3000 	strb.w	r3, [fp]
 800a34a:	e52e      	b.n	8009daa <_dtoa_r+0x49a>
 800a34c:	4628      	mov	r0, r5
 800a34e:	e7b9      	b.n	800a2c4 <_dtoa_r+0x9b4>
 800a350:	2201      	movs	r2, #1
 800a352:	e7e2      	b.n	800a31a <_dtoa_r+0xa0a>
 800a354:	9904      	ldr	r1, [sp, #16]
 800a356:	2900      	cmp	r1, #0
 800a358:	db04      	blt.n	800a364 <_dtoa_r+0xa54>
 800a35a:	9807      	ldr	r0, [sp, #28]
 800a35c:	4301      	orrs	r1, r0
 800a35e:	9806      	ldr	r0, [sp, #24]
 800a360:	4301      	orrs	r1, r0
 800a362:	d120      	bne.n	800a3a6 <_dtoa_r+0xa96>
 800a364:	2a00      	cmp	r2, #0
 800a366:	ddee      	ble.n	800a346 <_dtoa_r+0xa36>
 800a368:	9902      	ldr	r1, [sp, #8]
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	2201      	movs	r2, #1
 800a36e:	4648      	mov	r0, r9
 800a370:	f000 fba4 	bl	800aabc <__lshift>
 800a374:	4621      	mov	r1, r4
 800a376:	9002      	str	r0, [sp, #8]
 800a378:	f000 fc0c 	bl	800ab94 <__mcmp>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	9b00      	ldr	r3, [sp, #0]
 800a380:	dc02      	bgt.n	800a388 <_dtoa_r+0xa78>
 800a382:	d1e0      	bne.n	800a346 <_dtoa_r+0xa36>
 800a384:	07da      	lsls	r2, r3, #31
 800a386:	d5de      	bpl.n	800a346 <_dtoa_r+0xa36>
 800a388:	2b39      	cmp	r3, #57	@ 0x39
 800a38a:	d1da      	bne.n	800a342 <_dtoa_r+0xa32>
 800a38c:	2339      	movs	r3, #57	@ 0x39
 800a38e:	f88b 3000 	strb.w	r3, [fp]
 800a392:	4633      	mov	r3, r6
 800a394:	461e      	mov	r6, r3
 800a396:	3b01      	subs	r3, #1
 800a398:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a39c:	2a39      	cmp	r2, #57	@ 0x39
 800a39e:	d04e      	beq.n	800a43e <_dtoa_r+0xb2e>
 800a3a0:	3201      	adds	r2, #1
 800a3a2:	701a      	strb	r2, [r3, #0]
 800a3a4:	e501      	b.n	8009daa <_dtoa_r+0x49a>
 800a3a6:	2a00      	cmp	r2, #0
 800a3a8:	dd03      	ble.n	800a3b2 <_dtoa_r+0xaa2>
 800a3aa:	2b39      	cmp	r3, #57	@ 0x39
 800a3ac:	d0ee      	beq.n	800a38c <_dtoa_r+0xa7c>
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	e7c9      	b.n	800a346 <_dtoa_r+0xa36>
 800a3b2:	9a00      	ldr	r2, [sp, #0]
 800a3b4:	9908      	ldr	r1, [sp, #32]
 800a3b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a3ba:	428a      	cmp	r2, r1
 800a3bc:	d028      	beq.n	800a410 <_dtoa_r+0xb00>
 800a3be:	9902      	ldr	r1, [sp, #8]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	220a      	movs	r2, #10
 800a3c4:	4648      	mov	r0, r9
 800a3c6:	f000 f9d5 	bl	800a774 <__multadd>
 800a3ca:	42af      	cmp	r7, r5
 800a3cc:	9002      	str	r0, [sp, #8]
 800a3ce:	f04f 0300 	mov.w	r3, #0
 800a3d2:	f04f 020a 	mov.w	r2, #10
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	4648      	mov	r0, r9
 800a3da:	d107      	bne.n	800a3ec <_dtoa_r+0xadc>
 800a3dc:	f000 f9ca 	bl	800a774 <__multadd>
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	9b00      	ldr	r3, [sp, #0]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	e777      	b.n	800a2dc <_dtoa_r+0x9cc>
 800a3ec:	f000 f9c2 	bl	800a774 <__multadd>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4607      	mov	r7, r0
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	220a      	movs	r2, #10
 800a3f8:	4648      	mov	r0, r9
 800a3fa:	f000 f9bb 	bl	800a774 <__multadd>
 800a3fe:	4605      	mov	r5, r0
 800a400:	e7f0      	b.n	800a3e4 <_dtoa_r+0xad4>
 800a402:	f1bb 0f00 	cmp.w	fp, #0
 800a406:	bfcc      	ite	gt
 800a408:	465e      	movgt	r6, fp
 800a40a:	2601      	movle	r6, #1
 800a40c:	4456      	add	r6, sl
 800a40e:	2700      	movs	r7, #0
 800a410:	9902      	ldr	r1, [sp, #8]
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	2201      	movs	r2, #1
 800a416:	4648      	mov	r0, r9
 800a418:	f000 fb50 	bl	800aabc <__lshift>
 800a41c:	4621      	mov	r1, r4
 800a41e:	9002      	str	r0, [sp, #8]
 800a420:	f000 fbb8 	bl	800ab94 <__mcmp>
 800a424:	2800      	cmp	r0, #0
 800a426:	dcb4      	bgt.n	800a392 <_dtoa_r+0xa82>
 800a428:	d102      	bne.n	800a430 <_dtoa_r+0xb20>
 800a42a:	9b00      	ldr	r3, [sp, #0]
 800a42c:	07db      	lsls	r3, r3, #31
 800a42e:	d4b0      	bmi.n	800a392 <_dtoa_r+0xa82>
 800a430:	4633      	mov	r3, r6
 800a432:	461e      	mov	r6, r3
 800a434:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a438:	2a30      	cmp	r2, #48	@ 0x30
 800a43a:	d0fa      	beq.n	800a432 <_dtoa_r+0xb22>
 800a43c:	e4b5      	b.n	8009daa <_dtoa_r+0x49a>
 800a43e:	459a      	cmp	sl, r3
 800a440:	d1a8      	bne.n	800a394 <_dtoa_r+0xa84>
 800a442:	2331      	movs	r3, #49	@ 0x31
 800a444:	f108 0801 	add.w	r8, r8, #1
 800a448:	f88a 3000 	strb.w	r3, [sl]
 800a44c:	e4ad      	b.n	8009daa <_dtoa_r+0x49a>
 800a44e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a450:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a4ac <_dtoa_r+0xb9c>
 800a454:	b11b      	cbz	r3, 800a45e <_dtoa_r+0xb4e>
 800a456:	f10a 0308 	add.w	r3, sl, #8
 800a45a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	4650      	mov	r0, sl
 800a460:	b017      	add	sp, #92	@ 0x5c
 800a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a466:	9b07      	ldr	r3, [sp, #28]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	f77f ae2e 	ble.w	800a0ca <_dtoa_r+0x7ba>
 800a46e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a470:	9308      	str	r3, [sp, #32]
 800a472:	2001      	movs	r0, #1
 800a474:	e64d      	b.n	800a112 <_dtoa_r+0x802>
 800a476:	f1bb 0f00 	cmp.w	fp, #0
 800a47a:	f77f aed9 	ble.w	800a230 <_dtoa_r+0x920>
 800a47e:	4656      	mov	r6, sl
 800a480:	9802      	ldr	r0, [sp, #8]
 800a482:	4621      	mov	r1, r4
 800a484:	f7ff f9b9 	bl	80097fa <quorem>
 800a488:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a48c:	f806 3b01 	strb.w	r3, [r6], #1
 800a490:	eba6 020a 	sub.w	r2, r6, sl
 800a494:	4593      	cmp	fp, r2
 800a496:	ddb4      	ble.n	800a402 <_dtoa_r+0xaf2>
 800a498:	9902      	ldr	r1, [sp, #8]
 800a49a:	2300      	movs	r3, #0
 800a49c:	220a      	movs	r2, #10
 800a49e:	4648      	mov	r0, r9
 800a4a0:	f000 f968 	bl	800a774 <__multadd>
 800a4a4:	9002      	str	r0, [sp, #8]
 800a4a6:	e7eb      	b.n	800a480 <_dtoa_r+0xb70>
 800a4a8:	0800ba80 	.word	0x0800ba80
 800a4ac:	0800ba04 	.word	0x0800ba04

0800a4b0 <_free_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	2900      	cmp	r1, #0
 800a4b6:	d041      	beq.n	800a53c <_free_r+0x8c>
 800a4b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4bc:	1f0c      	subs	r4, r1, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	bfb8      	it	lt
 800a4c2:	18e4      	addlt	r4, r4, r3
 800a4c4:	f000 f8e8 	bl	800a698 <__malloc_lock>
 800a4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a540 <_free_r+0x90>)
 800a4ca:	6813      	ldr	r3, [r2, #0]
 800a4cc:	b933      	cbnz	r3, 800a4dc <_free_r+0x2c>
 800a4ce:	6063      	str	r3, [r4, #4]
 800a4d0:	6014      	str	r4, [r2, #0]
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d8:	f000 b8e4 	b.w	800a6a4 <__malloc_unlock>
 800a4dc:	42a3      	cmp	r3, r4
 800a4de:	d908      	bls.n	800a4f2 <_free_r+0x42>
 800a4e0:	6820      	ldr	r0, [r4, #0]
 800a4e2:	1821      	adds	r1, r4, r0
 800a4e4:	428b      	cmp	r3, r1
 800a4e6:	bf01      	itttt	eq
 800a4e8:	6819      	ldreq	r1, [r3, #0]
 800a4ea:	685b      	ldreq	r3, [r3, #4]
 800a4ec:	1809      	addeq	r1, r1, r0
 800a4ee:	6021      	streq	r1, [r4, #0]
 800a4f0:	e7ed      	b.n	800a4ce <_free_r+0x1e>
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	b10b      	cbz	r3, 800a4fc <_free_r+0x4c>
 800a4f8:	42a3      	cmp	r3, r4
 800a4fa:	d9fa      	bls.n	800a4f2 <_free_r+0x42>
 800a4fc:	6811      	ldr	r1, [r2, #0]
 800a4fe:	1850      	adds	r0, r2, r1
 800a500:	42a0      	cmp	r0, r4
 800a502:	d10b      	bne.n	800a51c <_free_r+0x6c>
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	4401      	add	r1, r0
 800a508:	1850      	adds	r0, r2, r1
 800a50a:	4283      	cmp	r3, r0
 800a50c:	6011      	str	r1, [r2, #0]
 800a50e:	d1e0      	bne.n	800a4d2 <_free_r+0x22>
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	6053      	str	r3, [r2, #4]
 800a516:	4408      	add	r0, r1
 800a518:	6010      	str	r0, [r2, #0]
 800a51a:	e7da      	b.n	800a4d2 <_free_r+0x22>
 800a51c:	d902      	bls.n	800a524 <_free_r+0x74>
 800a51e:	230c      	movs	r3, #12
 800a520:	602b      	str	r3, [r5, #0]
 800a522:	e7d6      	b.n	800a4d2 <_free_r+0x22>
 800a524:	6820      	ldr	r0, [r4, #0]
 800a526:	1821      	adds	r1, r4, r0
 800a528:	428b      	cmp	r3, r1
 800a52a:	bf04      	itt	eq
 800a52c:	6819      	ldreq	r1, [r3, #0]
 800a52e:	685b      	ldreq	r3, [r3, #4]
 800a530:	6063      	str	r3, [r4, #4]
 800a532:	bf04      	itt	eq
 800a534:	1809      	addeq	r1, r1, r0
 800a536:	6021      	streq	r1, [r4, #0]
 800a538:	6054      	str	r4, [r2, #4]
 800a53a:	e7ca      	b.n	800a4d2 <_free_r+0x22>
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
 800a53e:	bf00      	nop
 800a540:	20008bc0 	.word	0x20008bc0

0800a544 <malloc>:
 800a544:	4b02      	ldr	r3, [pc, #8]	@ (800a550 <malloc+0xc>)
 800a546:	4601      	mov	r1, r0
 800a548:	6818      	ldr	r0, [r3, #0]
 800a54a:	f000 b825 	b.w	800a598 <_malloc_r>
 800a54e:	bf00      	nop
 800a550:	20000020 	.word	0x20000020

0800a554 <sbrk_aligned>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	4e0f      	ldr	r6, [pc, #60]	@ (800a594 <sbrk_aligned+0x40>)
 800a558:	460c      	mov	r4, r1
 800a55a:	6831      	ldr	r1, [r6, #0]
 800a55c:	4605      	mov	r5, r0
 800a55e:	b911      	cbnz	r1, 800a566 <sbrk_aligned+0x12>
 800a560:	f000 fe3e 	bl	800b1e0 <_sbrk_r>
 800a564:	6030      	str	r0, [r6, #0]
 800a566:	4621      	mov	r1, r4
 800a568:	4628      	mov	r0, r5
 800a56a:	f000 fe39 	bl	800b1e0 <_sbrk_r>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	d103      	bne.n	800a57a <sbrk_aligned+0x26>
 800a572:	f04f 34ff 	mov.w	r4, #4294967295
 800a576:	4620      	mov	r0, r4
 800a578:	bd70      	pop	{r4, r5, r6, pc}
 800a57a:	1cc4      	adds	r4, r0, #3
 800a57c:	f024 0403 	bic.w	r4, r4, #3
 800a580:	42a0      	cmp	r0, r4
 800a582:	d0f8      	beq.n	800a576 <sbrk_aligned+0x22>
 800a584:	1a21      	subs	r1, r4, r0
 800a586:	4628      	mov	r0, r5
 800a588:	f000 fe2a 	bl	800b1e0 <_sbrk_r>
 800a58c:	3001      	adds	r0, #1
 800a58e:	d1f2      	bne.n	800a576 <sbrk_aligned+0x22>
 800a590:	e7ef      	b.n	800a572 <sbrk_aligned+0x1e>
 800a592:	bf00      	nop
 800a594:	20008bbc 	.word	0x20008bbc

0800a598 <_malloc_r>:
 800a598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a59c:	1ccd      	adds	r5, r1, #3
 800a59e:	f025 0503 	bic.w	r5, r5, #3
 800a5a2:	3508      	adds	r5, #8
 800a5a4:	2d0c      	cmp	r5, #12
 800a5a6:	bf38      	it	cc
 800a5a8:	250c      	movcc	r5, #12
 800a5aa:	2d00      	cmp	r5, #0
 800a5ac:	4606      	mov	r6, r0
 800a5ae:	db01      	blt.n	800a5b4 <_malloc_r+0x1c>
 800a5b0:	42a9      	cmp	r1, r5
 800a5b2:	d904      	bls.n	800a5be <_malloc_r+0x26>
 800a5b4:	230c      	movs	r3, #12
 800a5b6:	6033      	str	r3, [r6, #0]
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a694 <_malloc_r+0xfc>
 800a5c2:	f000 f869 	bl	800a698 <__malloc_lock>
 800a5c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ca:	461c      	mov	r4, r3
 800a5cc:	bb44      	cbnz	r4, 800a620 <_malloc_r+0x88>
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff ffbf 	bl	800a554 <sbrk_aligned>
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	4604      	mov	r4, r0
 800a5da:	d158      	bne.n	800a68e <_malloc_r+0xf6>
 800a5dc:	f8d8 4000 	ldr.w	r4, [r8]
 800a5e0:	4627      	mov	r7, r4
 800a5e2:	2f00      	cmp	r7, #0
 800a5e4:	d143      	bne.n	800a66e <_malloc_r+0xd6>
 800a5e6:	2c00      	cmp	r4, #0
 800a5e8:	d04b      	beq.n	800a682 <_malloc_r+0xea>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	eb04 0903 	add.w	r9, r4, r3
 800a5f4:	f000 fdf4 	bl	800b1e0 <_sbrk_r>
 800a5f8:	4581      	cmp	r9, r0
 800a5fa:	d142      	bne.n	800a682 <_malloc_r+0xea>
 800a5fc:	6821      	ldr	r1, [r4, #0]
 800a5fe:	1a6d      	subs	r5, r5, r1
 800a600:	4629      	mov	r1, r5
 800a602:	4630      	mov	r0, r6
 800a604:	f7ff ffa6 	bl	800a554 <sbrk_aligned>
 800a608:	3001      	adds	r0, #1
 800a60a:	d03a      	beq.n	800a682 <_malloc_r+0xea>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	442b      	add	r3, r5
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	f8d8 3000 	ldr.w	r3, [r8]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	bb62      	cbnz	r2, 800a674 <_malloc_r+0xdc>
 800a61a:	f8c8 7000 	str.w	r7, [r8]
 800a61e:	e00f      	b.n	800a640 <_malloc_r+0xa8>
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	1b52      	subs	r2, r2, r5
 800a624:	d420      	bmi.n	800a668 <_malloc_r+0xd0>
 800a626:	2a0b      	cmp	r2, #11
 800a628:	d917      	bls.n	800a65a <_malloc_r+0xc2>
 800a62a:	1961      	adds	r1, r4, r5
 800a62c:	42a3      	cmp	r3, r4
 800a62e:	6025      	str	r5, [r4, #0]
 800a630:	bf18      	it	ne
 800a632:	6059      	strne	r1, [r3, #4]
 800a634:	6863      	ldr	r3, [r4, #4]
 800a636:	bf08      	it	eq
 800a638:	f8c8 1000 	streq.w	r1, [r8]
 800a63c:	5162      	str	r2, [r4, r5]
 800a63e:	604b      	str	r3, [r1, #4]
 800a640:	4630      	mov	r0, r6
 800a642:	f000 f82f 	bl	800a6a4 <__malloc_unlock>
 800a646:	f104 000b 	add.w	r0, r4, #11
 800a64a:	1d23      	adds	r3, r4, #4
 800a64c:	f020 0007 	bic.w	r0, r0, #7
 800a650:	1ac2      	subs	r2, r0, r3
 800a652:	bf1c      	itt	ne
 800a654:	1a1b      	subne	r3, r3, r0
 800a656:	50a3      	strne	r3, [r4, r2]
 800a658:	e7af      	b.n	800a5ba <_malloc_r+0x22>
 800a65a:	6862      	ldr	r2, [r4, #4]
 800a65c:	42a3      	cmp	r3, r4
 800a65e:	bf0c      	ite	eq
 800a660:	f8c8 2000 	streq.w	r2, [r8]
 800a664:	605a      	strne	r2, [r3, #4]
 800a666:	e7eb      	b.n	800a640 <_malloc_r+0xa8>
 800a668:	4623      	mov	r3, r4
 800a66a:	6864      	ldr	r4, [r4, #4]
 800a66c:	e7ae      	b.n	800a5cc <_malloc_r+0x34>
 800a66e:	463c      	mov	r4, r7
 800a670:	687f      	ldr	r7, [r7, #4]
 800a672:	e7b6      	b.n	800a5e2 <_malloc_r+0x4a>
 800a674:	461a      	mov	r2, r3
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	42a3      	cmp	r3, r4
 800a67a:	d1fb      	bne.n	800a674 <_malloc_r+0xdc>
 800a67c:	2300      	movs	r3, #0
 800a67e:	6053      	str	r3, [r2, #4]
 800a680:	e7de      	b.n	800a640 <_malloc_r+0xa8>
 800a682:	230c      	movs	r3, #12
 800a684:	6033      	str	r3, [r6, #0]
 800a686:	4630      	mov	r0, r6
 800a688:	f000 f80c 	bl	800a6a4 <__malloc_unlock>
 800a68c:	e794      	b.n	800a5b8 <_malloc_r+0x20>
 800a68e:	6005      	str	r5, [r0, #0]
 800a690:	e7d6      	b.n	800a640 <_malloc_r+0xa8>
 800a692:	bf00      	nop
 800a694:	20008bc0 	.word	0x20008bc0

0800a698 <__malloc_lock>:
 800a698:	4801      	ldr	r0, [pc, #4]	@ (800a6a0 <__malloc_lock+0x8>)
 800a69a:	f7ff b89e 	b.w	80097da <__retarget_lock_acquire_recursive>
 800a69e:	bf00      	nop
 800a6a0:	20008bb8 	.word	0x20008bb8

0800a6a4 <__malloc_unlock>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	@ (800a6ac <__malloc_unlock+0x8>)
 800a6a6:	f7ff b899 	b.w	80097dc <__retarget_lock_release_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	20008bb8 	.word	0x20008bb8

0800a6b0 <_Balloc>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	69c6      	ldr	r6, [r0, #28]
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	b976      	cbnz	r6, 800a6d8 <_Balloc+0x28>
 800a6ba:	2010      	movs	r0, #16
 800a6bc:	f7ff ff42 	bl	800a544 <malloc>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	61e0      	str	r0, [r4, #28]
 800a6c4:	b920      	cbnz	r0, 800a6d0 <_Balloc+0x20>
 800a6c6:	4b18      	ldr	r3, [pc, #96]	@ (800a728 <_Balloc+0x78>)
 800a6c8:	4818      	ldr	r0, [pc, #96]	@ (800a72c <_Balloc+0x7c>)
 800a6ca:	216b      	movs	r1, #107	@ 0x6b
 800a6cc:	f000 fd98 	bl	800b200 <__assert_func>
 800a6d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6d4:	6006      	str	r6, [r0, #0]
 800a6d6:	60c6      	str	r6, [r0, #12]
 800a6d8:	69e6      	ldr	r6, [r4, #28]
 800a6da:	68f3      	ldr	r3, [r6, #12]
 800a6dc:	b183      	cbz	r3, 800a700 <_Balloc+0x50>
 800a6de:	69e3      	ldr	r3, [r4, #28]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6e6:	b9b8      	cbnz	r0, 800a718 <_Balloc+0x68>
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	fa01 f605 	lsl.w	r6, r1, r5
 800a6ee:	1d72      	adds	r2, r6, #5
 800a6f0:	0092      	lsls	r2, r2, #2
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 fda2 	bl	800b23c <_calloc_r>
 800a6f8:	b160      	cbz	r0, 800a714 <_Balloc+0x64>
 800a6fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6fe:	e00e      	b.n	800a71e <_Balloc+0x6e>
 800a700:	2221      	movs	r2, #33	@ 0x21
 800a702:	2104      	movs	r1, #4
 800a704:	4620      	mov	r0, r4
 800a706:	f000 fd99 	bl	800b23c <_calloc_r>
 800a70a:	69e3      	ldr	r3, [r4, #28]
 800a70c:	60f0      	str	r0, [r6, #12]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1e4      	bne.n	800a6de <_Balloc+0x2e>
 800a714:	2000      	movs	r0, #0
 800a716:	bd70      	pop	{r4, r5, r6, pc}
 800a718:	6802      	ldr	r2, [r0, #0]
 800a71a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a71e:	2300      	movs	r3, #0
 800a720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a724:	e7f7      	b.n	800a716 <_Balloc+0x66>
 800a726:	bf00      	nop
 800a728:	0800ba11 	.word	0x0800ba11
 800a72c:	0800ba91 	.word	0x0800ba91

0800a730 <_Bfree>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	69c6      	ldr	r6, [r0, #28]
 800a734:	4605      	mov	r5, r0
 800a736:	460c      	mov	r4, r1
 800a738:	b976      	cbnz	r6, 800a758 <_Bfree+0x28>
 800a73a:	2010      	movs	r0, #16
 800a73c:	f7ff ff02 	bl	800a544 <malloc>
 800a740:	4602      	mov	r2, r0
 800a742:	61e8      	str	r0, [r5, #28]
 800a744:	b920      	cbnz	r0, 800a750 <_Bfree+0x20>
 800a746:	4b09      	ldr	r3, [pc, #36]	@ (800a76c <_Bfree+0x3c>)
 800a748:	4809      	ldr	r0, [pc, #36]	@ (800a770 <_Bfree+0x40>)
 800a74a:	218f      	movs	r1, #143	@ 0x8f
 800a74c:	f000 fd58 	bl	800b200 <__assert_func>
 800a750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a754:	6006      	str	r6, [r0, #0]
 800a756:	60c6      	str	r6, [r0, #12]
 800a758:	b13c      	cbz	r4, 800a76a <_Bfree+0x3a>
 800a75a:	69eb      	ldr	r3, [r5, #28]
 800a75c:	6862      	ldr	r2, [r4, #4]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a764:	6021      	str	r1, [r4, #0]
 800a766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
 800a76c:	0800ba11 	.word	0x0800ba11
 800a770:	0800ba91 	.word	0x0800ba91

0800a774 <__multadd>:
 800a774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a778:	690d      	ldr	r5, [r1, #16]
 800a77a:	4607      	mov	r7, r0
 800a77c:	460c      	mov	r4, r1
 800a77e:	461e      	mov	r6, r3
 800a780:	f101 0c14 	add.w	ip, r1, #20
 800a784:	2000      	movs	r0, #0
 800a786:	f8dc 3000 	ldr.w	r3, [ip]
 800a78a:	b299      	uxth	r1, r3
 800a78c:	fb02 6101 	mla	r1, r2, r1, r6
 800a790:	0c1e      	lsrs	r6, r3, #16
 800a792:	0c0b      	lsrs	r3, r1, #16
 800a794:	fb02 3306 	mla	r3, r2, r6, r3
 800a798:	b289      	uxth	r1, r1
 800a79a:	3001      	adds	r0, #1
 800a79c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7a0:	4285      	cmp	r5, r0
 800a7a2:	f84c 1b04 	str.w	r1, [ip], #4
 800a7a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7aa:	dcec      	bgt.n	800a786 <__multadd+0x12>
 800a7ac:	b30e      	cbz	r6, 800a7f2 <__multadd+0x7e>
 800a7ae:	68a3      	ldr	r3, [r4, #8]
 800a7b0:	42ab      	cmp	r3, r5
 800a7b2:	dc19      	bgt.n	800a7e8 <__multadd+0x74>
 800a7b4:	6861      	ldr	r1, [r4, #4]
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	3101      	adds	r1, #1
 800a7ba:	f7ff ff79 	bl	800a6b0 <_Balloc>
 800a7be:	4680      	mov	r8, r0
 800a7c0:	b928      	cbnz	r0, 800a7ce <__multadd+0x5a>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f8 <__multadd+0x84>)
 800a7c6:	480d      	ldr	r0, [pc, #52]	@ (800a7fc <__multadd+0x88>)
 800a7c8:	21ba      	movs	r1, #186	@ 0xba
 800a7ca:	f000 fd19 	bl	800b200 <__assert_func>
 800a7ce:	6922      	ldr	r2, [r4, #16]
 800a7d0:	3202      	adds	r2, #2
 800a7d2:	f104 010c 	add.w	r1, r4, #12
 800a7d6:	0092      	lsls	r2, r2, #2
 800a7d8:	300c      	adds	r0, #12
 800a7da:	f7ff f800 	bl	80097de <memcpy>
 800a7de:	4621      	mov	r1, r4
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff ffa5 	bl	800a730 <_Bfree>
 800a7e6:	4644      	mov	r4, r8
 800a7e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	615e      	str	r6, [r3, #20]
 800a7f0:	6125      	str	r5, [r4, #16]
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f8:	0800ba80 	.word	0x0800ba80
 800a7fc:	0800ba91 	.word	0x0800ba91

0800a800 <__hi0bits>:
 800a800:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a804:	4603      	mov	r3, r0
 800a806:	bf36      	itet	cc
 800a808:	0403      	lslcc	r3, r0, #16
 800a80a:	2000      	movcs	r0, #0
 800a80c:	2010      	movcc	r0, #16
 800a80e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a812:	bf3c      	itt	cc
 800a814:	021b      	lslcc	r3, r3, #8
 800a816:	3008      	addcc	r0, #8
 800a818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a81c:	bf3c      	itt	cc
 800a81e:	011b      	lslcc	r3, r3, #4
 800a820:	3004      	addcc	r0, #4
 800a822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a826:	bf3c      	itt	cc
 800a828:	009b      	lslcc	r3, r3, #2
 800a82a:	3002      	addcc	r0, #2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	db05      	blt.n	800a83c <__hi0bits+0x3c>
 800a830:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a834:	f100 0001 	add.w	r0, r0, #1
 800a838:	bf08      	it	eq
 800a83a:	2020      	moveq	r0, #32
 800a83c:	4770      	bx	lr

0800a83e <__lo0bits>:
 800a83e:	6803      	ldr	r3, [r0, #0]
 800a840:	4602      	mov	r2, r0
 800a842:	f013 0007 	ands.w	r0, r3, #7
 800a846:	d00b      	beq.n	800a860 <__lo0bits+0x22>
 800a848:	07d9      	lsls	r1, r3, #31
 800a84a:	d421      	bmi.n	800a890 <__lo0bits+0x52>
 800a84c:	0798      	lsls	r0, r3, #30
 800a84e:	bf49      	itett	mi
 800a850:	085b      	lsrmi	r3, r3, #1
 800a852:	089b      	lsrpl	r3, r3, #2
 800a854:	2001      	movmi	r0, #1
 800a856:	6013      	strmi	r3, [r2, #0]
 800a858:	bf5c      	itt	pl
 800a85a:	6013      	strpl	r3, [r2, #0]
 800a85c:	2002      	movpl	r0, #2
 800a85e:	4770      	bx	lr
 800a860:	b299      	uxth	r1, r3
 800a862:	b909      	cbnz	r1, 800a868 <__lo0bits+0x2a>
 800a864:	0c1b      	lsrs	r3, r3, #16
 800a866:	2010      	movs	r0, #16
 800a868:	b2d9      	uxtb	r1, r3
 800a86a:	b909      	cbnz	r1, 800a870 <__lo0bits+0x32>
 800a86c:	3008      	adds	r0, #8
 800a86e:	0a1b      	lsrs	r3, r3, #8
 800a870:	0719      	lsls	r1, r3, #28
 800a872:	bf04      	itt	eq
 800a874:	091b      	lsreq	r3, r3, #4
 800a876:	3004      	addeq	r0, #4
 800a878:	0799      	lsls	r1, r3, #30
 800a87a:	bf04      	itt	eq
 800a87c:	089b      	lsreq	r3, r3, #2
 800a87e:	3002      	addeq	r0, #2
 800a880:	07d9      	lsls	r1, r3, #31
 800a882:	d403      	bmi.n	800a88c <__lo0bits+0x4e>
 800a884:	085b      	lsrs	r3, r3, #1
 800a886:	f100 0001 	add.w	r0, r0, #1
 800a88a:	d003      	beq.n	800a894 <__lo0bits+0x56>
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	4770      	bx	lr
 800a890:	2000      	movs	r0, #0
 800a892:	4770      	bx	lr
 800a894:	2020      	movs	r0, #32
 800a896:	4770      	bx	lr

0800a898 <__i2b>:
 800a898:	b510      	push	{r4, lr}
 800a89a:	460c      	mov	r4, r1
 800a89c:	2101      	movs	r1, #1
 800a89e:	f7ff ff07 	bl	800a6b0 <_Balloc>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	b928      	cbnz	r0, 800a8b2 <__i2b+0x1a>
 800a8a6:	4b05      	ldr	r3, [pc, #20]	@ (800a8bc <__i2b+0x24>)
 800a8a8:	4805      	ldr	r0, [pc, #20]	@ (800a8c0 <__i2b+0x28>)
 800a8aa:	f240 1145 	movw	r1, #325	@ 0x145
 800a8ae:	f000 fca7 	bl	800b200 <__assert_func>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	6144      	str	r4, [r0, #20]
 800a8b6:	6103      	str	r3, [r0, #16]
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	bf00      	nop
 800a8bc:	0800ba80 	.word	0x0800ba80
 800a8c0:	0800ba91 	.word	0x0800ba91

0800a8c4 <__multiply>:
 800a8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c8:	4617      	mov	r7, r2
 800a8ca:	690a      	ldr	r2, [r1, #16]
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	bfa8      	it	ge
 800a8d2:	463b      	movge	r3, r7
 800a8d4:	4689      	mov	r9, r1
 800a8d6:	bfa4      	itt	ge
 800a8d8:	460f      	movge	r7, r1
 800a8da:	4699      	movge	r9, r3
 800a8dc:	693d      	ldr	r5, [r7, #16]
 800a8de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	6879      	ldr	r1, [r7, #4]
 800a8e6:	eb05 060a 	add.w	r6, r5, sl
 800a8ea:	42b3      	cmp	r3, r6
 800a8ec:	b085      	sub	sp, #20
 800a8ee:	bfb8      	it	lt
 800a8f0:	3101      	addlt	r1, #1
 800a8f2:	f7ff fedd 	bl	800a6b0 <_Balloc>
 800a8f6:	b930      	cbnz	r0, 800a906 <__multiply+0x42>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	4b41      	ldr	r3, [pc, #260]	@ (800aa00 <__multiply+0x13c>)
 800a8fc:	4841      	ldr	r0, [pc, #260]	@ (800aa04 <__multiply+0x140>)
 800a8fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a902:	f000 fc7d 	bl	800b200 <__assert_func>
 800a906:	f100 0414 	add.w	r4, r0, #20
 800a90a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a90e:	4623      	mov	r3, r4
 800a910:	2200      	movs	r2, #0
 800a912:	4573      	cmp	r3, lr
 800a914:	d320      	bcc.n	800a958 <__multiply+0x94>
 800a916:	f107 0814 	add.w	r8, r7, #20
 800a91a:	f109 0114 	add.w	r1, r9, #20
 800a91e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a922:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a926:	9302      	str	r3, [sp, #8]
 800a928:	1beb      	subs	r3, r5, r7
 800a92a:	3b15      	subs	r3, #21
 800a92c:	f023 0303 	bic.w	r3, r3, #3
 800a930:	3304      	adds	r3, #4
 800a932:	3715      	adds	r7, #21
 800a934:	42bd      	cmp	r5, r7
 800a936:	bf38      	it	cc
 800a938:	2304      	movcc	r3, #4
 800a93a:	9301      	str	r3, [sp, #4]
 800a93c:	9b02      	ldr	r3, [sp, #8]
 800a93e:	9103      	str	r1, [sp, #12]
 800a940:	428b      	cmp	r3, r1
 800a942:	d80c      	bhi.n	800a95e <__multiply+0x9a>
 800a944:	2e00      	cmp	r6, #0
 800a946:	dd03      	ble.n	800a950 <__multiply+0x8c>
 800a948:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d055      	beq.n	800a9fc <__multiply+0x138>
 800a950:	6106      	str	r6, [r0, #16]
 800a952:	b005      	add	sp, #20
 800a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a958:	f843 2b04 	str.w	r2, [r3], #4
 800a95c:	e7d9      	b.n	800a912 <__multiply+0x4e>
 800a95e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a962:	f1ba 0f00 	cmp.w	sl, #0
 800a966:	d01f      	beq.n	800a9a8 <__multiply+0xe4>
 800a968:	46c4      	mov	ip, r8
 800a96a:	46a1      	mov	r9, r4
 800a96c:	2700      	movs	r7, #0
 800a96e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a972:	f8d9 3000 	ldr.w	r3, [r9]
 800a976:	fa1f fb82 	uxth.w	fp, r2
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a980:	443b      	add	r3, r7
 800a982:	f8d9 7000 	ldr.w	r7, [r9]
 800a986:	0c12      	lsrs	r2, r2, #16
 800a988:	0c3f      	lsrs	r7, r7, #16
 800a98a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a98e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a992:	b29b      	uxth	r3, r3
 800a994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a998:	4565      	cmp	r5, ip
 800a99a:	f849 3b04 	str.w	r3, [r9], #4
 800a99e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a9a2:	d8e4      	bhi.n	800a96e <__multiply+0xaa>
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	50e7      	str	r7, [r4, r3]
 800a9a8:	9b03      	ldr	r3, [sp, #12]
 800a9aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a9ae:	3104      	adds	r1, #4
 800a9b0:	f1b9 0f00 	cmp.w	r9, #0
 800a9b4:	d020      	beq.n	800a9f8 <__multiply+0x134>
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	4647      	mov	r7, r8
 800a9ba:	46a4      	mov	ip, r4
 800a9bc:	f04f 0a00 	mov.w	sl, #0
 800a9c0:	f8b7 b000 	ldrh.w	fp, [r7]
 800a9c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a9c8:	fb09 220b 	mla	r2, r9, fp, r2
 800a9cc:	4452      	add	r2, sl
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9d4:	f84c 3b04 	str.w	r3, [ip], #4
 800a9d8:	f857 3b04 	ldr.w	r3, [r7], #4
 800a9dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9e0:	f8bc 3000 	ldrh.w	r3, [ip]
 800a9e4:	fb09 330a 	mla	r3, r9, sl, r3
 800a9e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a9ec:	42bd      	cmp	r5, r7
 800a9ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9f2:	d8e5      	bhi.n	800a9c0 <__multiply+0xfc>
 800a9f4:	9a01      	ldr	r2, [sp, #4]
 800a9f6:	50a3      	str	r3, [r4, r2]
 800a9f8:	3404      	adds	r4, #4
 800a9fa:	e79f      	b.n	800a93c <__multiply+0x78>
 800a9fc:	3e01      	subs	r6, #1
 800a9fe:	e7a1      	b.n	800a944 <__multiply+0x80>
 800aa00:	0800ba80 	.word	0x0800ba80
 800aa04:	0800ba91 	.word	0x0800ba91

0800aa08 <__pow5mult>:
 800aa08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa0c:	4615      	mov	r5, r2
 800aa0e:	f012 0203 	ands.w	r2, r2, #3
 800aa12:	4607      	mov	r7, r0
 800aa14:	460e      	mov	r6, r1
 800aa16:	d007      	beq.n	800aa28 <__pow5mult+0x20>
 800aa18:	4c25      	ldr	r4, [pc, #148]	@ (800aab0 <__pow5mult+0xa8>)
 800aa1a:	3a01      	subs	r2, #1
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa22:	f7ff fea7 	bl	800a774 <__multadd>
 800aa26:	4606      	mov	r6, r0
 800aa28:	10ad      	asrs	r5, r5, #2
 800aa2a:	d03d      	beq.n	800aaa8 <__pow5mult+0xa0>
 800aa2c:	69fc      	ldr	r4, [r7, #28]
 800aa2e:	b97c      	cbnz	r4, 800aa50 <__pow5mult+0x48>
 800aa30:	2010      	movs	r0, #16
 800aa32:	f7ff fd87 	bl	800a544 <malloc>
 800aa36:	4602      	mov	r2, r0
 800aa38:	61f8      	str	r0, [r7, #28]
 800aa3a:	b928      	cbnz	r0, 800aa48 <__pow5mult+0x40>
 800aa3c:	4b1d      	ldr	r3, [pc, #116]	@ (800aab4 <__pow5mult+0xac>)
 800aa3e:	481e      	ldr	r0, [pc, #120]	@ (800aab8 <__pow5mult+0xb0>)
 800aa40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa44:	f000 fbdc 	bl	800b200 <__assert_func>
 800aa48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa4c:	6004      	str	r4, [r0, #0]
 800aa4e:	60c4      	str	r4, [r0, #12]
 800aa50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa58:	b94c      	cbnz	r4, 800aa6e <__pow5mult+0x66>
 800aa5a:	f240 2171 	movw	r1, #625	@ 0x271
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f7ff ff1a 	bl	800a898 <__i2b>
 800aa64:	2300      	movs	r3, #0
 800aa66:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	6003      	str	r3, [r0, #0]
 800aa6e:	f04f 0900 	mov.w	r9, #0
 800aa72:	07eb      	lsls	r3, r5, #31
 800aa74:	d50a      	bpl.n	800aa8c <__pow5mult+0x84>
 800aa76:	4631      	mov	r1, r6
 800aa78:	4622      	mov	r2, r4
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	f7ff ff22 	bl	800a8c4 <__multiply>
 800aa80:	4631      	mov	r1, r6
 800aa82:	4680      	mov	r8, r0
 800aa84:	4638      	mov	r0, r7
 800aa86:	f7ff fe53 	bl	800a730 <_Bfree>
 800aa8a:	4646      	mov	r6, r8
 800aa8c:	106d      	asrs	r5, r5, #1
 800aa8e:	d00b      	beq.n	800aaa8 <__pow5mult+0xa0>
 800aa90:	6820      	ldr	r0, [r4, #0]
 800aa92:	b938      	cbnz	r0, 800aaa4 <__pow5mult+0x9c>
 800aa94:	4622      	mov	r2, r4
 800aa96:	4621      	mov	r1, r4
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f7ff ff13 	bl	800a8c4 <__multiply>
 800aa9e:	6020      	str	r0, [r4, #0]
 800aaa0:	f8c0 9000 	str.w	r9, [r0]
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	e7e4      	b.n	800aa72 <__pow5mult+0x6a>
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaae:	bf00      	nop
 800aab0:	0800bb44 	.word	0x0800bb44
 800aab4:	0800ba11 	.word	0x0800ba11
 800aab8:	0800ba91 	.word	0x0800ba91

0800aabc <__lshift>:
 800aabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac0:	460c      	mov	r4, r1
 800aac2:	6849      	ldr	r1, [r1, #4]
 800aac4:	6923      	ldr	r3, [r4, #16]
 800aac6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aaca:	68a3      	ldr	r3, [r4, #8]
 800aacc:	4607      	mov	r7, r0
 800aace:	4691      	mov	r9, r2
 800aad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aad4:	f108 0601 	add.w	r6, r8, #1
 800aad8:	42b3      	cmp	r3, r6
 800aada:	db0b      	blt.n	800aaf4 <__lshift+0x38>
 800aadc:	4638      	mov	r0, r7
 800aade:	f7ff fde7 	bl	800a6b0 <_Balloc>
 800aae2:	4605      	mov	r5, r0
 800aae4:	b948      	cbnz	r0, 800aafa <__lshift+0x3e>
 800aae6:	4602      	mov	r2, r0
 800aae8:	4b28      	ldr	r3, [pc, #160]	@ (800ab8c <__lshift+0xd0>)
 800aaea:	4829      	ldr	r0, [pc, #164]	@ (800ab90 <__lshift+0xd4>)
 800aaec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aaf0:	f000 fb86 	bl	800b200 <__assert_func>
 800aaf4:	3101      	adds	r1, #1
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	e7ee      	b.n	800aad8 <__lshift+0x1c>
 800aafa:	2300      	movs	r3, #0
 800aafc:	f100 0114 	add.w	r1, r0, #20
 800ab00:	f100 0210 	add.w	r2, r0, #16
 800ab04:	4618      	mov	r0, r3
 800ab06:	4553      	cmp	r3, sl
 800ab08:	db33      	blt.n	800ab72 <__lshift+0xb6>
 800ab0a:	6920      	ldr	r0, [r4, #16]
 800ab0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab10:	f104 0314 	add.w	r3, r4, #20
 800ab14:	f019 091f 	ands.w	r9, r9, #31
 800ab18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab20:	d02b      	beq.n	800ab7a <__lshift+0xbe>
 800ab22:	f1c9 0e20 	rsb	lr, r9, #32
 800ab26:	468a      	mov	sl, r1
 800ab28:	2200      	movs	r2, #0
 800ab2a:	6818      	ldr	r0, [r3, #0]
 800ab2c:	fa00 f009 	lsl.w	r0, r0, r9
 800ab30:	4310      	orrs	r0, r2
 800ab32:	f84a 0b04 	str.w	r0, [sl], #4
 800ab36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab3a:	459c      	cmp	ip, r3
 800ab3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab40:	d8f3      	bhi.n	800ab2a <__lshift+0x6e>
 800ab42:	ebac 0304 	sub.w	r3, ip, r4
 800ab46:	3b15      	subs	r3, #21
 800ab48:	f023 0303 	bic.w	r3, r3, #3
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	f104 0015 	add.w	r0, r4, #21
 800ab52:	4560      	cmp	r0, ip
 800ab54:	bf88      	it	hi
 800ab56:	2304      	movhi	r3, #4
 800ab58:	50ca      	str	r2, [r1, r3]
 800ab5a:	b10a      	cbz	r2, 800ab60 <__lshift+0xa4>
 800ab5c:	f108 0602 	add.w	r6, r8, #2
 800ab60:	3e01      	subs	r6, #1
 800ab62:	4638      	mov	r0, r7
 800ab64:	612e      	str	r6, [r5, #16]
 800ab66:	4621      	mov	r1, r4
 800ab68:	f7ff fde2 	bl	800a730 <_Bfree>
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab72:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab76:	3301      	adds	r3, #1
 800ab78:	e7c5      	b.n	800ab06 <__lshift+0x4a>
 800ab7a:	3904      	subs	r1, #4
 800ab7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab80:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab84:	459c      	cmp	ip, r3
 800ab86:	d8f9      	bhi.n	800ab7c <__lshift+0xc0>
 800ab88:	e7ea      	b.n	800ab60 <__lshift+0xa4>
 800ab8a:	bf00      	nop
 800ab8c:	0800ba80 	.word	0x0800ba80
 800ab90:	0800ba91 	.word	0x0800ba91

0800ab94 <__mcmp>:
 800ab94:	690a      	ldr	r2, [r1, #16]
 800ab96:	4603      	mov	r3, r0
 800ab98:	6900      	ldr	r0, [r0, #16]
 800ab9a:	1a80      	subs	r0, r0, r2
 800ab9c:	b530      	push	{r4, r5, lr}
 800ab9e:	d10e      	bne.n	800abbe <__mcmp+0x2a>
 800aba0:	3314      	adds	r3, #20
 800aba2:	3114      	adds	r1, #20
 800aba4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aba8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800abac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abb4:	4295      	cmp	r5, r2
 800abb6:	d003      	beq.n	800abc0 <__mcmp+0x2c>
 800abb8:	d205      	bcs.n	800abc6 <__mcmp+0x32>
 800abba:	f04f 30ff 	mov.w	r0, #4294967295
 800abbe:	bd30      	pop	{r4, r5, pc}
 800abc0:	42a3      	cmp	r3, r4
 800abc2:	d3f3      	bcc.n	800abac <__mcmp+0x18>
 800abc4:	e7fb      	b.n	800abbe <__mcmp+0x2a>
 800abc6:	2001      	movs	r0, #1
 800abc8:	e7f9      	b.n	800abbe <__mcmp+0x2a>
	...

0800abcc <__mdiff>:
 800abcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd0:	4689      	mov	r9, r1
 800abd2:	4606      	mov	r6, r0
 800abd4:	4611      	mov	r1, r2
 800abd6:	4648      	mov	r0, r9
 800abd8:	4614      	mov	r4, r2
 800abda:	f7ff ffdb 	bl	800ab94 <__mcmp>
 800abde:	1e05      	subs	r5, r0, #0
 800abe0:	d112      	bne.n	800ac08 <__mdiff+0x3c>
 800abe2:	4629      	mov	r1, r5
 800abe4:	4630      	mov	r0, r6
 800abe6:	f7ff fd63 	bl	800a6b0 <_Balloc>
 800abea:	4602      	mov	r2, r0
 800abec:	b928      	cbnz	r0, 800abfa <__mdiff+0x2e>
 800abee:	4b3f      	ldr	r3, [pc, #252]	@ (800acec <__mdiff+0x120>)
 800abf0:	f240 2137 	movw	r1, #567	@ 0x237
 800abf4:	483e      	ldr	r0, [pc, #248]	@ (800acf0 <__mdiff+0x124>)
 800abf6:	f000 fb03 	bl	800b200 <__assert_func>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac00:	4610      	mov	r0, r2
 800ac02:	b003      	add	sp, #12
 800ac04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac08:	bfbc      	itt	lt
 800ac0a:	464b      	movlt	r3, r9
 800ac0c:	46a1      	movlt	r9, r4
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac14:	bfba      	itte	lt
 800ac16:	461c      	movlt	r4, r3
 800ac18:	2501      	movlt	r5, #1
 800ac1a:	2500      	movge	r5, #0
 800ac1c:	f7ff fd48 	bl	800a6b0 <_Balloc>
 800ac20:	4602      	mov	r2, r0
 800ac22:	b918      	cbnz	r0, 800ac2c <__mdiff+0x60>
 800ac24:	4b31      	ldr	r3, [pc, #196]	@ (800acec <__mdiff+0x120>)
 800ac26:	f240 2145 	movw	r1, #581	@ 0x245
 800ac2a:	e7e3      	b.n	800abf4 <__mdiff+0x28>
 800ac2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac30:	6926      	ldr	r6, [r4, #16]
 800ac32:	60c5      	str	r5, [r0, #12]
 800ac34:	f109 0310 	add.w	r3, r9, #16
 800ac38:	f109 0514 	add.w	r5, r9, #20
 800ac3c:	f104 0e14 	add.w	lr, r4, #20
 800ac40:	f100 0b14 	add.w	fp, r0, #20
 800ac44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	46d9      	mov	r9, fp
 800ac50:	f04f 0c00 	mov.w	ip, #0
 800ac54:	9b01      	ldr	r3, [sp, #4]
 800ac56:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	fa1f f38a 	uxth.w	r3, sl
 800ac64:	4619      	mov	r1, r3
 800ac66:	b283      	uxth	r3, r0
 800ac68:	1acb      	subs	r3, r1, r3
 800ac6a:	0c00      	lsrs	r0, r0, #16
 800ac6c:	4463      	add	r3, ip
 800ac6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac7c:	4576      	cmp	r6, lr
 800ac7e:	f849 3b04 	str.w	r3, [r9], #4
 800ac82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac86:	d8e5      	bhi.n	800ac54 <__mdiff+0x88>
 800ac88:	1b33      	subs	r3, r6, r4
 800ac8a:	3b15      	subs	r3, #21
 800ac8c:	f023 0303 	bic.w	r3, r3, #3
 800ac90:	3415      	adds	r4, #21
 800ac92:	3304      	adds	r3, #4
 800ac94:	42a6      	cmp	r6, r4
 800ac96:	bf38      	it	cc
 800ac98:	2304      	movcc	r3, #4
 800ac9a:	441d      	add	r5, r3
 800ac9c:	445b      	add	r3, fp
 800ac9e:	461e      	mov	r6, r3
 800aca0:	462c      	mov	r4, r5
 800aca2:	4544      	cmp	r4, r8
 800aca4:	d30e      	bcc.n	800acc4 <__mdiff+0xf8>
 800aca6:	f108 0103 	add.w	r1, r8, #3
 800acaa:	1b49      	subs	r1, r1, r5
 800acac:	f021 0103 	bic.w	r1, r1, #3
 800acb0:	3d03      	subs	r5, #3
 800acb2:	45a8      	cmp	r8, r5
 800acb4:	bf38      	it	cc
 800acb6:	2100      	movcc	r1, #0
 800acb8:	440b      	add	r3, r1
 800acba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acbe:	b191      	cbz	r1, 800ace6 <__mdiff+0x11a>
 800acc0:	6117      	str	r7, [r2, #16]
 800acc2:	e79d      	b.n	800ac00 <__mdiff+0x34>
 800acc4:	f854 1b04 	ldr.w	r1, [r4], #4
 800acc8:	46e6      	mov	lr, ip
 800acca:	0c08      	lsrs	r0, r1, #16
 800accc:	fa1c fc81 	uxtah	ip, ip, r1
 800acd0:	4471      	add	r1, lr
 800acd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800acd6:	b289      	uxth	r1, r1
 800acd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800acdc:	f846 1b04 	str.w	r1, [r6], #4
 800ace0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ace4:	e7dd      	b.n	800aca2 <__mdiff+0xd6>
 800ace6:	3f01      	subs	r7, #1
 800ace8:	e7e7      	b.n	800acba <__mdiff+0xee>
 800acea:	bf00      	nop
 800acec:	0800ba80 	.word	0x0800ba80
 800acf0:	0800ba91 	.word	0x0800ba91

0800acf4 <__d2b>:
 800acf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acf8:	460f      	mov	r7, r1
 800acfa:	2101      	movs	r1, #1
 800acfc:	ec59 8b10 	vmov	r8, r9, d0
 800ad00:	4616      	mov	r6, r2
 800ad02:	f7ff fcd5 	bl	800a6b0 <_Balloc>
 800ad06:	4604      	mov	r4, r0
 800ad08:	b930      	cbnz	r0, 800ad18 <__d2b+0x24>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	4b23      	ldr	r3, [pc, #140]	@ (800ad9c <__d2b+0xa8>)
 800ad0e:	4824      	ldr	r0, [pc, #144]	@ (800ada0 <__d2b+0xac>)
 800ad10:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad14:	f000 fa74 	bl	800b200 <__assert_func>
 800ad18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad20:	b10d      	cbz	r5, 800ad26 <__d2b+0x32>
 800ad22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	f1b8 0300 	subs.w	r3, r8, #0
 800ad2c:	d023      	beq.n	800ad76 <__d2b+0x82>
 800ad2e:	4668      	mov	r0, sp
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	f7ff fd84 	bl	800a83e <__lo0bits>
 800ad36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad3a:	b1d0      	cbz	r0, 800ad72 <__d2b+0x7e>
 800ad3c:	f1c0 0320 	rsb	r3, r0, #32
 800ad40:	fa02 f303 	lsl.w	r3, r2, r3
 800ad44:	430b      	orrs	r3, r1
 800ad46:	40c2      	lsrs	r2, r0
 800ad48:	6163      	str	r3, [r4, #20]
 800ad4a:	9201      	str	r2, [sp, #4]
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	61a3      	str	r3, [r4, #24]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	bf0c      	ite	eq
 800ad54:	2201      	moveq	r2, #1
 800ad56:	2202      	movne	r2, #2
 800ad58:	6122      	str	r2, [r4, #16]
 800ad5a:	b1a5      	cbz	r5, 800ad86 <__d2b+0x92>
 800ad5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad60:	4405      	add	r5, r0
 800ad62:	603d      	str	r5, [r7, #0]
 800ad64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad68:	6030      	str	r0, [r6, #0]
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	b003      	add	sp, #12
 800ad6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad72:	6161      	str	r1, [r4, #20]
 800ad74:	e7ea      	b.n	800ad4c <__d2b+0x58>
 800ad76:	a801      	add	r0, sp, #4
 800ad78:	f7ff fd61 	bl	800a83e <__lo0bits>
 800ad7c:	9b01      	ldr	r3, [sp, #4]
 800ad7e:	6163      	str	r3, [r4, #20]
 800ad80:	3020      	adds	r0, #32
 800ad82:	2201      	movs	r2, #1
 800ad84:	e7e8      	b.n	800ad58 <__d2b+0x64>
 800ad86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad8e:	6038      	str	r0, [r7, #0]
 800ad90:	6918      	ldr	r0, [r3, #16]
 800ad92:	f7ff fd35 	bl	800a800 <__hi0bits>
 800ad96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad9a:	e7e5      	b.n	800ad68 <__d2b+0x74>
 800ad9c:	0800ba80 	.word	0x0800ba80
 800ada0:	0800ba91 	.word	0x0800ba91

0800ada4 <__ssputs_r>:
 800ada4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada8:	688e      	ldr	r6, [r1, #8]
 800adaa:	461f      	mov	r7, r3
 800adac:	42be      	cmp	r6, r7
 800adae:	680b      	ldr	r3, [r1, #0]
 800adb0:	4682      	mov	sl, r0
 800adb2:	460c      	mov	r4, r1
 800adb4:	4690      	mov	r8, r2
 800adb6:	d82d      	bhi.n	800ae14 <__ssputs_r+0x70>
 800adb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800adc0:	d026      	beq.n	800ae10 <__ssputs_r+0x6c>
 800adc2:	6965      	ldr	r5, [r4, #20]
 800adc4:	6909      	ldr	r1, [r1, #16]
 800adc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adca:	eba3 0901 	sub.w	r9, r3, r1
 800adce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800add2:	1c7b      	adds	r3, r7, #1
 800add4:	444b      	add	r3, r9
 800add6:	106d      	asrs	r5, r5, #1
 800add8:	429d      	cmp	r5, r3
 800adda:	bf38      	it	cc
 800addc:	461d      	movcc	r5, r3
 800adde:	0553      	lsls	r3, r2, #21
 800ade0:	d527      	bpl.n	800ae32 <__ssputs_r+0x8e>
 800ade2:	4629      	mov	r1, r5
 800ade4:	f7ff fbd8 	bl	800a598 <_malloc_r>
 800ade8:	4606      	mov	r6, r0
 800adea:	b360      	cbz	r0, 800ae46 <__ssputs_r+0xa2>
 800adec:	6921      	ldr	r1, [r4, #16]
 800adee:	464a      	mov	r2, r9
 800adf0:	f7fe fcf5 	bl	80097de <memcpy>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800adfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	6126      	str	r6, [r4, #16]
 800ae02:	6165      	str	r5, [r4, #20]
 800ae04:	444e      	add	r6, r9
 800ae06:	eba5 0509 	sub.w	r5, r5, r9
 800ae0a:	6026      	str	r6, [r4, #0]
 800ae0c:	60a5      	str	r5, [r4, #8]
 800ae0e:	463e      	mov	r6, r7
 800ae10:	42be      	cmp	r6, r7
 800ae12:	d900      	bls.n	800ae16 <__ssputs_r+0x72>
 800ae14:	463e      	mov	r6, r7
 800ae16:	6820      	ldr	r0, [r4, #0]
 800ae18:	4632      	mov	r2, r6
 800ae1a:	4641      	mov	r1, r8
 800ae1c:	f000 f9c6 	bl	800b1ac <memmove>
 800ae20:	68a3      	ldr	r3, [r4, #8]
 800ae22:	1b9b      	subs	r3, r3, r6
 800ae24:	60a3      	str	r3, [r4, #8]
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	4433      	add	r3, r6
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae32:	462a      	mov	r2, r5
 800ae34:	f000 fa28 	bl	800b288 <_realloc_r>
 800ae38:	4606      	mov	r6, r0
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d1e0      	bne.n	800ae00 <__ssputs_r+0x5c>
 800ae3e:	6921      	ldr	r1, [r4, #16]
 800ae40:	4650      	mov	r0, sl
 800ae42:	f7ff fb35 	bl	800a4b0 <_free_r>
 800ae46:	230c      	movs	r3, #12
 800ae48:	f8ca 3000 	str.w	r3, [sl]
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae52:	81a3      	strh	r3, [r4, #12]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	e7e9      	b.n	800ae2e <__ssputs_r+0x8a>
	...

0800ae5c <_svfiprintf_r>:
 800ae5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae60:	4698      	mov	r8, r3
 800ae62:	898b      	ldrh	r3, [r1, #12]
 800ae64:	061b      	lsls	r3, r3, #24
 800ae66:	b09d      	sub	sp, #116	@ 0x74
 800ae68:	4607      	mov	r7, r0
 800ae6a:	460d      	mov	r5, r1
 800ae6c:	4614      	mov	r4, r2
 800ae6e:	d510      	bpl.n	800ae92 <_svfiprintf_r+0x36>
 800ae70:	690b      	ldr	r3, [r1, #16]
 800ae72:	b973      	cbnz	r3, 800ae92 <_svfiprintf_r+0x36>
 800ae74:	2140      	movs	r1, #64	@ 0x40
 800ae76:	f7ff fb8f 	bl	800a598 <_malloc_r>
 800ae7a:	6028      	str	r0, [r5, #0]
 800ae7c:	6128      	str	r0, [r5, #16]
 800ae7e:	b930      	cbnz	r0, 800ae8e <_svfiprintf_r+0x32>
 800ae80:	230c      	movs	r3, #12
 800ae82:	603b      	str	r3, [r7, #0]
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	b01d      	add	sp, #116	@ 0x74
 800ae8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8e:	2340      	movs	r3, #64	@ 0x40
 800ae90:	616b      	str	r3, [r5, #20]
 800ae92:	2300      	movs	r3, #0
 800ae94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae96:	2320      	movs	r3, #32
 800ae98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aea0:	2330      	movs	r3, #48	@ 0x30
 800aea2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b040 <_svfiprintf_r+0x1e4>
 800aea6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aeaa:	f04f 0901 	mov.w	r9, #1
 800aeae:	4623      	mov	r3, r4
 800aeb0:	469a      	mov	sl, r3
 800aeb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeb6:	b10a      	cbz	r2, 800aebc <_svfiprintf_r+0x60>
 800aeb8:	2a25      	cmp	r2, #37	@ 0x25
 800aeba:	d1f9      	bne.n	800aeb0 <_svfiprintf_r+0x54>
 800aebc:	ebba 0b04 	subs.w	fp, sl, r4
 800aec0:	d00b      	beq.n	800aeda <_svfiprintf_r+0x7e>
 800aec2:	465b      	mov	r3, fp
 800aec4:	4622      	mov	r2, r4
 800aec6:	4629      	mov	r1, r5
 800aec8:	4638      	mov	r0, r7
 800aeca:	f7ff ff6b 	bl	800ada4 <__ssputs_r>
 800aece:	3001      	adds	r0, #1
 800aed0:	f000 80a7 	beq.w	800b022 <_svfiprintf_r+0x1c6>
 800aed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aed6:	445a      	add	r2, fp
 800aed8:	9209      	str	r2, [sp, #36]	@ 0x24
 800aeda:	f89a 3000 	ldrb.w	r3, [sl]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 809f 	beq.w	800b022 <_svfiprintf_r+0x1c6>
 800aee4:	2300      	movs	r3, #0
 800aee6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeee:	f10a 0a01 	add.w	sl, sl, #1
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	9307      	str	r3, [sp, #28]
 800aef6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aefa:	931a      	str	r3, [sp, #104]	@ 0x68
 800aefc:	4654      	mov	r4, sl
 800aefe:	2205      	movs	r2, #5
 800af00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af04:	484e      	ldr	r0, [pc, #312]	@ (800b040 <_svfiprintf_r+0x1e4>)
 800af06:	f7f5 f963 	bl	80001d0 <memchr>
 800af0a:	9a04      	ldr	r2, [sp, #16]
 800af0c:	b9d8      	cbnz	r0, 800af46 <_svfiprintf_r+0xea>
 800af0e:	06d0      	lsls	r0, r2, #27
 800af10:	bf44      	itt	mi
 800af12:	2320      	movmi	r3, #32
 800af14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af18:	0711      	lsls	r1, r2, #28
 800af1a:	bf44      	itt	mi
 800af1c:	232b      	movmi	r3, #43	@ 0x2b
 800af1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af22:	f89a 3000 	ldrb.w	r3, [sl]
 800af26:	2b2a      	cmp	r3, #42	@ 0x2a
 800af28:	d015      	beq.n	800af56 <_svfiprintf_r+0xfa>
 800af2a:	9a07      	ldr	r2, [sp, #28]
 800af2c:	4654      	mov	r4, sl
 800af2e:	2000      	movs	r0, #0
 800af30:	f04f 0c0a 	mov.w	ip, #10
 800af34:	4621      	mov	r1, r4
 800af36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af3a:	3b30      	subs	r3, #48	@ 0x30
 800af3c:	2b09      	cmp	r3, #9
 800af3e:	d94b      	bls.n	800afd8 <_svfiprintf_r+0x17c>
 800af40:	b1b0      	cbz	r0, 800af70 <_svfiprintf_r+0x114>
 800af42:	9207      	str	r2, [sp, #28]
 800af44:	e014      	b.n	800af70 <_svfiprintf_r+0x114>
 800af46:	eba0 0308 	sub.w	r3, r0, r8
 800af4a:	fa09 f303 	lsl.w	r3, r9, r3
 800af4e:	4313      	orrs	r3, r2
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	46a2      	mov	sl, r4
 800af54:	e7d2      	b.n	800aefc <_svfiprintf_r+0xa0>
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	1d19      	adds	r1, r3, #4
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	9103      	str	r1, [sp, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	bfbb      	ittet	lt
 800af62:	425b      	neglt	r3, r3
 800af64:	f042 0202 	orrlt.w	r2, r2, #2
 800af68:	9307      	strge	r3, [sp, #28]
 800af6a:	9307      	strlt	r3, [sp, #28]
 800af6c:	bfb8      	it	lt
 800af6e:	9204      	strlt	r2, [sp, #16]
 800af70:	7823      	ldrb	r3, [r4, #0]
 800af72:	2b2e      	cmp	r3, #46	@ 0x2e
 800af74:	d10a      	bne.n	800af8c <_svfiprintf_r+0x130>
 800af76:	7863      	ldrb	r3, [r4, #1]
 800af78:	2b2a      	cmp	r3, #42	@ 0x2a
 800af7a:	d132      	bne.n	800afe2 <_svfiprintf_r+0x186>
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	1d1a      	adds	r2, r3, #4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	9203      	str	r2, [sp, #12]
 800af84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af88:	3402      	adds	r4, #2
 800af8a:	9305      	str	r3, [sp, #20]
 800af8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b050 <_svfiprintf_r+0x1f4>
 800af90:	7821      	ldrb	r1, [r4, #0]
 800af92:	2203      	movs	r2, #3
 800af94:	4650      	mov	r0, sl
 800af96:	f7f5 f91b 	bl	80001d0 <memchr>
 800af9a:	b138      	cbz	r0, 800afac <_svfiprintf_r+0x150>
 800af9c:	9b04      	ldr	r3, [sp, #16]
 800af9e:	eba0 000a 	sub.w	r0, r0, sl
 800afa2:	2240      	movs	r2, #64	@ 0x40
 800afa4:	4082      	lsls	r2, r0
 800afa6:	4313      	orrs	r3, r2
 800afa8:	3401      	adds	r4, #1
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb0:	4824      	ldr	r0, [pc, #144]	@ (800b044 <_svfiprintf_r+0x1e8>)
 800afb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afb6:	2206      	movs	r2, #6
 800afb8:	f7f5 f90a 	bl	80001d0 <memchr>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d036      	beq.n	800b02e <_svfiprintf_r+0x1d2>
 800afc0:	4b21      	ldr	r3, [pc, #132]	@ (800b048 <_svfiprintf_r+0x1ec>)
 800afc2:	bb1b      	cbnz	r3, 800b00c <_svfiprintf_r+0x1b0>
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	3307      	adds	r3, #7
 800afc8:	f023 0307 	bic.w	r3, r3, #7
 800afcc:	3308      	adds	r3, #8
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd2:	4433      	add	r3, r6
 800afd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afd6:	e76a      	b.n	800aeae <_svfiprintf_r+0x52>
 800afd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800afdc:	460c      	mov	r4, r1
 800afde:	2001      	movs	r0, #1
 800afe0:	e7a8      	b.n	800af34 <_svfiprintf_r+0xd8>
 800afe2:	2300      	movs	r3, #0
 800afe4:	3401      	adds	r4, #1
 800afe6:	9305      	str	r3, [sp, #20]
 800afe8:	4619      	mov	r1, r3
 800afea:	f04f 0c0a 	mov.w	ip, #10
 800afee:	4620      	mov	r0, r4
 800aff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff4:	3a30      	subs	r2, #48	@ 0x30
 800aff6:	2a09      	cmp	r2, #9
 800aff8:	d903      	bls.n	800b002 <_svfiprintf_r+0x1a6>
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0c6      	beq.n	800af8c <_svfiprintf_r+0x130>
 800affe:	9105      	str	r1, [sp, #20]
 800b000:	e7c4      	b.n	800af8c <_svfiprintf_r+0x130>
 800b002:	fb0c 2101 	mla	r1, ip, r1, r2
 800b006:	4604      	mov	r4, r0
 800b008:	2301      	movs	r3, #1
 800b00a:	e7f0      	b.n	800afee <_svfiprintf_r+0x192>
 800b00c:	ab03      	add	r3, sp, #12
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	462a      	mov	r2, r5
 800b012:	4b0e      	ldr	r3, [pc, #56]	@ (800b04c <_svfiprintf_r+0x1f0>)
 800b014:	a904      	add	r1, sp, #16
 800b016:	4638      	mov	r0, r7
 800b018:	f7fd fe84 	bl	8008d24 <_printf_float>
 800b01c:	1c42      	adds	r2, r0, #1
 800b01e:	4606      	mov	r6, r0
 800b020:	d1d6      	bne.n	800afd0 <_svfiprintf_r+0x174>
 800b022:	89ab      	ldrh	r3, [r5, #12]
 800b024:	065b      	lsls	r3, r3, #25
 800b026:	f53f af2d 	bmi.w	800ae84 <_svfiprintf_r+0x28>
 800b02a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b02c:	e72c      	b.n	800ae88 <_svfiprintf_r+0x2c>
 800b02e:	ab03      	add	r3, sp, #12
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	462a      	mov	r2, r5
 800b034:	4b05      	ldr	r3, [pc, #20]	@ (800b04c <_svfiprintf_r+0x1f0>)
 800b036:	a904      	add	r1, sp, #16
 800b038:	4638      	mov	r0, r7
 800b03a:	f7fe f90b 	bl	8009254 <_printf_i>
 800b03e:	e7ed      	b.n	800b01c <_svfiprintf_r+0x1c0>
 800b040:	0800baea 	.word	0x0800baea
 800b044:	0800baf4 	.word	0x0800baf4
 800b048:	08008d25 	.word	0x08008d25
 800b04c:	0800ada5 	.word	0x0800ada5
 800b050:	0800baf0 	.word	0x0800baf0

0800b054 <__sflush_r>:
 800b054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b05c:	0716      	lsls	r6, r2, #28
 800b05e:	4605      	mov	r5, r0
 800b060:	460c      	mov	r4, r1
 800b062:	d454      	bmi.n	800b10e <__sflush_r+0xba>
 800b064:	684b      	ldr	r3, [r1, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	dc02      	bgt.n	800b070 <__sflush_r+0x1c>
 800b06a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dd48      	ble.n	800b102 <__sflush_r+0xae>
 800b070:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b072:	2e00      	cmp	r6, #0
 800b074:	d045      	beq.n	800b102 <__sflush_r+0xae>
 800b076:	2300      	movs	r3, #0
 800b078:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b07c:	682f      	ldr	r7, [r5, #0]
 800b07e:	6a21      	ldr	r1, [r4, #32]
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	d030      	beq.n	800b0e6 <__sflush_r+0x92>
 800b084:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	0759      	lsls	r1, r3, #29
 800b08a:	d505      	bpl.n	800b098 <__sflush_r+0x44>
 800b08c:	6863      	ldr	r3, [r4, #4]
 800b08e:	1ad2      	subs	r2, r2, r3
 800b090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b092:	b10b      	cbz	r3, 800b098 <__sflush_r+0x44>
 800b094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b096:	1ad2      	subs	r2, r2, r3
 800b098:	2300      	movs	r3, #0
 800b09a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b09c:	6a21      	ldr	r1, [r4, #32]
 800b09e:	4628      	mov	r0, r5
 800b0a0:	47b0      	blx	r6
 800b0a2:	1c43      	adds	r3, r0, #1
 800b0a4:	89a3      	ldrh	r3, [r4, #12]
 800b0a6:	d106      	bne.n	800b0b6 <__sflush_r+0x62>
 800b0a8:	6829      	ldr	r1, [r5, #0]
 800b0aa:	291d      	cmp	r1, #29
 800b0ac:	d82b      	bhi.n	800b106 <__sflush_r+0xb2>
 800b0ae:	4a2a      	ldr	r2, [pc, #168]	@ (800b158 <__sflush_r+0x104>)
 800b0b0:	40ca      	lsrs	r2, r1
 800b0b2:	07d6      	lsls	r6, r2, #31
 800b0b4:	d527      	bpl.n	800b106 <__sflush_r+0xb2>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	6062      	str	r2, [r4, #4]
 800b0ba:	04d9      	lsls	r1, r3, #19
 800b0bc:	6922      	ldr	r2, [r4, #16]
 800b0be:	6022      	str	r2, [r4, #0]
 800b0c0:	d504      	bpl.n	800b0cc <__sflush_r+0x78>
 800b0c2:	1c42      	adds	r2, r0, #1
 800b0c4:	d101      	bne.n	800b0ca <__sflush_r+0x76>
 800b0c6:	682b      	ldr	r3, [r5, #0]
 800b0c8:	b903      	cbnz	r3, 800b0cc <__sflush_r+0x78>
 800b0ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ce:	602f      	str	r7, [r5, #0]
 800b0d0:	b1b9      	cbz	r1, 800b102 <__sflush_r+0xae>
 800b0d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0d6:	4299      	cmp	r1, r3
 800b0d8:	d002      	beq.n	800b0e0 <__sflush_r+0x8c>
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f7ff f9e8 	bl	800a4b0 <_free_r>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0e4:	e00d      	b.n	800b102 <__sflush_r+0xae>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	47b0      	blx	r6
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	1c50      	adds	r0, r2, #1
 800b0f0:	d1c9      	bne.n	800b086 <__sflush_r+0x32>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d0c6      	beq.n	800b086 <__sflush_r+0x32>
 800b0f8:	2b1d      	cmp	r3, #29
 800b0fa:	d001      	beq.n	800b100 <__sflush_r+0xac>
 800b0fc:	2b16      	cmp	r3, #22
 800b0fe:	d11e      	bne.n	800b13e <__sflush_r+0xea>
 800b100:	602f      	str	r7, [r5, #0]
 800b102:	2000      	movs	r0, #0
 800b104:	e022      	b.n	800b14c <__sflush_r+0xf8>
 800b106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b10a:	b21b      	sxth	r3, r3
 800b10c:	e01b      	b.n	800b146 <__sflush_r+0xf2>
 800b10e:	690f      	ldr	r7, [r1, #16]
 800b110:	2f00      	cmp	r7, #0
 800b112:	d0f6      	beq.n	800b102 <__sflush_r+0xae>
 800b114:	0793      	lsls	r3, r2, #30
 800b116:	680e      	ldr	r6, [r1, #0]
 800b118:	bf08      	it	eq
 800b11a:	694b      	ldreq	r3, [r1, #20]
 800b11c:	600f      	str	r7, [r1, #0]
 800b11e:	bf18      	it	ne
 800b120:	2300      	movne	r3, #0
 800b122:	eba6 0807 	sub.w	r8, r6, r7
 800b126:	608b      	str	r3, [r1, #8]
 800b128:	f1b8 0f00 	cmp.w	r8, #0
 800b12c:	dde9      	ble.n	800b102 <__sflush_r+0xae>
 800b12e:	6a21      	ldr	r1, [r4, #32]
 800b130:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b132:	4643      	mov	r3, r8
 800b134:	463a      	mov	r2, r7
 800b136:	4628      	mov	r0, r5
 800b138:	47b0      	blx	r6
 800b13a:	2800      	cmp	r0, #0
 800b13c:	dc08      	bgt.n	800b150 <__sflush_r+0xfc>
 800b13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b146:	81a3      	strh	r3, [r4, #12]
 800b148:	f04f 30ff 	mov.w	r0, #4294967295
 800b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b150:	4407      	add	r7, r0
 800b152:	eba8 0800 	sub.w	r8, r8, r0
 800b156:	e7e7      	b.n	800b128 <__sflush_r+0xd4>
 800b158:	20400001 	.word	0x20400001

0800b15c <_fflush_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	690b      	ldr	r3, [r1, #16]
 800b160:	4605      	mov	r5, r0
 800b162:	460c      	mov	r4, r1
 800b164:	b913      	cbnz	r3, 800b16c <_fflush_r+0x10>
 800b166:	2500      	movs	r5, #0
 800b168:	4628      	mov	r0, r5
 800b16a:	bd38      	pop	{r3, r4, r5, pc}
 800b16c:	b118      	cbz	r0, 800b176 <_fflush_r+0x1a>
 800b16e:	6a03      	ldr	r3, [r0, #32]
 800b170:	b90b      	cbnz	r3, 800b176 <_fflush_r+0x1a>
 800b172:	f7fe fa19 	bl	80095a8 <__sinit>
 800b176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d0f3      	beq.n	800b166 <_fflush_r+0xa>
 800b17e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b180:	07d0      	lsls	r0, r2, #31
 800b182:	d404      	bmi.n	800b18e <_fflush_r+0x32>
 800b184:	0599      	lsls	r1, r3, #22
 800b186:	d402      	bmi.n	800b18e <_fflush_r+0x32>
 800b188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b18a:	f7fe fb26 	bl	80097da <__retarget_lock_acquire_recursive>
 800b18e:	4628      	mov	r0, r5
 800b190:	4621      	mov	r1, r4
 800b192:	f7ff ff5f 	bl	800b054 <__sflush_r>
 800b196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b198:	07da      	lsls	r2, r3, #31
 800b19a:	4605      	mov	r5, r0
 800b19c:	d4e4      	bmi.n	800b168 <_fflush_r+0xc>
 800b19e:	89a3      	ldrh	r3, [r4, #12]
 800b1a0:	059b      	lsls	r3, r3, #22
 800b1a2:	d4e1      	bmi.n	800b168 <_fflush_r+0xc>
 800b1a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1a6:	f7fe fb19 	bl	80097dc <__retarget_lock_release_recursive>
 800b1aa:	e7dd      	b.n	800b168 <_fflush_r+0xc>

0800b1ac <memmove>:
 800b1ac:	4288      	cmp	r0, r1
 800b1ae:	b510      	push	{r4, lr}
 800b1b0:	eb01 0402 	add.w	r4, r1, r2
 800b1b4:	d902      	bls.n	800b1bc <memmove+0x10>
 800b1b6:	4284      	cmp	r4, r0
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	d807      	bhi.n	800b1cc <memmove+0x20>
 800b1bc:	1e43      	subs	r3, r0, #1
 800b1be:	42a1      	cmp	r1, r4
 800b1c0:	d008      	beq.n	800b1d4 <memmove+0x28>
 800b1c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1ca:	e7f8      	b.n	800b1be <memmove+0x12>
 800b1cc:	4402      	add	r2, r0
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	428a      	cmp	r2, r1
 800b1d2:	d100      	bne.n	800b1d6 <memmove+0x2a>
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1de:	e7f7      	b.n	800b1d0 <memmove+0x24>

0800b1e0 <_sbrk_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d06      	ldr	r5, [pc, #24]	@ (800b1fc <_sbrk_r+0x1c>)
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	602b      	str	r3, [r5, #0]
 800b1ec:	f7f6 ff20 	bl	8002030 <_sbrk>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d102      	bne.n	800b1fa <_sbrk_r+0x1a>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	b103      	cbz	r3, 800b1fa <_sbrk_r+0x1a>
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	20008bb4 	.word	0x20008bb4

0800b200 <__assert_func>:
 800b200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b202:	4614      	mov	r4, r2
 800b204:	461a      	mov	r2, r3
 800b206:	4b09      	ldr	r3, [pc, #36]	@ (800b22c <__assert_func+0x2c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4605      	mov	r5, r0
 800b20c:	68d8      	ldr	r0, [r3, #12]
 800b20e:	b14c      	cbz	r4, 800b224 <__assert_func+0x24>
 800b210:	4b07      	ldr	r3, [pc, #28]	@ (800b230 <__assert_func+0x30>)
 800b212:	9100      	str	r1, [sp, #0]
 800b214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b218:	4906      	ldr	r1, [pc, #24]	@ (800b234 <__assert_func+0x34>)
 800b21a:	462b      	mov	r3, r5
 800b21c:	f000 f870 	bl	800b300 <fiprintf>
 800b220:	f000 f880 	bl	800b324 <abort>
 800b224:	4b04      	ldr	r3, [pc, #16]	@ (800b238 <__assert_func+0x38>)
 800b226:	461c      	mov	r4, r3
 800b228:	e7f3      	b.n	800b212 <__assert_func+0x12>
 800b22a:	bf00      	nop
 800b22c:	20000020 	.word	0x20000020
 800b230:	0800bb05 	.word	0x0800bb05
 800b234:	0800bb12 	.word	0x0800bb12
 800b238:	0800bb40 	.word	0x0800bb40

0800b23c <_calloc_r>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	fba1 5402 	umull	r5, r4, r1, r2
 800b242:	b934      	cbnz	r4, 800b252 <_calloc_r+0x16>
 800b244:	4629      	mov	r1, r5
 800b246:	f7ff f9a7 	bl	800a598 <_malloc_r>
 800b24a:	4606      	mov	r6, r0
 800b24c:	b928      	cbnz	r0, 800b25a <_calloc_r+0x1e>
 800b24e:	4630      	mov	r0, r6
 800b250:	bd70      	pop	{r4, r5, r6, pc}
 800b252:	220c      	movs	r2, #12
 800b254:	6002      	str	r2, [r0, #0]
 800b256:	2600      	movs	r6, #0
 800b258:	e7f9      	b.n	800b24e <_calloc_r+0x12>
 800b25a:	462a      	mov	r2, r5
 800b25c:	4621      	mov	r1, r4
 800b25e:	f7fe fa3e 	bl	80096de <memset>
 800b262:	e7f4      	b.n	800b24e <_calloc_r+0x12>

0800b264 <__ascii_mbtowc>:
 800b264:	b082      	sub	sp, #8
 800b266:	b901      	cbnz	r1, 800b26a <__ascii_mbtowc+0x6>
 800b268:	a901      	add	r1, sp, #4
 800b26a:	b142      	cbz	r2, 800b27e <__ascii_mbtowc+0x1a>
 800b26c:	b14b      	cbz	r3, 800b282 <__ascii_mbtowc+0x1e>
 800b26e:	7813      	ldrb	r3, [r2, #0]
 800b270:	600b      	str	r3, [r1, #0]
 800b272:	7812      	ldrb	r2, [r2, #0]
 800b274:	1e10      	subs	r0, r2, #0
 800b276:	bf18      	it	ne
 800b278:	2001      	movne	r0, #1
 800b27a:	b002      	add	sp, #8
 800b27c:	4770      	bx	lr
 800b27e:	4610      	mov	r0, r2
 800b280:	e7fb      	b.n	800b27a <__ascii_mbtowc+0x16>
 800b282:	f06f 0001 	mvn.w	r0, #1
 800b286:	e7f8      	b.n	800b27a <__ascii_mbtowc+0x16>

0800b288 <_realloc_r>:
 800b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b28c:	4607      	mov	r7, r0
 800b28e:	4614      	mov	r4, r2
 800b290:	460d      	mov	r5, r1
 800b292:	b921      	cbnz	r1, 800b29e <_realloc_r+0x16>
 800b294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b298:	4611      	mov	r1, r2
 800b29a:	f7ff b97d 	b.w	800a598 <_malloc_r>
 800b29e:	b92a      	cbnz	r2, 800b2ac <_realloc_r+0x24>
 800b2a0:	f7ff f906 	bl	800a4b0 <_free_r>
 800b2a4:	4625      	mov	r5, r4
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ac:	f000 f841 	bl	800b332 <_malloc_usable_size_r>
 800b2b0:	4284      	cmp	r4, r0
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	d802      	bhi.n	800b2bc <_realloc_r+0x34>
 800b2b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2ba:	d8f4      	bhi.n	800b2a6 <_realloc_r+0x1e>
 800b2bc:	4621      	mov	r1, r4
 800b2be:	4638      	mov	r0, r7
 800b2c0:	f7ff f96a 	bl	800a598 <_malloc_r>
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	b908      	cbnz	r0, 800b2cc <_realloc_r+0x44>
 800b2c8:	4645      	mov	r5, r8
 800b2ca:	e7ec      	b.n	800b2a6 <_realloc_r+0x1e>
 800b2cc:	42b4      	cmp	r4, r6
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	bf28      	it	cs
 800b2d4:	4632      	movcs	r2, r6
 800b2d6:	f7fe fa82 	bl	80097de <memcpy>
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f7ff f8e7 	bl	800a4b0 <_free_r>
 800b2e2:	e7f1      	b.n	800b2c8 <_realloc_r+0x40>

0800b2e4 <__ascii_wctomb>:
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	4608      	mov	r0, r1
 800b2e8:	b141      	cbz	r1, 800b2fc <__ascii_wctomb+0x18>
 800b2ea:	2aff      	cmp	r2, #255	@ 0xff
 800b2ec:	d904      	bls.n	800b2f8 <__ascii_wctomb+0x14>
 800b2ee:	228a      	movs	r2, #138	@ 0x8a
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f6:	4770      	bx	lr
 800b2f8:	700a      	strb	r2, [r1, #0]
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	4770      	bx	lr
	...

0800b300 <fiprintf>:
 800b300:	b40e      	push	{r1, r2, r3}
 800b302:	b503      	push	{r0, r1, lr}
 800b304:	4601      	mov	r1, r0
 800b306:	ab03      	add	r3, sp, #12
 800b308:	4805      	ldr	r0, [pc, #20]	@ (800b320 <fiprintf+0x20>)
 800b30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30e:	6800      	ldr	r0, [r0, #0]
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	f000 f83f 	bl	800b394 <_vfiprintf_r>
 800b316:	b002      	add	sp, #8
 800b318:	f85d eb04 	ldr.w	lr, [sp], #4
 800b31c:	b003      	add	sp, #12
 800b31e:	4770      	bx	lr
 800b320:	20000020 	.word	0x20000020

0800b324 <abort>:
 800b324:	b508      	push	{r3, lr}
 800b326:	2006      	movs	r0, #6
 800b328:	f000 fa08 	bl	800b73c <raise>
 800b32c:	2001      	movs	r0, #1
 800b32e:	f7f6 fe07 	bl	8001f40 <_exit>

0800b332 <_malloc_usable_size_r>:
 800b332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b336:	1f18      	subs	r0, r3, #4
 800b338:	2b00      	cmp	r3, #0
 800b33a:	bfbc      	itt	lt
 800b33c:	580b      	ldrlt	r3, [r1, r0]
 800b33e:	18c0      	addlt	r0, r0, r3
 800b340:	4770      	bx	lr

0800b342 <__sfputc_r>:
 800b342:	6893      	ldr	r3, [r2, #8]
 800b344:	3b01      	subs	r3, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	b410      	push	{r4}
 800b34a:	6093      	str	r3, [r2, #8]
 800b34c:	da08      	bge.n	800b360 <__sfputc_r+0x1e>
 800b34e:	6994      	ldr	r4, [r2, #24]
 800b350:	42a3      	cmp	r3, r4
 800b352:	db01      	blt.n	800b358 <__sfputc_r+0x16>
 800b354:	290a      	cmp	r1, #10
 800b356:	d103      	bne.n	800b360 <__sfputc_r+0x1e>
 800b358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b35c:	f000 b932 	b.w	800b5c4 <__swbuf_r>
 800b360:	6813      	ldr	r3, [r2, #0]
 800b362:	1c58      	adds	r0, r3, #1
 800b364:	6010      	str	r0, [r2, #0]
 800b366:	7019      	strb	r1, [r3, #0]
 800b368:	4608      	mov	r0, r1
 800b36a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <__sfputs_r>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	4606      	mov	r6, r0
 800b374:	460f      	mov	r7, r1
 800b376:	4614      	mov	r4, r2
 800b378:	18d5      	adds	r5, r2, r3
 800b37a:	42ac      	cmp	r4, r5
 800b37c:	d101      	bne.n	800b382 <__sfputs_r+0x12>
 800b37e:	2000      	movs	r0, #0
 800b380:	e007      	b.n	800b392 <__sfputs_r+0x22>
 800b382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b386:	463a      	mov	r2, r7
 800b388:	4630      	mov	r0, r6
 800b38a:	f7ff ffda 	bl	800b342 <__sfputc_r>
 800b38e:	1c43      	adds	r3, r0, #1
 800b390:	d1f3      	bne.n	800b37a <__sfputs_r+0xa>
 800b392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b394 <_vfiprintf_r>:
 800b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b398:	460d      	mov	r5, r1
 800b39a:	b09d      	sub	sp, #116	@ 0x74
 800b39c:	4614      	mov	r4, r2
 800b39e:	4698      	mov	r8, r3
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	b118      	cbz	r0, 800b3ac <_vfiprintf_r+0x18>
 800b3a4:	6a03      	ldr	r3, [r0, #32]
 800b3a6:	b90b      	cbnz	r3, 800b3ac <_vfiprintf_r+0x18>
 800b3a8:	f7fe f8fe 	bl	80095a8 <__sinit>
 800b3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3ae:	07d9      	lsls	r1, r3, #31
 800b3b0:	d405      	bmi.n	800b3be <_vfiprintf_r+0x2a>
 800b3b2:	89ab      	ldrh	r3, [r5, #12]
 800b3b4:	059a      	lsls	r2, r3, #22
 800b3b6:	d402      	bmi.n	800b3be <_vfiprintf_r+0x2a>
 800b3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ba:	f7fe fa0e 	bl	80097da <__retarget_lock_acquire_recursive>
 800b3be:	89ab      	ldrh	r3, [r5, #12]
 800b3c0:	071b      	lsls	r3, r3, #28
 800b3c2:	d501      	bpl.n	800b3c8 <_vfiprintf_r+0x34>
 800b3c4:	692b      	ldr	r3, [r5, #16]
 800b3c6:	b99b      	cbnz	r3, 800b3f0 <_vfiprintf_r+0x5c>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f000 f938 	bl	800b640 <__swsetup_r>
 800b3d0:	b170      	cbz	r0, 800b3f0 <_vfiprintf_r+0x5c>
 800b3d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3d4:	07dc      	lsls	r4, r3, #31
 800b3d6:	d504      	bpl.n	800b3e2 <_vfiprintf_r+0x4e>
 800b3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3dc:	b01d      	add	sp, #116	@ 0x74
 800b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e2:	89ab      	ldrh	r3, [r5, #12]
 800b3e4:	0598      	lsls	r0, r3, #22
 800b3e6:	d4f7      	bmi.n	800b3d8 <_vfiprintf_r+0x44>
 800b3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ea:	f7fe f9f7 	bl	80097dc <__retarget_lock_release_recursive>
 800b3ee:	e7f3      	b.n	800b3d8 <_vfiprintf_r+0x44>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3f4:	2320      	movs	r3, #32
 800b3f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3fe:	2330      	movs	r3, #48	@ 0x30
 800b400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5b0 <_vfiprintf_r+0x21c>
 800b404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b408:	f04f 0901 	mov.w	r9, #1
 800b40c:	4623      	mov	r3, r4
 800b40e:	469a      	mov	sl, r3
 800b410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b414:	b10a      	cbz	r2, 800b41a <_vfiprintf_r+0x86>
 800b416:	2a25      	cmp	r2, #37	@ 0x25
 800b418:	d1f9      	bne.n	800b40e <_vfiprintf_r+0x7a>
 800b41a:	ebba 0b04 	subs.w	fp, sl, r4
 800b41e:	d00b      	beq.n	800b438 <_vfiprintf_r+0xa4>
 800b420:	465b      	mov	r3, fp
 800b422:	4622      	mov	r2, r4
 800b424:	4629      	mov	r1, r5
 800b426:	4630      	mov	r0, r6
 800b428:	f7ff ffa2 	bl	800b370 <__sfputs_r>
 800b42c:	3001      	adds	r0, #1
 800b42e:	f000 80a7 	beq.w	800b580 <_vfiprintf_r+0x1ec>
 800b432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b434:	445a      	add	r2, fp
 800b436:	9209      	str	r2, [sp, #36]	@ 0x24
 800b438:	f89a 3000 	ldrb.w	r3, [sl]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 809f 	beq.w	800b580 <_vfiprintf_r+0x1ec>
 800b442:	2300      	movs	r3, #0
 800b444:	f04f 32ff 	mov.w	r2, #4294967295
 800b448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b44c:	f10a 0a01 	add.w	sl, sl, #1
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	9307      	str	r3, [sp, #28]
 800b454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b458:	931a      	str	r3, [sp, #104]	@ 0x68
 800b45a:	4654      	mov	r4, sl
 800b45c:	2205      	movs	r2, #5
 800b45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b462:	4853      	ldr	r0, [pc, #332]	@ (800b5b0 <_vfiprintf_r+0x21c>)
 800b464:	f7f4 feb4 	bl	80001d0 <memchr>
 800b468:	9a04      	ldr	r2, [sp, #16]
 800b46a:	b9d8      	cbnz	r0, 800b4a4 <_vfiprintf_r+0x110>
 800b46c:	06d1      	lsls	r1, r2, #27
 800b46e:	bf44      	itt	mi
 800b470:	2320      	movmi	r3, #32
 800b472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b476:	0713      	lsls	r3, r2, #28
 800b478:	bf44      	itt	mi
 800b47a:	232b      	movmi	r3, #43	@ 0x2b
 800b47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b480:	f89a 3000 	ldrb.w	r3, [sl]
 800b484:	2b2a      	cmp	r3, #42	@ 0x2a
 800b486:	d015      	beq.n	800b4b4 <_vfiprintf_r+0x120>
 800b488:	9a07      	ldr	r2, [sp, #28]
 800b48a:	4654      	mov	r4, sl
 800b48c:	2000      	movs	r0, #0
 800b48e:	f04f 0c0a 	mov.w	ip, #10
 800b492:	4621      	mov	r1, r4
 800b494:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b498:	3b30      	subs	r3, #48	@ 0x30
 800b49a:	2b09      	cmp	r3, #9
 800b49c:	d94b      	bls.n	800b536 <_vfiprintf_r+0x1a2>
 800b49e:	b1b0      	cbz	r0, 800b4ce <_vfiprintf_r+0x13a>
 800b4a0:	9207      	str	r2, [sp, #28]
 800b4a2:	e014      	b.n	800b4ce <_vfiprintf_r+0x13a>
 800b4a4:	eba0 0308 	sub.w	r3, r0, r8
 800b4a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	9304      	str	r3, [sp, #16]
 800b4b0:	46a2      	mov	sl, r4
 800b4b2:	e7d2      	b.n	800b45a <_vfiprintf_r+0xc6>
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	1d19      	adds	r1, r3, #4
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	9103      	str	r1, [sp, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	bfbb      	ittet	lt
 800b4c0:	425b      	neglt	r3, r3
 800b4c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b4c6:	9307      	strge	r3, [sp, #28]
 800b4c8:	9307      	strlt	r3, [sp, #28]
 800b4ca:	bfb8      	it	lt
 800b4cc:	9204      	strlt	r2, [sp, #16]
 800b4ce:	7823      	ldrb	r3, [r4, #0]
 800b4d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4d2:	d10a      	bne.n	800b4ea <_vfiprintf_r+0x156>
 800b4d4:	7863      	ldrb	r3, [r4, #1]
 800b4d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4d8:	d132      	bne.n	800b540 <_vfiprintf_r+0x1ac>
 800b4da:	9b03      	ldr	r3, [sp, #12]
 800b4dc:	1d1a      	adds	r2, r3, #4
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	9203      	str	r2, [sp, #12]
 800b4e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4e6:	3402      	adds	r4, #2
 800b4e8:	9305      	str	r3, [sp, #20]
 800b4ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5c0 <_vfiprintf_r+0x22c>
 800b4ee:	7821      	ldrb	r1, [r4, #0]
 800b4f0:	2203      	movs	r2, #3
 800b4f2:	4650      	mov	r0, sl
 800b4f4:	f7f4 fe6c 	bl	80001d0 <memchr>
 800b4f8:	b138      	cbz	r0, 800b50a <_vfiprintf_r+0x176>
 800b4fa:	9b04      	ldr	r3, [sp, #16]
 800b4fc:	eba0 000a 	sub.w	r0, r0, sl
 800b500:	2240      	movs	r2, #64	@ 0x40
 800b502:	4082      	lsls	r2, r0
 800b504:	4313      	orrs	r3, r2
 800b506:	3401      	adds	r4, #1
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50e:	4829      	ldr	r0, [pc, #164]	@ (800b5b4 <_vfiprintf_r+0x220>)
 800b510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b514:	2206      	movs	r2, #6
 800b516:	f7f4 fe5b 	bl	80001d0 <memchr>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d03f      	beq.n	800b59e <_vfiprintf_r+0x20a>
 800b51e:	4b26      	ldr	r3, [pc, #152]	@ (800b5b8 <_vfiprintf_r+0x224>)
 800b520:	bb1b      	cbnz	r3, 800b56a <_vfiprintf_r+0x1d6>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	3307      	adds	r3, #7
 800b526:	f023 0307 	bic.w	r3, r3, #7
 800b52a:	3308      	adds	r3, #8
 800b52c:	9303      	str	r3, [sp, #12]
 800b52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b530:	443b      	add	r3, r7
 800b532:	9309      	str	r3, [sp, #36]	@ 0x24
 800b534:	e76a      	b.n	800b40c <_vfiprintf_r+0x78>
 800b536:	fb0c 3202 	mla	r2, ip, r2, r3
 800b53a:	460c      	mov	r4, r1
 800b53c:	2001      	movs	r0, #1
 800b53e:	e7a8      	b.n	800b492 <_vfiprintf_r+0xfe>
 800b540:	2300      	movs	r3, #0
 800b542:	3401      	adds	r4, #1
 800b544:	9305      	str	r3, [sp, #20]
 800b546:	4619      	mov	r1, r3
 800b548:	f04f 0c0a 	mov.w	ip, #10
 800b54c:	4620      	mov	r0, r4
 800b54e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b552:	3a30      	subs	r2, #48	@ 0x30
 800b554:	2a09      	cmp	r2, #9
 800b556:	d903      	bls.n	800b560 <_vfiprintf_r+0x1cc>
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0c6      	beq.n	800b4ea <_vfiprintf_r+0x156>
 800b55c:	9105      	str	r1, [sp, #20]
 800b55e:	e7c4      	b.n	800b4ea <_vfiprintf_r+0x156>
 800b560:	fb0c 2101 	mla	r1, ip, r1, r2
 800b564:	4604      	mov	r4, r0
 800b566:	2301      	movs	r3, #1
 800b568:	e7f0      	b.n	800b54c <_vfiprintf_r+0x1b8>
 800b56a:	ab03      	add	r3, sp, #12
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	462a      	mov	r2, r5
 800b570:	4b12      	ldr	r3, [pc, #72]	@ (800b5bc <_vfiprintf_r+0x228>)
 800b572:	a904      	add	r1, sp, #16
 800b574:	4630      	mov	r0, r6
 800b576:	f7fd fbd5 	bl	8008d24 <_printf_float>
 800b57a:	4607      	mov	r7, r0
 800b57c:	1c78      	adds	r0, r7, #1
 800b57e:	d1d6      	bne.n	800b52e <_vfiprintf_r+0x19a>
 800b580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b582:	07d9      	lsls	r1, r3, #31
 800b584:	d405      	bmi.n	800b592 <_vfiprintf_r+0x1fe>
 800b586:	89ab      	ldrh	r3, [r5, #12]
 800b588:	059a      	lsls	r2, r3, #22
 800b58a:	d402      	bmi.n	800b592 <_vfiprintf_r+0x1fe>
 800b58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b58e:	f7fe f925 	bl	80097dc <__retarget_lock_release_recursive>
 800b592:	89ab      	ldrh	r3, [r5, #12]
 800b594:	065b      	lsls	r3, r3, #25
 800b596:	f53f af1f 	bmi.w	800b3d8 <_vfiprintf_r+0x44>
 800b59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b59c:	e71e      	b.n	800b3dc <_vfiprintf_r+0x48>
 800b59e:	ab03      	add	r3, sp, #12
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	4b05      	ldr	r3, [pc, #20]	@ (800b5bc <_vfiprintf_r+0x228>)
 800b5a6:	a904      	add	r1, sp, #16
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7fd fe53 	bl	8009254 <_printf_i>
 800b5ae:	e7e4      	b.n	800b57a <_vfiprintf_r+0x1e6>
 800b5b0:	0800baea 	.word	0x0800baea
 800b5b4:	0800baf4 	.word	0x0800baf4
 800b5b8:	08008d25 	.word	0x08008d25
 800b5bc:	0800b371 	.word	0x0800b371
 800b5c0:	0800baf0 	.word	0x0800baf0

0800b5c4 <__swbuf_r>:
 800b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c6:	460e      	mov	r6, r1
 800b5c8:	4614      	mov	r4, r2
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	b118      	cbz	r0, 800b5d6 <__swbuf_r+0x12>
 800b5ce:	6a03      	ldr	r3, [r0, #32]
 800b5d0:	b90b      	cbnz	r3, 800b5d6 <__swbuf_r+0x12>
 800b5d2:	f7fd ffe9 	bl	80095a8 <__sinit>
 800b5d6:	69a3      	ldr	r3, [r4, #24]
 800b5d8:	60a3      	str	r3, [r4, #8]
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	071a      	lsls	r2, r3, #28
 800b5de:	d501      	bpl.n	800b5e4 <__swbuf_r+0x20>
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	b943      	cbnz	r3, 800b5f6 <__swbuf_r+0x32>
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f000 f82a 	bl	800b640 <__swsetup_r>
 800b5ec:	b118      	cbz	r0, 800b5f6 <__swbuf_r+0x32>
 800b5ee:	f04f 37ff 	mov.w	r7, #4294967295
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	6922      	ldr	r2, [r4, #16]
 800b5fa:	1a98      	subs	r0, r3, r2
 800b5fc:	6963      	ldr	r3, [r4, #20]
 800b5fe:	b2f6      	uxtb	r6, r6
 800b600:	4283      	cmp	r3, r0
 800b602:	4637      	mov	r7, r6
 800b604:	dc05      	bgt.n	800b612 <__swbuf_r+0x4e>
 800b606:	4621      	mov	r1, r4
 800b608:	4628      	mov	r0, r5
 800b60a:	f7ff fda7 	bl	800b15c <_fflush_r>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d1ed      	bne.n	800b5ee <__swbuf_r+0x2a>
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	3b01      	subs	r3, #1
 800b616:	60a3      	str	r3, [r4, #8]
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	6022      	str	r2, [r4, #0]
 800b61e:	701e      	strb	r6, [r3, #0]
 800b620:	6962      	ldr	r2, [r4, #20]
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	429a      	cmp	r2, r3
 800b626:	d004      	beq.n	800b632 <__swbuf_r+0x6e>
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	07db      	lsls	r3, r3, #31
 800b62c:	d5e1      	bpl.n	800b5f2 <__swbuf_r+0x2e>
 800b62e:	2e0a      	cmp	r6, #10
 800b630:	d1df      	bne.n	800b5f2 <__swbuf_r+0x2e>
 800b632:	4621      	mov	r1, r4
 800b634:	4628      	mov	r0, r5
 800b636:	f7ff fd91 	bl	800b15c <_fflush_r>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d0d9      	beq.n	800b5f2 <__swbuf_r+0x2e>
 800b63e:	e7d6      	b.n	800b5ee <__swbuf_r+0x2a>

0800b640 <__swsetup_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4b29      	ldr	r3, [pc, #164]	@ (800b6e8 <__swsetup_r+0xa8>)
 800b644:	4605      	mov	r5, r0
 800b646:	6818      	ldr	r0, [r3, #0]
 800b648:	460c      	mov	r4, r1
 800b64a:	b118      	cbz	r0, 800b654 <__swsetup_r+0x14>
 800b64c:	6a03      	ldr	r3, [r0, #32]
 800b64e:	b90b      	cbnz	r3, 800b654 <__swsetup_r+0x14>
 800b650:	f7fd ffaa 	bl	80095a8 <__sinit>
 800b654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b658:	0719      	lsls	r1, r3, #28
 800b65a:	d422      	bmi.n	800b6a2 <__swsetup_r+0x62>
 800b65c:	06da      	lsls	r2, r3, #27
 800b65e:	d407      	bmi.n	800b670 <__swsetup_r+0x30>
 800b660:	2209      	movs	r2, #9
 800b662:	602a      	str	r2, [r5, #0]
 800b664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	f04f 30ff 	mov.w	r0, #4294967295
 800b66e:	e033      	b.n	800b6d8 <__swsetup_r+0x98>
 800b670:	0758      	lsls	r0, r3, #29
 800b672:	d512      	bpl.n	800b69a <__swsetup_r+0x5a>
 800b674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b676:	b141      	cbz	r1, 800b68a <__swsetup_r+0x4a>
 800b678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b67c:	4299      	cmp	r1, r3
 800b67e:	d002      	beq.n	800b686 <__swsetup_r+0x46>
 800b680:	4628      	mov	r0, r5
 800b682:	f7fe ff15 	bl	800a4b0 <_free_r>
 800b686:	2300      	movs	r3, #0
 800b688:	6363      	str	r3, [r4, #52]	@ 0x34
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b690:	81a3      	strh	r3, [r4, #12]
 800b692:	2300      	movs	r3, #0
 800b694:	6063      	str	r3, [r4, #4]
 800b696:	6923      	ldr	r3, [r4, #16]
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	89a3      	ldrh	r3, [r4, #12]
 800b69c:	f043 0308 	orr.w	r3, r3, #8
 800b6a0:	81a3      	strh	r3, [r4, #12]
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	b94b      	cbnz	r3, 800b6ba <__swsetup_r+0x7a>
 800b6a6:	89a3      	ldrh	r3, [r4, #12]
 800b6a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6b0:	d003      	beq.n	800b6ba <__swsetup_r+0x7a>
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	f000 f883 	bl	800b7c0 <__smakebuf_r>
 800b6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6be:	f013 0201 	ands.w	r2, r3, #1
 800b6c2:	d00a      	beq.n	800b6da <__swsetup_r+0x9a>
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	60a2      	str	r2, [r4, #8]
 800b6c8:	6962      	ldr	r2, [r4, #20]
 800b6ca:	4252      	negs	r2, r2
 800b6cc:	61a2      	str	r2, [r4, #24]
 800b6ce:	6922      	ldr	r2, [r4, #16]
 800b6d0:	b942      	cbnz	r2, 800b6e4 <__swsetup_r+0xa4>
 800b6d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6d6:	d1c5      	bne.n	800b664 <__swsetup_r+0x24>
 800b6d8:	bd38      	pop	{r3, r4, r5, pc}
 800b6da:	0799      	lsls	r1, r3, #30
 800b6dc:	bf58      	it	pl
 800b6de:	6962      	ldrpl	r2, [r4, #20]
 800b6e0:	60a2      	str	r2, [r4, #8]
 800b6e2:	e7f4      	b.n	800b6ce <__swsetup_r+0x8e>
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	e7f7      	b.n	800b6d8 <__swsetup_r+0x98>
 800b6e8:	20000020 	.word	0x20000020

0800b6ec <_raise_r>:
 800b6ec:	291f      	cmp	r1, #31
 800b6ee:	b538      	push	{r3, r4, r5, lr}
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	d904      	bls.n	800b700 <_raise_r+0x14>
 800b6f6:	2316      	movs	r3, #22
 800b6f8:	6003      	str	r3, [r0, #0]
 800b6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b702:	b112      	cbz	r2, 800b70a <_raise_r+0x1e>
 800b704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b708:	b94b      	cbnz	r3, 800b71e <_raise_r+0x32>
 800b70a:	4628      	mov	r0, r5
 800b70c:	f000 f830 	bl	800b770 <_getpid_r>
 800b710:	4622      	mov	r2, r4
 800b712:	4601      	mov	r1, r0
 800b714:	4628      	mov	r0, r5
 800b716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b71a:	f000 b817 	b.w	800b74c <_kill_r>
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d00a      	beq.n	800b738 <_raise_r+0x4c>
 800b722:	1c59      	adds	r1, r3, #1
 800b724:	d103      	bne.n	800b72e <_raise_r+0x42>
 800b726:	2316      	movs	r3, #22
 800b728:	6003      	str	r3, [r0, #0]
 800b72a:	2001      	movs	r0, #1
 800b72c:	e7e7      	b.n	800b6fe <_raise_r+0x12>
 800b72e:	2100      	movs	r1, #0
 800b730:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b734:	4620      	mov	r0, r4
 800b736:	4798      	blx	r3
 800b738:	2000      	movs	r0, #0
 800b73a:	e7e0      	b.n	800b6fe <_raise_r+0x12>

0800b73c <raise>:
 800b73c:	4b02      	ldr	r3, [pc, #8]	@ (800b748 <raise+0xc>)
 800b73e:	4601      	mov	r1, r0
 800b740:	6818      	ldr	r0, [r3, #0]
 800b742:	f7ff bfd3 	b.w	800b6ec <_raise_r>
 800b746:	bf00      	nop
 800b748:	20000020 	.word	0x20000020

0800b74c <_kill_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	4d07      	ldr	r5, [pc, #28]	@ (800b76c <_kill_r+0x20>)
 800b750:	2300      	movs	r3, #0
 800b752:	4604      	mov	r4, r0
 800b754:	4608      	mov	r0, r1
 800b756:	4611      	mov	r1, r2
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	f7f6 fbe1 	bl	8001f20 <_kill>
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	d102      	bne.n	800b768 <_kill_r+0x1c>
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	b103      	cbz	r3, 800b768 <_kill_r+0x1c>
 800b766:	6023      	str	r3, [r4, #0]
 800b768:	bd38      	pop	{r3, r4, r5, pc}
 800b76a:	bf00      	nop
 800b76c:	20008bb4 	.word	0x20008bb4

0800b770 <_getpid_r>:
 800b770:	f7f6 bbce 	b.w	8001f10 <_getpid>

0800b774 <__swhatbuf_r>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	460c      	mov	r4, r1
 800b778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77c:	2900      	cmp	r1, #0
 800b77e:	b096      	sub	sp, #88	@ 0x58
 800b780:	4615      	mov	r5, r2
 800b782:	461e      	mov	r6, r3
 800b784:	da0d      	bge.n	800b7a2 <__swhatbuf_r+0x2e>
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b78c:	f04f 0100 	mov.w	r1, #0
 800b790:	bf14      	ite	ne
 800b792:	2340      	movne	r3, #64	@ 0x40
 800b794:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b798:	2000      	movs	r0, #0
 800b79a:	6031      	str	r1, [r6, #0]
 800b79c:	602b      	str	r3, [r5, #0]
 800b79e:	b016      	add	sp, #88	@ 0x58
 800b7a0:	bd70      	pop	{r4, r5, r6, pc}
 800b7a2:	466a      	mov	r2, sp
 800b7a4:	f000 f848 	bl	800b838 <_fstat_r>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	dbec      	blt.n	800b786 <__swhatbuf_r+0x12>
 800b7ac:	9901      	ldr	r1, [sp, #4]
 800b7ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7b6:	4259      	negs	r1, r3
 800b7b8:	4159      	adcs	r1, r3
 800b7ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7be:	e7eb      	b.n	800b798 <__swhatbuf_r+0x24>

0800b7c0 <__smakebuf_r>:
 800b7c0:	898b      	ldrh	r3, [r1, #12]
 800b7c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7c4:	079d      	lsls	r5, r3, #30
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	d507      	bpl.n	800b7dc <__smakebuf_r+0x1c>
 800b7cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	6123      	str	r3, [r4, #16]
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	6163      	str	r3, [r4, #20]
 800b7d8:	b003      	add	sp, #12
 800b7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7dc:	ab01      	add	r3, sp, #4
 800b7de:	466a      	mov	r2, sp
 800b7e0:	f7ff ffc8 	bl	800b774 <__swhatbuf_r>
 800b7e4:	9f00      	ldr	r7, [sp, #0]
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7fe fed4 	bl	800a598 <_malloc_r>
 800b7f0:	b948      	cbnz	r0, 800b806 <__smakebuf_r+0x46>
 800b7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7f6:	059a      	lsls	r2, r3, #22
 800b7f8:	d4ee      	bmi.n	800b7d8 <__smakebuf_r+0x18>
 800b7fa:	f023 0303 	bic.w	r3, r3, #3
 800b7fe:	f043 0302 	orr.w	r3, r3, #2
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	e7e2      	b.n	800b7cc <__smakebuf_r+0xc>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	6020      	str	r0, [r4, #0]
 800b80a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	9b01      	ldr	r3, [sp, #4]
 800b812:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b816:	b15b      	cbz	r3, 800b830 <__smakebuf_r+0x70>
 800b818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b81c:	4630      	mov	r0, r6
 800b81e:	f000 f81d 	bl	800b85c <_isatty_r>
 800b822:	b128      	cbz	r0, 800b830 <__smakebuf_r+0x70>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	f023 0303 	bic.w	r3, r3, #3
 800b82a:	f043 0301 	orr.w	r3, r3, #1
 800b82e:	81a3      	strh	r3, [r4, #12]
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	431d      	orrs	r5, r3
 800b834:	81a5      	strh	r5, [r4, #12]
 800b836:	e7cf      	b.n	800b7d8 <__smakebuf_r+0x18>

0800b838 <_fstat_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d07      	ldr	r5, [pc, #28]	@ (800b858 <_fstat_r+0x20>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	4611      	mov	r1, r2
 800b844:	602b      	str	r3, [r5, #0]
 800b846:	f7f6 fbcb 	bl	8001fe0 <_fstat>
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	d102      	bne.n	800b854 <_fstat_r+0x1c>
 800b84e:	682b      	ldr	r3, [r5, #0]
 800b850:	b103      	cbz	r3, 800b854 <_fstat_r+0x1c>
 800b852:	6023      	str	r3, [r4, #0]
 800b854:	bd38      	pop	{r3, r4, r5, pc}
 800b856:	bf00      	nop
 800b858:	20008bb4 	.word	0x20008bb4

0800b85c <_isatty_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d06      	ldr	r5, [pc, #24]	@ (800b878 <_isatty_r+0x1c>)
 800b860:	2300      	movs	r3, #0
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	f7f6 fbca 	bl	8002000 <_isatty>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_isatty_r+0x1a>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_isatty_r+0x1a>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20008bb4 	.word	0x20008bb4

0800b87c <_init>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	bf00      	nop
 800b880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b882:	bc08      	pop	{r3}
 800b884:	469e      	mov	lr, r3
 800b886:	4770      	bx	lr

0800b888 <_fini>:
 800b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88a:	bf00      	nop
 800b88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b88e:	bc08      	pop	{r3}
 800b890:	469e      	mov	lr, r3
 800b892:	4770      	bx	lr
