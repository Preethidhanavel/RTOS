
counting_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005450  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080055e0  080055e0  000065e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ac  080056ac  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056ac  080056ac  000066ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b4  080056b4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b4  080056b4  000066b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056b8  080056b8  000066b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080056bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008728  20000010  080056cc  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008738  080056cc  00007738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bb8  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002945  00000000  00000000  00017bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  0001a540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b33  00000000  00000000  0001b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274aa  00000000  00000000  0001bf13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109d1  00000000  00000000  000433bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f068c  00000000  00000000  00053d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014441a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b3c  00000000  00000000  00144460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00147f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055c8 	.word	0x080055c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080055c8 	.word	0x080055c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800052a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <uart_send>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to send strings via UART2
void uart_send(char *s)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    // Transmit the string through UART2
    HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), 1000);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff fe41 	bl	80001d0 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <uart_send+0x28>)
 800055a:	f002 f963 	bl	8002824 <HAL_UART_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20001020 	.word	0x20001020

0800056c <handlertask>:

// Handler task → waits (takes) the semaphore
static void handlertask(void *p)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    while(1)
    {
        // Block here until semaphore is available
        if(xSemaphoreTake(xcntsem , portMAX_DELAY) == pdTRUE)
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <handlertask+0x24>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f04f 31ff 	mov.w	r1, #4294967295
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f9dd 	bl	800393c <xQueueSemaphoreTake>
 8000582:	4603      	mov	r3, r0
 8000584:	2b01      	cmp	r3, #1
 8000586:	d1f5      	bne.n	8000574 <handlertask+0x8>
        {
            // If semaphore successfully taken, process message
            uart_send("Handler task - processing\r\n");
 8000588:	4802      	ldr	r0, [pc, #8]	@ (8000594 <handlertask+0x28>)
 800058a:	f7ff ffd9 	bl	8000540 <uart_send>
        if(xSemaphoreTake(xcntsem , portMAX_DELAY) == pdTRUE)
 800058e:	e7f1      	b.n	8000574 <handlertask+0x8>
 8000590:	200010ac 	.word	0x200010ac
 8000594:	080055e0 	.word	0x080055e0

08000598 <periodictask>:
    }
}

// Periodic task → gives (releases) semaphore tokens
static void periodictask(void *p)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    while(1)
    {
        // Wait for 500ms
        vTaskDelay(pdMS_TO_TICKS(500));
 80005a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a4:	f003 fd74 	bl	8004090 <vTaskDelay>

        // Print message to indicate giving semaphore
        uart_send("Periodic task giving semaphore\r\n");
 80005a8:	480c      	ldr	r0, [pc, #48]	@ (80005dc <periodictask+0x44>)
 80005aa:	f7ff ffc9 	bl	8000540 <uart_send>

        // Give semaphore 3 times
        xSemaphoreGive(xcntsem);
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <periodictask+0x48>)
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	f003 f8be 	bl	8003738 <xQueueGenericSend>
        xSemaphoreGive(xcntsem);
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <periodictask+0x48>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	f003 f8b7 	bl	8003738 <xQueueGenericSend>
        xSemaphoreGive(xcntsem);
 80005ca:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <periodictask+0x48>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	f003 f8b0 	bl	8003738 <xQueueGenericSend>
        vTaskDelay(pdMS_TO_TICKS(500));
 80005d8:	bf00      	nop
 80005da:	e7e1      	b.n	80005a0 <periodictask+0x8>
 80005dc:	080055fc 	.word	0x080055fc
 80005e0:	200010ac 	.word	0x200010ac

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b08a      	sub	sp, #40	@ 0x28
 80005e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fa39 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f849 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f8c9 	bl	8000788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 f897 	bl	8000728 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <main+0x84>)
 80005fc:	1d3c      	adds	r4, r7, #4
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fe83 	bl	800331c <osThreadCreate>
 8000616:	4603      	mov	r3, r0
 8000618:	4a14      	ldr	r2, [pc, #80]	@ (800066c <main+0x88>)
 800061a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // Create a counting semaphore with max count = 5, initial count = 0
  xcntsem = xSemaphoreCreateCounting(5, 0);
 800061c:	2100      	movs	r1, #0
 800061e:	2005      	movs	r0, #5
 8000620:	f003 f854 	bl	80036cc <xQueueCreateCountingSemaphore>
 8000624:	4603      	mov	r3, r0
 8000626:	4a12      	ldr	r2, [pc, #72]	@ (8000670 <main+0x8c>)
 8000628:	6013      	str	r3, [r2, #0]

  if (xcntsem != NULL)   // Check if semaphore created successfully
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <main+0x8c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d015      	beq.n	800065e <main+0x7a>
  {
	  xTaskCreate(handlertask, "handler",configMINIMAL_STACK_SIZE,NULL,2,NULL); //handler task
 8000632:	2300      	movs	r3, #0
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000640:	490c      	ldr	r1, [pc, #48]	@ (8000674 <main+0x90>)
 8000642:	480d      	ldr	r0, [pc, #52]	@ (8000678 <main+0x94>)
 8000644:	f003 fbec 	bl	8003e20 <xTaskCreate>

	  xTaskCreate(periodictask,"Periodic",configMINIMAL_STACK_SIZE,NULL,1,NULL); //perriodic task
 8000648:	2300      	movs	r3, #0
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2301      	movs	r3, #1
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000656:	4909      	ldr	r1, [pc, #36]	@ (800067c <main+0x98>)
 8000658:	4809      	ldr	r0, [pc, #36]	@ (8000680 <main+0x9c>)
 800065a:	f003 fbe1 	bl	8003e20 <xTaskCreate>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065e:	f002 fe56 	bl	800330e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0x7e>
 8000666:	bf00      	nop
 8000668:	08005640 	.word	0x08005640
 800066c:	200010a8 	.word	0x200010a8
 8000670:	200010ac 	.word	0x200010ac
 8000674:	08005620 	.word	0x08005620
 8000678:	0800056d 	.word	0x0800056d
 800067c:	08005628 	.word	0x08005628
 8000680:	08000599 	.word	0x08000599

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b096      	sub	sp, #88	@ 0x58
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2244      	movs	r2, #68	@ 0x44
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 ff5e 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006aa:	f000 fd5b 	bl	8001164 <HAL_PWREx_ControlVoltageScaling>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b4:	f000 f8de 	bl	8000874 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	2310      	movs	r3, #16
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ca:	2302      	movs	r3, #2
 80006cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006d2:	230a      	movs	r3, #10
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d6:	2307      	movs	r3, #7
 80006d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fd92 	bl	8001210 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006f2:	f000 f8bf 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2104      	movs	r1, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f95a 	bl	80019c8 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800071a:	f000 f8ab 	bl	8000874 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3758      	adds	r7, #88	@ 0x58
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	@ (8000784 <MX_USART2_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800076c:	f002 f80c 	bl	8002788 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f87d 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20001020 	.word	0x20001020
 8000784:	40004400 	.word	0x40004400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b2f      	ldr	r3, [pc, #188]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	4a2e      	ldr	r2, [pc, #184]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007aa:	4b2c      	ldr	r3, [pc, #176]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	4b29      	ldr	r3, [pc, #164]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a28      	ldr	r2, [pc, #160]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b26      	ldr	r3, [pc, #152]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b23      	ldr	r3, [pc, #140]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a22      	ldr	r2, [pc, #136]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b20      	ldr	r3, [pc, #128]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_GPIO_Init+0xd4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2120      	movs	r1, #32
 8000802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000806:	f000 fc63 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000810:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	480f      	ldr	r0, [pc, #60]	@ (8000860 <MX_GPIO_Init+0xd8>)
 8000822:	f000 faab 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000826:	2320      	movs	r3, #32
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000840:	f000 fa9c 	bl	8000d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2105      	movs	r1, #5
 8000848:	2028      	movs	r0, #40	@ 0x28
 800084a:	f000 fa60 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800084e:	2028      	movs	r0, #40	@ 0x28
 8000850:	f000 fa79 	bl	8000d46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	@ 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000800 	.word	0x48000800

08000864 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f002 fda1 	bl	80033b4 <osDelay>
 8000872:	e7fb      	b.n	800086c <StartDefaultTask+0x8>

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_MspInit+0x4c>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	4a10      	ldr	r2, [pc, #64]	@ (80008cc <HAL_MspInit+0x4c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6613      	str	r3, [r2, #96]	@ 0x60
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <HAL_MspInit+0x4c>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <HAL_MspInit+0x4c>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <HAL_MspInit+0x4c>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	210f      	movs	r1, #15
 80008ba:	f06f 0001 	mvn.w	r0, #1
 80008be:	f000 fa26 	bl	8000d0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b0ac      	sub	sp, #176	@ 0xb0
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2288      	movs	r2, #136	@ 0x88
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f004 fe2f 	bl	8005554 <memset>
  if(huart->Instance==USART2)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a21      	ldr	r2, [pc, #132]	@ (8000980 <HAL_UART_MspInit+0xb0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d13b      	bne.n	8000978 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000900:	2302      	movs	r3, #2
 8000902:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000904:	2300      	movs	r3, #0
 8000906:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fa7f 	bl	8001e10 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000918:	f7ff ffac 	bl	8000874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <HAL_UART_MspInit+0xb4>)
 800091e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000920:	4a18      	ldr	r2, [pc, #96]	@ (8000984 <HAL_UART_MspInit+0xb4>)
 8000922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000926:	6593      	str	r3, [r2, #88]	@ 0x58
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <HAL_UART_MspInit+0xb4>)
 800092a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <HAL_UART_MspInit+0xb4>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000938:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <HAL_UART_MspInit+0xb4>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000940:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <HAL_UART_MspInit+0xb4>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800094c:	230c      	movs	r3, #12
 800094e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000964:	2307      	movs	r3, #7
 8000966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800096e:	4619      	mov	r1, r3
 8000970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000974:	f000 fa02 	bl	8000d7c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000978:	bf00      	nop
 800097a:	37b0      	adds	r7, #176	@ 0xb0
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40004400 	.word	0x40004400
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f8a9 	bl	8000b18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009c6:	f003 ffa3 	bl	8004910 <xTaskGetSchedulerState>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d001      	beq.n	80009d4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009d0:	f004 fb82 	bl	80050d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009e0:	f000 fb8e 	bl	8001100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ffea 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	@ (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f004 fd93 	bl	8005564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fdd1 	bl	80005e4 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a50:	080056bc 	.word	0x080056bc
  ldr r2, =_sbss
 8000a54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a58:	20008738 	.word	0x20008738

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <HAL_Init+0x3c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a9c <HAL_Init+0x3c>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 f93e 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7c:	200f      	movs	r0, #15
 8000a7e:	f000 f80f 	bl	8000aa0 <HAL_InitTick>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	e001      	b.n	8000a92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a8e:	f7ff fef7 	bl	8000880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <HAL_InitTick+0x6c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d023      	beq.n	8000afc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <HAL_InitTick+0x70>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <HAL_InitTick+0x6c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f949 	bl	8000d62 <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10f      	bne.n	8000af6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d809      	bhi.n	8000af0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f913 	bl	8000d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <HAL_InitTick+0x74>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e007      	b.n	8000b00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e004      	b.n	8000b00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e001      	b.n	8000b00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	200010b0 	.word	0x200010b0

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200010b0 	.word	0x200010b0

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	@ (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	@ 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff3e 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff31 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	e17f      	b.n	800108c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 8171 	beq.w	8001086 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d005      	beq.n	8000dbc <HAL_GPIO_Init+0x40>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d130      	bne.n	8000e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	f003 0201 	and.w	r2, r3, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d118      	bne.n	8000e5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	f003 0201 	and.w	r2, r3, #1
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d017      	beq.n	8000e98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80ac 	beq.w	8001086 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80010ac <HAL_GPIO_Init+0x330>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f32:	4a5e      	ldr	r2, [pc, #376]	@ (80010ac <HAL_GPIO_Init+0x330>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80010ac <HAL_GPIO_Init+0x330>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f46:	4a5a      	ldr	r2, [pc, #360]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f70:	d025      	beq.n	8000fbe <HAL_GPIO_Init+0x242>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4f      	ldr	r2, [pc, #316]	@ (80010b4 <HAL_GPIO_Init+0x338>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d01f      	beq.n	8000fba <HAL_GPIO_Init+0x23e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4e      	ldr	r2, [pc, #312]	@ (80010b8 <HAL_GPIO_Init+0x33c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x23a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4d      	ldr	r2, [pc, #308]	@ (80010bc <HAL_GPIO_Init+0x340>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x236>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80010c0 <HAL_GPIO_Init+0x344>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x232>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4b      	ldr	r2, [pc, #300]	@ (80010c4 <HAL_GPIO_Init+0x348>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x22e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80010c8 <HAL_GPIO_Init+0x34c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x22a>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e00c      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00a      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e008      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e004      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	f002 0203 	and.w	r2, r2, #3
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fd0:	4937      	ldr	r1, [pc, #220]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fde:	4b3b      	ldr	r3, [pc, #236]	@ (80010cc <HAL_GPIO_Init+0x350>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001002:	4a32      	ldr	r2, [pc, #200]	@ (80010cc <HAL_GPIO_Init+0x350>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001008:	4b30      	ldr	r3, [pc, #192]	@ (80010cc <HAL_GPIO_Init+0x350>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800102c:	4a27      	ldr	r2, [pc, #156]	@ (80010cc <HAL_GPIO_Init+0x350>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001032:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <HAL_GPIO_Init+0x350>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001056:	4a1d      	ldr	r2, [pc, #116]	@ (80010cc <HAL_GPIO_Init+0x350>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <HAL_GPIO_Init+0x350>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001080:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <HAL_GPIO_Init+0x350>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3301      	adds	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa22 f303 	lsr.w	r3, r2, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	f47f ae78 	bne.w	8000d8c <HAL_GPIO_Init+0x10>
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000
 80010b4:	48000400 	.word	0x48000400
 80010b8:	48000800 	.word	0x48000800
 80010bc:	48000c00 	.word	0x48000c00
 80010c0:	48001000 	.word	0x48001000
 80010c4:	48001400 	.word	0x48001400
 80010c8:	48001800 	.word	0x48001800
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f806 	bl	8001130 <HAL_GPIO_EXTI_Callback>
  }
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <HAL_PWREx_GetVoltageRange+0x18>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40007000 	.word	0x40007000

08001164 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001172:	d130      	bne.n	80011d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001174:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800117c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001180:	d038      	beq.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800118a:	4a1e      	ldr	r2, [pc, #120]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2232      	movs	r2, #50	@ 0x32
 8001198:	fb02 f303 	mul.w	r3, r2, r3
 800119c:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0c9b      	lsrs	r3, r3, #18
 80011a4:	3301      	adds	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a8:	e002      	b.n	80011b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011bc:	d102      	bne.n	80011c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f2      	bne.n	80011aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d0:	d110      	bne.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e00f      	b.n	80011f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e2:	d007      	beq.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e4:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ec:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40007000 	.word	0x40007000
 8001208:	20000000 	.word	0x20000000
 800120c:	431bde83 	.word	0x431bde83

08001210 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e3ca      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001222:	4b97      	ldr	r3, [pc, #604]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800122c:	4b94      	ldr	r3, [pc, #592]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80e4 	beq.w	800140c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <HAL_RCC_OscConfig+0x4a>
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	f040 808b 	bne.w	8001368 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b01      	cmp	r3, #1
 8001256:	f040 8087 	bne.w	8001368 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800125a:	4b89      	ldr	r3, [pc, #548]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_RCC_OscConfig+0x62>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e3a2      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1a      	ldr	r2, [r3, #32]
 8001276:	4b82      	ldr	r3, [pc, #520]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <HAL_RCC_OscConfig+0x7c>
 8001282:	4b7f      	ldr	r3, [pc, #508]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800128a:	e005      	b.n	8001298 <HAL_RCC_OscConfig+0x88>
 800128c:	4b7c      	ldr	r3, [pc, #496]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 800128e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001298:	4293      	cmp	r3, r2
 800129a:	d223      	bcs.n	80012e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fd55 	bl	8001d50 <RCC_SetFlashLatencyFromMSIRange>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e383      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b0:	4b73      	ldr	r3, [pc, #460]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a72      	ldr	r2, [pc, #456]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b70      	ldr	r3, [pc, #448]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	496d      	ldr	r1, [pc, #436]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	4968      	ldr	r1, [pc, #416]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
 80012e2:	e025      	b.n	8001330 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e4:	4b66      	ldr	r3, [pc, #408]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a65      	ldr	r2, [pc, #404]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b63      	ldr	r3, [pc, #396]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4960      	ldr	r1, [pc, #384]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001302:	4b5f      	ldr	r3, [pc, #380]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	495b      	ldr	r1, [pc, #364]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001312:	4313      	orrs	r3, r2
 8001314:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d109      	bne.n	8001330 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fd15 	bl	8001d50 <RCC_SetFlashLatencyFromMSIRange>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e343      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001330:	f000 fc4a 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b52      	ldr	r3, [pc, #328]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	4950      	ldr	r1, [pc, #320]	@ (8001484 <HAL_RCC_OscConfig+0x274>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	4a4e      	ldr	r2, [pc, #312]	@ (8001488 <HAL_RCC_OscConfig+0x278>)
 800134e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001350:	4b4e      	ldr	r3, [pc, #312]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fba3 	bl	8000aa0 <HAL_InitTick>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d052      	beq.n	800140a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	e327      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d032      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001370:	4b43      	ldr	r3, [pc, #268]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a42      	ldr	r2, [pc, #264]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800137c:	f7ff fbe0 	bl	8000b40 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001384:	f7ff fbdc 	bl	8000b40 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e310      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001396:	4b3a      	ldr	r3, [pc, #232]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a2:	4b37      	ldr	r3, [pc, #220]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a36      	ldr	r2, [pc, #216]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4931      	ldr	r1, [pc, #196]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	492c      	ldr	r1, [pc, #176]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
 80013d4:	e01a      	b.n	800140c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a29      	ldr	r2, [pc, #164]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fbad 	bl	8000b40 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ea:	f7ff fba9 	bl	8000b40 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e2dd      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013fc:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x1da>
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800140a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d074      	beq.n	8001502 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b08      	cmp	r3, #8
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x21a>
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b0c      	cmp	r3, #12
 8001422:	d10e      	bne.n	8001442 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d10b      	bne.n	8001442 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d064      	beq.n	8001500 <HAL_RCC_OscConfig+0x2f0>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d160      	bne.n	8001500 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e2ba      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x24a>
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e026      	b.n	80014a8 <HAL_RCC_OscConfig+0x298>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001462:	d115      	bne.n	8001490 <HAL_RCC_OscConfig+0x280>
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a05      	ldr	r2, [pc, #20]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 800146a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a02      	ldr	r2, [pc, #8]	@ (8001480 <HAL_RCC_OscConfig+0x270>)
 8001476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x298>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	08005664 	.word	0x08005664
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004
 8001490:	4ba0      	ldr	r3, [pc, #640]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a9f      	ldr	r2, [pc, #636]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b9d      	ldr	r3, [pc, #628]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a9c      	ldr	r2, [pc, #624]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb46 	bl	8000b40 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fb42 	bl	8000b40 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e276      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ca:	4b92      	ldr	r3, [pc, #584]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2a8>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb32 	bl	8000b40 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb2e 	bl	8000b40 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e262      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f2:	4b88      	ldr	r3, [pc, #544]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2d0>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d060      	beq.n	80015d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2b04      	cmp	r3, #4
 8001512:	d005      	beq.n	8001520 <HAL_RCC_OscConfig+0x310>
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b0c      	cmp	r3, #12
 8001518:	d119      	bne.n	800154e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d116      	bne.n	800154e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001520:	4b7c      	ldr	r3, [pc, #496]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x328>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e23f      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b76      	ldr	r3, [pc, #472]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	4973      	ldr	r1, [pc, #460]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154c:	e040      	b.n	80015d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d023      	beq.n	800159e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001556:	4b6f      	ldr	r3, [pc, #444]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6e      	ldr	r2, [pc, #440]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff faed 	bl	8000b40 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fae9 	bl	8000b40 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e21d      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800157c:	4b65      	ldr	r3, [pc, #404]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b62      	ldr	r3, [pc, #392]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	495f      	ldr	r1, [pc, #380]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
 800159c:	e018      	b.n	80015d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	4b5d      	ldr	r3, [pc, #372]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80015a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fac9 	bl	8000b40 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fac5 	bl	8000b40 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1f9      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c4:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d03c      	beq.n	8001656 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d01c      	beq.n	800161e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff faa4 	bl	8000b40 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff faa0 	bl	8000b40 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1d4      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800160e:	4b41      	ldr	r3, [pc, #260]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0ef      	beq.n	80015fc <HAL_RCC_OscConfig+0x3ec>
 800161c:	e01b      	b.n	8001656 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161e:	4b3d      	ldr	r3, [pc, #244]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001624:	4a3b      	ldr	r2, [pc, #236]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162e:	f7ff fa87 	bl	8000b40 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001636:	f7ff fa83 	bl	8000b40 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1b7      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001648:	4b32      	ldr	r3, [pc, #200]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 800164a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ef      	bne.n	8001636 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80a6 	beq.w	80017b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001668:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10d      	bne.n	8001690 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001678:	4a26      	ldr	r2, [pc, #152]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 800167a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001680:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168c:	2301      	movs	r3, #1
 800168e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <HAL_RCC_OscConfig+0x508>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d118      	bne.n	80016ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <HAL_RCC_OscConfig+0x508>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001718 <HAL_RCC_OscConfig+0x508>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a8:	f7ff fa4a 	bl	8000b40 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b0:	f7ff fa46 	bl	8000b40 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e17a      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_RCC_OscConfig+0x508>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4d8>
 80016d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016e6:	e029      	b.n	800173c <HAL_RCC_OscConfig+0x52c>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d115      	bne.n	800171c <HAL_RCC_OscConfig+0x50c>
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001706:	4a03      	ldr	r2, [pc, #12]	@ (8001714 <HAL_RCC_OscConfig+0x504>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001710:	e014      	b.n	800173c <HAL_RCC_OscConfig+0x52c>
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40007000 	.word	0x40007000
 800171c:	4b9c      	ldr	r3, [pc, #624]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001722:	4a9b      	ldr	r2, [pc, #620]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800172c:	4b98      	ldr	r3, [pc, #608]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 800172e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001732:	4a97      	ldr	r2, [pc, #604]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001734:	f023 0304 	bic.w	r3, r3, #4
 8001738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d016      	beq.n	8001772 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff f9fc 	bl	8000b40 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff f9f8 	bl	8000b40 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e12a      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	4b8b      	ldr	r3, [pc, #556]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ed      	beq.n	800174c <HAL_RCC_OscConfig+0x53c>
 8001770:	e015      	b.n	800179e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff f9e5 	bl	8000b40 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff f9e1 	bl	8000b40 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e113      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001790:	4b7f      	ldr	r3, [pc, #508]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ed      	bne.n	800177a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179e:	7ffb      	ldrb	r3, [r7, #31]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a8:	4a79      	ldr	r2, [pc, #484]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 80017aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80fe 	beq.w	80019b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017be:	2b02      	cmp	r3, #2
 80017c0:	f040 80d0 	bne.w	8001964 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017c4:	4b72      	ldr	r3, [pc, #456]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d130      	bne.n	800183a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	3b01      	subs	r3, #1
 80017e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d127      	bne.n	800183a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d11f      	bne.n	800183a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001804:	2a07      	cmp	r2, #7
 8001806:	bf14      	ite	ne
 8001808:	2201      	movne	r2, #1
 800180a:	2200      	moveq	r2, #0
 800180c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800180e:	4293      	cmp	r3, r2
 8001810:	d113      	bne.n	800183a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	3b01      	subs	r3, #1
 8001820:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d109      	bne.n	800183a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	3b01      	subs	r3, #1
 8001834:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d06e      	beq.n	8001918 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	d069      	beq.n	8001914 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001840:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800184c:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0ad      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800185c:	4b4c      	ldr	r3, [pc, #304]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a4b      	ldr	r2, [pc, #300]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001866:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001868:	f7ff f96a 	bl	8000b40 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff f966 	bl	8000b40 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e09a      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001882:	4b43      	ldr	r3, [pc, #268]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188e:	4b40      	ldr	r3, [pc, #256]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	4b40      	ldr	r3, [pc, #256]	@ (8001994 <HAL_RCC_OscConfig+0x784>)
 8001894:	4013      	ands	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800189e:	3a01      	subs	r2, #1
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018a8:	0212      	lsls	r2, r2, #8
 80018aa:	4311      	orrs	r1, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018b0:	0852      	lsrs	r2, r2, #1
 80018b2:	3a01      	subs	r2, #1
 80018b4:	0552      	lsls	r2, r2, #21
 80018b6:	4311      	orrs	r1, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018bc:	0852      	lsrs	r2, r2, #1
 80018be:	3a01      	subs	r2, #1
 80018c0:	0652      	lsls	r2, r2, #25
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018c8:	0912      	lsrs	r2, r2, #4
 80018ca:	0452      	lsls	r2, r2, #17
 80018cc:	430a      	orrs	r2, r1
 80018ce:	4930      	ldr	r1, [pc, #192]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ec:	f7ff f928 	bl	8000b40 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f924 	bl	8000b40 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e058      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001912:	e050      	b.n	80019b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e04f      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001918:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d148      	bne.n	80019b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001924:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001930:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a16      	ldr	r2, [pc, #88]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800193c:	f7ff f900 	bl	8000b40 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f8fc 	bl	8000b40 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e030      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x734>
 8001962:	e028      	b.n	80019b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d023      	beq.n	80019b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a08      	ldr	r2, [pc, #32]	@ (8001990 <HAL_RCC_OscConfig+0x780>)
 8001970:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001976:	f7ff f8e3 	bl	8000b40 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197c:	e00c      	b.n	8001998 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff f8df 	bl	8000b40 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d905      	bls.n	8001998 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e013      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
 8001990:	40021000 	.word	0x40021000
 8001994:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_RCC_OscConfig+0x7b0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ec      	bne.n	800197e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_RCC_OscConfig+0x7b0>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4905      	ldr	r1, [pc, #20]	@ (80019c0 <HAL_RCC_OscConfig+0x7b0>)
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_RCC_OscConfig+0x7b4>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
 80019b0:	e001      	b.n	80019b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	feeefffc 	.word	0xfeeefffc

080019c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0e7      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b75      	ldr	r3, [pc, #468]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b72      	ldr	r3, [pc, #456]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	4970      	ldr	r1, [pc, #448]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b6e      	ldr	r3, [pc, #440]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0cf      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b66      	ldr	r3, [pc, #408]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d908      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b63      	ldr	r3, [pc, #396]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4960      	ldr	r1, [pc, #384]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d04c      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d121      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0a6      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a66:	4b54      	ldr	r3, [pc, #336]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d115      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e09a      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e08e      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e086      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a9e:	4b46      	ldr	r3, [pc, #280]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 0203 	bic.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4943      	ldr	r1, [pc, #268]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f846 	bl	8000b40 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7ff f842 	bl	8000b40 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e06e      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1eb      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d010      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b31      	ldr	r3, [pc, #196]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d208      	bcs.n	8001b0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	492b      	ldr	r1, [pc, #172]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0e:	4b29      	ldr	r3, [pc, #164]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d210      	bcs.n	8001b3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1c:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 0207 	bic.w	r2, r3, #7
 8001b24:	4923      	ldr	r1, [pc, #140]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2c:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e036      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4918      	ldr	r1, [pc, #96]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4910      	ldr	r1, [pc, #64]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b7c:	f000 f824 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	490b      	ldr	r1, [pc, #44]	@ (8001bbc <HAL_RCC_ClockConfig+0x1f4>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe ff7d 	bl	8000aa0 <HAL_InitTick>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001baa:	7afb      	ldrb	r3, [r7, #11]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08005664 	.word	0x08005664
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be0:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x34>
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d121      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d11e      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bfc:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c08:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e005      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c24:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10d      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c40:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	e004      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d134      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c56:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d003      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0xac>
 8001c6c:	e005      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c70:	617b      	str	r3, [r7, #20]
      break;
 8001c72:	e005      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c76:	617b      	str	r3, [r7, #20]
      break;
 8001c78:	e002      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	617b      	str	r3, [r7, #20]
      break;
 8001c7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	fb03 f202 	mul.w	r2, r3, r2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	0e5b      	lsrs	r3, r3, #25
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	0800567c 	.word	0x0800567c
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4904      	ldr	r1, [pc, #16]	@ (8001d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08005674 	.word	0x08005674

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d28:	f7ff ffda 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0adb      	lsrs	r3, r3, #11
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4904      	ldr	r1, [pc, #16]	@ (8001d4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08005674 	.word	0x08005674

08001d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d68:	f7ff f9ee 	bl	8001148 <HAL_PWREx_GetVoltageRange>
 8001d6c:	6178      	str	r0, [r7, #20]
 8001d6e:	e014      	b.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	4b25      	ldr	r3, [pc, #148]	@ (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	4a24      	ldr	r2, [pc, #144]	@ (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d7c:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d88:	f7ff f9de 	bl	8001148 <HAL_PWREx_GetVoltageRange>
 8001d8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	4a1d      	ldr	r2, [pc, #116]	@ (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da0:	d10b      	bne.n	8001dba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b80      	cmp	r3, #128	@ 0x80
 8001da6:	d919      	bls.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dac:	d902      	bls.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dae:	2302      	movs	r3, #2
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	e013      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db4:	2301      	movs	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	e010      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b80      	cmp	r3, #128	@ 0x80
 8001dbe:	d902      	bls.n	8001dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e00a      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b80      	cmp	r3, #128	@ 0x80
 8001dca:	d102      	bne.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dcc:	2302      	movs	r3, #2
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e004      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b70      	cmp	r3, #112	@ 0x70
 8001dd6:	d101      	bne.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 0207 	bic.w	r2, r3, #7
 8001de4:	4909      	ldr	r1, [pc, #36]	@ (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dec:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40022000 	.word	0x40022000

08001e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e18:	2300      	movs	r3, #0
 8001e1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d041      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e34:	d02a      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e3a:	d824      	bhi.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e40:	d008      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e46:	d81e      	bhi.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e50:	d010      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e52:	e018      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e54:	4b86      	ldr	r3, [pc, #536]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a85      	ldr	r2, [pc, #532]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e60:	e015      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fabb 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e72:	e00c      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3320      	adds	r3, #32
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fba6 	bl	80025cc <RCCEx_PLLSAI2_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e84:	e003      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	74fb      	strb	r3, [r7, #19]
      break;
 8001e8a:	e000      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e8e:	7cfb      	ldrb	r3, [r7, #19]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e94:	4b76      	ldr	r3, [pc, #472]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ea2:	4973      	ldr	r1, [pc, #460]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eaa:	e001      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eac:	7cfb      	ldrb	r3, [r7, #19]
 8001eae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d041      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ec0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ec4:	d02a      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ec6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001eca:	d824      	bhi.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ecc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ed0:	d008      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ed2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ed6:	d81e      	bhi.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ee0:	d010      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ee2:	e018      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ee4:	4b62      	ldr	r3, [pc, #392]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a61      	ldr	r2, [pc, #388]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef0:	e015      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fa73 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8001efe:	4603      	mov	r3, r0
 8001f00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f02:	e00c      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3320      	adds	r3, #32
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fb5e 	bl	80025cc <RCCEx_PLLSAI2_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f14:	e003      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	74fb      	strb	r3, [r7, #19]
      break;
 8001f1a:	e000      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f1e:	7cfb      	ldrb	r3, [r7, #19]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10b      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f24:	4b52      	ldr	r3, [pc, #328]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f32:	494f      	ldr	r1, [pc, #316]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f3a:	e001      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a0 	beq.w	800208e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f62:	2300      	movs	r3, #0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00d      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4b41      	ldr	r3, [pc, #260]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	4a40      	ldr	r2, [pc, #256]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f74:	4b3e      	ldr	r3, [pc, #248]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f80:	2301      	movs	r3, #1
 8001f82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f84:	4b3b      	ldr	r3, [pc, #236]	@ (8002074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a3a      	ldr	r2, [pc, #232]	@ (8002074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f90:	f7fe fdd6 	bl	8000b40 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f96:	e009      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7fe fdd2 	bl	8000b40 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d902      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	74fb      	strb	r3, [r7, #19]
        break;
 8001faa:	e005      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fac:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ef      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d15c      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01f      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d019      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fdc:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fe6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fe8:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fee:	4a20      	ldr	r2, [pc, #128]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7fe fd91 	bl	8000b40 <HAL_GetTick>
 800201e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002020:	e00b      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7fe fd8d 	bl	8000b40 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d902      	bls.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	74fb      	strb	r3, [r7, #19]
            break;
 8002038:	e006      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203a:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ec      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204e:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002054:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800205e:	4904      	ldr	r1, [pc, #16]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002066:	e009      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	74bb      	strb	r3, [r7, #18]
 800206c:	e006      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207c:	7c7b      	ldrb	r3, [r7, #17]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b9e      	ldr	r3, [pc, #632]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	4a9d      	ldr	r2, [pc, #628]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800208c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800209a:	4b98      	ldr	r3, [pc, #608]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a0:	f023 0203 	bic.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a8:	4994      	ldr	r1, [pc, #592]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020bc:	4b8f      	ldr	r3, [pc, #572]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c2:	f023 020c 	bic.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ca:	498c      	ldr	r1, [pc, #560]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020de:	4b87      	ldr	r3, [pc, #540]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	4983      	ldr	r1, [pc, #524]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002100:	4b7e      	ldr	r3, [pc, #504]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	497b      	ldr	r1, [pc, #492]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002122:	4b76      	ldr	r3, [pc, #472]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002128:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002130:	4972      	ldr	r1, [pc, #456]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002144:	4b6d      	ldr	r3, [pc, #436]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	496a      	ldr	r1, [pc, #424]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002166:	4b65      	ldr	r3, [pc, #404]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	4961      	ldr	r1, [pc, #388]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002188:	4b5c      	ldr	r3, [pc, #368]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002196:	4959      	ldr	r1, [pc, #356]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021aa:	4b54      	ldr	r3, [pc, #336]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b8:	4950      	ldr	r1, [pc, #320]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021cc:	4b4b      	ldr	r3, [pc, #300]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021da:	4948      	ldr	r1, [pc, #288]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ee:	4b43      	ldr	r3, [pc, #268]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	493f      	ldr	r1, [pc, #252]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d028      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002210:	4b3a      	ldr	r3, [pc, #232]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800221e:	4937      	ldr	r1, [pc, #220]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800222a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800222e:	d106      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	4b32      	ldr	r3, [pc, #200]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a31      	ldr	r2, [pc, #196]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800223a:	60d3      	str	r3, [r2, #12]
 800223c:	e011      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002242:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002246:	d10c      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3304      	adds	r3, #4
 800224c:	2101      	movs	r1, #1
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f8c8 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800225e:	7cfb      	ldrb	r3, [r7, #19]
 8002260:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d028      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800226e:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002274:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227c:	491f      	ldr	r1, [pc, #124]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002288:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800228c:	d106      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228e:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4a1a      	ldr	r2, [pc, #104]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002298:	60d3      	str	r3, [r2, #12]
 800229a:	e011      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2101      	movs	r1, #1
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f899 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02b      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022da:	4908      	ldr	r1, [pc, #32]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ea:	d109      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b03      	ldr	r3, [pc, #12]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a02      	ldr	r2, [pc, #8]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
 80022f8:	e014      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002304:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002308:	d10c      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f867 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d02f      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002330:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800233e:	4928      	ldr	r1, [pc, #160]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800234a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800234e:	d10d      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	2102      	movs	r1, #2
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f844 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d014      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002366:	7cfb      	ldrb	r3, [r7, #19]
 8002368:	74bb      	strb	r3, [r7, #18]
 800236a:	e011      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002374:	d10c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3320      	adds	r3, #32
 800237a:	2102      	movs	r1, #2
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f925 	bl	80025cc <RCCEx_PLLSAI2_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800239c:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023aa:	490d      	ldr	r1, [pc, #52]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023be:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023ce:	4904      	ldr	r1, [pc, #16]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000

080023e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023f2:	4b75      	ldr	r3, [pc, #468]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d018      	beq.n	8002430 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023fe:	4b72      	ldr	r3, [pc, #456]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d10d      	bne.n	800242a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
       ||
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002416:	4b6c      	ldr	r3, [pc, #432]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
       ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d047      	beq.n	80024ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	e044      	b.n	80024ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d018      	beq.n	800246a <RCCEx_PLLSAI1_Config+0x86>
 8002438:	2b03      	cmp	r3, #3
 800243a:	d825      	bhi.n	8002488 <RCCEx_PLLSAI1_Config+0xa4>
 800243c:	2b01      	cmp	r3, #1
 800243e:	d002      	beq.n	8002446 <RCCEx_PLLSAI1_Config+0x62>
 8002440:	2b02      	cmp	r3, #2
 8002442:	d009      	beq.n	8002458 <RCCEx_PLLSAI1_Config+0x74>
 8002444:	e020      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002446:	4b60      	ldr	r3, [pc, #384]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d11d      	bne.n	800248e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002456:	e01a      	b.n	800248e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002458:	4b5b      	ldr	r3, [pc, #364]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d116      	bne.n	8002492 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e013      	b.n	8002492 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800246a:	4b57      	ldr	r3, [pc, #348]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002476:	4b54      	ldr	r3, [pc, #336]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002486:	e006      	b.n	8002496 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e004      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800248e:	bf00      	nop
 8002490:	e002      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002492:	bf00      	nop
 8002494:	e000      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002496:	bf00      	nop
    }

    if(status == HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800249e:	4b4a      	ldr	r3, [pc, #296]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	430b      	orrs	r3, r1
 80024b4:	4944      	ldr	r1, [pc, #272]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d17d      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024c0:	4b41      	ldr	r3, [pc, #260]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a40      	ldr	r2, [pc, #256]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024cc:	f7fe fb38 	bl	8000b40 <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d2:	e009      	b.n	80024e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024d4:	f7fe fb34 	bl	8000b40 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d902      	bls.n	80024e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	73fb      	strb	r3, [r7, #15]
        break;
 80024e6:	e005      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e8:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ef      	bne.n	80024d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d160      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d111      	bne.n	8002524 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002500:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6892      	ldr	r2, [r2, #8]
 8002510:	0211      	lsls	r1, r2, #8
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68d2      	ldr	r2, [r2, #12]
 8002516:	0912      	lsrs	r2, r2, #4
 8002518:	0452      	lsls	r2, r2, #17
 800251a:	430a      	orrs	r2, r1
 800251c:	492a      	ldr	r1, [pc, #168]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	610b      	str	r3, [r1, #16]
 8002522:	e027      	b.n	8002574 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d112      	bne.n	8002550 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800252a:	4b27      	ldr	r3, [pc, #156]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002532:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6892      	ldr	r2, [r2, #8]
 800253a:	0211      	lsls	r1, r2, #8
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6912      	ldr	r2, [r2, #16]
 8002540:	0852      	lsrs	r2, r2, #1
 8002542:	3a01      	subs	r2, #1
 8002544:	0552      	lsls	r2, r2, #21
 8002546:	430a      	orrs	r2, r1
 8002548:	491f      	ldr	r1, [pc, #124]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	610b      	str	r3, [r1, #16]
 800254e:	e011      	b.n	8002574 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002550:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002558:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6892      	ldr	r2, [r2, #8]
 8002560:	0211      	lsls	r1, r2, #8
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6952      	ldr	r2, [r2, #20]
 8002566:	0852      	lsrs	r2, r2, #1
 8002568:	3a01      	subs	r2, #1
 800256a:	0652      	lsls	r2, r2, #25
 800256c:	430a      	orrs	r2, r1
 800256e:	4916      	ldr	r1, [pc, #88]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002574:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a13      	ldr	r2, [pc, #76]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800257e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7fe fade 	bl	8000b40 <HAL_GetTick>
 8002584:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002586:	e009      	b.n	800259c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002588:	f7fe fada 	bl	8000b40 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d902      	bls.n	800259c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	73fb      	strb	r3, [r7, #15]
          break;
 800259a:	e005      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ef      	beq.n	8002588 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	4904      	ldr	r1, [pc, #16]	@ (80025c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000

080025cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025da:	4b6a      	ldr	r3, [pc, #424]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d018      	beq.n	8002618 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025e6:	4b67      	ldr	r3, [pc, #412]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0203 	and.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10d      	bne.n	8002612 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
       ||
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025fe:	4b61      	ldr	r3, [pc, #388]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
       ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d047      	beq.n	80026a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e044      	b.n	80026a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d018      	beq.n	8002652 <RCCEx_PLLSAI2_Config+0x86>
 8002620:	2b03      	cmp	r3, #3
 8002622:	d825      	bhi.n	8002670 <RCCEx_PLLSAI2_Config+0xa4>
 8002624:	2b01      	cmp	r3, #1
 8002626:	d002      	beq.n	800262e <RCCEx_PLLSAI2_Config+0x62>
 8002628:	2b02      	cmp	r3, #2
 800262a:	d009      	beq.n	8002640 <RCCEx_PLLSAI2_Config+0x74>
 800262c:	e020      	b.n	8002670 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800262e:	4b55      	ldr	r3, [pc, #340]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d11d      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263e:	e01a      	b.n	8002676 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002640:	4b50      	ldr	r3, [pc, #320]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002648:	2b00      	cmp	r3, #0
 800264a:	d116      	bne.n	800267a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002650:	e013      	b.n	800267a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002652:	4b4c      	ldr	r3, [pc, #304]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800265e:	4b49      	ldr	r3, [pc, #292]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800266e:	e006      	b.n	800267e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      break;
 8002674:	e004      	b.n	8002680 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002676:	bf00      	nop
 8002678:	e002      	b.n	8002680 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800267a:	bf00      	nop
 800267c:	e000      	b.n	8002680 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800267e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002686:	4b3f      	ldr	r3, [pc, #252]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6819      	ldr	r1, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	430b      	orrs	r3, r1
 800269c:	4939      	ldr	r1, [pc, #228]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d167      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026a8:	4b36      	ldr	r3, [pc, #216]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a35      	ldr	r2, [pc, #212]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fa44 	bl	8000b40 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026ba:	e009      	b.n	80026d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026bc:	f7fe fa40 	bl	8000b40 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d902      	bls.n	80026d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	73fb      	strb	r3, [r7, #15]
        break;
 80026ce:	e005      	b.n	80026dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ef      	bne.n	80026bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d14a      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d111      	bne.n	800270c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026e8:	4b26      	ldr	r3, [pc, #152]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	0211      	lsls	r1, r2, #8
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	0912      	lsrs	r2, r2, #4
 8002700:	0452      	lsls	r2, r2, #17
 8002702:	430a      	orrs	r2, r1
 8002704:	491f      	ldr	r1, [pc, #124]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	614b      	str	r3, [r1, #20]
 800270a:	e011      	b.n	8002730 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800270c:	4b1d      	ldr	r3, [pc, #116]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002714:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6892      	ldr	r2, [r2, #8]
 800271c:	0211      	lsls	r1, r2, #8
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6912      	ldr	r2, [r2, #16]
 8002722:	0852      	lsrs	r2, r2, #1
 8002724:	3a01      	subs	r2, #1
 8002726:	0652      	lsls	r2, r2, #25
 8002728:	430a      	orrs	r2, r1
 800272a:	4916      	ldr	r1, [pc, #88]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	4313      	orrs	r3, r2
 800272e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002730:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a13      	ldr	r2, [pc, #76]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fa00 	bl	8000b40 <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002742:	e009      	b.n	8002758 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002744:	f7fe f9fc 	bl	8000b40 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	73fb      	strb	r3, [r7, #15]
          break;
 8002756:	e005      	b.n	8002764 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002758:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800276a:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4904      	ldr	r1, [pc, #16]	@ (8002784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002774:	4313      	orrs	r3, r2
 8002776:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e040      	b.n	800281c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f890 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	@ 0x24
 80027b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fb6a 	bl	8002ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8af 	bl	8002938 <UART_SetConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e01b      	b.n	800281c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fbe9 	bl	8002fec <UART_CheckIdleState>
 800281a:	4603      	mov	r3, r0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002838:	2b20      	cmp	r3, #32
 800283a:	d177      	bne.n	800292c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_UART_Transmit+0x24>
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e070      	b.n	800292e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2221      	movs	r2, #33	@ 0x21
 8002858:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800285a:	f7fe f971 	bl	8000b40 <HAL_GetTick>
 800285e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002878:	d108      	bne.n	800288c <HAL_UART_Transmit+0x68>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	e003      	b.n	8002894 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002894:	e02f      	b.n	80028f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	2180      	movs	r1, #128	@ 0x80
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fc4b 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e03b      	b.n	800292e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	881a      	ldrh	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028c8:	b292      	uxth	r2, r2
 80028ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	3302      	adds	r3, #2
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	e007      	b.n	80028e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1c9      	bne.n	8002896 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	@ 0x40
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fc15 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e005      	b.n	800292e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293c:	b08a      	sub	sp, #40	@ 0x28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	431a      	orrs	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	4313      	orrs	r3, r2
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4ba4      	ldr	r3, [pc, #656]	@ (8002bf8 <UART_SetConfig+0x2c0>)
 8002968:	4013      	ands	r3, r2
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002970:	430b      	orrs	r3, r1
 8002972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a99      	ldr	r2, [pc, #612]	@ (8002bfc <UART_SetConfig+0x2c4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a0:	4313      	orrs	r3, r2
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a90      	ldr	r2, [pc, #576]	@ (8002c00 <UART_SetConfig+0x2c8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d126      	bne.n	8002a10 <UART_SetConfig+0xd8>
 80029c2:	4b90      	ldr	r3, [pc, #576]	@ (8002c04 <UART_SetConfig+0x2cc>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d81b      	bhi.n	8002a08 <UART_SetConfig+0xd0>
 80029d0:	a201      	add	r2, pc, #4	@ (adr r2, 80029d8 <UART_SetConfig+0xa0>)
 80029d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d6:	bf00      	nop
 80029d8:	080029e9 	.word	0x080029e9
 80029dc:	080029f9 	.word	0x080029f9
 80029e0:	080029f1 	.word	0x080029f1
 80029e4:	08002a01 	.word	0x08002a01
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ee:	e116      	b.n	8002c1e <UART_SetConfig+0x2e6>
 80029f0:	2302      	movs	r3, #2
 80029f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f6:	e112      	b.n	8002c1e <UART_SetConfig+0x2e6>
 80029f8:	2304      	movs	r3, #4
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fe:	e10e      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a00:	2308      	movs	r3, #8
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a06:	e10a      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a08:	2310      	movs	r3, #16
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0e:	e106      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7c      	ldr	r2, [pc, #496]	@ (8002c08 <UART_SetConfig+0x2d0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d138      	bne.n	8002a8c <UART_SetConfig+0x154>
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d82d      	bhi.n	8002a84 <UART_SetConfig+0x14c>
 8002a28:	a201      	add	r2, pc, #4	@ (adr r2, 8002a30 <UART_SetConfig+0xf8>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a65 	.word	0x08002a65
 8002a34:	08002a85 	.word	0x08002a85
 8002a38:	08002a85 	.word	0x08002a85
 8002a3c:	08002a85 	.word	0x08002a85
 8002a40:	08002a75 	.word	0x08002a75
 8002a44:	08002a85 	.word	0x08002a85
 8002a48:	08002a85 	.word	0x08002a85
 8002a4c:	08002a85 	.word	0x08002a85
 8002a50:	08002a6d 	.word	0x08002a6d
 8002a54:	08002a85 	.word	0x08002a85
 8002a58:	08002a85 	.word	0x08002a85
 8002a5c:	08002a85 	.word	0x08002a85
 8002a60:	08002a7d 	.word	0x08002a7d
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a6a:	e0d8      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a72:	e0d4      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a74:	2304      	movs	r3, #4
 8002a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a7a:	e0d0      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a82:	e0cc      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a84:	2310      	movs	r3, #16
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8a:	e0c8      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5e      	ldr	r2, [pc, #376]	@ (8002c0c <UART_SetConfig+0x2d4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d125      	bne.n	8002ae2 <UART_SetConfig+0x1aa>
 8002a96:	4b5b      	ldr	r3, [pc, #364]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002aa0:	2b30      	cmp	r3, #48	@ 0x30
 8002aa2:	d016      	beq.n	8002ad2 <UART_SetConfig+0x19a>
 8002aa4:	2b30      	cmp	r3, #48	@ 0x30
 8002aa6:	d818      	bhi.n	8002ada <UART_SetConfig+0x1a2>
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d00a      	beq.n	8002ac2 <UART_SetConfig+0x18a>
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d814      	bhi.n	8002ada <UART_SetConfig+0x1a2>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <UART_SetConfig+0x182>
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d008      	beq.n	8002aca <UART_SetConfig+0x192>
 8002ab8:	e00f      	b.n	8002ada <UART_SetConfig+0x1a2>
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac0:	e0ad      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac8:	e0a9      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002aca:	2304      	movs	r3, #4
 8002acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad0:	e0a5      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad8:	e0a1      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002ada:	2310      	movs	r3, #16
 8002adc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae0:	e09d      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8002c10 <UART_SetConfig+0x2d8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d125      	bne.n	8002b38 <UART_SetConfig+0x200>
 8002aec:	4b45      	ldr	r3, [pc, #276]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002af6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002af8:	d016      	beq.n	8002b28 <UART_SetConfig+0x1f0>
 8002afa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002afc:	d818      	bhi.n	8002b30 <UART_SetConfig+0x1f8>
 8002afe:	2b80      	cmp	r3, #128	@ 0x80
 8002b00:	d00a      	beq.n	8002b18 <UART_SetConfig+0x1e0>
 8002b02:	2b80      	cmp	r3, #128	@ 0x80
 8002b04:	d814      	bhi.n	8002b30 <UART_SetConfig+0x1f8>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <UART_SetConfig+0x1d8>
 8002b0a:	2b40      	cmp	r3, #64	@ 0x40
 8002b0c:	d008      	beq.n	8002b20 <UART_SetConfig+0x1e8>
 8002b0e:	e00f      	b.n	8002b30 <UART_SetConfig+0x1f8>
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b16:	e082      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1e:	e07e      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b20:	2304      	movs	r3, #4
 8002b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b26:	e07a      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b28:	2308      	movs	r3, #8
 8002b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b2e:	e076      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b30:	2310      	movs	r3, #16
 8002b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b36:	e072      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a35      	ldr	r2, [pc, #212]	@ (8002c14 <UART_SetConfig+0x2dc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12a      	bne.n	8002b98 <UART_SetConfig+0x260>
 8002b42:	4b30      	ldr	r3, [pc, #192]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b50:	d01a      	beq.n	8002b88 <UART_SetConfig+0x250>
 8002b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b56:	d81b      	bhi.n	8002b90 <UART_SetConfig+0x258>
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b5c:	d00c      	beq.n	8002b78 <UART_SetConfig+0x240>
 8002b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b62:	d815      	bhi.n	8002b90 <UART_SetConfig+0x258>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <UART_SetConfig+0x238>
 8002b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b6c:	d008      	beq.n	8002b80 <UART_SetConfig+0x248>
 8002b6e:	e00f      	b.n	8002b90 <UART_SetConfig+0x258>
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b76:	e052      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b7e:	e04e      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b80:	2304      	movs	r3, #4
 8002b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b86:	e04a      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b88:	2308      	movs	r3, #8
 8002b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b8e:	e046      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b90:	2310      	movs	r3, #16
 8002b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b96:	e042      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a17      	ldr	r2, [pc, #92]	@ (8002bfc <UART_SetConfig+0x2c4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d13a      	bne.n	8002c18 <UART_SetConfig+0x2e0>
 8002ba2:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002bb0:	d01a      	beq.n	8002be8 <UART_SetConfig+0x2b0>
 8002bb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002bb6:	d81b      	bhi.n	8002bf0 <UART_SetConfig+0x2b8>
 8002bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bbc:	d00c      	beq.n	8002bd8 <UART_SetConfig+0x2a0>
 8002bbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bc2:	d815      	bhi.n	8002bf0 <UART_SetConfig+0x2b8>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <UART_SetConfig+0x298>
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bcc:	d008      	beq.n	8002be0 <UART_SetConfig+0x2a8>
 8002bce:	e00f      	b.n	8002bf0 <UART_SetConfig+0x2b8>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd6:	e022      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bde:	e01e      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002be0:	2304      	movs	r3, #4
 8002be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002be6:	e01a      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002be8:	2308      	movs	r3, #8
 8002bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bee:	e016      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bf6:	e012      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002bf8:	efff69f3 	.word	0xefff69f3
 8002bfc:	40008000 	.word	0x40008000
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40004400 	.word	0x40004400
 8002c0c:	40004800 	.word	0x40004800
 8002c10:	40004c00 	.word	0x40004c00
 8002c14:	40005000 	.word	0x40005000
 8002c18:	2310      	movs	r3, #16
 8002c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a9f      	ldr	r2, [pc, #636]	@ (8002ea0 <UART_SetConfig+0x568>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d17a      	bne.n	8002d1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d824      	bhi.n	8002c7a <UART_SetConfig+0x342>
 8002c30:	a201      	add	r2, pc, #4	@ (adr r2, 8002c38 <UART_SetConfig+0x300>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c5d 	.word	0x08002c5d
 8002c3c:	08002c7b 	.word	0x08002c7b
 8002c40:	08002c65 	.word	0x08002c65
 8002c44:	08002c7b 	.word	0x08002c7b
 8002c48:	08002c6b 	.word	0x08002c6b
 8002c4c:	08002c7b 	.word	0x08002c7b
 8002c50:	08002c7b 	.word	0x08002c7b
 8002c54:	08002c7b 	.word	0x08002c7b
 8002c58:	08002c73 	.word	0x08002c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f7ff f84c 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8002c60:	61f8      	str	r0, [r7, #28]
        break;
 8002c62:	e010      	b.n	8002c86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c64:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea4 <UART_SetConfig+0x56c>)
 8002c66:	61fb      	str	r3, [r7, #28]
        break;
 8002c68:	e00d      	b.n	8002c86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c6a:	f7fe ffad 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8002c6e:	61f8      	str	r0, [r7, #28]
        break;
 8002c70:	e009      	b.n	8002c86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c76:	61fb      	str	r3, [r7, #28]
        break;
 8002c78:	e005      	b.n	8002c86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80fb 	beq.w	8002e84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d305      	bcc.n	8002caa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d903      	bls.n	8002cb2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cb0:	e0e8      	b.n	8002e84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	461c      	mov	r4, r3
 8002cb8:	4615      	mov	r5, r2
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	022b      	lsls	r3, r5, #8
 8002cc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cc8:	0222      	lsls	r2, r4, #8
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	6849      	ldr	r1, [r1, #4]
 8002cce:	0849      	lsrs	r1, r1, #1
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	4688      	mov	r8, r1
 8002cd4:	4681      	mov	r9, r0
 8002cd6:	eb12 0a08 	adds.w	sl, r2, r8
 8002cda:	eb43 0b09 	adc.w	fp, r3, r9
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cec:	4650      	mov	r0, sl
 8002cee:	4659      	mov	r1, fp
 8002cf0:	f7fd fa76 	bl	80001e0 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d02:	d308      	bcc.n	8002d16 <UART_SetConfig+0x3de>
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d0a:	d204      	bcs.n	8002d16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	e0b6      	b.n	8002e84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d1c:	e0b2      	b.n	8002e84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d26:	d15e      	bne.n	8002de6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002d28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d828      	bhi.n	8002d82 <UART_SetConfig+0x44a>
 8002d30:	a201      	add	r2, pc, #4	@ (adr r2, 8002d38 <UART_SetConfig+0x400>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d5d 	.word	0x08002d5d
 8002d3c:	08002d65 	.word	0x08002d65
 8002d40:	08002d6d 	.word	0x08002d6d
 8002d44:	08002d83 	.word	0x08002d83
 8002d48:	08002d73 	.word	0x08002d73
 8002d4c:	08002d83 	.word	0x08002d83
 8002d50:	08002d83 	.word	0x08002d83
 8002d54:	08002d83 	.word	0x08002d83
 8002d58:	08002d7b 	.word	0x08002d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d5c:	f7fe ffcc 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8002d60:	61f8      	str	r0, [r7, #28]
        break;
 8002d62:	e014      	b.n	8002d8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d64:	f7fe ffde 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8002d68:	61f8      	str	r0, [r7, #28]
        break;
 8002d6a:	e010      	b.n	8002d8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea4 <UART_SetConfig+0x56c>)
 8002d6e:	61fb      	str	r3, [r7, #28]
        break;
 8002d70:	e00d      	b.n	8002d8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d72:	f7fe ff29 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8002d76:	61f8      	str	r0, [r7, #28]
        break;
 8002d78:	e009      	b.n	8002d8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d7e:	61fb      	str	r3, [r7, #28]
        break;
 8002d80:	e005      	b.n	8002d8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d077      	beq.n	8002e84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005a      	lsls	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	441a      	add	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b0f      	cmp	r3, #15
 8002dae:	d916      	bls.n	8002dde <UART_SetConfig+0x4a6>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db6:	d212      	bcs.n	8002dde <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f023 030f 	bic.w	r3, r3, #15
 8002dc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	8afb      	ldrh	r3, [r7, #22]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	8afa      	ldrh	r2, [r7, #22]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	e052      	b.n	8002e84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002de4:	e04e      	b.n	8002e84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002de6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d827      	bhi.n	8002e3e <UART_SetConfig+0x506>
 8002dee:	a201      	add	r2, pc, #4	@ (adr r2, 8002df4 <UART_SetConfig+0x4bc>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e3f 	.word	0x08002e3f
 8002e04:	08002e2f 	.word	0x08002e2f
 8002e08:	08002e3f 	.word	0x08002e3f
 8002e0c:	08002e3f 	.word	0x08002e3f
 8002e10:	08002e3f 	.word	0x08002e3f
 8002e14:	08002e37 	.word	0x08002e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7fe ff6e 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	61f8      	str	r0, [r7, #28]
        break;
 8002e1e:	e014      	b.n	8002e4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e20:	f7fe ff80 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8002e24:	61f8      	str	r0, [r7, #28]
        break;
 8002e26:	e010      	b.n	8002e4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <UART_SetConfig+0x56c>)
 8002e2a:	61fb      	str	r3, [r7, #28]
        break;
 8002e2c:	e00d      	b.n	8002e4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2e:	f7fe fecb 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8002e32:	61f8      	str	r0, [r7, #28]
        break;
 8002e34:	e009      	b.n	8002e4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e3a:	61fb      	str	r3, [r7, #28]
        break;
 8002e3c:	e005      	b.n	8002e4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e48:	bf00      	nop
    }

    if (pclk != 0U)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d019      	beq.n	8002e84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	085a      	lsrs	r2, r3, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	441a      	add	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	d909      	bls.n	8002e7e <UART_SetConfig+0x546>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e70:	d205      	bcs.n	8002e7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	e002      	b.n	8002e84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3728      	adds	r7, #40	@ 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40008000 	.word	0x40008000
 8002ea4:	00f42400 	.word	0x00f42400

08002ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01a      	beq.n	8002fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fa6:	d10a      	bne.n	8002fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b098      	sub	sp, #96	@ 0x60
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ffc:	f7fd fda0 	bl	8000b40 <HAL_GetTick>
 8003000:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b08      	cmp	r3, #8
 800300e:	d12e      	bne.n	800306e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003018:	2200      	movs	r2, #0
 800301a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f88c 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d021      	beq.n	800306e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800303e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003048:	647b      	str	r3, [r7, #68]	@ 0x44
 800304a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800304e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e6      	bne.n	800302a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e062      	b.n	8003134 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b04      	cmp	r3, #4
 800307a:	d149      	bne.n	8003110 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800307c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003084:	2200      	movs	r2, #0
 8003086:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f856 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03c      	beq.n	8003110 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	623b      	str	r3, [r7, #32]
   return(result);
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e6      	bne.n	8003096 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3308      	adds	r3, #8
 80030ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3308      	adds	r3, #8
 80030e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030e8:	61fa      	str	r2, [r7, #28]
 80030ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	69b9      	ldr	r1, [r7, #24]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	617b      	str	r3, [r7, #20]
   return(result);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e5      	bne.n	80030c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e011      	b.n	8003134 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3758      	adds	r7, #88	@ 0x58
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314c:	e04f      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d04b      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7fd fcf3 	bl	8000b40 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <UART_WaitOnFlagUntilTimeout+0x30>
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e04e      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d037      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b80      	cmp	r3, #128	@ 0x80
 8003182:	d034      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b40      	cmp	r3, #64	@ 0x40
 8003188:	d031      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b08      	cmp	r3, #8
 8003196:	d110      	bne.n	80031ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2208      	movs	r2, #8
 800319e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f838 	bl	8003216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2208      	movs	r2, #8
 80031aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e029      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031c8:	d111      	bne.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f81e 	bl	8003216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e00f      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	429a      	cmp	r2, r3
 800320a:	d0a0      	beq.n	800314e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003216:	b480      	push	{r7}
 8003218:	b095      	sub	sp, #84	@ 0x54
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800323c:	643b      	str	r3, [r7, #64]	@ 0x40
 800323e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800324a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e6      	bne.n	800321e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3308      	adds	r3, #8
 8003256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	e853 3f00 	ldrex	r3, [r3]
 800325e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3308      	adds	r3, #8
 800326e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003278:	e841 2300 	strex	r3, r2, [r1]
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e5      	bne.n	8003250 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	2b01      	cmp	r3, #1
 800328a:	d118      	bne.n	80032be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	60bb      	str	r3, [r7, #8]
   return(result);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f023 0310 	bic.w	r3, r3, #16
 80032a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	6979      	ldr	r1, [r7, #20]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	613b      	str	r3, [r7, #16]
   return(result);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e6      	bne.n	800328c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80032d2:	bf00      	nop
 80032d4:	3754      	adds	r7, #84	@ 0x54
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032f0:	2b84      	cmp	r3, #132	@ 0x84
 80032f2:	d005      	beq.n	8003300 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	3303      	adds	r3, #3
 80032fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003300:	68fb      	ldr	r3, [r7, #12]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003312:	f000 fef3 	bl	80040fc <vTaskStartScheduler>
  
  return osOK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}

0800331c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800331c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331e:	b089      	sub	sp, #36	@ 0x24
 8003320:	af04      	add	r7, sp, #16
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d020      	beq.n	8003370 <osThreadCreate+0x54>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01c      	beq.n	8003370 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685c      	ldr	r4, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691e      	ldr	r6, [r3, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ffc8 	bl	80032de <makeFreeRtosPriority>
 800334e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003358:	9202      	str	r2, [sp, #8]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	9100      	str	r1, [sp, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	4632      	mov	r2, r6
 8003362:	4629      	mov	r1, r5
 8003364:	4620      	mov	r0, r4
 8003366:	f000 fcfb 	bl	8003d60 <xTaskCreateStatic>
 800336a:	4603      	mov	r3, r0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	e01c      	b.n	80033aa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685c      	ldr	r4, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800337c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ffaa 	bl	80032de <makeFreeRtosPriority>
 800338a:	4602      	mov	r2, r0
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	9200      	str	r2, [sp, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4632      	mov	r2, r6
 8003398:	4629      	mov	r1, r5
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fd40 	bl	8003e20 <xTaskCreate>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033aa:	68fb      	ldr	r3, [r7, #12]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033b4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <osDelay+0x16>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	e000      	b.n	80033cc <osDelay+0x18>
 80033ca:	2301      	movs	r3, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fe5f 	bl	8004090 <vTaskDelay>
  
  return osOK;
 80033d2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f103 0208 	add.w	r2, r3, #8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f04f 32ff 	mov.w	r2, #4294967295
 80033f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f103 0208 	add.w	r2, r3, #8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f103 0208 	add.w	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	601a      	str	r2, [r3, #0]
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d103      	bne.n	800349e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e00c      	b.n	80034b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3308      	adds	r3, #8
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e002      	b.n	80034ac <vListInsert+0x2e>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d2f6      	bcs.n	80034a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6892      	ldr	r2, [r2, #8]
 8003506:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6852      	ldr	r2, [r2, #4]
 8003510:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	d103      	bne.n	8003524 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	1e5a      	subs	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003570:	f001 fd22 	bl	8004fb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357c:	68f9      	ldr	r1, [r7, #12]
 800357e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	441a      	add	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a0:	3b01      	subs	r3, #1
 80035a2:	68f9      	ldr	r1, [r7, #12]
 80035a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	441a      	add	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	22ff      	movs	r2, #255	@ 0xff
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	22ff      	movs	r2, #255	@ 0xff
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d114      	bne.n	80035f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01a      	beq.n	8003604 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3310      	adds	r3, #16
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 ffdc 	bl	8004590 <xTaskRemoveFromEventList>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d012      	beq.n	8003604 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <xQueueGenericReset+0xd0>)
 80035e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	e009      	b.n	8003604 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3310      	adds	r3, #16
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fef1 	bl	80033dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3324      	adds	r3, #36	@ 0x24
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff feec 	bl	80033dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003604:	f001 fd0a 	bl	800501c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003608:	2301      	movs	r3, #1
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	e000ed04 	.word	0xe000ed04

08003618 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	@ 0x28
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <xQueueGenericCreate+0x2c>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	613b      	str	r3, [r7, #16]
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3348      	adds	r3, #72	@ 0x48
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fd90 	bl	8005178 <pvPortMalloc>
 8003658:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d011      	beq.n	8003684 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	3348      	adds	r3, #72	@ 0x48
 8003668:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003672:	79fa      	ldrb	r2, [r7, #7]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f805 	bl	800368e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003684:	69bb      	ldr	r3, [r7, #24]
	}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e002      	b.n	80036b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036bc:	2101      	movs	r1, #1
 80036be:	69b8      	ldr	r0, [r7, #24]
 80036c0:	f7ff ff40 	bl	8003544 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	613b      	str	r3, [r7, #16]
}
 80036ee:	bf00      	nop
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d90b      	bls.n	8003714 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	60fb      	str	r3, [r7, #12]
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003714:	2202      	movs	r2, #2
 8003716:	2100      	movs	r1, #0
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff7d 	bl	8003618 <xQueueGenericCreate>
 800371e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800372c:	697b      	ldr	r3, [r7, #20]
	}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	@ 0x38
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003746:	2300      	movs	r3, #0
 8003748:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <xQueueGenericSend+0x34>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <xQueueGenericSend+0x42>
 8003772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <xQueueGenericSend+0x46>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueGenericSend+0x48>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <xQueueGenericSend+0x64>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d103      	bne.n	80037aa <xQueueGenericSend+0x72>
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <xQueueGenericSend+0x76>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <xQueueGenericSend+0x78>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <xQueueGenericSend+0x94>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	623b      	str	r3, [r7, #32]
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037cc:	f001 f8a0 	bl	8004910 <xTaskGetSchedulerState>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <xQueueGenericSend+0xa4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <xQueueGenericSend+0xa8>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <xQueueGenericSend+0xaa>
 80037e0:	2300      	movs	r3, #0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <xQueueGenericSend+0xc6>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	61fb      	str	r3, [r7, #28]
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	e7fd      	b.n	80037fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037fe:	f001 fbdb 	bl	8004fb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <xQueueGenericSend+0xdc>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d129      	bne.n	8003868 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800381a:	f000 f9b7 	bl	8003b8c <prvCopyDataToQueue>
 800381e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d010      	beq.n	800384a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	3324      	adds	r3, #36	@ 0x24
 800382c:	4618      	mov	r0, r3
 800382e:	f000 feaf 	bl	8004590 <xTaskRemoveFromEventList>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003838:	4b3f      	ldr	r3, [pc, #252]	@ (8003938 <xQueueGenericSend+0x200>)
 800383a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	e00a      	b.n	8003860 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800384a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003850:	4b39      	ldr	r3, [pc, #228]	@ (8003938 <xQueueGenericSend+0x200>)
 8003852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003860:	f001 fbdc 	bl	800501c <vPortExitCritical>
				return pdPASS;
 8003864:	2301      	movs	r3, #1
 8003866:	e063      	b.n	8003930 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800386e:	f001 fbd5 	bl	800501c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003872:	2300      	movs	r3, #0
 8003874:	e05c      	b.n	8003930 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fee9 	bl	8004658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003886:	2301      	movs	r3, #1
 8003888:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800388a:	f001 fbc7 	bl	800501c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800388e:	f000 fc97 	bl	80041c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003892:	f001 fb91 	bl	8004fb8 <vPortEnterCritical>
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800389c:	b25b      	sxtb	r3, r3
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d103      	bne.n	80038ac <xQueueGenericSend+0x174>
 80038a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d103      	bne.n	80038c2 <xQueueGenericSend+0x18a>
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038c2:	f001 fbab 	bl	800501c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038c6:	1d3a      	adds	r2, r7, #4
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fed8 	bl	8004684 <xTaskCheckForTimeOut>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d124      	bne.n	8003924 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038dc:	f000 fa28 	bl	8003d30 <prvIsQueueFull>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e8:	3310      	adds	r3, #16
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fe28 	bl	8004544 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038f6:	f000 f9b3 	bl	8003c60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038fa:	f000 fc6f 	bl	80041dc <xTaskResumeAll>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f af7c 	bne.w	80037fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003906:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <xQueueGenericSend+0x200>)
 8003908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	e772      	b.n	80037fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800391a:	f000 f9a1 	bl	8003c60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800391e:	f000 fc5d 	bl	80041dc <xTaskResumeAll>
 8003922:	e76c      	b.n	80037fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003924:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003926:	f000 f99b 	bl	8003c60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800392a:	f000 fc57 	bl	80041dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800392e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003930:	4618      	mov	r0, r3
 8003932:	3738      	adds	r7, #56	@ 0x38
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	e000ed04 	.word	0xe000ed04

0800393c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08e      	sub	sp, #56	@ 0x38
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003946:	2300      	movs	r3, #0
 8003948:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800394e:	2300      	movs	r3, #0
 8003950:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	623b      	str	r3, [r7, #32]
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61fb      	str	r3, [r7, #28]
}
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003990:	f000 ffbe 	bl	8004910 <xTaskGetSchedulerState>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <xQueueSemaphoreTake+0x64>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <xQueueSemaphoreTake+0x68>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <xQueueSemaphoreTake+0x6a>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	61bb      	str	r3, [r7, #24]
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	e7fd      	b.n	80039be <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039c2:	f001 faf9 	bl	8004fb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80039c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80039cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d024      	beq.n	8003a1c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d104      	bne.n	80039ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80039e2:	f001 f941 	bl	8004c68 <pvTaskIncrementMutexHeldCount>
 80039e6:	4602      	mov	r2, r0
 80039e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00f      	beq.n	8003a14 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f6:	3310      	adds	r3, #16
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fdc9 	bl	8004590 <xTaskRemoveFromEventList>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a04:	4b54      	ldr	r3, [pc, #336]	@ (8003b58 <xQueueSemaphoreTake+0x21c>)
 8003a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a14:	f001 fb02 	bl	800501c <vPortExitCritical>
				return pdPASS;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e098      	b.n	8003b4e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d112      	bne.n	8003a48 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00b      	beq.n	8003a40 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	617b      	str	r3, [r7, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003a40:	f001 faec 	bl	800501c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e082      	b.n	8003b4e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a4e:	f107 030c 	add.w	r3, r7, #12
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fe00 	bl	8004658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a5c:	f001 fade 	bl	800501c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a60:	f000 fbae 	bl	80041c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a64:	f001 faa8 	bl	8004fb8 <vPortEnterCritical>
 8003a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d103      	bne.n	8003a7e <xQueueSemaphoreTake+0x142>
 8003a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d103      	bne.n	8003a94 <xQueueSemaphoreTake+0x158>
 8003a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a94:	f001 fac2 	bl	800501c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a98:	463a      	mov	r2, r7
 8003a9a:	f107 030c 	add.w	r3, r7, #12
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fdef 	bl	8004684 <xTaskCheckForTimeOut>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d132      	bne.n	8003b12 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003aae:	f000 f929 	bl	8003d04 <prvIsQueueEmpty>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d026      	beq.n	8003b06 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003ac0:	f001 fa7a 	bl	8004fb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 ff3f 	bl	800494c <xTaskPriorityInherit>
 8003ace:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003ad0:	f001 faa4 	bl	800501c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad6:	3324      	adds	r3, #36	@ 0x24
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fd31 	bl	8004544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ae2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ae4:	f000 f8bc 	bl	8003c60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ae8:	f000 fb78 	bl	80041dc <xTaskResumeAll>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f47f af67 	bne.w	80039c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003af4:	4b18      	ldr	r3, [pc, #96]	@ (8003b58 <xQueueSemaphoreTake+0x21c>)
 8003af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	e75d      	b.n	80039c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b08:	f000 f8aa 	bl	8003c60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b0c:	f000 fb66 	bl	80041dc <xTaskResumeAll>
 8003b10:	e757      	b.n	80039c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b14:	f000 f8a4 	bl	8003c60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b18:	f000 fb60 	bl	80041dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b1e:	f000 f8f1 	bl	8003d04 <prvIsQueueEmpty>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f43f af4c 	beq.w	80039c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00d      	beq.n	8003b4c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003b30:	f001 fa42 	bl	8004fb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b36:	f000 f811 	bl	8003b5c <prvGetDisinheritPriorityAfterTimeout>
 8003b3a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 f800 	bl	8004b48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003b48:	f001 fa68 	bl	800501c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3738      	adds	r7, #56	@ 0x38
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1c3 0307 	rsb	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e001      	b.n	8003b7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
	}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10d      	bne.n	8003bc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d14d      	bne.n	8003c4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 ff3e 	bl	8004a38 <xTaskPriorityDisinherit>
 8003bbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	e043      	b.n	8003c4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d119      	bne.n	8003c00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6858      	ldr	r0, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	f001 fce8 	bl	80055ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	441a      	add	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d32b      	bcc.n	8003c4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	e026      	b.n	8003c4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68d8      	ldr	r0, [r3, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	f001 fcce 	bl	80055ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	425b      	negs	r3, r3
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d207      	bcs.n	8003c3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	425b      	negs	r3, r3
 8003c36:	441a      	add	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d105      	bne.n	8003c4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003c56:	697b      	ldr	r3, [r7, #20]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c68:	f001 f9a6 	bl	8004fb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c74:	e011      	b.n	8003c9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d012      	beq.n	8003ca4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3324      	adds	r3, #36	@ 0x24
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fc84 	bl	8004590 <xTaskRemoveFromEventList>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c8e:	f000 fd5d 	bl	800474c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	dce9      	bgt.n	8003c76 <prvUnlockQueue+0x16>
 8003ca2:	e000      	b.n	8003ca6 <prvUnlockQueue+0x46>
					break;
 8003ca4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	22ff      	movs	r2, #255	@ 0xff
 8003caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003cae:	f001 f9b5 	bl	800501c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cb2:	f001 f981 	bl	8004fb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cbe:	e011      	b.n	8003ce4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d012      	beq.n	8003cee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3310      	adds	r3, #16
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fc5f 	bl	8004590 <xTaskRemoveFromEventList>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cd8:	f000 fd38 	bl	800474c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cdc:	7bbb      	ldrb	r3, [r7, #14]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	dce9      	bgt.n	8003cc0 <prvUnlockQueue+0x60>
 8003cec:	e000      	b.n	8003cf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	22ff      	movs	r2, #255	@ 0xff
 8003cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003cf8:	f001 f990 	bl	800501c <vPortExitCritical>
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d0c:	f001 f954 	bl	8004fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e001      	b.n	8003d22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d22:	f001 f97b 	bl	800501c <vPortExitCritical>

	return xReturn;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d38:	f001 f93e 	bl	8004fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d102      	bne.n	8003d4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e001      	b.n	8003d52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d52:	f001 f963 	bl	800501c <vPortExitCritical>

	return xReturn;
 8003d56:	68fb      	ldr	r3, [r7, #12]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08e      	sub	sp, #56	@ 0x38
 8003d64:	af04      	add	r7, sp, #16
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	623b      	str	r3, [r7, #32]
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	61fb      	str	r3, [r7, #28]
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	e7fd      	b.n	8003da6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003daa:	2354      	movs	r3, #84	@ 0x54
 8003dac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b54      	cmp	r3, #84	@ 0x54
 8003db2:	d00b      	beq.n	8003dcc <xTaskCreateStatic+0x6c>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	61bb      	str	r3, [r7, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	e7fd      	b.n	8003dc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003dcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01e      	beq.n	8003e12 <xTaskCreateStatic+0xb2>
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01b      	beq.n	8003e12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dec:	2300      	movs	r3, #0
 8003dee:	9303      	str	r3, [sp, #12]
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	9302      	str	r3, [sp, #8]
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f850 	bl	8003eaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e0c:	f000 f8d6 	bl	8003fbc <prvAddNewTaskToReadyList>
 8003e10:	e001      	b.n	8003e16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e16:	697b      	ldr	r3, [r7, #20]
	}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3728      	adds	r7, #40	@ 0x28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	@ 0x30
 8003e24:	af04      	add	r7, sp, #16
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 f99f 	bl	8005178 <pvPortMalloc>
 8003e3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00e      	beq.n	8003e60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e42:	2054      	movs	r0, #84	@ 0x54
 8003e44:	f001 f998 	bl	8005178 <pvPortMalloc>
 8003e48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e56:	e005      	b.n	8003e64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e58:	6978      	ldr	r0, [r7, #20]
 8003e5a:	f001 fa5b 	bl	8005314 <vPortFree>
 8003e5e:	e001      	b.n	8003e64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d017      	beq.n	8003e9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	2300      	movs	r3, #0
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f80e 	bl	8003eaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e8e:	69f8      	ldr	r0, [r7, #28]
 8003e90:	f000 f894 	bl	8003fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e94:	2301      	movs	r3, #1
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e002      	b.n	8003ea0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
	}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b088      	sub	sp, #32
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f023 0307 	bic.w	r3, r3, #7
 8003ed0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	617b      	str	r3, [r7, #20]
}
 8003eee:	bf00      	nop
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01f      	beq.n	8003f3a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e012      	b.n	8003f26 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	7819      	ldrb	r1, [r3, #0]
 8003f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3334      	adds	r3, #52	@ 0x34
 8003f10:	460a      	mov	r2, r1
 8003f12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3301      	adds	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b0f      	cmp	r3, #15
 8003f2a:	d9e9      	bls.n	8003f00 <prvInitialiseNewTask+0x56>
 8003f2c:	e000      	b.n	8003f30 <prvInitialiseNewTask+0x86>
			{
				break;
 8003f2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f38:	e003      	b.n	8003f42 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	2b06      	cmp	r3, #6
 8003f46:	d901      	bls.n	8003f4c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f48:	2306      	movs	r3, #6
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f50:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f56:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f60:	3304      	adds	r3, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fa5a 	bl	800341c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	3318      	adds	r3, #24
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fa55 	bl	800341c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	f1c3 0207 	rsb	r2, r3, #7
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	68f9      	ldr	r1, [r7, #12]
 8003f9a:	69b8      	ldr	r0, [r7, #24]
 8003f9c:	f000 fede 	bl	8004d5c <pxPortInitialiseStack>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fb2:	bf00      	nop
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fc4:	f000 fff8 	bl	8004fb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004074 <prvAddNewTaskToReadyList+0xb8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	4a29      	ldr	r2, [pc, #164]	@ (8004074 <prvAddNewTaskToReadyList+0xb8>)
 8003fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fd2:	4b29      	ldr	r3, [pc, #164]	@ (8004078 <prvAddNewTaskToReadyList+0xbc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fda:	4a27      	ldr	r2, [pc, #156]	@ (8004078 <prvAddNewTaskToReadyList+0xbc>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fe0:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <prvAddNewTaskToReadyList+0xb8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d110      	bne.n	800400a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fe8:	f000 fbd4 	bl	8004794 <prvInitialiseTaskLists>
 8003fec:	e00d      	b.n	800400a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fee:	4b23      	ldr	r3, [pc, #140]	@ (800407c <prvAddNewTaskToReadyList+0xc0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ff6:	4b20      	ldr	r3, [pc, #128]	@ (8004078 <prvAddNewTaskToReadyList+0xbc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	429a      	cmp	r2, r3
 8004002:	d802      	bhi.n	800400a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004004:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <prvAddNewTaskToReadyList+0xbc>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800400a:	4b1d      	ldr	r3, [pc, #116]	@ (8004080 <prvAddNewTaskToReadyList+0xc4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3301      	adds	r3, #1
 8004010:	4a1b      	ldr	r2, [pc, #108]	@ (8004080 <prvAddNewTaskToReadyList+0xc4>)
 8004012:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	2201      	movs	r2, #1
 800401a:	409a      	lsls	r2, r3
 800401c:	4b19      	ldr	r3, [pc, #100]	@ (8004084 <prvAddNewTaskToReadyList+0xc8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4313      	orrs	r3, r2
 8004022:	4a18      	ldr	r2, [pc, #96]	@ (8004084 <prvAddNewTaskToReadyList+0xc8>)
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4a15      	ldr	r2, [pc, #84]	@ (8004088 <prvAddNewTaskToReadyList+0xcc>)
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f7ff f9fa 	bl	8003436 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004042:	f000 ffeb 	bl	800501c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004046:	4b0d      	ldr	r3, [pc, #52]	@ (800407c <prvAddNewTaskToReadyList+0xc0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00e      	beq.n	800406c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800404e:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <prvAddNewTaskToReadyList+0xbc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	429a      	cmp	r2, r3
 800405a:	d207      	bcs.n	800406c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <prvAddNewTaskToReadyList+0xd0>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	200011b4 	.word	0x200011b4
 8004078:	200010b4 	.word	0x200010b4
 800407c:	200011c0 	.word	0x200011c0
 8004080:	200011d0 	.word	0x200011d0
 8004084:	200011bc 	.word	0x200011bc
 8004088:	200010b8 	.word	0x200010b8
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040a2:	4b14      	ldr	r3, [pc, #80]	@ (80040f4 <vTaskDelay+0x64>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <vTaskDelay+0x32>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	60bb      	str	r3, [r7, #8]
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	e7fd      	b.n	80040be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040c2:	f000 f87d 	bl	80041c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040c6:	2100      	movs	r1, #0
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fde1 	bl	8004c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040ce:	f000 f885 	bl	80041dc <xTaskResumeAll>
 80040d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80040da:	4b07      	ldr	r3, [pc, #28]	@ (80040f8 <vTaskDelay+0x68>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	200011dc 	.word	0x200011dc
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	@ 0x28
 8004100:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800410a:	463a      	mov	r2, r7
 800410c:	1d39      	adds	r1, r7, #4
 800410e:	f107 0308 	add.w	r3, r7, #8
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc f9fa 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004118:	6839      	ldr	r1, [r7, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	9202      	str	r2, [sp, #8]
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	460a      	mov	r2, r1
 800412a:	491f      	ldr	r1, [pc, #124]	@ (80041a8 <vTaskStartScheduler+0xac>)
 800412c:	481f      	ldr	r0, [pc, #124]	@ (80041ac <vTaskStartScheduler+0xb0>)
 800412e:	f7ff fe17 	bl	8003d60 <xTaskCreateStatic>
 8004132:	4603      	mov	r3, r0
 8004134:	4a1e      	ldr	r2, [pc, #120]	@ (80041b0 <vTaskStartScheduler+0xb4>)
 8004136:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004138:	4b1d      	ldr	r3, [pc, #116]	@ (80041b0 <vTaskStartScheduler+0xb4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004140:	2301      	movs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e001      	b.n	800414a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d116      	bne.n	800417e <vTaskStartScheduler+0x82>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	613b      	str	r3, [r7, #16]
}
 8004162:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004164:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <vTaskStartScheduler+0xb8>)
 8004166:	f04f 32ff 	mov.w	r2, #4294967295
 800416a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800416c:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <vTaskStartScheduler+0xbc>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <vTaskStartScheduler+0xc0>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004178:	f000 fe7a 	bl	8004e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800417c:	e00f      	b.n	800419e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d10b      	bne.n	800419e <vTaskStartScheduler+0xa2>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60fb      	str	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	e7fd      	b.n	800419a <vTaskStartScheduler+0x9e>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	0800565c 	.word	0x0800565c
 80041ac:	08004765 	.word	0x08004765
 80041b0:	200011d8 	.word	0x200011d8
 80041b4:	200011d4 	.word	0x200011d4
 80041b8:	200011c0 	.word	0x200011c0
 80041bc:	200011b8 	.word	0x200011b8

080041c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041c4:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <vTaskSuspendAll+0x18>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	4a03      	ldr	r2, [pc, #12]	@ (80041d8 <vTaskSuspendAll+0x18>)
 80041cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	200011dc 	.word	0x200011dc

080041dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041ea:	4b42      	ldr	r3, [pc, #264]	@ (80042f4 <xTaskResumeAll+0x118>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <xTaskResumeAll+0x2e>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	603b      	str	r3, [r7, #0]
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	e7fd      	b.n	8004206 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800420a:	f000 fed5 	bl	8004fb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800420e:	4b39      	ldr	r3, [pc, #228]	@ (80042f4 <xTaskResumeAll+0x118>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3b01      	subs	r3, #1
 8004214:	4a37      	ldr	r2, [pc, #220]	@ (80042f4 <xTaskResumeAll+0x118>)
 8004216:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004218:	4b36      	ldr	r3, [pc, #216]	@ (80042f4 <xTaskResumeAll+0x118>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d161      	bne.n	80042e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004220:	4b35      	ldr	r3, [pc, #212]	@ (80042f8 <xTaskResumeAll+0x11c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05d      	beq.n	80042e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004228:	e02e      	b.n	8004288 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800422a:	4b34      	ldr	r3, [pc, #208]	@ (80042fc <xTaskResumeAll+0x120>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3318      	adds	r3, #24
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f95a 	bl	80034f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3304      	adds	r3, #4
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f955 	bl	80034f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	2201      	movs	r2, #1
 800424c:	409a      	lsls	r2, r3
 800424e:	4b2c      	ldr	r3, [pc, #176]	@ (8004300 <xTaskResumeAll+0x124>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	4a2a      	ldr	r2, [pc, #168]	@ (8004300 <xTaskResumeAll+0x124>)
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4a27      	ldr	r2, [pc, #156]	@ (8004304 <xTaskResumeAll+0x128>)
 8004266:	441a      	add	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f7ff f8e1 	bl	8003436 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004278:	4b23      	ldr	r3, [pc, #140]	@ (8004308 <xTaskResumeAll+0x12c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004282:	4b22      	ldr	r3, [pc, #136]	@ (800430c <xTaskResumeAll+0x130>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004288:	4b1c      	ldr	r3, [pc, #112]	@ (80042fc <xTaskResumeAll+0x120>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1cc      	bne.n	800422a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004296:	f000 fb1b 	bl	80048d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800429a:	4b1d      	ldr	r3, [pc, #116]	@ (8004310 <xTaskResumeAll+0x134>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d010      	beq.n	80042c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042a6:	f000 f837 	bl	8004318 <xTaskIncrementTick>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042b0:	4b16      	ldr	r3, [pc, #88]	@ (800430c <xTaskResumeAll+0x130>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f1      	bne.n	80042a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80042c2:	4b13      	ldr	r3, [pc, #76]	@ (8004310 <xTaskResumeAll+0x134>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042c8:	4b10      	ldr	r3, [pc, #64]	@ (800430c <xTaskResumeAll+0x130>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004314 <xTaskResumeAll+0x138>)
 80042d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042e4:	f000 fe9a 	bl	800501c <vPortExitCritical>

	return xAlreadyYielded;
 80042e8:	68bb      	ldr	r3, [r7, #8]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200011dc 	.word	0x200011dc
 80042f8:	200011b4 	.word	0x200011b4
 80042fc:	20001174 	.word	0x20001174
 8004300:	200011bc 	.word	0x200011bc
 8004304:	200010b8 	.word	0x200010b8
 8004308:	200010b4 	.word	0x200010b4
 800430c:	200011c8 	.word	0x200011c8
 8004310:	200011c4 	.word	0x200011c4
 8004314:	e000ed04 	.word	0xe000ed04

08004318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004322:	4b4f      	ldr	r3, [pc, #316]	@ (8004460 <xTaskIncrementTick+0x148>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 808f 	bne.w	800444a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800432c:	4b4d      	ldr	r3, [pc, #308]	@ (8004464 <xTaskIncrementTick+0x14c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004334:	4a4b      	ldr	r2, [pc, #300]	@ (8004464 <xTaskIncrementTick+0x14c>)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d121      	bne.n	8004384 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004340:	4b49      	ldr	r3, [pc, #292]	@ (8004468 <xTaskIncrementTick+0x150>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <xTaskIncrementTick+0x4a>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	603b      	str	r3, [r7, #0]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <xTaskIncrementTick+0x46>
 8004362:	4b41      	ldr	r3, [pc, #260]	@ (8004468 <xTaskIncrementTick+0x150>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	4b40      	ldr	r3, [pc, #256]	@ (800446c <xTaskIncrementTick+0x154>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3e      	ldr	r2, [pc, #248]	@ (8004468 <xTaskIncrementTick+0x150>)
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	4a3e      	ldr	r2, [pc, #248]	@ (800446c <xTaskIncrementTick+0x154>)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	4b3e      	ldr	r3, [pc, #248]	@ (8004470 <xTaskIncrementTick+0x158>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	4a3c      	ldr	r2, [pc, #240]	@ (8004470 <xTaskIncrementTick+0x158>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	f000 faa6 	bl	80048d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004384:	4b3b      	ldr	r3, [pc, #236]	@ (8004474 <xTaskIncrementTick+0x15c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	429a      	cmp	r2, r3
 800438c:	d348      	bcc.n	8004420 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800438e:	4b36      	ldr	r3, [pc, #216]	@ (8004468 <xTaskIncrementTick+0x150>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004398:	4b36      	ldr	r3, [pc, #216]	@ (8004474 <xTaskIncrementTick+0x15c>)
 800439a:	f04f 32ff 	mov.w	r2, #4294967295
 800439e:	601a      	str	r2, [r3, #0]
					break;
 80043a0:	e03e      	b.n	8004420 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a2:	4b31      	ldr	r3, [pc, #196]	@ (8004468 <xTaskIncrementTick+0x150>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d203      	bcs.n	80043c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004474 <xTaskIncrementTick+0x15c>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043c0:	e02e      	b.n	8004420 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff f892 	bl	80034f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3318      	adds	r3, #24
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff f889 	bl	80034f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	2201      	movs	r2, #1
 80043e4:	409a      	lsls	r2, r3
 80043e6:	4b24      	ldr	r3, [pc, #144]	@ (8004478 <xTaskIncrementTick+0x160>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	4a22      	ldr	r2, [pc, #136]	@ (8004478 <xTaskIncrementTick+0x160>)
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4a1f      	ldr	r2, [pc, #124]	@ (800447c <xTaskIncrementTick+0x164>)
 80043fe:	441a      	add	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f7ff f815 	bl	8003436 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004410:	4b1b      	ldr	r3, [pc, #108]	@ (8004480 <xTaskIncrementTick+0x168>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	429a      	cmp	r2, r3
 8004418:	d3b9      	bcc.n	800438e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800441a:	2301      	movs	r3, #1
 800441c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800441e:	e7b6      	b.n	800438e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004420:	4b17      	ldr	r3, [pc, #92]	@ (8004480 <xTaskIncrementTick+0x168>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004426:	4915      	ldr	r1, [pc, #84]	@ (800447c <xTaskIncrementTick+0x164>)
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d901      	bls.n	800443c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800443c:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <xTaskIncrementTick+0x16c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e004      	b.n	8004454 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800444a:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <xTaskIncrementTick+0x170>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3301      	adds	r3, #1
 8004450:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <xTaskIncrementTick+0x170>)
 8004452:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004454:	697b      	ldr	r3, [r7, #20]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	200011dc 	.word	0x200011dc
 8004464:	200011b8 	.word	0x200011b8
 8004468:	2000116c 	.word	0x2000116c
 800446c:	20001170 	.word	0x20001170
 8004470:	200011cc 	.word	0x200011cc
 8004474:	200011d4 	.word	0x200011d4
 8004478:	200011bc 	.word	0x200011bc
 800447c:	200010b8 	.word	0x200010b8
 8004480:	200010b4 	.word	0x200010b4
 8004484:	200011c8 	.word	0x200011c8
 8004488:	200011c4 	.word	0x200011c4

0800448c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004492:	4b27      	ldr	r3, [pc, #156]	@ (8004530 <vTaskSwitchContext+0xa4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800449a:	4b26      	ldr	r3, [pc, #152]	@ (8004534 <vTaskSwitchContext+0xa8>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044a0:	e040      	b.n	8004524 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80044a2:	4b24      	ldr	r3, [pc, #144]	@ (8004534 <vTaskSwitchContext+0xa8>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a8:	4b23      	ldr	r3, [pc, #140]	@ (8004538 <vTaskSwitchContext+0xac>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044b6:	7afb      	ldrb	r3, [r7, #11]
 80044b8:	f1c3 031f 	rsb	r3, r3, #31
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	491f      	ldr	r1, [pc, #124]	@ (800453c <vTaskSwitchContext+0xb0>)
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <vTaskSwitchContext+0x5e>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	607b      	str	r3, [r7, #4]
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <vTaskSwitchContext+0x5a>
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4a11      	ldr	r2, [pc, #68]	@ (800453c <vTaskSwitchContext+0xb0>)
 80044f6:	4413      	add	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3308      	adds	r3, #8
 800450c:	429a      	cmp	r2, r3
 800450e:	d104      	bne.n	800451a <vTaskSwitchContext+0x8e>
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a07      	ldr	r2, [pc, #28]	@ (8004540 <vTaskSwitchContext+0xb4>)
 8004522:	6013      	str	r3, [r2, #0]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	200011dc 	.word	0x200011dc
 8004534:	200011c8 	.word	0x200011c8
 8004538:	200011bc 	.word	0x200011bc
 800453c:	200010b8 	.word	0x200010b8
 8004540:	200010b4 	.word	0x200010b4

08004544 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	60fb      	str	r3, [r7, #12]
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800456c:	4b07      	ldr	r3, [pc, #28]	@ (800458c <vTaskPlaceOnEventList+0x48>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3318      	adds	r3, #24
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7fe ff82 	bl	800347e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800457a:	2101      	movs	r1, #1
 800457c:	6838      	ldr	r0, [r7, #0]
 800457e:	f000 fb87 	bl	8004c90 <prvAddCurrentTaskToDelayedList>
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200010b4 	.word	0x200010b4

08004590 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10b      	bne.n	80045be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	60fb      	str	r3, [r7, #12]
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	e7fd      	b.n	80045ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3318      	adds	r3, #24
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe ff94 	bl	80034f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <xTaskRemoveFromEventList+0xb0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11c      	bne.n	800460a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe ff8b 	bl	80034f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	2201      	movs	r2, #1
 80045e0:	409a      	lsls	r2, r3
 80045e2:	4b18      	ldr	r3, [pc, #96]	@ (8004644 <xTaskRemoveFromEventList+0xb4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	4a16      	ldr	r2, [pc, #88]	@ (8004644 <xTaskRemoveFromEventList+0xb4>)
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4a13      	ldr	r2, [pc, #76]	@ (8004648 <xTaskRemoveFromEventList+0xb8>)
 80045fa:	441a      	add	r2, r3
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7fe ff17 	bl	8003436 <vListInsertEnd>
 8004608:	e005      	b.n	8004616 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3318      	adds	r3, #24
 800460e:	4619      	mov	r1, r3
 8004610:	480e      	ldr	r0, [pc, #56]	@ (800464c <xTaskRemoveFromEventList+0xbc>)
 8004612:	f7fe ff10 	bl	8003436 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461a:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <xTaskRemoveFromEventList+0xc0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004620:	429a      	cmp	r2, r3
 8004622:	d905      	bls.n	8004630 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004628:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <xTaskRemoveFromEventList+0xc4>)
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	e001      	b.n	8004634 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004634:	697b      	ldr	r3, [r7, #20]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200011dc 	.word	0x200011dc
 8004644:	200011bc 	.word	0x200011bc
 8004648:	200010b8 	.word	0x200010b8
 800464c:	20001174 	.word	0x20001174
 8004650:	200010b4 	.word	0x200010b4
 8004654:	200011c8 	.word	0x200011c8

08004658 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <vTaskInternalSetTimeOutState+0x24>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004668:	4b05      	ldr	r3, [pc, #20]	@ (8004680 <vTaskInternalSetTimeOutState+0x28>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	605a      	str	r2, [r3, #4]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	200011cc 	.word	0x200011cc
 8004680:	200011b8 	.word	0x200011b8

08004684 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	613b      	str	r3, [r7, #16]
}
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
 80046aa:	e7fd      	b.n	80046a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	60fb      	str	r3, [r7, #12]
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	e7fd      	b.n	80046c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80046ca:	f000 fc75 	bl	8004fb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004744 <xTaskCheckForTimeOut+0xc0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d102      	bne.n	80046ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	e023      	b.n	8004736 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b15      	ldr	r3, [pc, #84]	@ (8004748 <xTaskCheckForTimeOut+0xc4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d007      	beq.n	800470a <xTaskCheckForTimeOut+0x86>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004704:	2301      	movs	r3, #1
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	e015      	b.n	8004736 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	429a      	cmp	r2, r3
 8004712:	d20b      	bcs.n	800472c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff99 	bl	8004658 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	e004      	b.n	8004736 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004732:	2301      	movs	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004736:	f000 fc71 	bl	800501c <vPortExitCritical>

	return xReturn;
 800473a:	69fb      	ldr	r3, [r7, #28]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	200011b8 	.word	0x200011b8
 8004748:	200011cc 	.word	0x200011cc

0800474c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004750:	4b03      	ldr	r3, [pc, #12]	@ (8004760 <vTaskMissedYield+0x14>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]
}
 8004756:	bf00      	nop
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	200011c8 	.word	0x200011c8

08004764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800476c:	f000 f852 	bl	8004814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004770:	4b06      	ldr	r3, [pc, #24]	@ (800478c <prvIdleTask+0x28>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d9f9      	bls.n	800476c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <prvIdleTask+0x2c>)
 800477a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004788:	e7f0      	b.n	800476c <prvIdleTask+0x8>
 800478a:	bf00      	nop
 800478c:	200010b8 	.word	0x200010b8
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800479a:	2300      	movs	r3, #0
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	e00c      	b.n	80047ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4a12      	ldr	r2, [pc, #72]	@ (80047f4 <prvInitialiseTaskLists+0x60>)
 80047ac:	4413      	add	r3, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fe14 	bl	80033dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3301      	adds	r3, #1
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d9ef      	bls.n	80047a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047c0:	480d      	ldr	r0, [pc, #52]	@ (80047f8 <prvInitialiseTaskLists+0x64>)
 80047c2:	f7fe fe0b 	bl	80033dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047c6:	480d      	ldr	r0, [pc, #52]	@ (80047fc <prvInitialiseTaskLists+0x68>)
 80047c8:	f7fe fe08 	bl	80033dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047cc:	480c      	ldr	r0, [pc, #48]	@ (8004800 <prvInitialiseTaskLists+0x6c>)
 80047ce:	f7fe fe05 	bl	80033dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047d2:	480c      	ldr	r0, [pc, #48]	@ (8004804 <prvInitialiseTaskLists+0x70>)
 80047d4:	f7fe fe02 	bl	80033dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047d8:	480b      	ldr	r0, [pc, #44]	@ (8004808 <prvInitialiseTaskLists+0x74>)
 80047da:	f7fe fdff 	bl	80033dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <prvInitialiseTaskLists+0x78>)
 80047e0:	4a05      	ldr	r2, [pc, #20]	@ (80047f8 <prvInitialiseTaskLists+0x64>)
 80047e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <prvInitialiseTaskLists+0x7c>)
 80047e6:	4a05      	ldr	r2, [pc, #20]	@ (80047fc <prvInitialiseTaskLists+0x68>)
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	200010b8 	.word	0x200010b8
 80047f8:	20001144 	.word	0x20001144
 80047fc:	20001158 	.word	0x20001158
 8004800:	20001174 	.word	0x20001174
 8004804:	20001188 	.word	0x20001188
 8004808:	200011a0 	.word	0x200011a0
 800480c:	2000116c 	.word	0x2000116c
 8004810:	20001170 	.word	0x20001170

08004814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800481a:	e019      	b.n	8004850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800481c:	f000 fbcc 	bl	8004fb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004820:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <prvCheckTasksWaitingTermination+0x50>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe fe5f 	bl	80034f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004832:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <prvCheckTasksWaitingTermination+0x54>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3b01      	subs	r3, #1
 8004838:	4a0b      	ldr	r2, [pc, #44]	@ (8004868 <prvCheckTasksWaitingTermination+0x54>)
 800483a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800483c:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <prvCheckTasksWaitingTermination+0x58>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3b01      	subs	r3, #1
 8004842:	4a0a      	ldr	r2, [pc, #40]	@ (800486c <prvCheckTasksWaitingTermination+0x58>)
 8004844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004846:	f000 fbe9 	bl	800501c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f810 	bl	8004870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004850:	4b06      	ldr	r3, [pc, #24]	@ (800486c <prvCheckTasksWaitingTermination+0x58>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e1      	bne.n	800481c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20001188 	.word	0x20001188
 8004868:	200011b4 	.word	0x200011b4
 800486c:	2000119c 	.word	0x2000119c

08004870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fd44 	bl	8005314 <vPortFree>
				vPortFree( pxTCB );
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fd41 	bl	8005314 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004892:	e019      	b.n	80048c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800489a:	2b01      	cmp	r3, #1
 800489c:	d103      	bne.n	80048a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fd38 	bl	8005314 <vPortFree>
	}
 80048a4:	e010      	b.n	80048c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d00b      	beq.n	80048c8 <prvDeleteTCB+0x58>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <prvDeleteTCB+0x54>
	}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <prvResetNextTaskUnblockTime+0x38>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048e0:	4b0a      	ldr	r3, [pc, #40]	@ (800490c <prvResetNextTaskUnblockTime+0x3c>)
 80048e2:	f04f 32ff 	mov.w	r2, #4294967295
 80048e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048e8:	e008      	b.n	80048fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ea:	4b07      	ldr	r3, [pc, #28]	@ (8004908 <prvResetNextTaskUnblockTime+0x38>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a04      	ldr	r2, [pc, #16]	@ (800490c <prvResetNextTaskUnblockTime+0x3c>)
 80048fa:	6013      	str	r3, [r2, #0]
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	2000116c 	.word	0x2000116c
 800490c:	200011d4 	.word	0x200011d4

08004910 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004916:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <xTaskGetSchedulerState+0x34>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800491e:	2301      	movs	r3, #1
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	e008      	b.n	8004936 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004924:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <xTaskGetSchedulerState+0x38>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800492c:	2302      	movs	r3, #2
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	e001      	b.n	8004936 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004932:	2300      	movs	r3, #0
 8004934:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004936:	687b      	ldr	r3, [r7, #4]
	}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	200011c0 	.word	0x200011c0
 8004948:	200011dc 	.word	0x200011dc

0800494c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d05e      	beq.n	8004a20 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004966:	4b31      	ldr	r3, [pc, #196]	@ (8004a2c <xTaskPriorityInherit+0xe0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	429a      	cmp	r2, r3
 800496e:	d24e      	bcs.n	8004a0e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	db06      	blt.n	8004986 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004978:	4b2c      	ldr	r3, [pc, #176]	@ (8004a2c <xTaskPriorityInherit+0xe0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	f1c3 0207 	rsb	r2, r3, #7
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6959      	ldr	r1, [r3, #20]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4a26      	ldr	r2, [pc, #152]	@ (8004a30 <xTaskPriorityInherit+0xe4>)
 8004998:	4413      	add	r3, r2
 800499a:	4299      	cmp	r1, r3
 800499c:	d12f      	bne.n	80049fe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fda4 	bl	80034f0 <uxListRemove>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	2201      	movs	r2, #1
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43da      	mvns	r2, r3
 80049ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004a34 <xTaskPriorityInherit+0xe8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4013      	ands	r3, r2
 80049c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a34 <xTaskPriorityInherit+0xe8>)
 80049c2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <xTaskPriorityInherit+0xe0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	2201      	movs	r2, #1
 80049d4:	409a      	lsls	r2, r3
 80049d6:	4b17      	ldr	r3, [pc, #92]	@ (8004a34 <xTaskPriorityInherit+0xe8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	4a15      	ldr	r2, [pc, #84]	@ (8004a34 <xTaskPriorityInherit+0xe8>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4a10      	ldr	r2, [pc, #64]	@ (8004a30 <xTaskPriorityInherit+0xe4>)
 80049ee:	441a      	add	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7fe fd1d 	bl	8003436 <vListInsertEnd>
 80049fc:	e004      	b.n	8004a08 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049fe:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <xTaskPriorityInherit+0xe0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e008      	b.n	8004a20 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <xTaskPriorityInherit+0xe0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d201      	bcs.n	8004a20 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a20:	68fb      	ldr	r3, [r7, #12]
	}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200010b4 	.word	0x200010b4
 8004a30:	200010b8 	.word	0x200010b8
 8004a34:	200011bc 	.word	0x200011bc

08004a38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d070      	beq.n	8004b30 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b3c <xTaskPriorityDisinherit+0x104>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d00b      	beq.n	8004a70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60bb      	str	r3, [r7, #8]
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a94:	1e5a      	subs	r2, r3, #1
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d044      	beq.n	8004b30 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d140      	bne.n	8004b30 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fd1c 	bl	80034f0 <uxListRemove>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d115      	bne.n	8004aea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac2:	491f      	ldr	r1, [pc, #124]	@ (8004b40 <xTaskPriorityDisinherit+0x108>)
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xTaskPriorityDisinherit+0xb2>
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	2201      	movs	r2, #1
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	4b18      	ldr	r3, [pc, #96]	@ (8004b44 <xTaskPriorityDisinherit+0x10c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	4a17      	ldr	r2, [pc, #92]	@ (8004b44 <xTaskPriorityDisinherit+0x10c>)
 8004ae8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af6:	f1c3 0207 	rsb	r2, r3, #7
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	2201      	movs	r2, #1
 8004b04:	409a      	lsls	r2, r3
 8004b06:	4b0f      	ldr	r3, [pc, #60]	@ (8004b44 <xTaskPriorityDisinherit+0x10c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b44 <xTaskPriorityDisinherit+0x10c>)
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4a08      	ldr	r2, [pc, #32]	@ (8004b40 <xTaskPriorityDisinherit+0x108>)
 8004b1e:	441a      	add	r2, r3
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f7fe fc85 	bl	8003436 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b30:	697b      	ldr	r3, [r7, #20]
	}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	200010b4 	.word	0x200010b4
 8004b40:	200010b8 	.word	0x200010b8
 8004b44:	200011bc 	.word	0x200011bc

08004b48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004b56:	2301      	movs	r3, #1
 8004b58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d079      	beq.n	8004c54 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	60fb      	str	r3, [r7, #12]
}
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d902      	bls.n	8004b90 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e002      	b.n	8004b96 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b94:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d059      	beq.n	8004c54 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d154      	bne.n	8004c54 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004baa:	4b2c      	ldr	r3, [pc, #176]	@ (8004c5c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d10b      	bne.n	8004bcc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	60bb      	str	r3, [r7, #8]
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	db04      	blt.n	8004bea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f1c3 0207 	rsb	r2, r3, #7
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	6959      	ldr	r1, [r3, #20]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4a19      	ldr	r2, [pc, #100]	@ (8004c60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004bfa:	4413      	add	r3, r2
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d129      	bne.n	8004c54 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fc73 	bl	80034f0 <uxListRemove>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	2201      	movs	r2, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	4b11      	ldr	r3, [pc, #68]	@ (8004c64 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4013      	ands	r3, r2
 8004c22:	4a10      	ldr	r2, [pc, #64]	@ (8004c64 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004c24:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	4a0b      	ldr	r2, [pc, #44]	@ (8004c64 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4a06      	ldr	r2, [pc, #24]	@ (8004c60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004c46:	441a      	add	r2, r3
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f7fe fbf1 	bl	8003436 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c54:	bf00      	nop
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	200010b4 	.word	0x200010b4
 8004c60:	200010b8 	.word	0x200010b8
 8004c64:	200011bc 	.word	0x200011bc

08004c68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004c6c:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c7a:	3201      	adds	r2, #1
 8004c7c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004c7e:	4b03      	ldr	r3, [pc, #12]	@ (8004c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8004c80:	681b      	ldr	r3, [r3, #0]
	}
 8004c82:	4618      	mov	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	200010b4 	.word	0x200010b4

08004c90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c9a:	4b29      	ldr	r3, [pc, #164]	@ (8004d40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ca0:	4b28      	ldr	r3, [pc, #160]	@ (8004d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fc22 	bl	80034f0 <uxListRemove>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004cb2:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	2201      	movs	r2, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43da      	mvns	r2, r3
 8004cc0:	4b21      	ldr	r3, [pc, #132]	@ (8004d48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	4a20      	ldr	r2, [pc, #128]	@ (8004d48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d10a      	bne.n	8004ce8 <prvAddCurrentTaskToDelayedList+0x58>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	481a      	ldr	r0, [pc, #104]	@ (8004d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ce2:	f7fe fba8 	bl	8003436 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ce6:	e026      	b.n	8004d36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4413      	add	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cf0:	4b14      	ldr	r3, [pc, #80]	@ (8004d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d209      	bcs.n	8004d14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d00:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b0f      	ldr	r3, [pc, #60]	@ (8004d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7fe fbb6 	bl	800347e <vListInsert>
}
 8004d12:	e010      	b.n	8004d36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d14:	4b0f      	ldr	r3, [pc, #60]	@ (8004d54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7fe fbac 	bl	800347e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d26:	4b0c      	ldr	r3, [pc, #48]	@ (8004d58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d202      	bcs.n	8004d36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d30:	4a09      	ldr	r2, [pc, #36]	@ (8004d58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6013      	str	r3, [r2, #0]
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200011b8 	.word	0x200011b8
 8004d44:	200010b4 	.word	0x200010b4
 8004d48:	200011bc 	.word	0x200011bc
 8004d4c:	200011a0 	.word	0x200011a0
 8004d50:	20001170 	.word	0x20001170
 8004d54:	2000116c 	.word	0x2000116c
 8004d58:	200011d4 	.word	0x200011d4

08004d5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3b04      	subs	r3, #4
 8004d6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b04      	subs	r3, #4
 8004d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3b04      	subs	r3, #4
 8004d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc0 <pxPortInitialiseStack+0x64>)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b14      	subs	r3, #20
 8004d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b04      	subs	r3, #4
 8004da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f06f 0202 	mvn.w	r2, #2
 8004daa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3b20      	subs	r3, #32
 8004db0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004db2:	68fb      	ldr	r3, [r7, #12]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	08004dc5 	.word	0x08004dc5

08004dc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dce:	4b13      	ldr	r3, [pc, #76]	@ (8004e1c <prvTaskExitError+0x58>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d00b      	beq.n	8004df0 <prvTaskExitError+0x2c>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	60fb      	str	r3, [r7, #12]
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <prvTaskExitError+0x28>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60bb      	str	r3, [r7, #8]
}
 8004e02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e04:	bf00      	nop
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0fc      	beq.n	8004e06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	2000000c 	.word	0x2000000c

08004e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e20:	4b07      	ldr	r3, [pc, #28]	@ (8004e40 <pxCurrentTCBConst2>)
 8004e22:	6819      	ldr	r1, [r3, #0]
 8004e24:	6808      	ldr	r0, [r1, #0]
 8004e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2a:	f380 8809 	msr	PSP, r0
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f380 8811 	msr	BASEPRI, r0
 8004e3a:	4770      	bx	lr
 8004e3c:	f3af 8000 	nop.w

08004e40 <pxCurrentTCBConst2>:
 8004e40:	200010b4 	.word	0x200010b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop

08004e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e48:	4808      	ldr	r0, [pc, #32]	@ (8004e6c <prvPortStartFirstTask+0x24>)
 8004e4a:	6800      	ldr	r0, [r0, #0]
 8004e4c:	6800      	ldr	r0, [r0, #0]
 8004e4e:	f380 8808 	msr	MSP, r0
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f380 8814 	msr	CONTROL, r0
 8004e5a:	b662      	cpsie	i
 8004e5c:	b661      	cpsie	f
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	df00      	svc	0
 8004e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e6a:	bf00      	nop
 8004e6c:	e000ed08 	.word	0xe000ed08

08004e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e76:	4b47      	ldr	r3, [pc, #284]	@ (8004f94 <xPortStartScheduler+0x124>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a47      	ldr	r2, [pc, #284]	@ (8004f98 <xPortStartScheduler+0x128>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d10b      	bne.n	8004e98 <xPortStartScheduler+0x28>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60fb      	str	r3, [r7, #12]
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	e7fd      	b.n	8004e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e98:	4b3e      	ldr	r3, [pc, #248]	@ (8004f94 <xPortStartScheduler+0x124>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8004f9c <xPortStartScheduler+0x12c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d10b      	bne.n	8004eba <xPortStartScheduler+0x4a>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	613b      	str	r3, [r7, #16]
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	e7fd      	b.n	8004eb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004eba:	4b39      	ldr	r3, [pc, #228]	@ (8004fa0 <xPortStartScheduler+0x130>)
 8004ebc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	22ff      	movs	r2, #255	@ 0xff
 8004eca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	4b31      	ldr	r3, [pc, #196]	@ (8004fa4 <xPortStartScheduler+0x134>)
 8004ee0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ee2:	4b31      	ldr	r3, [pc, #196]	@ (8004fa8 <xPortStartScheduler+0x138>)
 8004ee4:	2207      	movs	r2, #7
 8004ee6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ee8:	e009      	b.n	8004efe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004eea:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa8 <xPortStartScheduler+0x138>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa8 <xPortStartScheduler+0x138>)
 8004ef2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f06:	2b80      	cmp	r3, #128	@ 0x80
 8004f08:	d0ef      	beq.n	8004eea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f0a:	4b27      	ldr	r3, [pc, #156]	@ (8004fa8 <xPortStartScheduler+0x138>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f1c3 0307 	rsb	r3, r3, #7
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d00b      	beq.n	8004f2e <xPortStartScheduler+0xbe>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	60bb      	str	r3, [r7, #8]
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa8 <xPortStartScheduler+0x138>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <xPortStartScheduler+0x138>)
 8004f36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f38:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <xPortStartScheduler+0x138>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f40:	4a19      	ldr	r2, [pc, #100]	@ (8004fa8 <xPortStartScheduler+0x138>)
 8004f42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f4c:	4b17      	ldr	r3, [pc, #92]	@ (8004fac <xPortStartScheduler+0x13c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a16      	ldr	r2, [pc, #88]	@ (8004fac <xPortStartScheduler+0x13c>)
 8004f52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f58:	4b14      	ldr	r3, [pc, #80]	@ (8004fac <xPortStartScheduler+0x13c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a13      	ldr	r2, [pc, #76]	@ (8004fac <xPortStartScheduler+0x13c>)
 8004f5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004f62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f64:	f000 f8da 	bl	800511c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f68:	4b11      	ldr	r3, [pc, #68]	@ (8004fb0 <xPortStartScheduler+0x140>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f6e:	f000 f8f9 	bl	8005164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f72:	4b10      	ldr	r3, [pc, #64]	@ (8004fb4 <xPortStartScheduler+0x144>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a0f      	ldr	r2, [pc, #60]	@ (8004fb4 <xPortStartScheduler+0x144>)
 8004f78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004f7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f7e:	f7ff ff63 	bl	8004e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f82:	f7ff fa83 	bl	800448c <vTaskSwitchContext>
	prvTaskExitError();
 8004f86:	f7ff ff1d 	bl	8004dc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	e000ed00 	.word	0xe000ed00
 8004f98:	410fc271 	.word	0x410fc271
 8004f9c:	410fc270 	.word	0x410fc270
 8004fa0:	e000e400 	.word	0xe000e400
 8004fa4:	200011e0 	.word	0x200011e0
 8004fa8:	200011e4 	.word	0x200011e4
 8004fac:	e000ed20 	.word	0xe000ed20
 8004fb0:	2000000c 	.word	0x2000000c
 8004fb4:	e000ef34 	.word	0xe000ef34

08004fb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	607b      	str	r3, [r7, #4]
}
 8004fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fd2:	4b10      	ldr	r3, [pc, #64]	@ (8005014 <vPortEnterCritical+0x5c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8005014 <vPortEnterCritical+0x5c>)
 8004fda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005014 <vPortEnterCritical+0x5c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d110      	bne.n	8005006 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8005018 <vPortEnterCritical+0x60>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <vPortEnterCritical+0x4e>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	603b      	str	r3, [r7, #0]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <vPortEnterCritical+0x4a>
	}
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005022:	4b12      	ldr	r3, [pc, #72]	@ (800506c <vPortExitCritical+0x50>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <vPortExitCritical+0x26>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	607b      	str	r3, [r7, #4]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005042:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <vPortExitCritical+0x50>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3b01      	subs	r3, #1
 8005048:	4a08      	ldr	r2, [pc, #32]	@ (800506c <vPortExitCritical+0x50>)
 800504a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800504c:	4b07      	ldr	r3, [pc, #28]	@ (800506c <vPortExitCritical+0x50>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <vPortExitCritical+0x44>
 8005054:	2300      	movs	r3, #0
 8005056:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800505e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	2000000c 	.word	0x2000000c

08005070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005070:	f3ef 8009 	mrs	r0, PSP
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <pxCurrentTCBConst>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	f01e 0f10 	tst.w	lr, #16
 8005080:	bf08      	it	eq
 8005082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508a:	6010      	str	r0, [r2, #0]
 800508c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005094:	f380 8811 	msr	BASEPRI, r0
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f7ff f9f4 	bl	800448c <vTaskSwitchContext>
 80050a4:	f04f 0000 	mov.w	r0, #0
 80050a8:	f380 8811 	msr	BASEPRI, r0
 80050ac:	bc09      	pop	{r0, r3}
 80050ae:	6819      	ldr	r1, [r3, #0]
 80050b0:	6808      	ldr	r0, [r1, #0]
 80050b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b6:	f01e 0f10 	tst.w	lr, #16
 80050ba:	bf08      	it	eq
 80050bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050c0:	f380 8809 	msr	PSP, r0
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	f3af 8000 	nop.w

080050d0 <pxCurrentTCBConst>:
 80050d0:	200010b4 	.word	0x200010b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop

080050d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	607b      	str	r3, [r7, #4]
}
 80050f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050f2:	f7ff f911 	bl	8004318 <xTaskIncrementTick>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <xPortSysTickHandler+0x40>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	2300      	movs	r3, #0
 8005106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	f383 8811 	msr	BASEPRI, r3
}
 800510e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005120:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <vPortSetupTimerInterrupt+0x34>)
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005126:	4b0b      	ldr	r3, [pc, #44]	@ (8005154 <vPortSetupTimerInterrupt+0x38>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800512c:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <vPortSetupTimerInterrupt+0x3c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a0a      	ldr	r2, [pc, #40]	@ (800515c <vPortSetupTimerInterrupt+0x40>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	099b      	lsrs	r3, r3, #6
 8005138:	4a09      	ldr	r2, [pc, #36]	@ (8005160 <vPortSetupTimerInterrupt+0x44>)
 800513a:	3b01      	subs	r3, #1
 800513c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800513e:	4b04      	ldr	r3, [pc, #16]	@ (8005150 <vPortSetupTimerInterrupt+0x34>)
 8005140:	2207      	movs	r2, #7
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	e000e010 	.word	0xe000e010
 8005154:	e000e018 	.word	0xe000e018
 8005158:	20000000 	.word	0x20000000
 800515c:	10624dd3 	.word	0x10624dd3
 8005160:	e000e014 	.word	0xe000e014

08005164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005164:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005174 <vPortEnableVFP+0x10>
 8005168:	6801      	ldr	r1, [r0, #0]
 800516a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800516e:	6001      	str	r1, [r0, #0]
 8005170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005172:	bf00      	nop
 8005174:	e000ed88 	.word	0xe000ed88

08005178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	@ 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005184:	f7ff f81c 	bl	80041c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005188:	4b5c      	ldr	r3, [pc, #368]	@ (80052fc <pvPortMalloc+0x184>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005190:	f000 f924 	bl	80053dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005194:	4b5a      	ldr	r3, [pc, #360]	@ (8005300 <pvPortMalloc+0x188>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	f040 8095 	bne.w	80052cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01e      	beq.n	80051e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80051a8:	2208      	movs	r2, #8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d015      	beq.n	80051e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f023 0307 	bic.w	r3, r3, #7
 80051c0:	3308      	adds	r3, #8
 80051c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00b      	beq.n	80051e6 <pvPortMalloc+0x6e>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	617b      	str	r3, [r7, #20]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d06f      	beq.n	80052cc <pvPortMalloc+0x154>
 80051ec:	4b45      	ldr	r3, [pc, #276]	@ (8005304 <pvPortMalloc+0x18c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d86a      	bhi.n	80052cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051f6:	4b44      	ldr	r3, [pc, #272]	@ (8005308 <pvPortMalloc+0x190>)
 80051f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051fa:	4b43      	ldr	r3, [pc, #268]	@ (8005308 <pvPortMalloc+0x190>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005200:	e004      	b.n	800520c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d903      	bls.n	800521e <pvPortMalloc+0xa6>
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f1      	bne.n	8005202 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800521e:	4b37      	ldr	r3, [pc, #220]	@ (80052fc <pvPortMalloc+0x184>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005224:	429a      	cmp	r2, r3
 8005226:	d051      	beq.n	80052cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2208      	movs	r2, #8
 800522e:	4413      	add	r3, r2
 8005230:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	1ad2      	subs	r2, r2, r3
 8005242:	2308      	movs	r3, #8
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	429a      	cmp	r2, r3
 8005248:	d920      	bls.n	800528c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800524a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4413      	add	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <pvPortMalloc+0xfc>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	613b      	str	r3, [r7, #16]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005286:	69b8      	ldr	r0, [r7, #24]
 8005288:	f000 f90a 	bl	80054a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800528c:	4b1d      	ldr	r3, [pc, #116]	@ (8005304 <pvPortMalloc+0x18c>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	4a1b      	ldr	r2, [pc, #108]	@ (8005304 <pvPortMalloc+0x18c>)
 8005298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800529a:	4b1a      	ldr	r3, [pc, #104]	@ (8005304 <pvPortMalloc+0x18c>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <pvPortMalloc+0x194>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d203      	bcs.n	80052ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052a6:	4b17      	ldr	r3, [pc, #92]	@ (8005304 <pvPortMalloc+0x18c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a18      	ldr	r2, [pc, #96]	@ (800530c <pvPortMalloc+0x194>)
 80052ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	4b13      	ldr	r3, [pc, #76]	@ (8005300 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052c2:	4b13      	ldr	r3, [pc, #76]	@ (8005310 <pvPortMalloc+0x198>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	4a11      	ldr	r2, [pc, #68]	@ (8005310 <pvPortMalloc+0x198>)
 80052ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052cc:	f7fe ff86 	bl	80041dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <pvPortMalloc+0x17a>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	60fb      	str	r3, [r7, #12]
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	e7fd      	b.n	80052ee <pvPortMalloc+0x176>
	return pvReturn;
 80052f2:	69fb      	ldr	r3, [r7, #28]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3728      	adds	r7, #40	@ 0x28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20008720 	.word	0x20008720
 8005300:	20008734 	.word	0x20008734
 8005304:	20008724 	.word	0x20008724
 8005308:	20008718 	.word	0x20008718
 800530c:	20008728 	.word	0x20008728
 8005310:	2000872c 	.word	0x2000872c

08005314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d04f      	beq.n	80053c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005326:	2308      	movs	r3, #8
 8005328:	425b      	negs	r3, r3
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4413      	add	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	4b25      	ldr	r3, [pc, #148]	@ (80053d0 <vPortFree+0xbc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <vPortFree+0x46>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60fb      	str	r3, [r7, #12]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00b      	beq.n	800537a <vPortFree+0x66>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60bb      	str	r3, [r7, #8]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	4b14      	ldr	r3, [pc, #80]	@ (80053d0 <vPortFree+0xbc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4013      	ands	r3, r2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01e      	beq.n	80053c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d11a      	bne.n	80053c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	4b0e      	ldr	r3, [pc, #56]	@ (80053d0 <vPortFree+0xbc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	43db      	mvns	r3, r3
 800539a:	401a      	ands	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a0:	f7fe ff0e 	bl	80041c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	4b0a      	ldr	r3, [pc, #40]	@ (80053d4 <vPortFree+0xc0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4413      	add	r3, r2
 80053ae:	4a09      	ldr	r2, [pc, #36]	@ (80053d4 <vPortFree+0xc0>)
 80053b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053b2:	6938      	ldr	r0, [r7, #16]
 80053b4:	f000 f874 	bl	80054a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053b8:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <vPortFree+0xc4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3301      	adds	r3, #1
 80053be:	4a06      	ldr	r2, [pc, #24]	@ (80053d8 <vPortFree+0xc4>)
 80053c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053c2:	f7fe ff0b 	bl	80041dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053c6:	bf00      	nop
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20008734 	.word	0x20008734
 80053d4:	20008724 	.word	0x20008724
 80053d8:	20008730 	.word	0x20008730

080053dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053e2:	f247 5330 	movw	r3, #30000	@ 0x7530
 80053e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053e8:	4b27      	ldr	r3, [pc, #156]	@ (8005488 <prvHeapInit+0xac>)
 80053ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00c      	beq.n	8005410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3307      	adds	r3, #7
 80053fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0307 	bic.w	r3, r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	4a1f      	ldr	r2, [pc, #124]	@ (8005488 <prvHeapInit+0xac>)
 800540c:	4413      	add	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005414:	4a1d      	ldr	r2, [pc, #116]	@ (800548c <prvHeapInit+0xb0>)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800541a:	4b1c      	ldr	r3, [pc, #112]	@ (800548c <prvHeapInit+0xb0>)
 800541c:	2200      	movs	r2, #0
 800541e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4413      	add	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005428:	2208      	movs	r2, #8
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0307 	bic.w	r3, r3, #7
 8005436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4a15      	ldr	r2, [pc, #84]	@ (8005490 <prvHeapInit+0xb4>)
 800543c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800543e:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <prvHeapInit+0xb4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005446:	4b12      	ldr	r3, [pc, #72]	@ (8005490 <prvHeapInit+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800545c:	4b0c      	ldr	r3, [pc, #48]	@ (8005490 <prvHeapInit+0xb4>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a0a      	ldr	r2, [pc, #40]	@ (8005494 <prvHeapInit+0xb8>)
 800546a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a09      	ldr	r2, [pc, #36]	@ (8005498 <prvHeapInit+0xbc>)
 8005472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005474:	4b09      	ldr	r3, [pc, #36]	@ (800549c <prvHeapInit+0xc0>)
 8005476:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800547a:	601a      	str	r2, [r3, #0]
}
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	200011e8 	.word	0x200011e8
 800548c:	20008718 	.word	0x20008718
 8005490:	20008720 	.word	0x20008720
 8005494:	20008728 	.word	0x20008728
 8005498:	20008724 	.word	0x20008724
 800549c:	20008734 	.word	0x20008734

080054a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054a8:	4b28      	ldr	r3, [pc, #160]	@ (800554c <prvInsertBlockIntoFreeList+0xac>)
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e002      	b.n	80054b4 <prvInsertBlockIntoFreeList+0x14>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d8f7      	bhi.n	80054ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	4413      	add	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d108      	bne.n	80054e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	441a      	add	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	441a      	add	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d118      	bne.n	8005528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b15      	ldr	r3, [pc, #84]	@ (8005550 <prvInsertBlockIntoFreeList+0xb0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d00d      	beq.n	800551e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	441a      	add	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e008      	b.n	8005530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800551e:	4b0c      	ldr	r3, [pc, #48]	@ (8005550 <prvInsertBlockIntoFreeList+0xb0>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e003      	b.n	8005530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d002      	beq.n	800553e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20008718 	.word	0x20008718
 8005550:	20008720 	.word	0x20008720

08005554 <memset>:
 8005554:	4402      	add	r2, r0
 8005556:	4603      	mov	r3, r0
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	f803 1b01 	strb.w	r1, [r3], #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <__libc_init_array>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	4d0d      	ldr	r5, [pc, #52]	@ (800559c <__libc_init_array+0x38>)
 8005568:	4c0d      	ldr	r4, [pc, #52]	@ (80055a0 <__libc_init_array+0x3c>)
 800556a:	1b64      	subs	r4, r4, r5
 800556c:	10a4      	asrs	r4, r4, #2
 800556e:	2600      	movs	r6, #0
 8005570:	42a6      	cmp	r6, r4
 8005572:	d109      	bne.n	8005588 <__libc_init_array+0x24>
 8005574:	4d0b      	ldr	r5, [pc, #44]	@ (80055a4 <__libc_init_array+0x40>)
 8005576:	4c0c      	ldr	r4, [pc, #48]	@ (80055a8 <__libc_init_array+0x44>)
 8005578:	f000 f826 	bl	80055c8 <_init>
 800557c:	1b64      	subs	r4, r4, r5
 800557e:	10a4      	asrs	r4, r4, #2
 8005580:	2600      	movs	r6, #0
 8005582:	42a6      	cmp	r6, r4
 8005584:	d105      	bne.n	8005592 <__libc_init_array+0x2e>
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	f855 3b04 	ldr.w	r3, [r5], #4
 800558c:	4798      	blx	r3
 800558e:	3601      	adds	r6, #1
 8005590:	e7ee      	b.n	8005570 <__libc_init_array+0xc>
 8005592:	f855 3b04 	ldr.w	r3, [r5], #4
 8005596:	4798      	blx	r3
 8005598:	3601      	adds	r6, #1
 800559a:	e7f2      	b.n	8005582 <__libc_init_array+0x1e>
 800559c:	080056b4 	.word	0x080056b4
 80055a0:	080056b4 	.word	0x080056b4
 80055a4:	080056b4 	.word	0x080056b4
 80055a8:	080056b8 	.word	0x080056b8

080055ac <memcpy>:
 80055ac:	440a      	add	r2, r1
 80055ae:	4291      	cmp	r1, r2
 80055b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055b4:	d100      	bne.n	80055b8 <memcpy+0xc>
 80055b6:	4770      	bx	lr
 80055b8:	b510      	push	{r4, lr}
 80055ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c2:	4291      	cmp	r1, r2
 80055c4:	d1f9      	bne.n	80055ba <memcpy+0xe>
 80055c6:	bd10      	pop	{r4, pc}

080055c8 <_init>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	bf00      	nop
 80055cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ce:	bc08      	pop	{r3}
 80055d0:	469e      	mov	lr, r3
 80055d2:	4770      	bx	lr

080055d4 <_fini>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	bf00      	nop
 80055d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055da:	bc08      	pop	{r3}
 80055dc:	469e      	mov	lr, r3
 80055de:	4770      	bx	lr
