
mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005350  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080054e0  080054e0  000064e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005590  08005590  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005590  08005590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005598  08005598  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005598  08005598  00006598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080055a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001010  20000010  080055b0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001020  080055b0  00007020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107d4  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002903  00000000  00000000  00017814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  0001a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b21  00000000  00000000  0001afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272c7  00000000  00000000  0001bac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108f5  00000000  00000000  00042d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000effd1  00000000  00000000  0005367d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014364e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad8  00000000  00000000  00143694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0014716c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054c8 	.word	0x080054c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080054c8 	.word	0x080054c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <uart_send>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Send string over UART
void uart_send(char *s)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff fe41 	bl	80001d0 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <uart_send+0x28>)
 800055a:	f002 f917 	bl	800278c <HAL_UART_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000280 	.word	0x20000280

0800056c <task1>:

// Task-1
void task1(void *p)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinSem, portMAX_DELAY);   // Take semaphore (lock)
 8000574:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <task1+0x38>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f04f 31ff 	mov.w	r1, #4294967295
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f95b 	bl	8003838 <xQueueSemaphoreTake>
		uart_send("task-1 running\r\n");          // Print message
 8000582:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <task1+0x3c>)
 8000584:	f7ff ffdc 	bl	8000540 <uart_send>
		xSemaphoreGive(xBinSem);                  // Give semaphore (unlock)
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <task1+0x38>)
 800058a:	6818      	ldr	r0, [r3, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	f003 f84f 	bl	8003634 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(500));           // Delay 500ms
 8000596:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800059a:	f003 fcf7 	bl	8003f8c <vTaskDelay>
		xSemaphoreTake(xBinSem, portMAX_DELAY);   // Take semaphore (lock)
 800059e:	bf00      	nop
 80005a0:	e7e8      	b.n	8000574 <task1+0x8>
 80005a2:	bf00      	nop
 80005a4:	2000030c 	.word	0x2000030c
 80005a8:	080054e0 	.word	0x080054e0

080005ac <task2>:
	}
}

// Task-2
void task2(void *p)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinSem, portMAX_DELAY);   // Take semaphore (lock)
 80005b4:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <task2+0x38>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f04f 31ff 	mov.w	r1, #4294967295
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 f93b 	bl	8003838 <xQueueSemaphoreTake>
		uart_send("task-2 running\r\n");          // Print message
 80005c2:	4809      	ldr	r0, [pc, #36]	@ (80005e8 <task2+0x3c>)
 80005c4:	f7ff ffbc 	bl	8000540 <uart_send>
		xSemaphoreGive(xBinSem);                  // Give semaphore (unlock)
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <task2+0x38>)
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	f003 f82f 	bl	8003634 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(500));           // Delay 500ms
 80005d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005da:	f003 fcd7 	bl	8003f8c <vTaskDelay>
		xSemaphoreTake(xBinSem, portMAX_DELAY);   // Take semaphore (lock)
 80005de:	bf00      	nop
 80005e0:	e7e8      	b.n	80005b4 <task2+0x8>
 80005e2:	bf00      	nop
 80005e4:	2000030c 	.word	0x2000030c
 80005e8:	080054f4 	.word	0x080054f4

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fa39 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f859 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8d9 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f8a7 	bl	8000750 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <main+0xa4>)
 8000604:	1d3c      	adds	r4, r7, #4
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fe33 	bl	8003284 <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a1c      	ldr	r2, [pc, #112]	@ (8000694 <main+0xa8>)
 8000622:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  vSemaphoreCreateBinary(xBinSem);   // Create a binary semaphore
 8000624:	2203      	movs	r2, #3
 8000626:	2100      	movs	r1, #0
 8000628:	2001      	movs	r0, #1
 800062a:	f002 ffa9 	bl	8003580 <xQueueGenericCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a19      	ldr	r2, [pc, #100]	@ (8000698 <main+0xac>)
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <main+0xac>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d006      	beq.n	800064a <main+0x5e>
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <main+0xac>)
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	f002 fff5 	bl	8003634 <xQueueGenericSend>

  if(xBinSem != NULL)   // Check if semaphore created successfully
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <main+0xac>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d01a      	beq.n	8000688 <main+0x9c>
  {
  	  // Create Task1 with priority 1
  	  xTaskCreate(task1, "Task-1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000652:	2300      	movs	r3, #0
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2301      	movs	r3, #1
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2280      	movs	r2, #128	@ 0x80
 800065e:	490f      	ldr	r1, [pc, #60]	@ (800069c <main+0xb0>)
 8000660:	480f      	ldr	r0, [pc, #60]	@ (80006a0 <main+0xb4>)
 8000662:	f003 fb5b 	bl	8003d1c <xTaskCreate>

  	  // Create Task2 with priority 1
  	  xTaskCreate(task2, "Task-2", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000666:	2300      	movs	r3, #0
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2301      	movs	r3, #1
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <main+0xb8>)
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <main+0xbc>)
 8000676:	f003 fb51 	bl	8003d1c <xTaskCreate>

  	  xSemaphoreGive(xBinSem);   // Give semaphore initially
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <main+0xac>)
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	f002 ffd6 	bl	8003634 <xQueueGenericSend>
  }

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000688:	f002 fdf5 	bl	8003276 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0xa0>
 8000690:	08005524 	.word	0x08005524
 8000694:	20000308 	.word	0x20000308
 8000698:	2000030c 	.word	0x2000030c
 800069c:	08005508 	.word	0x08005508
 80006a0:	0800056d 	.word	0x0800056d
 80006a4:	08005510 	.word	0x08005510
 80006a8:	080005ad 	.word	0x080005ad

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	@ 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	@ 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 feca 	bl	8005454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006d2:	f000 fcfb 	bl	80010cc <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 f8d6 	bl	800088c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006fa:	230a      	movs	r3, #10
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fd32 	bl	8001178 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800071a:	f000 f8b7 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f8fa 	bl	8001930 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000742:	f000 f8a3 	bl	800088c <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	@ 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <MX_USART2_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000794:	f001 ffac 	bl	80026f0 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f875 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000280 	.word	0x20000280
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	4b25      	ldr	r3, [pc, #148]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	4a24      	ldr	r2, [pc, #144]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ea:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <MX_GPIO_Init+0xc4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082e:	f000 fc27 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000838:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	@ (8000878 <MX_GPIO_Init+0xc8>)
 800084a:	f000 fa6f 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f000 fa60 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	@ 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	48000800 	.word	0x48000800

0800087c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f002 fd49 	bl	800331c <osDelay>
 800088a:	e7fb      	b.n	8000884 <StartDefaultTask+0x8>

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	210f      	movs	r1, #15
 80008d2:	f06f 0001 	mvn.w	r0, #1
 80008d6:	f000 fa00 	bl	8000cda <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0ac      	sub	sp, #176	@ 0xb0
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2288      	movs	r2, #136	@ 0x88
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f004 fda3 	bl	8005454 <memset>
  if(huart->Instance==USART2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a21      	ldr	r2, [pc, #132]	@ (8000998 <HAL_UART_MspInit+0xb0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d13b      	bne.n	8000990 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000918:	2302      	movs	r3, #2
 800091a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800091c:	2300      	movs	r3, #0
 800091e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fa27 	bl	8001d78 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000930:	f7ff ffac 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000934:	4b19      	ldr	r3, [pc, #100]	@ (800099c <HAL_UART_MspInit+0xb4>)
 8000936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000938:	4a18      	ldr	r2, [pc, #96]	@ (800099c <HAL_UART_MspInit+0xb4>)
 800093a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800093e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000940:	4b16      	ldr	r3, [pc, #88]	@ (800099c <HAL_UART_MspInit+0xb4>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b13      	ldr	r3, [pc, #76]	@ (800099c <HAL_UART_MspInit+0xb4>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000950:	4a12      	ldr	r2, [pc, #72]	@ (800099c <HAL_UART_MspInit+0xb4>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000958:	4b10      	ldr	r3, [pc, #64]	@ (800099c <HAL_UART_MspInit+0xb4>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000964:	230c      	movs	r3, #12
 8000966:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097c:	2307      	movs	r3, #7
 800097e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098c:	f000 f9ce 	bl	8000d2c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000990:	bf00      	nop
 8000992:	37b0      	adds	r7, #176	@ 0xb0
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40004400 	.word	0x40004400
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <MemManage_Handler+0x4>

080009b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009da:	f000 f8a1 	bl	8000b20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009de:	f003 ff15 	bl	800480c <xTaskGetSchedulerState>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d001      	beq.n	80009ec <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009e8:	f004 faf6 	bl	8004fd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a18:	f7ff ffea 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	@ (8000a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	@ (8000a60 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f004 fd0f 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a46:	f7ff fdd1 	bl	80005ec <main>

08000a4a <LoopForever>:

LoopForever:
    b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a58:	080055a0 	.word	0x080055a0
  ldr r2, =_sbss
 8000a5c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a60:	20001020 	.word	0x20001020

08000a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_2_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <HAL_Init+0x3c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <HAL_Init+0x3c>)
 8000a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f000 f920 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a84:	200f      	movs	r0, #15
 8000a86:	f000 f80f 	bl	8000aa8 <HAL_InitTick>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d002      	beq.n	8000a96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	e001      	b.n	8000a9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a96:	f7ff feff 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <HAL_InitTick+0x6c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d023      	beq.n	8000b04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000abc:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <HAL_InitTick+0x70>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <HAL_InitTick+0x6c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f91d 	bl	8000d12 <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10f      	bne.n	8000afe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d809      	bhi.n	8000af8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f8f5 	bl	8000cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <HAL_InitTick+0x74>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e007      	b.n	8000b08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e004      	b.n	8000b08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e001      	b.n	8000b08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000310 	.word	0x20000310

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	@ (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000310 	.word	0x20000310

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	@ (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	@ (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	@ 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff47 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff5c 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffb0 	bl	8000c80 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e17f      	b.n	800103c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 8171 	beq.w	8001036 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d005      	beq.n	8000d6c <HAL_GPIO_Init+0x40>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 0201 	and.w	r2, r3, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d118      	bne.n	8000e0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000de0:	2201      	movs	r2, #1
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	08db      	lsrs	r3, r3, #3
 8000df6:	f003 0201 	and.w	r2, r3, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d017      	beq.n	8000e48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80ac 	beq.w	8001036 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b5f      	ldr	r3, [pc, #380]	@ (800105c <HAL_GPIO_Init+0x330>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee2:	4a5e      	ldr	r2, [pc, #376]	@ (800105c <HAL_GPIO_Init+0x330>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eea:	4b5c      	ldr	r3, [pc, #368]	@ (800105c <HAL_GPIO_Init+0x330>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef6:	4a5a      	ldr	r2, [pc, #360]	@ (8001060 <HAL_GPIO_Init+0x334>)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f20:	d025      	beq.n	8000f6e <HAL_GPIO_Init+0x242>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4f      	ldr	r2, [pc, #316]	@ (8001064 <HAL_GPIO_Init+0x338>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d01f      	beq.n	8000f6a <HAL_GPIO_Init+0x23e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001068 <HAL_GPIO_Init+0x33c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d019      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4d      	ldr	r2, [pc, #308]	@ (800106c <HAL_GPIO_Init+0x340>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d013      	beq.n	8000f62 <HAL_GPIO_Init+0x236>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001070 <HAL_GPIO_Init+0x344>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00d      	beq.n	8000f5e <HAL_GPIO_Init+0x232>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4b      	ldr	r2, [pc, #300]	@ (8001074 <HAL_GPIO_Init+0x348>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0x22e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001078 <HAL_GPIO_Init+0x34c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_GPIO_Init+0x22a>
 8000f52:	2306      	movs	r3, #6
 8000f54:	e00c      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f56:	2307      	movs	r3, #7
 8000f58:	e00a      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	e008      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	f002 0203 	and.w	r2, r2, #3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f80:	4937      	ldr	r1, [pc, #220]	@ (8001060 <HAL_GPIO_Init+0x334>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800107c <HAL_GPIO_Init+0x350>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fb2:	4a32      	ldr	r2, [pc, #200]	@ (800107c <HAL_GPIO_Init+0x350>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fb8:	4b30      	ldr	r3, [pc, #192]	@ (800107c <HAL_GPIO_Init+0x350>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fdc:	4a27      	ldr	r2, [pc, #156]	@ (800107c <HAL_GPIO_Init+0x350>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fe2:	4b26      	ldr	r3, [pc, #152]	@ (800107c <HAL_GPIO_Init+0x350>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001006:	4a1d      	ldr	r2, [pc, #116]	@ (800107c <HAL_GPIO_Init+0x350>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_GPIO_Init+0x350>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001030:	4a12      	ldr	r2, [pc, #72]	@ (800107c <HAL_GPIO_Init+0x350>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa22 f303 	lsr.w	r3, r2, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	f47f ae78 	bne.w	8000d3c <HAL_GPIO_Init+0x10>
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800
 800106c:	48000c00 	.word	0x48000c00
 8001070:	48001000 	.word	0x48001000
 8001074:	48001400 	.word	0x48001400
 8001078:	48001800 	.word	0x48001800
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40007000 	.word	0x40007000

080010cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010da:	d130      	bne.n	800113e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010dc:	4b23      	ldr	r3, [pc, #140]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010e8:	d038      	beq.n	800115c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ea:	4b20      	ldr	r3, [pc, #128]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010f2:	4a1e      	ldr	r2, [pc, #120]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2232      	movs	r2, #50	@ 0x32
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	0c9b      	lsrs	r3, r3, #18
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001110:	e002      	b.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3b01      	subs	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001124:	d102      	bne.n	800112c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f2      	bne.n	8001112 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001138:	d110      	bne.n	800115c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e00f      	b.n	800115e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114a:	d007      	beq.n	800115c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001154:	4a05      	ldr	r2, [pc, #20]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800115a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40007000 	.word	0x40007000
 8001170:	20000000 	.word	0x20000000
 8001174:	431bde83 	.word	0x431bde83

08001178 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e3ca      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118a:	4b97      	ldr	r3, [pc, #604]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001194:	4b94      	ldr	r3, [pc, #592]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80e4 	beq.w	8001374 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_RCC_OscConfig+0x4a>
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b0c      	cmp	r3, #12
 80011b6:	f040 808b 	bne.w	80012d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	f040 8087 	bne.w	80012d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c2:	4b89      	ldr	r3, [pc, #548]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_RCC_OscConfig+0x62>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e3a2      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1a      	ldr	r2, [r3, #32]
 80011de:	4b82      	ldr	r3, [pc, #520]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <HAL_RCC_OscConfig+0x7c>
 80011ea:	4b7f      	ldr	r3, [pc, #508]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011f2:	e005      	b.n	8001200 <HAL_RCC_OscConfig+0x88>
 80011f4:	4b7c      	ldr	r3, [pc, #496]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80011f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001200:	4293      	cmp	r3, r2
 8001202:	d223      	bcs.n	800124c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fd55 	bl	8001cb8 <RCC_SetFlashLatencyFromMSIRange>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e383      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001218:	4b73      	ldr	r3, [pc, #460]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a72      	ldr	r2, [pc, #456]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b70      	ldr	r3, [pc, #448]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	496d      	ldr	r1, [pc, #436]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001236:	4b6c      	ldr	r3, [pc, #432]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	4968      	ldr	r1, [pc, #416]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
 800124a:	e025      	b.n	8001298 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124c:	4b66      	ldr	r3, [pc, #408]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a65      	ldr	r2, [pc, #404]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b63      	ldr	r3, [pc, #396]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4960      	ldr	r1, [pc, #384]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800126a:	4b5f      	ldr	r3, [pc, #380]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	495b      	ldr	r1, [pc, #364]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fd15 	bl	8001cb8 <RCC_SetFlashLatencyFromMSIRange>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e343      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001298:	f000 fc4a 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 800129c:	4602      	mov	r2, r0
 800129e:	4b52      	ldr	r3, [pc, #328]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	4950      	ldr	r1, [pc, #320]	@ (80013ec <HAL_RCC_OscConfig+0x274>)
 80012aa:	5ccb      	ldrb	r3, [r1, r3]
 80012ac:	f003 031f 	and.w	r3, r3, #31
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	4a4e      	ldr	r2, [pc, #312]	@ (80013f0 <HAL_RCC_OscConfig+0x278>)
 80012b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012b8:	4b4e      	ldr	r3, [pc, #312]	@ (80013f4 <HAL_RCC_OscConfig+0x27c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fbf3 	bl	8000aa8 <HAL_InitTick>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d052      	beq.n	8001372 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	e327      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d032      	beq.n	800133e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012d8:	4b43      	ldr	r3, [pc, #268]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a42      	ldr	r2, [pc, #264]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc30 	bl	8000b48 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ec:	f7ff fc2c 	bl	8000b48 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e310      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012fe:	4b3a      	ldr	r3, [pc, #232]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130a:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a36      	ldr	r2, [pc, #216]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4931      	ldr	r1, [pc, #196]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001328:	4b2f      	ldr	r3, [pc, #188]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	492c      	ldr	r1, [pc, #176]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
 800133c:	e01a      	b.n	8001374 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800133e:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a29      	ldr	r2, [pc, #164]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800134a:	f7ff fbfd 	bl	8000b48 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001352:	f7ff fbf9 	bl	8000b48 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e2dd      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f0      	bne.n	8001352 <HAL_RCC_OscConfig+0x1da>
 8001370:	e000      	b.n	8001374 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001372:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d074      	beq.n	800146a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b08      	cmp	r3, #8
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x21a>
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2b0c      	cmp	r3, #12
 800138a:	d10e      	bne.n	80013aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d10b      	bne.n	80013aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d064      	beq.n	8001468 <HAL_RCC_OscConfig+0x2f0>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d160      	bne.n	8001468 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e2ba      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x24a>
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e026      	b.n	8001410 <HAL_RCC_OscConfig+0x298>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ca:	d115      	bne.n	80013f8 <HAL_RCC_OscConfig+0x280>
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a02      	ldr	r2, [pc, #8]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e014      	b.n	8001410 <HAL_RCC_OscConfig+0x298>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	08005548 	.word	0x08005548
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004
 80013f8:	4ba0      	ldr	r3, [pc, #640]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a9f      	ldr	r2, [pc, #636]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80013fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b9d      	ldr	r3, [pc, #628]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a9c      	ldr	r2, [pc, #624]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 800140a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800140e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fb96 	bl	8000b48 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fb92 	bl	8000b48 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	@ 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e276      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001432:	4b92      	ldr	r3, [pc, #584]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x2a8>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fb82 	bl	8000b48 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fb7e 	bl	8000b48 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	@ 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e262      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145a:	4b88      	ldr	r3, [pc, #544]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x2d0>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d060      	beq.n	8001538 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b04      	cmp	r3, #4
 800147a:	d005      	beq.n	8001488 <HAL_RCC_OscConfig+0x310>
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b0c      	cmp	r3, #12
 8001480:	d119      	bne.n	80014b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d116      	bne.n	80014b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001488:	4b7c      	ldr	r3, [pc, #496]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x328>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e23f      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b76      	ldr	r3, [pc, #472]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	061b      	lsls	r3, r3, #24
 80014ae:	4973      	ldr	r1, [pc, #460]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b4:	e040      	b.n	8001538 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d023      	beq.n	8001506 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014be:	4b6f      	ldr	r3, [pc, #444]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6e      	ldr	r2, [pc, #440]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ca:	f7ff fb3d 	bl	8000b48 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fb39 	bl	8000b48 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e21d      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e4:	4b65      	ldr	r3, [pc, #404]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b62      	ldr	r3, [pc, #392]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	495f      	ldr	r1, [pc, #380]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
 8001504:	e018      	b.n	8001538 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001506:	4b5d      	ldr	r3, [pc, #372]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a5c      	ldr	r2, [pc, #368]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 800150c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fb19 	bl	8000b48 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fb15 	bl	8000b48 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1f9      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152c:	4b53      	ldr	r3, [pc, #332]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b00      	cmp	r3, #0
 8001542:	d03c      	beq.n	80015be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d01c      	beq.n	8001586 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154c:	4b4b      	ldr	r3, [pc, #300]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 800154e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001552:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff faf4 	bl	8000b48 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff faf0 	bl	8000b48 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e1d4      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001576:	4b41      	ldr	r3, [pc, #260]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ef      	beq.n	8001564 <HAL_RCC_OscConfig+0x3ec>
 8001584:	e01b      	b.n	80015be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001586:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800158c:	4a3b      	ldr	r2, [pc, #236]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001596:	f7ff fad7 	bl	8000b48 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fad3 	bl	8000b48 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1b7      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b0:	4b32      	ldr	r3, [pc, #200]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80015b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ef      	bne.n	800159e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80a6 	beq.w	8001718 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015d0:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10d      	bne.n	80015f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	4b27      	ldr	r3, [pc, #156]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e0:	4a26      	ldr	r2, [pc, #152]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80015e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f4:	2301      	movs	r3, #1
 80015f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f8:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <HAL_RCC_OscConfig+0x508>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d118      	bne.n	8001636 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001604:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <HAL_RCC_OscConfig+0x508>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1d      	ldr	r2, [pc, #116]	@ (8001680 <HAL_RCC_OscConfig+0x508>)
 800160a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001610:	f7ff fa9a 	bl	8000b48 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001618:	f7ff fa96 	bl	8000b48 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e17a      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_RCC_OscConfig+0x508>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <HAL_RCC_OscConfig+0x4d8>
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001644:	4a0d      	ldr	r2, [pc, #52]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800164e:	e029      	b.n	80016a4 <HAL_RCC_OscConfig+0x52c>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d115      	bne.n	8001684 <HAL_RCC_OscConfig+0x50c>
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800165e:	4a07      	ldr	r2, [pc, #28]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166e:	4a03      	ldr	r2, [pc, #12]	@ (800167c <HAL_RCC_OscConfig+0x504>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001678:	e014      	b.n	80016a4 <HAL_RCC_OscConfig+0x52c>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	40007000 	.word	0x40007000
 8001684:	4b9c      	ldr	r3, [pc, #624]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168a:	4a9b      	ldr	r2, [pc, #620]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001694:	4b98      	ldr	r3, [pc, #608]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169a:	4a97      	ldr	r2, [pc, #604]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d016      	beq.n	80016da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fa4c 	bl	8000b48 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fa48 	bl	8000b48 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e12a      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ca:	4b8b      	ldr	r3, [pc, #556]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ed      	beq.n	80016b4 <HAL_RCC_OscConfig+0x53c>
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7ff fa35 	bl	8000b48 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fa31 	bl	8000b48 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e113      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f8:	4b7f      	ldr	r3, [pc, #508]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ed      	bne.n	80016e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170c:	4b7a      	ldr	r3, [pc, #488]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	4a79      	ldr	r2, [pc, #484]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 8001712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001716:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80fe 	beq.w	800191e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	2b02      	cmp	r3, #2
 8001728:	f040 80d0 	bne.w	80018cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800172c:	4b72      	ldr	r3, [pc, #456]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173c:	429a      	cmp	r2, r3
 800173e:	d130      	bne.n	80017a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	3b01      	subs	r3, #1
 800174c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d127      	bne.n	80017a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d11f      	bne.n	80017a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800176c:	2a07      	cmp	r2, #7
 800176e:	bf14      	ite	ne
 8001770:	2201      	movne	r2, #1
 8001772:	2200      	moveq	r2, #0
 8001774:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001776:	4293      	cmp	r3, r2
 8001778:	d113      	bne.n	80017a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	3b01      	subs	r3, #1
 8001788:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	3b01      	subs	r3, #1
 800179c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d06e      	beq.n	8001880 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d069      	beq.n	800187c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017a8:	4b53      	ldr	r3, [pc, #332]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017b4:	4b50      	ldr	r3, [pc, #320]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0ad      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c4:	4b4c      	ldr	r3, [pc, #304]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a4b      	ldr	r2, [pc, #300]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80017ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017d0:	f7ff f9ba 	bl	8000b48 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff f9b6 	bl	8000b48 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e09a      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ea:	4b43      	ldr	r3, [pc, #268]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f6:	4b40      	ldr	r3, [pc, #256]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	4b40      	ldr	r3, [pc, #256]	@ (80018fc <HAL_RCC_OscConfig+0x784>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001806:	3a01      	subs	r2, #1
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001810:	0212      	lsls	r2, r2, #8
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001818:	0852      	lsrs	r2, r2, #1
 800181a:	3a01      	subs	r2, #1
 800181c:	0552      	lsls	r2, r2, #21
 800181e:	4311      	orrs	r1, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001824:	0852      	lsrs	r2, r2, #1
 8001826:	3a01      	subs	r2, #1
 8001828:	0652      	lsls	r2, r2, #25
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001830:	0912      	lsrs	r2, r2, #4
 8001832:	0452      	lsls	r2, r2, #17
 8001834:	430a      	orrs	r2, r1
 8001836:	4930      	ldr	r1, [pc, #192]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 8001838:	4313      	orrs	r3, r2
 800183a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800183c:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2d      	ldr	r2, [pc, #180]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 8001842:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001846:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001848:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4a2a      	ldr	r2, [pc, #168]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800184e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001852:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001854:	f7ff f978 	bl	8000b48 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff f974 	bl	8000b48 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e058      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187a:	e050      	b.n	800191e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e04f      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d148      	bne.n	800191e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a19      	ldr	r2, [pc, #100]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001896:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001898:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 800189e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a4:	f7ff f950 	bl	8000b48 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff f94c 	bl	8000b48 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e030      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x734>
 80018ca:	e028      	b.n	800191e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d023      	beq.n	800191a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <HAL_RCC_OscConfig+0x780>)
 80018d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff f933 	bl	8000b48 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	e00c      	b.n	8001900 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff f92f 	bl	8000b48 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d905      	bls.n	8001900 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e013      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
 80018f8:	40021000 	.word	0x40021000
 80018fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <HAL_RCC_OscConfig+0x7b0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ec      	bne.n	80018e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_RCC_OscConfig+0x7b0>)
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	4905      	ldr	r1, [pc, #20]	@ (8001928 <HAL_RCC_OscConfig+0x7b0>)
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_RCC_OscConfig+0x7b4>)
 8001914:	4013      	ands	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
 8001918:	e001      	b.n	800191e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	feeefffc 	.word	0xfeeefffc

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0e7      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b75      	ldr	r3, [pc, #468]	@ (8001b1c <HAL_RCC_ClockConfig+0x1ec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d910      	bls.n	8001974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b72      	ldr	r3, [pc, #456]	@ (8001b1c <HAL_RCC_ClockConfig+0x1ec>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0207 	bic.w	r2, r3, #7
 800195a:	4970      	ldr	r1, [pc, #448]	@ (8001b1c <HAL_RCC_ClockConfig+0x1ec>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b6e      	ldr	r3, [pc, #440]	@ (8001b1c <HAL_RCC_ClockConfig+0x1ec>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0cf      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d010      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	4b66      	ldr	r3, [pc, #408]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800198c:	429a      	cmp	r2, r3
 800198e:	d908      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b63      	ldr	r3, [pc, #396]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4960      	ldr	r1, [pc, #384]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d04c      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d121      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0a6      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ce:	4b54      	ldr	r3, [pc, #336]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d115      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e09a      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e08e      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e086      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	4b46      	ldr	r3, [pc, #280]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 0203 	bic.w	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4943      	ldr	r1, [pc, #268]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a18:	f7ff f896 	bl	8000b48 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7ff f892 	bl	8000b48 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e06e      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	4b3a      	ldr	r3, [pc, #232]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 020c 	and.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1eb      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d010      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d208      	bcs.n	8001a76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a64:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	492b      	ldr	r1, [pc, #172]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a76:	4b29      	ldr	r3, [pc, #164]	@ (8001b1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d210      	bcs.n	8001aa6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a84:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 0207 	bic.w	r2, r3, #7
 8001a8c:	4923      	ldr	r1, [pc, #140]	@ (8001b1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a94:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e036      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d008      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4918      	ldr	r1, [pc, #96]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d009      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4910      	ldr	r1, [pc, #64]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae4:	f000 f824 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	490b      	ldr	r1, [pc, #44]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f4>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
 8001b00:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_RCC_ClockConfig+0x1fc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe ffcd 	bl	8000aa8 <HAL_InitTick>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b12:	7afb      	ldrb	r3, [r7, #11]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	08005548 	.word	0x08005548
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b48:	4b3b      	ldr	r3, [pc, #236]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x34>
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d121      	bne.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d11e      	bne.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b64:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b70:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e005      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b80:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10d      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d102      	bne.n	8001bae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	e004      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d134      	bne.n	8001c28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d003      	beq.n	8001bd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d003      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0xac>
 8001bd4:	e005      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd8:	617b      	str	r3, [r7, #20]
      break;
 8001bda:	e005      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bde:	617b      	str	r3, [r7, #20]
      break;
 8001be0:	e002      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	617b      	str	r3, [r7, #20]
      break;
 8001be6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	fb03 f202 	mul.w	r2, r3, r2
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	0e5b      	lsrs	r3, r3, #25
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c28:	69bb      	ldr	r3, [r7, #24]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	@ 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	08005560 	.word	0x08005560
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4904      	ldr	r1, [pc, #16]	@ (8001c88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08005558 	.word	0x08005558

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c90:	f7ff ffda 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0adb      	lsrs	r3, r3, #11
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4904      	ldr	r1, [pc, #16]	@ (8001cb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08005558 	.word	0x08005558

08001cb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cd0:	f7ff f9ee 	bl	80010b0 <HAL_PWREx_GetVoltageRange>
 8001cd4:	6178      	str	r0, [r7, #20]
 8001cd6:	e014      	b.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	4a24      	ldr	r2, [pc, #144]	@ (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ce4:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cf0:	f7ff f9de 	bl	80010b0 <HAL_PWREx_GetVoltageRange>
 8001cf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d08:	d10b      	bne.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b80      	cmp	r3, #128	@ 0x80
 8001d0e:	d919      	bls.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d14:	d902      	bls.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d16:	2302      	movs	r3, #2
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e013      	b.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	e010      	b.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b80      	cmp	r3, #128	@ 0x80
 8001d26:	d902      	bls.n	8001d2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d28:	2303      	movs	r3, #3
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	e00a      	b.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b80      	cmp	r3, #128	@ 0x80
 8001d32:	d102      	bne.n	8001d3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d34:	2302      	movs	r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	e004      	b.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b70      	cmp	r3, #112	@ 0x70
 8001d3e:	d101      	bne.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d40:	2301      	movs	r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 0207 	bic.w	r2, r3, #7
 8001d4c:	4909      	ldr	r1, [pc, #36]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40022000 	.word	0x40022000

08001d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d80:	2300      	movs	r3, #0
 8001d82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d84:	2300      	movs	r3, #0
 8001d86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d041      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d9c:	d02a      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d9e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001da2:	d824      	bhi.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001da4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001da8:	d008      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001daa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dae:	d81e      	bhi.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001db8:	d010      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dba:	e018      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dbc:	4b86      	ldr	r3, [pc, #536]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4a85      	ldr	r2, [pc, #532]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dc8:	e015      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fabb 	bl	800234c <RCCEx_PLLSAI1_Config>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dda:	e00c      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3320      	adds	r3, #32
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fba6 	bl	8002534 <RCCEx_PLLSAI2_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dec:	e003      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	74fb      	strb	r3, [r7, #19]
      break;
 8001df2:	e000      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001df6:	7cfb      	ldrb	r3, [r7, #19]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10b      	bne.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dfc:	4b76      	ldr	r3, [pc, #472]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e0a:	4973      	ldr	r1, [pc, #460]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e12:	e001      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d041      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e2c:	d02a      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e2e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e32:	d824      	bhi.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e38:	d008      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e3e:	d81e      	bhi.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e48:	d010      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e4c:	4b62      	ldr	r3, [pc, #392]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4a61      	ldr	r2, [pc, #388]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e58:	e015      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fa73 	bl	800234c <RCCEx_PLLSAI1_Config>
 8001e66:	4603      	mov	r3, r0
 8001e68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e6a:	e00c      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3320      	adds	r3, #32
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fb5e 	bl	8002534 <RCCEx_PLLSAI2_Config>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e7c:	e003      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	74fb      	strb	r3, [r7, #19]
      break;
 8001e82:	e000      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e86:	7cfb      	ldrb	r3, [r7, #19]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e8c:	4b52      	ldr	r3, [pc, #328]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e9a:	494f      	ldr	r1, [pc, #316]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ea2:	e001      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea4:	7cfb      	ldrb	r3, [r7, #19]
 8001ea6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a0 	beq.w	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eba:	4b47      	ldr	r3, [pc, #284]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b41      	ldr	r3, [pc, #260]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	4a40      	ldr	r2, [pc, #256]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001edc:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eec:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ef8:	f7fe fe26 	bl	8000b48 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001efe:	e009      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f00:	f7fe fe22 	bl	8000b48 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d902      	bls.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	74fb      	strb	r3, [r7, #19]
        break;
 8001f12:	e005      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f14:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ef      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d15c      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f26:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01f      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d019      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f44:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f50:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f56:	4a20      	ldr	r2, [pc, #128]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f60:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f66:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f70:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d016      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7fe fde1 	bl	8000b48 <HAL_GetTick>
 8001f86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f88:	e00b      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fddd 	bl	8000b48 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d902      	bls.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	74fb      	strb	r3, [r7, #19]
            break;
 8001fa0:	e006      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ec      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fb0:	7cfb      	ldrb	r3, [r7, #19]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fc6:	4904      	ldr	r1, [pc, #16]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fce:	e009      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	74bb      	strb	r3, [r7, #18]
 8001fd4:	e006      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe4:	7c7b      	ldrb	r3, [r7, #17]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b9e      	ldr	r3, [pc, #632]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4a9d      	ldr	r2, [pc, #628]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002002:	4b98      	ldr	r3, [pc, #608]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	f023 0203 	bic.w	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002010:	4994      	ldr	r1, [pc, #592]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002024:	4b8f      	ldr	r3, [pc, #572]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f023 020c 	bic.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002032:	498c      	ldr	r1, [pc, #560]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002046:	4b87      	ldr	r3, [pc, #540]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	4983      	ldr	r1, [pc, #524]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002068:	4b7e      	ldr	r3, [pc, #504]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	497b      	ldr	r1, [pc, #492]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800208a:	4b76      	ldr	r3, [pc, #472]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002098:	4972      	ldr	r1, [pc, #456]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ba:	496a      	ldr	r1, [pc, #424]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ce:	4b65      	ldr	r3, [pc, #404]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	4961      	ldr	r1, [pc, #388]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fe:	4959      	ldr	r1, [pc, #356]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002112:	4b54      	ldr	r3, [pc, #336]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002120:	4950      	ldr	r1, [pc, #320]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002134:	4b4b      	ldr	r3, [pc, #300]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002142:	4948      	ldr	r1, [pc, #288]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002156:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	493f      	ldr	r1, [pc, #252]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d028      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002178:	4b3a      	ldr	r3, [pc, #232]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002186:	4937      	ldr	r1, [pc, #220]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002196:	d106      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002198:	4b32      	ldr	r3, [pc, #200]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a31      	ldr	r2, [pc, #196]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a2:	60d3      	str	r3, [r2, #12]
 80021a4:	e011      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021ae:	d10c      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	2101      	movs	r1, #1
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f8c8 	bl	800234c <RCCEx_PLLSAI1_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d028      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021d6:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e4:	491f      	ldr	r1, [pc, #124]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021f4:	d106      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002200:	60d3      	str	r3, [r2, #12]
 8002202:	e011      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800220c:	d10c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f899 	bl	800234c <RCCEx_PLLSAI1_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d02b      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002242:	4908      	ldr	r1, [pc, #32]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800224e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002252:	d109      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a02      	ldr	r2, [pc, #8]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225e:	60d3      	str	r3, [r2, #12]
 8002260:	e014      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800226c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f867 	bl	800234c <RCCEx_PLLSAI1_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02f      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002298:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022a6:	4928      	ldr	r1, [pc, #160]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022b6:	d10d      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	2102      	movs	r1, #2
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f844 	bl	800234c <RCCEx_PLLSAI1_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d014      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	74bb      	strb	r3, [r7, #18]
 80022d2:	e011      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3320      	adds	r3, #32
 80022e2:	2102      	movs	r1, #2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f925 	bl	8002534 <RCCEx_PLLSAI2_Config>
 80022ea:	4603      	mov	r3, r0
 80022ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002304:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002312:	490d      	ldr	r1, [pc, #52]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002336:	4904      	ldr	r1, [pc, #16]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800233e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000

0800234c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800235a:	4b75      	ldr	r3, [pc, #468]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d018      	beq.n	8002398 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002366:	4b72      	ldr	r3, [pc, #456]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0203 	and.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d10d      	bne.n	8002392 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
       ||
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800237e:	4b6c      	ldr	r3, [pc, #432]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
       ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d047      	beq.n	8002422 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e044      	b.n	8002422 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d018      	beq.n	80023d2 <RCCEx_PLLSAI1_Config+0x86>
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d825      	bhi.n	80023f0 <RCCEx_PLLSAI1_Config+0xa4>
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d002      	beq.n	80023ae <RCCEx_PLLSAI1_Config+0x62>
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d009      	beq.n	80023c0 <RCCEx_PLLSAI1_Config+0x74>
 80023ac:	e020      	b.n	80023f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ae:	4b60      	ldr	r3, [pc, #384]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d11d      	bne.n	80023f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023be:	e01a      	b.n	80023f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d116      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e013      	b.n	80023fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023d2:	4b57      	ldr	r3, [pc, #348]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10f      	bne.n	80023fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023de:	4b54      	ldr	r3, [pc, #336]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023ee:	e006      	b.n	80023fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
      break;
 80023f4:	e004      	b.n	8002400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023f6:	bf00      	nop
 80023f8:	e002      	b.n	8002400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023fa:	bf00      	nop
 80023fc:	e000      	b.n	8002400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002406:	4b4a      	ldr	r3, [pc, #296]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	430b      	orrs	r3, r1
 800241c:	4944      	ldr	r1, [pc, #272]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d17d      	bne.n	8002524 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002428:	4b41      	ldr	r3, [pc, #260]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a40      	ldr	r2, [pc, #256]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002434:	f7fe fb88 	bl	8000b48 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800243a:	e009      	b.n	8002450 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800243c:	f7fe fb84 	bl	8000b48 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d902      	bls.n	8002450 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	73fb      	strb	r3, [r7, #15]
        break;
 800244e:	e005      	b.n	800245c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002450:	4b37      	ldr	r3, [pc, #220]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ef      	bne.n	800243c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d160      	bne.n	8002524 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d111      	bne.n	800248c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002468:	4b31      	ldr	r3, [pc, #196]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002470:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6892      	ldr	r2, [r2, #8]
 8002478:	0211      	lsls	r1, r2, #8
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68d2      	ldr	r2, [r2, #12]
 800247e:	0912      	lsrs	r2, r2, #4
 8002480:	0452      	lsls	r2, r2, #17
 8002482:	430a      	orrs	r2, r1
 8002484:	492a      	ldr	r1, [pc, #168]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	610b      	str	r3, [r1, #16]
 800248a:	e027      	b.n	80024dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d112      	bne.n	80024b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002492:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800249a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6892      	ldr	r2, [r2, #8]
 80024a2:	0211      	lsls	r1, r2, #8
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6912      	ldr	r2, [r2, #16]
 80024a8:	0852      	lsrs	r2, r2, #1
 80024aa:	3a01      	subs	r2, #1
 80024ac:	0552      	lsls	r2, r2, #21
 80024ae:	430a      	orrs	r2, r1
 80024b0:	491f      	ldr	r1, [pc, #124]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	610b      	str	r3, [r1, #16]
 80024b6:	e011      	b.n	80024dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80024c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6892      	ldr	r2, [r2, #8]
 80024c8:	0211      	lsls	r1, r2, #8
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6952      	ldr	r2, [r2, #20]
 80024ce:	0852      	lsrs	r2, r2, #1
 80024d0:	3a01      	subs	r2, #1
 80024d2:	0652      	lsls	r2, r2, #25
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4916      	ldr	r1, [pc, #88]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024dc:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a13      	ldr	r2, [pc, #76]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe fb2e 	bl	8000b48 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ee:	e009      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024f0:	f7fe fb2a 	bl	8000b48 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d902      	bls.n	8002504 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	73fb      	strb	r3, [r7, #15]
          break;
 8002502:	e005      	b.n	8002510 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002504:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ef      	beq.n	80024f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	4904      	ldr	r1, [pc, #16]	@ (8002530 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000

08002534 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002542:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d018      	beq.n	8002580 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800254e:	4b67      	ldr	r3, [pc, #412]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0203 	and.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d10d      	bne.n	800257a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
       ||
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002566:	4b61      	ldr	r3, [pc, #388]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
       ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d047      	beq.n	800260a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e044      	b.n	800260a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d018      	beq.n	80025ba <RCCEx_PLLSAI2_Config+0x86>
 8002588:	2b03      	cmp	r3, #3
 800258a:	d825      	bhi.n	80025d8 <RCCEx_PLLSAI2_Config+0xa4>
 800258c:	2b01      	cmp	r3, #1
 800258e:	d002      	beq.n	8002596 <RCCEx_PLLSAI2_Config+0x62>
 8002590:	2b02      	cmp	r3, #2
 8002592:	d009      	beq.n	80025a8 <RCCEx_PLLSAI2_Config+0x74>
 8002594:	e020      	b.n	80025d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002596:	4b55      	ldr	r3, [pc, #340]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11d      	bne.n	80025de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a6:	e01a      	b.n	80025de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025a8:	4b50      	ldr	r3, [pc, #320]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d116      	bne.n	80025e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b8:	e013      	b.n	80025e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ba:	4b4c      	ldr	r3, [pc, #304]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025c6:	4b49      	ldr	r3, [pc, #292]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025d6:	e006      	b.n	80025e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e004      	b.n	80025e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025de:	bf00      	nop
 80025e0:	e002      	b.n	80025e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ee:	4b3f      	ldr	r3, [pc, #252]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	430b      	orrs	r3, r1
 8002604:	4939      	ldr	r1, [pc, #228]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d167      	bne.n	80026e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002610:	4b36      	ldr	r3, [pc, #216]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a35      	ldr	r2, [pc, #212]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800261a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261c:	f7fe fa94 	bl	8000b48 <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002622:	e009      	b.n	8002638 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002624:	f7fe fa90 	bl	8000b48 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d902      	bls.n	8002638 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	73fb      	strb	r3, [r7, #15]
        break;
 8002636:	e005      	b.n	8002644 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002638:	4b2c      	ldr	r3, [pc, #176]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ef      	bne.n	8002624 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d14a      	bne.n	80026e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d111      	bne.n	8002674 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002650:	4b26      	ldr	r3, [pc, #152]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6892      	ldr	r2, [r2, #8]
 8002660:	0211      	lsls	r1, r2, #8
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68d2      	ldr	r2, [r2, #12]
 8002666:	0912      	lsrs	r2, r2, #4
 8002668:	0452      	lsls	r2, r2, #17
 800266a:	430a      	orrs	r2, r1
 800266c:	491f      	ldr	r1, [pc, #124]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	614b      	str	r3, [r1, #20]
 8002672:	e011      	b.n	8002698 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002674:	4b1d      	ldr	r3, [pc, #116]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800267c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6892      	ldr	r2, [r2, #8]
 8002684:	0211      	lsls	r1, r2, #8
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6912      	ldr	r2, [r2, #16]
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	3a01      	subs	r2, #1
 800268e:	0652      	lsls	r2, r2, #25
 8002690:	430a      	orrs	r2, r1
 8002692:	4916      	ldr	r1, [pc, #88]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002694:	4313      	orrs	r3, r2
 8002696:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002698:	4b14      	ldr	r3, [pc, #80]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a13      	ldr	r2, [pc, #76]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fa50 	bl	8000b48 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026aa:	e009      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026ac:	f7fe fa4c 	bl	8000b48 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	73fb      	strb	r3, [r7, #15]
          break;
 80026be:	e005      	b.n	80026cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026c0:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ef      	beq.n	80026ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	4904      	ldr	r1, [pc, #16]	@ (80026ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e040      	b.n	8002784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe f8e8 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	@ 0x24
 800271c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fb6a 	bl	8002e10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f8af 	bl	80028a0 <UART_SetConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e01b      	b.n	8002784 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800275a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800276a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fbe9 	bl	8002f54 <UART_CheckIdleState>
 8002782:	4603      	mov	r3, r0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d177      	bne.n	8002894 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_UART_Transmit+0x24>
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e070      	b.n	8002896 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2221      	movs	r2, #33	@ 0x21
 80027c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027c2:	f7fe f9c1 	bl	8000b48 <HAL_GetTick>
 80027c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e0:	d108      	bne.n	80027f4 <HAL_UART_Transmit+0x68>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	e003      	b.n	80027fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027fc:	e02f      	b.n	800285e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	2180      	movs	r1, #128	@ 0x80
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fc4b 	bl	80030a4 <UART_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e03b      	b.n	8002896 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	881a      	ldrh	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002830:	b292      	uxth	r2, r2
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	3302      	adds	r3, #2
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	e007      	b.n	800284c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1c9      	bne.n	80027fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	2140      	movs	r1, #64	@ 0x40
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fc15 	bl	80030a4 <UART_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e005      	b.n	8002896 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002894:	2302      	movs	r3, #2
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a4:	b08a      	sub	sp, #40	@ 0x28
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	431a      	orrs	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4ba4      	ldr	r3, [pc, #656]	@ (8002b60 <UART_SetConfig+0x2c0>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028d8:	430b      	orrs	r3, r1
 80028da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a99      	ldr	r2, [pc, #612]	@ (8002b64 <UART_SetConfig+0x2c4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	4313      	orrs	r3, r2
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a90      	ldr	r2, [pc, #576]	@ (8002b68 <UART_SetConfig+0x2c8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d126      	bne.n	8002978 <UART_SetConfig+0xd8>
 800292a:	4b90      	ldr	r3, [pc, #576]	@ (8002b6c <UART_SetConfig+0x2cc>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
 8002936:	d81b      	bhi.n	8002970 <UART_SetConfig+0xd0>
 8002938:	a201      	add	r2, pc, #4	@ (adr r2, 8002940 <UART_SetConfig+0xa0>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002951 	.word	0x08002951
 8002944:	08002961 	.word	0x08002961
 8002948:	08002959 	.word	0x08002959
 800294c:	08002969 	.word	0x08002969
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002956:	e116      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002958:	2302      	movs	r3, #2
 800295a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800295e:	e112      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002960:	2304      	movs	r3, #4
 8002962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002966:	e10e      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002968:	2308      	movs	r3, #8
 800296a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800296e:	e10a      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002970:	2310      	movs	r3, #16
 8002972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002976:	e106      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a7c      	ldr	r2, [pc, #496]	@ (8002b70 <UART_SetConfig+0x2d0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d138      	bne.n	80029f4 <UART_SetConfig+0x154>
 8002982:	4b7a      	ldr	r3, [pc, #488]	@ (8002b6c <UART_SetConfig+0x2cc>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d82d      	bhi.n	80029ec <UART_SetConfig+0x14c>
 8002990:	a201      	add	r2, pc, #4	@ (adr r2, 8002998 <UART_SetConfig+0xf8>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029cd 	.word	0x080029cd
 800299c:	080029ed 	.word	0x080029ed
 80029a0:	080029ed 	.word	0x080029ed
 80029a4:	080029ed 	.word	0x080029ed
 80029a8:	080029dd 	.word	0x080029dd
 80029ac:	080029ed 	.word	0x080029ed
 80029b0:	080029ed 	.word	0x080029ed
 80029b4:	080029ed 	.word	0x080029ed
 80029b8:	080029d5 	.word	0x080029d5
 80029bc:	080029ed 	.word	0x080029ed
 80029c0:	080029ed 	.word	0x080029ed
 80029c4:	080029ed 	.word	0x080029ed
 80029c8:	080029e5 	.word	0x080029e5
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d2:	e0d8      	b.n	8002b86 <UART_SetConfig+0x2e6>
 80029d4:	2302      	movs	r3, #2
 80029d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029da:	e0d4      	b.n	8002b86 <UART_SetConfig+0x2e6>
 80029dc:	2304      	movs	r3, #4
 80029de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e2:	e0d0      	b.n	8002b86 <UART_SetConfig+0x2e6>
 80029e4:	2308      	movs	r3, #8
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ea:	e0cc      	b.n	8002b86 <UART_SetConfig+0x2e6>
 80029ec:	2310      	movs	r3, #16
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f2:	e0c8      	b.n	8002b86 <UART_SetConfig+0x2e6>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b74 <UART_SetConfig+0x2d4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d125      	bne.n	8002a4a <UART_SetConfig+0x1aa>
 80029fe:	4b5b      	ldr	r3, [pc, #364]	@ (8002b6c <UART_SetConfig+0x2cc>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a08:	2b30      	cmp	r3, #48	@ 0x30
 8002a0a:	d016      	beq.n	8002a3a <UART_SetConfig+0x19a>
 8002a0c:	2b30      	cmp	r3, #48	@ 0x30
 8002a0e:	d818      	bhi.n	8002a42 <UART_SetConfig+0x1a2>
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d00a      	beq.n	8002a2a <UART_SetConfig+0x18a>
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d814      	bhi.n	8002a42 <UART_SetConfig+0x1a2>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <UART_SetConfig+0x182>
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d008      	beq.n	8002a32 <UART_SetConfig+0x192>
 8002a20:	e00f      	b.n	8002a42 <UART_SetConfig+0x1a2>
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a28:	e0ad      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a30:	e0a9      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002a32:	2304      	movs	r3, #4
 8002a34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a38:	e0a5      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a40:	e0a1      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002a42:	2310      	movs	r3, #16
 8002a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a48:	e09d      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b78 <UART_SetConfig+0x2d8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d125      	bne.n	8002aa0 <UART_SetConfig+0x200>
 8002a54:	4b45      	ldr	r3, [pc, #276]	@ (8002b6c <UART_SetConfig+0x2cc>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a60:	d016      	beq.n	8002a90 <UART_SetConfig+0x1f0>
 8002a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a64:	d818      	bhi.n	8002a98 <UART_SetConfig+0x1f8>
 8002a66:	2b80      	cmp	r3, #128	@ 0x80
 8002a68:	d00a      	beq.n	8002a80 <UART_SetConfig+0x1e0>
 8002a6a:	2b80      	cmp	r3, #128	@ 0x80
 8002a6c:	d814      	bhi.n	8002a98 <UART_SetConfig+0x1f8>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <UART_SetConfig+0x1d8>
 8002a72:	2b40      	cmp	r3, #64	@ 0x40
 8002a74:	d008      	beq.n	8002a88 <UART_SetConfig+0x1e8>
 8002a76:	e00f      	b.n	8002a98 <UART_SetConfig+0x1f8>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a7e:	e082      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002a80:	2302      	movs	r3, #2
 8002a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a86:	e07e      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8e:	e07a      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002a90:	2308      	movs	r3, #8
 8002a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a96:	e076      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002a98:	2310      	movs	r3, #16
 8002a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9e:	e072      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a35      	ldr	r2, [pc, #212]	@ (8002b7c <UART_SetConfig+0x2dc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d12a      	bne.n	8002b00 <UART_SetConfig+0x260>
 8002aaa:	4b30      	ldr	r3, [pc, #192]	@ (8002b6c <UART_SetConfig+0x2cc>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ab8:	d01a      	beq.n	8002af0 <UART_SetConfig+0x250>
 8002aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002abe:	d81b      	bhi.n	8002af8 <UART_SetConfig+0x258>
 8002ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ac4:	d00c      	beq.n	8002ae0 <UART_SetConfig+0x240>
 8002ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aca:	d815      	bhi.n	8002af8 <UART_SetConfig+0x258>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <UART_SetConfig+0x238>
 8002ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad4:	d008      	beq.n	8002ae8 <UART_SetConfig+0x248>
 8002ad6:	e00f      	b.n	8002af8 <UART_SetConfig+0x258>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ade:	e052      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae6:	e04e      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aee:	e04a      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002af0:	2308      	movs	r3, #8
 8002af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af6:	e046      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002af8:	2310      	movs	r3, #16
 8002afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afe:	e042      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a17      	ldr	r2, [pc, #92]	@ (8002b64 <UART_SetConfig+0x2c4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d13a      	bne.n	8002b80 <UART_SetConfig+0x2e0>
 8002b0a:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <UART_SetConfig+0x2cc>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b18:	d01a      	beq.n	8002b50 <UART_SetConfig+0x2b0>
 8002b1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b1e:	d81b      	bhi.n	8002b58 <UART_SetConfig+0x2b8>
 8002b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b24:	d00c      	beq.n	8002b40 <UART_SetConfig+0x2a0>
 8002b26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b2a:	d815      	bhi.n	8002b58 <UART_SetConfig+0x2b8>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <UART_SetConfig+0x298>
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b34:	d008      	beq.n	8002b48 <UART_SetConfig+0x2a8>
 8002b36:	e00f      	b.n	8002b58 <UART_SetConfig+0x2b8>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b3e:	e022      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002b40:	2302      	movs	r3, #2
 8002b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b46:	e01e      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002b48:	2304      	movs	r3, #4
 8002b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b4e:	e01a      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002b50:	2308      	movs	r3, #8
 8002b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b56:	e016      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002b58:	2310      	movs	r3, #16
 8002b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b5e:	e012      	b.n	8002b86 <UART_SetConfig+0x2e6>
 8002b60:	efff69f3 	.word	0xefff69f3
 8002b64:	40008000 	.word	0x40008000
 8002b68:	40013800 	.word	0x40013800
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40004400 	.word	0x40004400
 8002b74:	40004800 	.word	0x40004800
 8002b78:	40004c00 	.word	0x40004c00
 8002b7c:	40005000 	.word	0x40005000
 8002b80:	2310      	movs	r3, #16
 8002b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a9f      	ldr	r2, [pc, #636]	@ (8002e08 <UART_SetConfig+0x568>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d17a      	bne.n	8002c86 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d824      	bhi.n	8002be2 <UART_SetConfig+0x342>
 8002b98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba0 <UART_SetConfig+0x300>)
 8002b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002bc5 	.word	0x08002bc5
 8002ba4:	08002be3 	.word	0x08002be3
 8002ba8:	08002bcd 	.word	0x08002bcd
 8002bac:	08002be3 	.word	0x08002be3
 8002bb0:	08002bd3 	.word	0x08002bd3
 8002bb4:	08002be3 	.word	0x08002be3
 8002bb8:	08002be3 	.word	0x08002be3
 8002bbc:	08002be3 	.word	0x08002be3
 8002bc0:	08002bdb 	.word	0x08002bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bc4:	f7ff f84c 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002bc8:	61f8      	str	r0, [r7, #28]
        break;
 8002bca:	e010      	b.n	8002bee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bcc:	4b8f      	ldr	r3, [pc, #572]	@ (8002e0c <UART_SetConfig+0x56c>)
 8002bce:	61fb      	str	r3, [r7, #28]
        break;
 8002bd0:	e00d      	b.n	8002bee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd2:	f7fe ffad 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8002bd6:	61f8      	str	r0, [r7, #28]
        break;
 8002bd8:	e009      	b.n	8002bee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bde:	61fb      	str	r3, [r7, #28]
        break;
 8002be0:	e005      	b.n	8002bee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80fb 	beq.w	8002dec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d305      	bcc.n	8002c12 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d903      	bls.n	8002c1a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c18:	e0e8      	b.n	8002dec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	461c      	mov	r4, r3
 8002c20:	4615      	mov	r5, r2
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	022b      	lsls	r3, r5, #8
 8002c2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c30:	0222      	lsls	r2, r4, #8
 8002c32:	68f9      	ldr	r1, [r7, #12]
 8002c34:	6849      	ldr	r1, [r1, #4]
 8002c36:	0849      	lsrs	r1, r1, #1
 8002c38:	2000      	movs	r0, #0
 8002c3a:	4688      	mov	r8, r1
 8002c3c:	4681      	mov	r9, r0
 8002c3e:	eb12 0a08 	adds.w	sl, r2, r8
 8002c42:	eb43 0b09 	adc.w	fp, r3, r9
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c54:	4650      	mov	r0, sl
 8002c56:	4659      	mov	r1, fp
 8002c58:	f7fd fac2 	bl	80001e0 <__aeabi_uldivmod>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4613      	mov	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c6a:	d308      	bcc.n	8002c7e <UART_SetConfig+0x3de>
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c72:	d204      	bcs.n	8002c7e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	e0b6      	b.n	8002dec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c84:	e0b2      	b.n	8002dec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c8e:	d15e      	bne.n	8002d4e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002c90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d828      	bhi.n	8002cea <UART_SetConfig+0x44a>
 8002c98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca0 <UART_SetConfig+0x400>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cc5 	.word	0x08002cc5
 8002ca4:	08002ccd 	.word	0x08002ccd
 8002ca8:	08002cd5 	.word	0x08002cd5
 8002cac:	08002ceb 	.word	0x08002ceb
 8002cb0:	08002cdb 	.word	0x08002cdb
 8002cb4:	08002ceb 	.word	0x08002ceb
 8002cb8:	08002ceb 	.word	0x08002ceb
 8002cbc:	08002ceb 	.word	0x08002ceb
 8002cc0:	08002ce3 	.word	0x08002ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f7fe ffcc 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	61f8      	str	r0, [r7, #28]
        break;
 8002cca:	e014      	b.n	8002cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ccc:	f7fe ffde 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002cd0:	61f8      	str	r0, [r7, #28]
        break;
 8002cd2:	e010      	b.n	8002cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e0c <UART_SetConfig+0x56c>)
 8002cd6:	61fb      	str	r3, [r7, #28]
        break;
 8002cd8:	e00d      	b.n	8002cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cda:	f7fe ff29 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8002cde:	61f8      	str	r0, [r7, #28]
        break;
 8002ce0:	e009      	b.n	8002cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ce6:	61fb      	str	r3, [r7, #28]
        break;
 8002ce8:	e005      	b.n	8002cf6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d077      	beq.n	8002dec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005a      	lsls	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	441a      	add	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d916      	bls.n	8002d46 <UART_SetConfig+0x4a6>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d1e:	d212      	bcs.n	8002d46 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f023 030f 	bic.w	r3, r3, #15
 8002d28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	8afb      	ldrh	r3, [r7, #22]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	8afa      	ldrh	r2, [r7, #22]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	e052      	b.n	8002dec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d4c:	e04e      	b.n	8002dec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d827      	bhi.n	8002da6 <UART_SetConfig+0x506>
 8002d56:	a201      	add	r2, pc, #4	@ (adr r2, 8002d5c <UART_SetConfig+0x4bc>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d81 	.word	0x08002d81
 8002d60:	08002d89 	.word	0x08002d89
 8002d64:	08002d91 	.word	0x08002d91
 8002d68:	08002da7 	.word	0x08002da7
 8002d6c:	08002d97 	.word	0x08002d97
 8002d70:	08002da7 	.word	0x08002da7
 8002d74:	08002da7 	.word	0x08002da7
 8002d78:	08002da7 	.word	0x08002da7
 8002d7c:	08002d9f 	.word	0x08002d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d80:	f7fe ff6e 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002d84:	61f8      	str	r0, [r7, #28]
        break;
 8002d86:	e014      	b.n	8002db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d88:	f7fe ff80 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002d8c:	61f8      	str	r0, [r7, #28]
        break;
 8002d8e:	e010      	b.n	8002db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d90:	4b1e      	ldr	r3, [pc, #120]	@ (8002e0c <UART_SetConfig+0x56c>)
 8002d92:	61fb      	str	r3, [r7, #28]
        break;
 8002d94:	e00d      	b.n	8002db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d96:	f7fe fecb 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8002d9a:	61f8      	str	r0, [r7, #28]
        break;
 8002d9c:	e009      	b.n	8002db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002da2:	61fb      	str	r3, [r7, #28]
        break;
 8002da4:	e005      	b.n	8002db2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002db0:	bf00      	nop
    }

    if (pclk != 0U)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d019      	beq.n	8002dec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	085a      	lsrs	r2, r3, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	441a      	add	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b0f      	cmp	r3, #15
 8002dd0:	d909      	bls.n	8002de6 <UART_SetConfig+0x546>
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd8:	d205      	bcs.n	8002de6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	e002      	b.n	8002dec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002df8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3728      	adds	r7, #40	@ 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	40008000 	.word	0x40008000
 8002e0c:	00f42400 	.word	0x00f42400

08002e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01a      	beq.n	8002f26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f0e:	d10a      	bne.n	8002f26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
  }
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b098      	sub	sp, #96	@ 0x60
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f64:	f7fd fdf0 	bl	8000b48 <HAL_GetTick>
 8002f68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d12e      	bne.n	8002fd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f80:	2200      	movs	r2, #0
 8002f82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f88c 	bl	80030a4 <UART_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d021      	beq.n	8002fd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fb2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e6      	bne.n	8002f92 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e062      	b.n	800309c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d149      	bne.n	8003078 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fec:	2200      	movs	r2, #0
 8002fee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f856 	bl	80030a4 <UART_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03c      	beq.n	8003078 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	e853 3f00 	ldrex	r3, [r3]
 800300a:	623b      	str	r3, [r7, #32]
   return(result);
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800301c:	633b      	str	r3, [r7, #48]	@ 0x30
 800301e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003024:	e841 2300 	strex	r3, r2, [r1]
 8003028:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800302a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e6      	bne.n	8002ffe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3308      	adds	r3, #8
 8003036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3308      	adds	r3, #8
 800304e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003050:	61fa      	str	r2, [r7, #28]
 8003052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	69b9      	ldr	r1, [r7, #24]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	617b      	str	r3, [r7, #20]
   return(result);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e5      	bne.n	8003030 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e011      	b.n	800309c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3758      	adds	r7, #88	@ 0x58
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b4:	e04f      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d04b      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7fd fd43 	bl	8000b48 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e04e      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d037      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b80      	cmp	r3, #128	@ 0x80
 80030ea:	d034      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b40      	cmp	r3, #64	@ 0x40
 80030f0:	d031      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d110      	bne.n	8003122 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f838 	bl	800317e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2208      	movs	r2, #8
 8003112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e029      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003130:	d111      	bne.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800313a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f81e 	bl	800317e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e00f      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4013      	ands	r3, r2
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	429a      	cmp	r2, r3
 8003172:	d0a0      	beq.n	80030b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800317e:	b480      	push	{r7}
 8003180:	b095      	sub	sp, #84	@ 0x54
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318e:	e853 3f00 	ldrex	r3, [r3]
 8003192:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003196:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800319a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80031a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e6      	bne.n	8003186 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3308      	adds	r3, #8
 80031be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3308      	adds	r3, #8
 80031d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e5      	bne.n	80031b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d118      	bne.n	8003226 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	60bb      	str	r3, [r7, #8]
   return(result);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f023 0310 	bic.w	r3, r3, #16
 8003208:	647b      	str	r3, [r7, #68]	@ 0x44
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6979      	ldr	r1, [r7, #20]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	613b      	str	r3, [r7, #16]
   return(result);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e6      	bne.n	80031f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800323a:	bf00      	nop
 800323c:	3754      	adds	r7, #84	@ 0x54
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003258:	2b84      	cmp	r3, #132	@ 0x84
 800325a:	d005      	beq.n	8003268 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800325c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	3303      	adds	r3, #3
 8003266:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003268:	68fb      	ldr	r3, [r7, #12]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800327a:	f000 febd 	bl	8003ff8 <vTaskStartScheduler>
  
  return osOK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}

08003284 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003286:	b089      	sub	sp, #36	@ 0x24
 8003288:	af04      	add	r7, sp, #16
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d020      	beq.n	80032d8 <osThreadCreate+0x54>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01c      	beq.n	80032d8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685c      	ldr	r4, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691e      	ldr	r6, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ffc8 	bl	8003246 <makeFreeRtosPriority>
 80032b6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032c0:	9202      	str	r2, [sp, #8]
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	9100      	str	r1, [sp, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	4632      	mov	r2, r6
 80032ca:	4629      	mov	r1, r5
 80032cc:	4620      	mov	r0, r4
 80032ce:	f000 fcc5 	bl	8003c5c <xTaskCreateStatic>
 80032d2:	4603      	mov	r3, r0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e01c      	b.n	8003312 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685c      	ldr	r4, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032e4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ffaa 	bl	8003246 <makeFreeRtosPriority>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f107 030c 	add.w	r3, r7, #12
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	9200      	str	r2, [sp, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4632      	mov	r2, r6
 8003300:	4629      	mov	r1, r5
 8003302:	4620      	mov	r0, r4
 8003304:	f000 fd0a 	bl	8003d1c <xTaskCreate>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800331c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <osDelay+0x16>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	e000      	b.n	8003334 <osDelay+0x18>
 8003332:	2301      	movs	r3, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fe29 	bl	8003f8c <vTaskDelay>
  
  return osOK;
 800333a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 0208 	add.w	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f103 0208 	add.w	r2, r3, #8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f103 0208 	add.w	r2, r3, #8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	601a      	str	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d103      	bne.n	8003406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e00c      	b.n	8003420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3308      	adds	r3, #8
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e002      	b.n	8003414 <vListInsert+0x2e>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	d2f6      	bcs.n	800340e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	601a      	str	r2, [r3, #0]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6892      	ldr	r2, [r2, #8]
 800346e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6852      	ldr	r2, [r2, #4]
 8003478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d103      	bne.n	800348c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	1e5a      	subs	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034d8:	f001 fcee 	bl	8004eb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	68f9      	ldr	r1, [r7, #12]
 80034e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	441a      	add	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003508:	3b01      	subs	r3, #1
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	441a      	add	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	22ff      	movs	r2, #255	@ 0xff
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	22ff      	movs	r2, #255	@ 0xff
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d114      	bne.n	8003558 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01a      	beq.n	800356c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3310      	adds	r3, #16
 800353a:	4618      	mov	r0, r3
 800353c:	f000 ffa6 	bl	800448c <xTaskRemoveFromEventList>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d012      	beq.n	800356c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003546:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <xQueueGenericReset+0xd0>)
 8003548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	e009      	b.n	800356c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3310      	adds	r3, #16
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fef1 	bl	8003344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3324      	adds	r3, #36	@ 0x24
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff feec 	bl	8003344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800356c:	f001 fcd6 	bl	8004f1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003570:	2301      	movs	r3, #1
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	@ 0x28
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <xQueueGenericCreate+0x2c>
	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	613b      	str	r3, [r7, #16]
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3348      	adds	r3, #72	@ 0x48
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 fd5c 	bl	8005078 <pvPortMalloc>
 80035c0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d011      	beq.n	80035ec <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3348      	adds	r3, #72	@ 0x48
 80035d0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035da:	79fa      	ldrb	r2, [r7, #7]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f805 	bl	80035f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035ec:	69bb      	ldr	r3, [r7, #24]
	}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e002      	b.n	8003618 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003624:	2101      	movs	r1, #1
 8003626:	69b8      	ldr	r0, [r7, #24]
 8003628:	f7ff ff40 	bl	80034ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08e      	sub	sp, #56	@ 0x38
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003642:	2300      	movs	r3, #0
 8003644:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <xQueueGenericSend+0x34>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <xQueueGenericSend+0x42>
 800366e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <xQueueGenericSend+0x46>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <xQueueGenericSend+0x48>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <xQueueGenericSend+0x64>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d103      	bne.n	80036a6 <xQueueGenericSend+0x72>
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <xQueueGenericSend+0x76>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <xQueueGenericSend+0x78>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <xQueueGenericSend+0x94>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	623b      	str	r3, [r7, #32]
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036c8:	f001 f8a0 	bl	800480c <xTaskGetSchedulerState>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <xQueueGenericSend+0xa4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <xQueueGenericSend+0xa8>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <xQueueGenericSend+0xaa>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <xQueueGenericSend+0xc6>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	61fb      	str	r3, [r7, #28]
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	e7fd      	b.n	80036f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036fa:	f001 fbdd 	bl	8004eb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <xQueueGenericSend+0xdc>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d129      	bne.n	8003764 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003716:	f000 f9b7 	bl	8003a88 <prvCopyDataToQueue>
 800371a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	3324      	adds	r3, #36	@ 0x24
 8003728:	4618      	mov	r0, r3
 800372a:	f000 feaf 	bl	800448c <xTaskRemoveFromEventList>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003734:	4b3f      	ldr	r3, [pc, #252]	@ (8003834 <xQueueGenericSend+0x200>)
 8003736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	e00a      	b.n	800375c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800374c:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <xQueueGenericSend+0x200>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800375c:	f001 fbde 	bl	8004f1c <vPortExitCritical>
				return pdPASS;
 8003760:	2301      	movs	r3, #1
 8003762:	e063      	b.n	800382c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800376a:	f001 fbd7 	bl	8004f1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800376e:	2300      	movs	r3, #0
 8003770:	e05c      	b.n	800382c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fee9 	bl	8004554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003786:	f001 fbc9 	bl	8004f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800378a:	f000 fc97 	bl	80040bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800378e:	f001 fb93 	bl	8004eb8 <vPortEnterCritical>
 8003792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003798:	b25b      	sxtb	r3, r3
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d103      	bne.n	80037a8 <xQueueGenericSend+0x174>
 80037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d103      	bne.n	80037be <xQueueGenericSend+0x18a>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037be:	f001 fbad 	bl	8004f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037c2:	1d3a      	adds	r2, r7, #4
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fed8 	bl	8004580 <xTaskCheckForTimeOut>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d124      	bne.n	8003820 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037d8:	f000 fa28 	bl	8003c2c <prvIsQueueFull>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	3310      	adds	r3, #16
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fe28 	bl	8004440 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037f2:	f000 f9b3 	bl	8003b5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037f6:	f000 fc6f 	bl	80040d8 <xTaskResumeAll>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f af7c 	bne.w	80036fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003802:	4b0c      	ldr	r3, [pc, #48]	@ (8003834 <xQueueGenericSend+0x200>)
 8003804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	e772      	b.n	80036fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003816:	f000 f9a1 	bl	8003b5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800381a:	f000 fc5d 	bl	80040d8 <xTaskResumeAll>
 800381e:	e76c      	b.n	80036fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003820:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003822:	f000 f99b 	bl	8003b5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003826:	f000 fc57 	bl	80040d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800382a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800382c:	4618      	mov	r0, r3
 800382e:	3738      	adds	r7, #56	@ 0x38
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	@ 0x38
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	623b      	str	r3, [r7, #32]
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800386c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	61fb      	str	r3, [r7, #28]
}
 8003886:	bf00      	nop
 8003888:	bf00      	nop
 800388a:	e7fd      	b.n	8003888 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800388c:	f000 ffbe 	bl	800480c <xTaskGetSchedulerState>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <xQueueSemaphoreTake+0x64>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <xQueueSemaphoreTake+0x68>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <xQueueSemaphoreTake+0x6a>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <xQueueSemaphoreTake+0x86>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	61bb      	str	r3, [r7, #24]
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	e7fd      	b.n	80038ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038be:	f001 fafb 	bl	8004eb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80038c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d024      	beq.n	8003918 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80038ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d0:	1e5a      	subs	r2, r3, #1
 80038d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80038de:	f001 f941 	bl	8004b64 <pvTaskIncrementMutexHeldCount>
 80038e2:	4602      	mov	r2, r0
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00f      	beq.n	8003910 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	3310      	adds	r3, #16
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fdc9 	bl	800448c <xTaskRemoveFromEventList>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003900:	4b54      	ldr	r3, [pc, #336]	@ (8003a54 <xQueueSemaphoreTake+0x21c>)
 8003902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003910:	f001 fb04 	bl	8004f1c <vPortExitCritical>
				return pdPASS;
 8003914:	2301      	movs	r3, #1
 8003916:	e098      	b.n	8003a4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d112      	bne.n	8003944 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	617b      	str	r3, [r7, #20]
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800393c:	f001 faee 	bl	8004f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003940:	2300      	movs	r3, #0
 8003942:	e082      	b.n	8003a4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fe00 	bl	8004554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003958:	f001 fae0 	bl	8004f1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800395c:	f000 fbae 	bl	80040bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003960:	f001 faaa 	bl	8004eb8 <vPortEnterCritical>
 8003964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003966:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800396a:	b25b      	sxtb	r3, r3
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d103      	bne.n	800397a <xQueueSemaphoreTake+0x142>
 8003972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800397a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003980:	b25b      	sxtb	r3, r3
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d103      	bne.n	8003990 <xQueueSemaphoreTake+0x158>
 8003988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003990:	f001 fac4 	bl	8004f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003994:	463a      	mov	r2, r7
 8003996:	f107 030c 	add.w	r3, r7, #12
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fdef 	bl	8004580 <xTaskCheckForTimeOut>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d132      	bne.n	8003a0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039aa:	f000 f929 	bl	8003c00 <prvIsQueueEmpty>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d026      	beq.n	8003a02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80039bc:	f001 fa7c 	bl	8004eb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 ff3f 	bl	8004848 <xTaskPriorityInherit>
 80039ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80039cc:	f001 faa6 	bl	8004f1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d2:	3324      	adds	r3, #36	@ 0x24
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fd31 	bl	8004440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039e0:	f000 f8bc 	bl	8003b5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039e4:	f000 fb78 	bl	80040d8 <xTaskResumeAll>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f47f af67 	bne.w	80038be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80039f0:	4b18      	ldr	r3, [pc, #96]	@ (8003a54 <xQueueSemaphoreTake+0x21c>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	e75d      	b.n	80038be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003a02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a04:	f000 f8aa 	bl	8003b5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a08:	f000 fb66 	bl	80040d8 <xTaskResumeAll>
 8003a0c:	e757      	b.n	80038be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003a0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a10:	f000 f8a4 	bl	8003b5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a14:	f000 fb60 	bl	80040d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a1a:	f000 f8f1 	bl	8003c00 <prvIsQueueEmpty>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f43f af4c 	beq.w	80038be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00d      	beq.n	8003a48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003a2c:	f001 fa44 	bl	8004eb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a32:	f000 f811 	bl	8003a58 <prvGetDisinheritPriorityAfterTimeout>
 8003a36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f800 	bl	8004a44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003a44:	f001 fa6a 	bl	8004f1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3738      	adds	r7, #56	@ 0x38
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e001      	b.n	8003a7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d14d      	bne.n	8003b4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 ff3e 	bl	8004934 <xTaskPriorityDisinherit>
 8003ab8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	e043      	b.n	8003b4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d119      	bne.n	8003afc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6858      	ldr	r0, [r3, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	f001 fcea 	bl	80054ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d32b      	bcc.n	8003b4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	e026      	b.n	8003b4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68d8      	ldr	r0, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	461a      	mov	r2, r3
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	f001 fcd0 	bl	80054ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	425b      	negs	r3, r3
 8003b16:	441a      	add	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d207      	bcs.n	8003b38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	425b      	negs	r3, r3
 8003b32:	441a      	add	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d105      	bne.n	8003b4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003b52:	697b      	ldr	r3, [r7, #20]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b64:	f001 f9a8 	bl	8004eb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b70:	e011      	b.n	8003b96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d012      	beq.n	8003ba0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3324      	adds	r3, #36	@ 0x24
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fc84 	bl	800448c <xTaskRemoveFromEventList>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b8a:	f000 fd5d 	bl	8004648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	dce9      	bgt.n	8003b72 <prvUnlockQueue+0x16>
 8003b9e:	e000      	b.n	8003ba2 <prvUnlockQueue+0x46>
					break;
 8003ba0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	22ff      	movs	r2, #255	@ 0xff
 8003ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003baa:	f001 f9b7 	bl	8004f1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bae:	f001 f983 	bl	8004eb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bba:	e011      	b.n	8003be0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d012      	beq.n	8003bea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3310      	adds	r3, #16
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fc5f 	bl	800448c <xTaskRemoveFromEventList>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003bd4:	f000 fd38 	bl	8004648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bd8:	7bbb      	ldrb	r3, [r7, #14]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	dce9      	bgt.n	8003bbc <prvUnlockQueue+0x60>
 8003be8:	e000      	b.n	8003bec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003bea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	22ff      	movs	r2, #255	@ 0xff
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003bf4:	f001 f992 	bl	8004f1c <vPortExitCritical>
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c08:	f001 f956 	bl	8004eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e001      	b.n	8003c1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c1e:	f001 f97d 	bl	8004f1c <vPortExitCritical>

	return xReturn;
 8003c22:	68fb      	ldr	r3, [r7, #12]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c34:	f001 f940 	bl	8004eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d102      	bne.n	8003c4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e001      	b.n	8003c4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c4e:	f001 f965 	bl	8004f1c <vPortExitCritical>

	return xReturn;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08e      	sub	sp, #56	@ 0x38
 8003c60:	af04      	add	r7, sp, #16
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	623b      	str	r3, [r7, #32]
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	61fb      	str	r3, [r7, #28]
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	e7fd      	b.n	8003ca2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ca6:	2354      	movs	r3, #84	@ 0x54
 8003ca8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b54      	cmp	r3, #84	@ 0x54
 8003cae:	d00b      	beq.n	8003cc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	61bb      	str	r3, [r7, #24]
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003cc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01e      	beq.n	8003d0e <xTaskCreateStatic+0xb2>
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01b      	beq.n	8003d0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9303      	str	r3, [sp, #12]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	9302      	str	r3, [sp, #8]
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f850 	bl	8003da6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d08:	f000 f8d6 	bl	8003eb8 <prvAddNewTaskToReadyList>
 8003d0c:	e001      	b.n	8003d12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d12:	697b      	ldr	r3, [r7, #20]
	}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	@ 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	@ 0x30
 8003d20:	af04      	add	r7, sp, #16
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 f9a1 	bl	8005078 <pvPortMalloc>
 8003d36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00e      	beq.n	8003d5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d3e:	2054      	movs	r0, #84	@ 0x54
 8003d40:	f001 f99a 	bl	8005078 <pvPortMalloc>
 8003d44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d52:	e005      	b.n	8003d60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d54:	6978      	ldr	r0, [r7, #20]
 8003d56:	f001 fa5d 	bl	8005214 <vPortFree>
 8003d5a:	e001      	b.n	8003d60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	2300      	movs	r3, #0
 8003d72:	9303      	str	r3, [sp, #12]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	9302      	str	r3, [sp, #8]
 8003d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f80e 	bl	8003da6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d8a:	69f8      	ldr	r0, [r7, #28]
 8003d8c:	f000 f894 	bl	8003eb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d90:	2301      	movs	r3, #1
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e002      	b.n	8003d9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
	}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b088      	sub	sp, #32
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f023 0307 	bic.w	r3, r3, #7
 8003dcc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00b      	beq.n	8003df0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	617b      	str	r3, [r7, #20]
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	e7fd      	b.n	8003dec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01f      	beq.n	8003e36 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	e012      	b.n	8003e22 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4413      	add	r3, r2
 8003e02:	7819      	ldrb	r1, [r3, #0]
 8003e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3334      	adds	r3, #52	@ 0x34
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	4413      	add	r3, r2
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d006      	beq.n	8003e2a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2b0f      	cmp	r3, #15
 8003e26:	d9e9      	bls.n	8003dfc <prvInitialiseNewTask+0x56>
 8003e28:	e000      	b.n	8003e2c <prvInitialiseNewTask+0x86>
			{
				break;
 8003e2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e34:	e003      	b.n	8003e3e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d901      	bls.n	8003e48 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e44:	2306      	movs	r3, #6
 8003e46:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e52:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	2200      	movs	r2, #0
 8003e58:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fa90 	bl	8003384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e66:	3318      	adds	r3, #24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fa8b 	bl	8003384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	f1c3 0207 	rsb	r2, r3, #7
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e86:	2200      	movs	r2, #0
 8003e88:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	69b8      	ldr	r0, [r7, #24]
 8003e98:	f000 fede 	bl	8004c58 <pxPortInitialiseStack>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eae:	bf00      	nop
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ec0:	f000 fffa 	bl	8004eb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f70 <prvAddNewTaskToReadyList+0xb8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	4a29      	ldr	r2, [pc, #164]	@ (8003f70 <prvAddNewTaskToReadyList+0xb8>)
 8003ecc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ece:	4b29      	ldr	r3, [pc, #164]	@ (8003f74 <prvAddNewTaskToReadyList+0xbc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ed6:	4a27      	ldr	r2, [pc, #156]	@ (8003f74 <prvAddNewTaskToReadyList+0xbc>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003edc:	4b24      	ldr	r3, [pc, #144]	@ (8003f70 <prvAddNewTaskToReadyList+0xb8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d110      	bne.n	8003f06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ee4:	f000 fbd4 	bl	8004690 <prvInitialiseTaskLists>
 8003ee8:	e00d      	b.n	8003f06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003eea:	4b23      	ldr	r3, [pc, #140]	@ (8003f78 <prvAddNewTaskToReadyList+0xc0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ef2:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <prvAddNewTaskToReadyList+0xbc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d802      	bhi.n	8003f06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f00:	4a1c      	ldr	r2, [pc, #112]	@ (8003f74 <prvAddNewTaskToReadyList+0xbc>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f06:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <prvAddNewTaskToReadyList+0xc4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f7c <prvAddNewTaskToReadyList+0xc4>)
 8003f0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	2201      	movs	r2, #1
 8003f16:	409a      	lsls	r2, r3
 8003f18:	4b19      	ldr	r3, [pc, #100]	@ (8003f80 <prvAddNewTaskToReadyList+0xc8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	4a18      	ldr	r2, [pc, #96]	@ (8003f80 <prvAddNewTaskToReadyList+0xc8>)
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4a15      	ldr	r2, [pc, #84]	@ (8003f84 <prvAddNewTaskToReadyList+0xcc>)
 8003f30:	441a      	add	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f7ff fa30 	bl	800339e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f3e:	f000 ffed 	bl	8004f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <prvAddNewTaskToReadyList+0xc0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <prvAddNewTaskToReadyList+0xbc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d207      	bcs.n	8003f68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f58:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <prvAddNewTaskToReadyList+0xd0>)
 8003f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000414 	.word	0x20000414
 8003f74:	20000314 	.word	0x20000314
 8003f78:	20000420 	.word	0x20000420
 8003f7c:	20000430 	.word	0x20000430
 8003f80:	2000041c 	.word	0x2000041c
 8003f84:	20000318 	.word	0x20000318
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f9e:	4b14      	ldr	r3, [pc, #80]	@ (8003ff0 <vTaskDelay+0x64>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <vTaskDelay+0x32>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60bb      	str	r3, [r7, #8]
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	e7fd      	b.n	8003fba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fbe:	f000 f87d 	bl	80040bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fde1 	bl	8004b8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fca:	f000 f885 	bl	80040d8 <xTaskResumeAll>
 8003fce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d107      	bne.n	8003fe6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003fd6:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <vTaskDelay+0x68>)
 8003fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	2000043c 	.word	0x2000043c
 8003ff4:	e000ed04 	.word	0xe000ed04

08003ff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	@ 0x28
 8003ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004006:	463a      	mov	r2, r7
 8004008:	1d39      	adds	r1, r7, #4
 800400a:	f107 0308 	add.w	r3, r7, #8
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc fa7c 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	9202      	str	r2, [sp, #8]
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	2300      	movs	r3, #0
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2300      	movs	r3, #0
 8004024:	460a      	mov	r2, r1
 8004026:	491f      	ldr	r1, [pc, #124]	@ (80040a4 <vTaskStartScheduler+0xac>)
 8004028:	481f      	ldr	r0, [pc, #124]	@ (80040a8 <vTaskStartScheduler+0xb0>)
 800402a:	f7ff fe17 	bl	8003c5c <xTaskCreateStatic>
 800402e:	4603      	mov	r3, r0
 8004030:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <vTaskStartScheduler+0xb4>)
 8004032:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004034:	4b1d      	ldr	r3, [pc, #116]	@ (80040ac <vTaskStartScheduler+0xb4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800403c:	2301      	movs	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e001      	b.n	8004046 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d116      	bne.n	800407a <vTaskStartScheduler+0x82>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	613b      	str	r3, [r7, #16]
}
 800405e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004060:	4b13      	ldr	r3, [pc, #76]	@ (80040b0 <vTaskStartScheduler+0xb8>)
 8004062:	f04f 32ff 	mov.w	r2, #4294967295
 8004066:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004068:	4b12      	ldr	r3, [pc, #72]	@ (80040b4 <vTaskStartScheduler+0xbc>)
 800406a:	2201      	movs	r2, #1
 800406c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <vTaskStartScheduler+0xc0>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004074:	f000 fe7c 	bl	8004d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004078:	e00f      	b.n	800409a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d10b      	bne.n	800409a <vTaskStartScheduler+0xa2>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	60fb      	str	r3, [r7, #12]
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	e7fd      	b.n	8004096 <vTaskStartScheduler+0x9e>
}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	08005540 	.word	0x08005540
 80040a8:	08004661 	.word	0x08004661
 80040ac:	20000438 	.word	0x20000438
 80040b0:	20000434 	.word	0x20000434
 80040b4:	20000420 	.word	0x20000420
 80040b8:	20000418 	.word	0x20000418

080040bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040c0:	4b04      	ldr	r3, [pc, #16]	@ (80040d4 <vTaskSuspendAll+0x18>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	4a03      	ldr	r2, [pc, #12]	@ (80040d4 <vTaskSuspendAll+0x18>)
 80040c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040ca:	bf00      	nop
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	2000043c 	.word	0x2000043c

080040d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040e6:	4b42      	ldr	r3, [pc, #264]	@ (80041f0 <xTaskResumeAll+0x118>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <xTaskResumeAll+0x2e>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	603b      	str	r3, [r7, #0]
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	e7fd      	b.n	8004102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004106:	f000 fed7 	bl	8004eb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800410a:	4b39      	ldr	r3, [pc, #228]	@ (80041f0 <xTaskResumeAll+0x118>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3b01      	subs	r3, #1
 8004110:	4a37      	ldr	r2, [pc, #220]	@ (80041f0 <xTaskResumeAll+0x118>)
 8004112:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004114:	4b36      	ldr	r3, [pc, #216]	@ (80041f0 <xTaskResumeAll+0x118>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d161      	bne.n	80041e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800411c:	4b35      	ldr	r3, [pc, #212]	@ (80041f4 <xTaskResumeAll+0x11c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d05d      	beq.n	80041e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004124:	e02e      	b.n	8004184 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004126:	4b34      	ldr	r3, [pc, #208]	@ (80041f8 <xTaskResumeAll+0x120>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3318      	adds	r3, #24
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff f990 	bl	8003458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3304      	adds	r3, #4
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff f98b 	bl	8003458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	2201      	movs	r2, #1
 8004148:	409a      	lsls	r2, r3
 800414a:	4b2c      	ldr	r3, [pc, #176]	@ (80041fc <xTaskResumeAll+0x124>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4313      	orrs	r3, r2
 8004150:	4a2a      	ldr	r2, [pc, #168]	@ (80041fc <xTaskResumeAll+0x124>)
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4a27      	ldr	r2, [pc, #156]	@ (8004200 <xTaskResumeAll+0x128>)
 8004162:	441a      	add	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7ff f917 	bl	800339e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004174:	4b23      	ldr	r3, [pc, #140]	@ (8004204 <xTaskResumeAll+0x12c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800417e:	4b22      	ldr	r3, [pc, #136]	@ (8004208 <xTaskResumeAll+0x130>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004184:	4b1c      	ldr	r3, [pc, #112]	@ (80041f8 <xTaskResumeAll+0x120>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1cc      	bne.n	8004126 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004192:	f000 fb1b 	bl	80047cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004196:	4b1d      	ldr	r3, [pc, #116]	@ (800420c <xTaskResumeAll+0x134>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041a2:	f000 f837 	bl	8004214 <xTaskIncrementTick>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041ac:	4b16      	ldr	r3, [pc, #88]	@ (8004208 <xTaskResumeAll+0x130>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f1      	bne.n	80041a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80041be:	4b13      	ldr	r3, [pc, #76]	@ (800420c <xTaskResumeAll+0x134>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041c4:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <xTaskResumeAll+0x130>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004210 <xTaskResumeAll+0x138>)
 80041d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041e0:	f000 fe9c 	bl	8004f1c <vPortExitCritical>

	return xAlreadyYielded;
 80041e4:	68bb      	ldr	r3, [r7, #8]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2000043c 	.word	0x2000043c
 80041f4:	20000414 	.word	0x20000414
 80041f8:	200003d4 	.word	0x200003d4
 80041fc:	2000041c 	.word	0x2000041c
 8004200:	20000318 	.word	0x20000318
 8004204:	20000314 	.word	0x20000314
 8004208:	20000428 	.word	0x20000428
 800420c:	20000424 	.word	0x20000424
 8004210:	e000ed04 	.word	0xe000ed04

08004214 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800421e:	4b4f      	ldr	r3, [pc, #316]	@ (800435c <xTaskIncrementTick+0x148>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 808f 	bne.w	8004346 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004228:	4b4d      	ldr	r3, [pc, #308]	@ (8004360 <xTaskIncrementTick+0x14c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004230:	4a4b      	ldr	r2, [pc, #300]	@ (8004360 <xTaskIncrementTick+0x14c>)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d121      	bne.n	8004280 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800423c:	4b49      	ldr	r3, [pc, #292]	@ (8004364 <xTaskIncrementTick+0x150>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	603b      	str	r3, [r7, #0]
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	e7fd      	b.n	800425a <xTaskIncrementTick+0x46>
 800425e:	4b41      	ldr	r3, [pc, #260]	@ (8004364 <xTaskIncrementTick+0x150>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	4b40      	ldr	r3, [pc, #256]	@ (8004368 <xTaskIncrementTick+0x154>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a3e      	ldr	r2, [pc, #248]	@ (8004364 <xTaskIncrementTick+0x150>)
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	4a3e      	ldr	r2, [pc, #248]	@ (8004368 <xTaskIncrementTick+0x154>)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b3e      	ldr	r3, [pc, #248]	@ (800436c <xTaskIncrementTick+0x158>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	4a3c      	ldr	r2, [pc, #240]	@ (800436c <xTaskIncrementTick+0x158>)
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	f000 faa6 	bl	80047cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004280:	4b3b      	ldr	r3, [pc, #236]	@ (8004370 <xTaskIncrementTick+0x15c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	429a      	cmp	r2, r3
 8004288:	d348      	bcc.n	800431c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800428a:	4b36      	ldr	r3, [pc, #216]	@ (8004364 <xTaskIncrementTick+0x150>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004294:	4b36      	ldr	r3, [pc, #216]	@ (8004370 <xTaskIncrementTick+0x15c>)
 8004296:	f04f 32ff 	mov.w	r2, #4294967295
 800429a:	601a      	str	r2, [r3, #0]
					break;
 800429c:	e03e      	b.n	800431c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800429e:	4b31      	ldr	r3, [pc, #196]	@ (8004364 <xTaskIncrementTick+0x150>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d203      	bcs.n	80042be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004370 <xTaskIncrementTick+0x15c>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042bc:	e02e      	b.n	800431c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff f8c8 	bl	8003458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3318      	adds	r3, #24
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff f8bf 	bl	8003458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	2201      	movs	r2, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	4b24      	ldr	r3, [pc, #144]	@ (8004374 <xTaskIncrementTick+0x160>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	4a22      	ldr	r2, [pc, #136]	@ (8004374 <xTaskIncrementTick+0x160>)
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004378 <xTaskIncrementTick+0x164>)
 80042fa:	441a      	add	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	3304      	adds	r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f7ff f84b 	bl	800339e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430c:	4b1b      	ldr	r3, [pc, #108]	@ (800437c <xTaskIncrementTick+0x168>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	429a      	cmp	r2, r3
 8004314:	d3b9      	bcc.n	800428a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004316:	2301      	movs	r3, #1
 8004318:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800431a:	e7b6      	b.n	800428a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800431c:	4b17      	ldr	r3, [pc, #92]	@ (800437c <xTaskIncrementTick+0x168>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004322:	4915      	ldr	r1, [pc, #84]	@ (8004378 <xTaskIncrementTick+0x164>)
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d901      	bls.n	8004338 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004334:	2301      	movs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004338:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <xTaskIncrementTick+0x16c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e004      	b.n	8004350 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004346:	4b0f      	ldr	r3, [pc, #60]	@ (8004384 <xTaskIncrementTick+0x170>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	4a0d      	ldr	r2, [pc, #52]	@ (8004384 <xTaskIncrementTick+0x170>)
 800434e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004350:	697b      	ldr	r3, [r7, #20]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	2000043c 	.word	0x2000043c
 8004360:	20000418 	.word	0x20000418
 8004364:	200003cc 	.word	0x200003cc
 8004368:	200003d0 	.word	0x200003d0
 800436c:	2000042c 	.word	0x2000042c
 8004370:	20000434 	.word	0x20000434
 8004374:	2000041c 	.word	0x2000041c
 8004378:	20000318 	.word	0x20000318
 800437c:	20000314 	.word	0x20000314
 8004380:	20000428 	.word	0x20000428
 8004384:	20000424 	.word	0x20000424

08004388 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800438e:	4b27      	ldr	r3, [pc, #156]	@ (800442c <vTaskSwitchContext+0xa4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004396:	4b26      	ldr	r3, [pc, #152]	@ (8004430 <vTaskSwitchContext+0xa8>)
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800439c:	e040      	b.n	8004420 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800439e:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <vTaskSwitchContext+0xa8>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a4:	4b23      	ldr	r3, [pc, #140]	@ (8004434 <vTaskSwitchContext+0xac>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	fab3 f383 	clz	r3, r3
 80043b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043b2:	7afb      	ldrb	r3, [r7, #11]
 80043b4:	f1c3 031f 	rsb	r3, r3, #31
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	491f      	ldr	r1, [pc, #124]	@ (8004438 <vTaskSwitchContext+0xb0>)
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10b      	bne.n	80043e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	e7fd      	b.n	80043e2 <vTaskSwitchContext+0x5a>
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4a11      	ldr	r2, [pc, #68]	@ (8004438 <vTaskSwitchContext+0xb0>)
 80043f2:	4413      	add	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	605a      	str	r2, [r3, #4]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	3308      	adds	r3, #8
 8004408:	429a      	cmp	r2, r3
 800440a:	d104      	bne.n	8004416 <vTaskSwitchContext+0x8e>
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a07      	ldr	r2, [pc, #28]	@ (800443c <vTaskSwitchContext+0xb4>)
 800441e:	6013      	str	r3, [r2, #0]
}
 8004420:	bf00      	nop
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	2000043c 	.word	0x2000043c
 8004430:	20000428 	.word	0x20000428
 8004434:	2000041c 	.word	0x2000041c
 8004438:	20000318 	.word	0x20000318
 800443c:	20000314 	.word	0x20000314

08004440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	60fb      	str	r3, [r7, #12]
}
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004468:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <vTaskPlaceOnEventList+0x48>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3318      	adds	r3, #24
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7fe ffb8 	bl	80033e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004476:	2101      	movs	r1, #1
 8004478:	6838      	ldr	r0, [r7, #0]
 800447a:	f000 fb87 	bl	8004b8c <prvAddCurrentTaskToDelayedList>
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000314 	.word	0x20000314

0800448c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60fb      	str	r3, [r7, #12]
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	e7fd      	b.n	80044b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	3318      	adds	r3, #24
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe ffca 	bl	8003458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c4:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <xTaskRemoveFromEventList+0xb0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d11c      	bne.n	8004506 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fe ffc1 	bl	8003458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	2201      	movs	r2, #1
 80044dc:	409a      	lsls	r2, r3
 80044de:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <xTaskRemoveFromEventList+0xb4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	4a16      	ldr	r2, [pc, #88]	@ (8004540 <xTaskRemoveFromEventList+0xb4>)
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <xTaskRemoveFromEventList+0xb8>)
 80044f6:	441a      	add	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f7fe ff4d 	bl	800339e <vListInsertEnd>
 8004504:	e005      	b.n	8004512 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	3318      	adds	r3, #24
 800450a:	4619      	mov	r1, r3
 800450c:	480e      	ldr	r0, [pc, #56]	@ (8004548 <xTaskRemoveFromEventList+0xbc>)
 800450e:	f7fe ff46 	bl	800339e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004516:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <xTaskRemoveFromEventList+0xc0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	429a      	cmp	r2, r3
 800451e:	d905      	bls.n	800452c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004524:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <xTaskRemoveFromEventList+0xc4>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e001      	b.n	8004530 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004530:	697b      	ldr	r3, [r7, #20]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	2000043c 	.word	0x2000043c
 8004540:	2000041c 	.word	0x2000041c
 8004544:	20000318 	.word	0x20000318
 8004548:	200003d4 	.word	0x200003d4
 800454c:	20000314 	.word	0x20000314
 8004550:	20000428 	.word	0x20000428

08004554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800455c:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <vTaskInternalSetTimeOutState+0x24>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <vTaskInternalSetTimeOutState+0x28>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	605a      	str	r2, [r3, #4]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	2000042c 	.word	0x2000042c
 800457c:	20000418 	.word	0x20000418

08004580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	613b      	str	r3, [r7, #16]
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	60fb      	str	r3, [r7, #12]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80045c6:	f000 fc77 	bl	8004eb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <xTaskCheckForTimeOut+0xc0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d102      	bne.n	80045ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	e023      	b.n	8004632 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b15      	ldr	r3, [pc, #84]	@ (8004644 <xTaskCheckForTimeOut+0xc4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d007      	beq.n	8004606 <xTaskCheckForTimeOut+0x86>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e015      	b.n	8004632 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	429a      	cmp	r2, r3
 800460e:	d20b      	bcs.n	8004628 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	1ad2      	subs	r2, r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff99 	bl	8004554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e004      	b.n	8004632 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800462e:	2301      	movs	r3, #1
 8004630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004632:	f000 fc73 	bl	8004f1c <vPortExitCritical>

	return xReturn;
 8004636:	69fb      	ldr	r3, [r7, #28]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000418 	.word	0x20000418
 8004644:	2000042c 	.word	0x2000042c

08004648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800464c:	4b03      	ldr	r3, [pc, #12]	@ (800465c <vTaskMissedYield+0x14>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]
}
 8004652:	bf00      	nop
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000428 	.word	0x20000428

08004660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004668:	f000 f852 	bl	8004710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800466c:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <prvIdleTask+0x28>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d9f9      	bls.n	8004668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <prvIdleTask+0x2c>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004684:	e7f0      	b.n	8004668 <prvIdleTask+0x8>
 8004686:	bf00      	nop
 8004688:	20000318 	.word	0x20000318
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	e00c      	b.n	80046b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4a12      	ldr	r2, [pc, #72]	@ (80046f0 <prvInitialiseTaskLists+0x60>)
 80046a8:	4413      	add	r3, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fe4a 	bl	8003344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3301      	adds	r3, #1
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b06      	cmp	r3, #6
 80046ba:	d9ef      	bls.n	800469c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046bc:	480d      	ldr	r0, [pc, #52]	@ (80046f4 <prvInitialiseTaskLists+0x64>)
 80046be:	f7fe fe41 	bl	8003344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046c2:	480d      	ldr	r0, [pc, #52]	@ (80046f8 <prvInitialiseTaskLists+0x68>)
 80046c4:	f7fe fe3e 	bl	8003344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046c8:	480c      	ldr	r0, [pc, #48]	@ (80046fc <prvInitialiseTaskLists+0x6c>)
 80046ca:	f7fe fe3b 	bl	8003344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046ce:	480c      	ldr	r0, [pc, #48]	@ (8004700 <prvInitialiseTaskLists+0x70>)
 80046d0:	f7fe fe38 	bl	8003344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046d4:	480b      	ldr	r0, [pc, #44]	@ (8004704 <prvInitialiseTaskLists+0x74>)
 80046d6:	f7fe fe35 	bl	8003344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046da:	4b0b      	ldr	r3, [pc, #44]	@ (8004708 <prvInitialiseTaskLists+0x78>)
 80046dc:	4a05      	ldr	r2, [pc, #20]	@ (80046f4 <prvInitialiseTaskLists+0x64>)
 80046de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <prvInitialiseTaskLists+0x7c>)
 80046e2:	4a05      	ldr	r2, [pc, #20]	@ (80046f8 <prvInitialiseTaskLists+0x68>)
 80046e4:	601a      	str	r2, [r3, #0]
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000318 	.word	0x20000318
 80046f4:	200003a4 	.word	0x200003a4
 80046f8:	200003b8 	.word	0x200003b8
 80046fc:	200003d4 	.word	0x200003d4
 8004700:	200003e8 	.word	0x200003e8
 8004704:	20000400 	.word	0x20000400
 8004708:	200003cc 	.word	0x200003cc
 800470c:	200003d0 	.word	0x200003d0

08004710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004716:	e019      	b.n	800474c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004718:	f000 fbce 	bl	8004eb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800471c:	4b10      	ldr	r3, [pc, #64]	@ (8004760 <prvCheckTasksWaitingTermination+0x50>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe fe95 	bl	8003458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800472e:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <prvCheckTasksWaitingTermination+0x54>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3b01      	subs	r3, #1
 8004734:	4a0b      	ldr	r2, [pc, #44]	@ (8004764 <prvCheckTasksWaitingTermination+0x54>)
 8004736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004738:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <prvCheckTasksWaitingTermination+0x58>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3b01      	subs	r3, #1
 800473e:	4a0a      	ldr	r2, [pc, #40]	@ (8004768 <prvCheckTasksWaitingTermination+0x58>)
 8004740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004742:	f000 fbeb 	bl	8004f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f810 	bl	800476c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800474c:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <prvCheckTasksWaitingTermination+0x58>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e1      	bne.n	8004718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200003e8 	.word	0x200003e8
 8004764:	20000414 	.word	0x20000414
 8004768:	200003fc 	.word	0x200003fc

0800476c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800477a:	2b00      	cmp	r3, #0
 800477c:	d108      	bne.n	8004790 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fd46 	bl	8005214 <vPortFree>
				vPortFree( pxTCB );
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fd43 	bl	8005214 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800478e:	e019      	b.n	80047c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004796:	2b01      	cmp	r3, #1
 8004798:	d103      	bne.n	80047a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fd3a 	bl	8005214 <vPortFree>
	}
 80047a0:	e010      	b.n	80047c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d00b      	beq.n	80047c4 <prvDeleteTCB+0x58>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60fb      	str	r3, [r7, #12]
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <prvDeleteTCB+0x54>
	}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004804 <prvResetNextTaskUnblockTime+0x38>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d104      	bne.n	80047e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004808 <prvResetNextTaskUnblockTime+0x3c>)
 80047de:	f04f 32ff 	mov.w	r2, #4294967295
 80047e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047e4:	e008      	b.n	80047f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e6:	4b07      	ldr	r3, [pc, #28]	@ (8004804 <prvResetNextTaskUnblockTime+0x38>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4a04      	ldr	r2, [pc, #16]	@ (8004808 <prvResetNextTaskUnblockTime+0x3c>)
 80047f6:	6013      	str	r3, [r2, #0]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	200003cc 	.word	0x200003cc
 8004808:	20000434 	.word	0x20000434

0800480c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004812:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <xTaskGetSchedulerState+0x34>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800481a:	2301      	movs	r3, #1
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	e008      	b.n	8004832 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004820:	4b08      	ldr	r3, [pc, #32]	@ (8004844 <xTaskGetSchedulerState+0x38>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004828:	2302      	movs	r3, #2
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	e001      	b.n	8004832 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800482e:	2300      	movs	r3, #0
 8004830:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004832:	687b      	ldr	r3, [r7, #4]
	}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	20000420 	.word	0x20000420
 8004844:	2000043c 	.word	0x2000043c

08004848 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d05e      	beq.n	800491c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004862:	4b31      	ldr	r3, [pc, #196]	@ (8004928 <xTaskPriorityInherit+0xe0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	429a      	cmp	r2, r3
 800486a:	d24e      	bcs.n	800490a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	db06      	blt.n	8004882 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004874:	4b2c      	ldr	r3, [pc, #176]	@ (8004928 <xTaskPriorityInherit+0xe0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	f1c3 0207 	rsb	r2, r3, #7
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6959      	ldr	r1, [r3, #20]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4a26      	ldr	r2, [pc, #152]	@ (800492c <xTaskPriorityInherit+0xe4>)
 8004894:	4413      	add	r3, r2
 8004896:	4299      	cmp	r1, r3
 8004898:	d12f      	bne.n	80048fa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3304      	adds	r3, #4
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fdda 	bl	8003458 <uxListRemove>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ae:	2201      	movs	r2, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43da      	mvns	r2, r3
 80048b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004930 <xTaskPriorityInherit+0xe8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4013      	ands	r3, r2
 80048bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004930 <xTaskPriorityInherit+0xe8>)
 80048be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048c0:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <xTaskPriorityInherit+0xe0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	2201      	movs	r2, #1
 80048d0:	409a      	lsls	r2, r3
 80048d2:	4b17      	ldr	r3, [pc, #92]	@ (8004930 <xTaskPriorityInherit+0xe8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <xTaskPriorityInherit+0xe8>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4a10      	ldr	r2, [pc, #64]	@ (800492c <xTaskPriorityInherit+0xe4>)
 80048ea:	441a      	add	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7fe fd53 	bl	800339e <vListInsertEnd>
 80048f8:	e004      	b.n	8004904 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <xTaskPriorityInherit+0xe0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e008      	b.n	800491c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <xTaskPriorityInherit+0xe0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	429a      	cmp	r2, r3
 8004916:	d201      	bcs.n	800491c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800491c:	68fb      	ldr	r3, [r7, #12]
	}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000314 	.word	0x20000314
 800492c:	20000318 	.word	0x20000318
 8004930:	2000041c 	.word	0x2000041c

08004934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d070      	beq.n	8004a2c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800494a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a38 <xTaskPriorityDisinherit+0x104>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d00b      	beq.n	800496c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	60fb      	str	r3, [r7, #12]
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	e7fd      	b.n	8004968 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60bb      	str	r3, [r7, #8]
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004990:	1e5a      	subs	r2, r3, #1
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499e:	429a      	cmp	r2, r3
 80049a0:	d044      	beq.n	8004a2c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d140      	bne.n	8004a2c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe fd52 	bl	8003458 <uxListRemove>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d115      	bne.n	80049e6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049be:	491f      	ldr	r1, [pc, #124]	@ (8004a3c <xTaskPriorityDisinherit+0x108>)
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xTaskPriorityDisinherit+0xb2>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	2201      	movs	r2, #1
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43da      	mvns	r2, r3
 80049dc:	4b18      	ldr	r3, [pc, #96]	@ (8004a40 <xTaskPriorityDisinherit+0x10c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4013      	ands	r3, r2
 80049e2:	4a17      	ldr	r2, [pc, #92]	@ (8004a40 <xTaskPriorityDisinherit+0x10c>)
 80049e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	f1c3 0207 	rsb	r2, r3, #7
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fe:	2201      	movs	r2, #1
 8004a00:	409a      	lsls	r2, r3
 8004a02:	4b0f      	ldr	r3, [pc, #60]	@ (8004a40 <xTaskPriorityDisinherit+0x10c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	4a0d      	ldr	r2, [pc, #52]	@ (8004a40 <xTaskPriorityDisinherit+0x10c>)
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4a08      	ldr	r2, [pc, #32]	@ (8004a3c <xTaskPriorityDisinherit+0x108>)
 8004a1a:	441a      	add	r2, r3
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f7fe fcbb 	bl	800339e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a2c:	697b      	ldr	r3, [r7, #20]
	}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000314 	.word	0x20000314
 8004a3c:	20000318 	.word	0x20000318
 8004a40:	2000041c 	.word	0x2000041c

08004a44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004a52:	2301      	movs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d079      	beq.n	8004b50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	60fb      	str	r3, [r7, #12]
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d902      	bls.n	8004a8c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e002      	b.n	8004a92 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a90:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d059      	beq.n	8004b50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d154      	bne.n	8004b50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b58 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d10b      	bne.n	8004ac8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60bb      	str	r3, [r7, #8]
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	db04      	blt.n	8004ae6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f1c3 0207 	rsb	r2, r3, #7
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6959      	ldr	r1, [r3, #20]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4a19      	ldr	r2, [pc, #100]	@ (8004b5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004af6:	4413      	add	r3, r2
 8004af8:	4299      	cmp	r1, r3
 8004afa:	d129      	bne.n	8004b50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fe fca9 	bl	8003458 <uxListRemove>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	2201      	movs	r2, #1
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43da      	mvns	r2, r3
 8004b18:	4b11      	ldr	r3, [pc, #68]	@ (8004b60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	4a10      	ldr	r2, [pc, #64]	@ (8004b60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004b20:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	2201      	movs	r2, #1
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	4a0b      	ldr	r2, [pc, #44]	@ (8004b60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4a06      	ldr	r2, [pc, #24]	@ (8004b5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b42:	441a      	add	r2, r3
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fe fc27 	bl	800339e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b50:	bf00      	nop
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000314 	.word	0x20000314
 8004b5c:	20000318 	.word	0x20000318
 8004b60:	2000041c 	.word	0x2000041c

08004b64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004b68:	4b07      	ldr	r3, [pc, #28]	@ (8004b88 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b76:	3201      	adds	r2, #1
 8004b78:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004b7a:	4b03      	ldr	r3, [pc, #12]	@ (8004b88 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
	}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	20000314 	.word	0x20000314

08004b8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b96:	4b29      	ldr	r3, [pc, #164]	@ (8004c3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b9c:	4b28      	ldr	r3, [pc, #160]	@ (8004c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe fc58 	bl	8003458 <uxListRemove>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bae:	4b24      	ldr	r3, [pc, #144]	@ (8004c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	4b21      	ldr	r3, [pc, #132]	@ (8004c44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	4a20      	ldr	r2, [pc, #128]	@ (8004c44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d10a      	bne.n	8004be4 <prvAddCurrentTaskToDelayedList+0x58>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	481a      	ldr	r0, [pc, #104]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004bde:	f7fe fbde 	bl	800339e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004be2:	e026      	b.n	8004c32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bec:	4b14      	ldr	r3, [pc, #80]	@ (8004c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d209      	bcs.n	8004c10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bfc:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b0f      	ldr	r3, [pc, #60]	@ (8004c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7fe fbec 	bl	80033e6 <vListInsert>
}
 8004c0e:	e010      	b.n	8004c32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c10:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4b0a      	ldr	r3, [pc, #40]	@ (8004c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7fe fbe2 	bl	80033e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c22:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d202      	bcs.n	8004c32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c2c:	4a09      	ldr	r2, [pc, #36]	@ (8004c54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6013      	str	r3, [r2, #0]
}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000418 	.word	0x20000418
 8004c40:	20000314 	.word	0x20000314
 8004c44:	2000041c 	.word	0x2000041c
 8004c48:	20000400 	.word	0x20000400
 8004c4c:	200003d0 	.word	0x200003d0
 8004c50:	200003cc 	.word	0x200003cc
 8004c54:	20000434 	.word	0x20000434

08004c58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b04      	subs	r3, #4
 8004c68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3b04      	subs	r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3b04      	subs	r3, #4
 8004c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c88:	4a0c      	ldr	r2, [pc, #48]	@ (8004cbc <pxPortInitialiseStack+0x64>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3b14      	subs	r3, #20
 8004c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f06f 0202 	mvn.w	r2, #2
 8004ca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3b20      	subs	r3, #32
 8004cac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cae:	68fb      	ldr	r3, [r7, #12]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	08004cc1 	.word	0x08004cc1

08004cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cca:	4b13      	ldr	r3, [pc, #76]	@ (8004d18 <prvTaskExitError+0x58>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d00b      	beq.n	8004cec <prvTaskExitError+0x2c>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60fb      	str	r3, [r7, #12]
}
 8004ce6:	bf00      	nop
 8004ce8:	bf00      	nop
 8004cea:	e7fd      	b.n	8004ce8 <prvTaskExitError+0x28>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60bb      	str	r3, [r7, #8]
}
 8004cfe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d00:	bf00      	nop
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0fc      	beq.n	8004d02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	2000000c 	.word	0x2000000c
 8004d1c:	00000000 	.word	0x00000000

08004d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d20:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <pxCurrentTCBConst2>)
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	6808      	ldr	r0, [r1, #0]
 8004d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	f380 8809 	msr	PSP, r0
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f380 8811 	msr	BASEPRI, r0
 8004d3a:	4770      	bx	lr
 8004d3c:	f3af 8000 	nop.w

08004d40 <pxCurrentTCBConst2>:
 8004d40:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d48:	4808      	ldr	r0, [pc, #32]	@ (8004d6c <prvPortStartFirstTask+0x24>)
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	6800      	ldr	r0, [r0, #0]
 8004d4e:	f380 8808 	msr	MSP, r0
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8814 	msr	CONTROL, r0
 8004d5a:	b662      	cpsie	i
 8004d5c:	b661      	cpsie	f
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	df00      	svc	0
 8004d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d6a:	bf00      	nop
 8004d6c:	e000ed08 	.word	0xe000ed08

08004d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d76:	4b47      	ldr	r3, [pc, #284]	@ (8004e94 <xPortStartScheduler+0x124>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a47      	ldr	r2, [pc, #284]	@ (8004e98 <xPortStartScheduler+0x128>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d10b      	bne.n	8004d98 <xPortStartScheduler+0x28>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	60fb      	str	r3, [r7, #12]
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d98:	4b3e      	ldr	r3, [pc, #248]	@ (8004e94 <xPortStartScheduler+0x124>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e9c <xPortStartScheduler+0x12c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10b      	bne.n	8004dba <xPortStartScheduler+0x4a>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	613b      	str	r3, [r7, #16]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dba:	4b39      	ldr	r3, [pc, #228]	@ (8004ea0 <xPortStartScheduler+0x130>)
 8004dbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	22ff      	movs	r2, #255	@ 0xff
 8004dca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4b31      	ldr	r3, [pc, #196]	@ (8004ea4 <xPortStartScheduler+0x134>)
 8004de0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004de2:	4b31      	ldr	r3, [pc, #196]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004de4:	2207      	movs	r2, #7
 8004de6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004de8:	e009      	b.n	8004dfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004dea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004df2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e06:	2b80      	cmp	r3, #128	@ 0x80
 8004e08:	d0ef      	beq.n	8004dea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1c3 0307 	rsb	r3, r3, #7
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d00b      	beq.n	8004e2e <xPortStartScheduler+0xbe>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	60bb      	str	r3, [r7, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e40:	4a19      	ldr	r2, [pc, #100]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e4c:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e58:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a13      	ldr	r2, [pc, #76]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e64:	f000 f8da 	bl	800501c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e68:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <xPortStartScheduler+0x140>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e6e:	f000 f8f9 	bl	8005064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e72:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <xPortStartScheduler+0x144>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a0f      	ldr	r2, [pc, #60]	@ (8004eb4 <xPortStartScheduler+0x144>)
 8004e78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e7e:	f7ff ff63 	bl	8004d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e82:	f7ff fa81 	bl	8004388 <vTaskSwitchContext>
	prvTaskExitError();
 8004e86:	f7ff ff1b 	bl	8004cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	e000ed00 	.word	0xe000ed00
 8004e98:	410fc271 	.word	0x410fc271
 8004e9c:	410fc270 	.word	0x410fc270
 8004ea0:	e000e400 	.word	0xe000e400
 8004ea4:	20000440 	.word	0x20000440
 8004ea8:	20000444 	.word	0x20000444
 8004eac:	e000ed20 	.word	0xe000ed20
 8004eb0:	2000000c 	.word	0x2000000c
 8004eb4:	e000ef34 	.word	0xe000ef34

08004eb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ed2:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <vPortEnterCritical+0x5c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f14 <vPortEnterCritical+0x5c>)
 8004eda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004edc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f14 <vPortEnterCritical+0x5c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d110      	bne.n	8004f06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <vPortEnterCritical+0x60>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <vPortEnterCritical+0x4e>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	603b      	str	r3, [r7, #0]
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	e7fd      	b.n	8004f02 <vPortEnterCritical+0x4a>
	}
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	2000000c 	.word	0x2000000c
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f22:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <vPortExitCritical+0x26>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	607b      	str	r3, [r7, #4]
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	e7fd      	b.n	8004f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f42:	4b0a      	ldr	r3, [pc, #40]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	4a08      	ldr	r2, [pc, #32]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f4c:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <vPortExitCritical+0x44>
 8004f54:	2300      	movs	r3, #0
 8004f56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	2000000c 	.word	0x2000000c

08004f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f70:	f3ef 8009 	mrs	r0, PSP
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <pxCurrentTCBConst>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	f01e 0f10 	tst.w	lr, #16
 8004f80:	bf08      	it	eq
 8004f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8a:	6010      	str	r0, [r2, #0]
 8004f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f94:	f380 8811 	msr	BASEPRI, r0
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f7ff f9f2 	bl	8004388 <vTaskSwitchContext>
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	f380 8811 	msr	BASEPRI, r0
 8004fac:	bc09      	pop	{r0, r3}
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	6808      	ldr	r0, [r1, #0]
 8004fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb6:	f01e 0f10 	tst.w	lr, #16
 8004fba:	bf08      	it	eq
 8004fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fc0:	f380 8809 	msr	PSP, r0
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst>:
 8004fd0:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ff2:	f7ff f90f 	bl	8004214 <xTaskIncrementTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ffc:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <xPortSysTickHandler+0x40>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f383 8811 	msr	BASEPRI, r3
}
 800500e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005026:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <vPortSetupTimerInterrupt+0x38>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800502c:	4b0a      	ldr	r3, [pc, #40]	@ (8005058 <vPortSetupTimerInterrupt+0x3c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a0a      	ldr	r2, [pc, #40]	@ (800505c <vPortSetupTimerInterrupt+0x40>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <vPortSetupTimerInterrupt+0x44>)
 800503a:	3b01      	subs	r3, #1
 800503c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800503e:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005040:	2207      	movs	r2, #7
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	e000e010 	.word	0xe000e010
 8005054:	e000e018 	.word	0xe000e018
 8005058:	20000000 	.word	0x20000000
 800505c:	10624dd3 	.word	0x10624dd3
 8005060:	e000e014 	.word	0xe000e014

08005064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005064:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005074 <vPortEnableVFP+0x10>
 8005068:	6801      	ldr	r1, [r0, #0]
 800506a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800506e:	6001      	str	r1, [r0, #0]
 8005070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005072:	bf00      	nop
 8005074:	e000ed88 	.word	0xe000ed88

08005078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	@ 0x28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005084:	f7ff f81a 	bl	80040bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005088:	4b5c      	ldr	r3, [pc, #368]	@ (80051fc <pvPortMalloc+0x184>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005090:	f000 f924 	bl	80052dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005094:	4b5a      	ldr	r3, [pc, #360]	@ (8005200 <pvPortMalloc+0x188>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	f040 8095 	bne.w	80051cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01e      	beq.n	80050e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80050a8:	2208      	movs	r2, #8
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d015      	beq.n	80050e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f023 0307 	bic.w	r3, r3, #7
 80050c0:	3308      	adds	r3, #8
 80050c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <pvPortMalloc+0x6e>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	617b      	str	r3, [r7, #20]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d06f      	beq.n	80051cc <pvPortMalloc+0x154>
 80050ec:	4b45      	ldr	r3, [pc, #276]	@ (8005204 <pvPortMalloc+0x18c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d86a      	bhi.n	80051cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050f6:	4b44      	ldr	r3, [pc, #272]	@ (8005208 <pvPortMalloc+0x190>)
 80050f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050fa:	4b43      	ldr	r3, [pc, #268]	@ (8005208 <pvPortMalloc+0x190>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005100:	e004      	b.n	800510c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	429a      	cmp	r2, r3
 8005114:	d903      	bls.n	800511e <pvPortMalloc+0xa6>
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f1      	bne.n	8005102 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800511e:	4b37      	ldr	r3, [pc, #220]	@ (80051fc <pvPortMalloc+0x184>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005124:	429a      	cmp	r2, r3
 8005126:	d051      	beq.n	80051cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2208      	movs	r2, #8
 800512e:	4413      	add	r3, r2
 8005130:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	1ad2      	subs	r2, r2, r3
 8005142:	2308      	movs	r3, #8
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	429a      	cmp	r2, r3
 8005148:	d920      	bls.n	800518c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800514a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4413      	add	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <pvPortMalloc+0xfc>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	613b      	str	r3, [r7, #16]
}
 800516e:	bf00      	nop
 8005170:	bf00      	nop
 8005172:	e7fd      	b.n	8005170 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	1ad2      	subs	r2, r2, r3
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005186:	69b8      	ldr	r0, [r7, #24]
 8005188:	f000 f90a 	bl	80053a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800518c:	4b1d      	ldr	r3, [pc, #116]	@ (8005204 <pvPortMalloc+0x18c>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	4a1b      	ldr	r2, [pc, #108]	@ (8005204 <pvPortMalloc+0x18c>)
 8005198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800519a:	4b1a      	ldr	r3, [pc, #104]	@ (8005204 <pvPortMalloc+0x18c>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <pvPortMalloc+0x194>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d203      	bcs.n	80051ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051a6:	4b17      	ldr	r3, [pc, #92]	@ (8005204 <pvPortMalloc+0x18c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a18      	ldr	r2, [pc, #96]	@ (800520c <pvPortMalloc+0x194>)
 80051ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	4b13      	ldr	r3, [pc, #76]	@ (8005200 <pvPortMalloc+0x188>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051c2:	4b13      	ldr	r3, [pc, #76]	@ (8005210 <pvPortMalloc+0x198>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3301      	adds	r3, #1
 80051c8:	4a11      	ldr	r2, [pc, #68]	@ (8005210 <pvPortMalloc+0x198>)
 80051ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051cc:	f7fe ff84 	bl	80040d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <pvPortMalloc+0x17a>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	60fb      	str	r3, [r7, #12]
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	e7fd      	b.n	80051ee <pvPortMalloc+0x176>
	return pvReturn;
 80051f2:	69fb      	ldr	r3, [r7, #28]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3728      	adds	r7, #40	@ 0x28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20001008 	.word	0x20001008
 8005200:	2000101c 	.word	0x2000101c
 8005204:	2000100c 	.word	0x2000100c
 8005208:	20001000 	.word	0x20001000
 800520c:	20001010 	.word	0x20001010
 8005210:	20001014 	.word	0x20001014

08005214 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d04f      	beq.n	80052c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005226:	2308      	movs	r3, #8
 8005228:	425b      	negs	r3, r3
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4413      	add	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	4b25      	ldr	r3, [pc, #148]	@ (80052d0 <vPortFree+0xbc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10b      	bne.n	800525a <vPortFree+0x46>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	60fb      	str	r3, [r7, #12]
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	e7fd      	b.n	8005256 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <vPortFree+0x66>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	60bb      	str	r3, [r7, #8]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4b14      	ldr	r3, [pc, #80]	@ (80052d0 <vPortFree+0xbc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01e      	beq.n	80052c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d11a      	bne.n	80052c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	4b0e      	ldr	r3, [pc, #56]	@ (80052d0 <vPortFree+0xbc>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	43db      	mvns	r3, r3
 800529a:	401a      	ands	r2, r3
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052a0:	f7fe ff0c 	bl	80040bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	4b0a      	ldr	r3, [pc, #40]	@ (80052d4 <vPortFree+0xc0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4413      	add	r3, r2
 80052ae:	4a09      	ldr	r2, [pc, #36]	@ (80052d4 <vPortFree+0xc0>)
 80052b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052b2:	6938      	ldr	r0, [r7, #16]
 80052b4:	f000 f874 	bl	80053a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052b8:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <vPortFree+0xc4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	4a06      	ldr	r2, [pc, #24]	@ (80052d8 <vPortFree+0xc4>)
 80052c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052c2:	f7fe ff09 	bl	80040d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	2000101c 	.word	0x2000101c
 80052d4:	2000100c 	.word	0x2000100c
 80052d8:	20001018 	.word	0x20001018

080052dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052e2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80052e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052e8:	4b27      	ldr	r3, [pc, #156]	@ (8005388 <prvHeapInit+0xac>)
 80052ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3307      	adds	r3, #7
 80052fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0307 	bic.w	r3, r3, #7
 8005302:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <prvHeapInit+0xac>)
 800530c:	4413      	add	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005314:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <prvHeapInit+0xb0>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800531a:	4b1c      	ldr	r3, [pc, #112]	@ (800538c <prvHeapInit+0xb0>)
 800531c:	2200      	movs	r2, #0
 800531e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	4413      	add	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005328:	2208      	movs	r2, #8
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0307 	bic.w	r3, r3, #7
 8005336:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <prvHeapInit+0xb4>)
 800533c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800533e:	4b14      	ldr	r3, [pc, #80]	@ (8005390 <prvHeapInit+0xb4>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005346:	4b12      	ldr	r3, [pc, #72]	@ (8005390 <prvHeapInit+0xb4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	1ad2      	subs	r2, r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800535c:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <prvHeapInit+0xb4>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a0a      	ldr	r2, [pc, #40]	@ (8005394 <prvHeapInit+0xb8>)
 800536a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4a09      	ldr	r2, [pc, #36]	@ (8005398 <prvHeapInit+0xbc>)
 8005372:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005374:	4b09      	ldr	r3, [pc, #36]	@ (800539c <prvHeapInit+0xc0>)
 8005376:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800537a:	601a      	str	r2, [r3, #0]
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	20000448 	.word	0x20000448
 800538c:	20001000 	.word	0x20001000
 8005390:	20001008 	.word	0x20001008
 8005394:	20001010 	.word	0x20001010
 8005398:	2000100c 	.word	0x2000100c
 800539c:	2000101c 	.word	0x2000101c

080053a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053a8:	4b28      	ldr	r3, [pc, #160]	@ (800544c <prvInsertBlockIntoFreeList+0xac>)
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	e002      	b.n	80053b4 <prvInsertBlockIntoFreeList+0x14>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d8f7      	bhi.n	80053ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4413      	add	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d108      	bne.n	80053e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	441a      	add	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	441a      	add	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d118      	bne.n	8005428 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4b15      	ldr	r3, [pc, #84]	@ (8005450 <prvInsertBlockIntoFreeList+0xb0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d00d      	beq.n	800541e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e008      	b.n	8005430 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800541e:	4b0c      	ldr	r3, [pc, #48]	@ (8005450 <prvInsertBlockIntoFreeList+0xb0>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e003      	b.n	8005430 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	429a      	cmp	r2, r3
 8005436:	d002      	beq.n	800543e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20001000 	.word	0x20001000
 8005450:	20001008 	.word	0x20001008

08005454 <memset>:
 8005454:	4402      	add	r2, r0
 8005456:	4603      	mov	r3, r0
 8005458:	4293      	cmp	r3, r2
 800545a:	d100      	bne.n	800545e <memset+0xa>
 800545c:	4770      	bx	lr
 800545e:	f803 1b01 	strb.w	r1, [r3], #1
 8005462:	e7f9      	b.n	8005458 <memset+0x4>

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4d0d      	ldr	r5, [pc, #52]	@ (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	@ (80054a0 <__libc_init_array+0x3c>)
 800546a:	1b64      	subs	r4, r4, r5
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2600      	movs	r6, #0
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4d0b      	ldr	r5, [pc, #44]	@ (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	@ (80054a8 <__libc_init_array+0x44>)
 8005478:	f000 f826 	bl	80054c8 <_init>
 800547c:	1b64      	subs	r4, r4, r5
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2600      	movs	r6, #0
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	08005598 	.word	0x08005598
 80054a0:	08005598 	.word	0x08005598
 80054a4:	08005598 	.word	0x08005598
 80054a8:	0800559c 	.word	0x0800559c

080054ac <memcpy>:
 80054ac:	440a      	add	r2, r1
 80054ae:	4291      	cmp	r1, r2
 80054b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054b4:	d100      	bne.n	80054b8 <memcpy+0xc>
 80054b6:	4770      	bx	lr
 80054b8:	b510      	push	{r4, lr}
 80054ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c2:	4291      	cmp	r1, r2
 80054c4:	d1f9      	bne.n	80054ba <memcpy+0xe>
 80054c6:	bd10      	pop	{r4, pc}

080054c8 <_init>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr

080054d4 <_fini>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr
