
queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08008470  08008470  00009470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085ec  080085ec  0000a0d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080085ec  080085ec  000095ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085f4  080085f4  0000a0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f4  080085f4  000095f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085f8  080085f8  000095f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  080085fc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010584  200000d0  080086cc  0000a0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010654  080086cc  0000a654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153fa  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003589  00000000  00000000  0001f4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00022a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db7  00000000  00000000  00023c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a2c  00000000  00000000  00024a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cf7  00000000  00000000  0004d453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f76ea  00000000  00000000  0006214a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159834  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd4  00000000  00000000  00159878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0015e64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008458 	.word	0x08008458

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08008458 	.word	0x08008458

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	200000ec 	.word	0x200000ec
 80005dc:	20000140 	.word	0x20000140

080005e0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <vApplicationGetTimerTaskMemory+0x2c>)
 80005f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <vApplicationGetTimerTaskMemory+0x30>)
 80005f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005fe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	20002140 	.word	0x20002140
 8000610:	20002194 	.word	0x20002194

08000614 <HAL_UART_RxCpltCallback>:

uint8_t rx_byte;

// UART receive complete interrupt callback (called when a byte is received)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == USART2)  // Ensure it is USART2
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d136      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x84>
    {
        // Echo received byte back using interrupt transmit
        HAL_UART_Transmit_IT(&huart2, &rx_byte, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	491d      	ldr	r1, [pc, #116]	@ (80006a4 <HAL_UART_RxCpltCallback+0x90>)
 800062e:	481e      	ldr	r0, [pc, #120]	@ (80006a8 <HAL_UART_RxCpltCallback+0x94>)
 8000630:	f003 f84c 	bl	80036cc <HAL_UART_Transmit_IT>

        // Store received byte into buffer
        cmd_buf[cmd_len++] = rx_byte;
 8000634:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <HAL_UART_RxCpltCallback+0x98>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	b2d1      	uxtb	r1, r2
 800063c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ac <HAL_UART_RxCpltCallback+0x98>)
 800063e:	7011      	strb	r1, [r2, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_UART_RxCpltCallback+0x90>)
 8000644:	7819      	ldrb	r1, [r3, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <HAL_UART_RxCpltCallback+0x9c>)
 8000648:	5499      	strb	r1, [r3, r2]

        // If ENTER key (\r) is pressed, command is complete
        if (rx_byte == '\r')
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <HAL_UART_RxCpltCallback+0x90>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b0d      	cmp	r3, #13
 8000650:	d112      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x64>
        {
            cmd_len = 0; // reset buffer index for next command
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <HAL_UART_RxCpltCallback+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

            // Notify tasks 1 and 2 that command is ready
            vTaskNotifyGiveFromISR(taskhandle1, &xHigherPriorityTaskWoken);
 8000658:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <HAL_UART_RxCpltCallback+0xa0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f107 020c 	add.w	r2, r7, #12
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f006 f9de 	bl	8006a24 <vTaskNotifyGiveFromISR>
            vTaskNotifyGiveFromISR(taskhandle2, &xHigherPriorityTaskWoken);
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <HAL_UART_RxCpltCallback+0xa4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f107 020c 	add.w	r2, r7, #12
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f006 f9d6 	bl	8006a24 <vTaskNotifyGiveFromISR>
        }

        // Re-enable UART to receive next byte
        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	490a      	ldr	r1, [pc, #40]	@ (80006a4 <HAL_UART_RxCpltCallback+0x90>)
 800067c:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <HAL_UART_RxCpltCallback+0x94>)
 800067e:	f003 f883 	bl	8003788 <HAL_UART_Receive_IT>

        // Yield to higher priority task if required
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d007      	beq.n	8000698 <HAL_UART_RxCpltCallback+0x84>
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <HAL_UART_RxCpltCallback+0xa8>)
 800068a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	f3bf 8f6f 	isb	sy
    }
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40004400 	.word	0x40004400
 80006a4:	20006271 	.word	0x20006271
 80006a8:	200061b8 	.word	0x200061b8
 80006ac:	20006270 	.word	0x20006270
 80006b0:	2000625c 	.word	0x2000625c
 80006b4:	20006244 	.word	0x20006244
 80006b8:	20006248 	.word	0x20006248
 80006bc:	e000ed04 	.word	0xe000ed04

080006c0 <uart_send>:

// Simple wrapper to send string over UART (blocking mode)
void uart_send(char *s)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fd81 	bl	80001d0 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <uart_send+0x28>)
 80006da:	f002 ff6d 	bl	80035b8 <HAL_UART_Transmit>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200061b8 	.word	0x200061b8

080006ec <task1_menu>:

// Task 1: Sends the menu to UART queue and waits for notification
void task1_menu(void *p)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    char *data = menu;   // Menu string to be sent
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <task1_menu+0x30>)
 80006f6:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        // Put menu string in UART queue
        xQueueSend(uart_q, &data, portMAX_DELAY);
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <task1_menu+0x34>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	f107 010c 	add.w	r1, r7, #12
 8000700:	2300      	movs	r3, #0
 8000702:	f04f 32ff 	mov.w	r2, #4294967295
 8000706:	f004 fe83 	bl	8005410 <xQueueGenericSend>

        // Wait until notified (when new command arrives)
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f006 f92c 	bl	8006970 <xTaskNotifyWait>
        xQueueSend(uart_q, &data, portMAX_DELAY);
 8000718:	bf00      	nop
 800071a:	e7ed      	b.n	80006f8 <task1_menu+0xc>
 800071c:	20000000 	.word	0x20000000
 8000720:	20006258 	.word	0x20006258

08000724 <task2_command>:
    }
}

// Task 2: Parses received command and forwards it for processing
void task2_command(void *p)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    uint8_t cmd_code = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]
    cmd_t *new_cmd;

    while(1)
    {
        // Wait until notified (command received)
        xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	2000      	movs	r0, #0
 800073a:	f006 f919 	bl	8006970 <xTaskNotifyWait>

        // Allocate memory for new command structure
        new_cmd = (cmd_t*)pvPortMalloc(sizeof(cmd_t));
 800073e:	200b      	movs	r0, #11
 8000740:	f006 fffc 	bl	800773c <pvPortMalloc>
 8000744:	4603      	mov	r3, r0
 8000746:	60bb      	str	r3, [r7, #8]

        // Critical section: read and store command code
        taskENTER_CRITICAL();
 8000748:	f006 fed6 	bl	80074f8 <vPortEnterCritical>
        cmd_code = getCommandCode(cmd_buf);
 800074c:	480a      	ldr	r0, [pc, #40]	@ (8000778 <task2_command+0x54>)
 800074e:	f000 f871 	bl	8000834 <getCommandCode>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
        new_cmd->cmd_no = cmd_code;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	701a      	strb	r2, [r3, #0]
        // getArguments(new_cmd->cmd_arg);  // Placeholder if arguments exist
        taskEXIT_CRITICAL();
 800075c:	f006 fefe 	bl	800755c <vPortExitCritical>

        // Send new command structure to command queue
        xQueueSend(cmd_q, &new_cmd, portMAX_DELAY);
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <task2_command+0x58>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	f107 0108 	add.w	r1, r7, #8
 8000768:	2300      	movs	r3, #0
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	f004 fe4f 	bl	8005410 <xQueueGenericSend>
        xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000772:	bf00      	nop
 8000774:	e7dc      	b.n	8000730 <task2_command+0xc>
 8000776:	bf00      	nop
 8000778:	2000625c 	.word	0x2000625c
 800077c:	20006254 	.word	0x20006254

08000780 <task3_command_process>:
    }
}

void task3_command_process(void *p)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b090      	sub	sp, #64	@ 0x40
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    char task_msg[50];      // Buffer to store messages (like LED/RTC info)

    while(1)                // Infinite loop (task runs forever)
    {
        // Wait until a command is received from the queue (blocking)
        xQueueReceive(cmd_q, (void*)&new_cmd, portMAX_DELAY);
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <task3_command_process+0x80>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	4618      	mov	r0, r3
 8000796:	f004 ffdb 	bl	8005750 <xQueueReceive>

        // Process command based on cmd_no
        if(new_cmd->cmd_no == LED_ON)
 800079a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d102      	bne.n	80007a8 <task3_command_process+0x28>
        {
            make_led_on();  // Turn LED ON
 80007a2:	f000 f855 	bl	8000850 <make_led_on>
 80007a6:	e026      	b.n	80007f6 <task3_command_process+0x76>
        }
        else if(new_cmd->cmd_no == LED_OFF)
 80007a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d102      	bne.n	80007b6 <task3_command_process+0x36>
        {
            make_led_off(); // Turn LED OFF
 80007b0:	f000 f858 	bl	8000864 <make_led_off>
 80007b4:	e01f      	b.n	80007f6 <task3_command_process+0x76>
        }
        else if(new_cmd->cmd_no == LED_TOGGLE)
 80007b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d102      	bne.n	80007c4 <task3_command_process+0x44>
        {
            led_toggle();   // Toggle LED ON/OFF
 80007be:	f000 f85b 	bl	8000878 <led_toggle>
 80007c2:	e018      	b.n	80007f6 <task3_command_process+0x76>
        }
        else if(new_cmd->cmd_no == LED_READ_STATUS)
 80007c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d105      	bne.n	80007d8 <task3_command_process+0x58>
        {
            read_led_status(task_msg); // Read LED status into task_msg
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f86b 	bl	80008ac <read_led_status>
 80007d6:	e00e      	b.n	80007f6 <task3_command_process+0x76>
        }
        else if(new_cmd->cmd_no == RTC_READ)
 80007d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b05      	cmp	r3, #5
 80007de:	d105      	bne.n	80007ec <task3_command_process+0x6c>
        {
            read_rtc_info(task_msg);   // Read RTC info into task_msg
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f881 	bl	80008ec <read_rtc_info>
 80007ea:	e004      	b.n	80007f6 <task3_command_process+0x76>
        }
        else
        {
            print_error_message(task_msg); // Handle invalid command
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f8e3 	bl	80009bc <print_error_message>
        }

        // Free the dynamically allocated command memory
        vPortFree(new_cmd);
 80007f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007f8:	4618      	mov	r0, r3
 80007fa:	f007 f86d 	bl	80078d8 <vPortFree>
        xQueueReceive(cmd_q, (void*)&new_cmd, portMAX_DELAY);
 80007fe:	e7c3      	b.n	8000788 <task3_command_process+0x8>
 8000800:	20006254 	.word	0x20006254

08000804 <task4_uart_transmit>:
    }
}

// Task 4: Transmits data placed in UART queue
void task4_uart_transmit(void *p)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
    char *data = NULL;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        // Wait for data from UART queue
        xQueueReceive(uart_q, &data, portMAX_DELAY);
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <task4_uart_transmit+0x2c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f107 010c 	add.w	r1, r7, #12
 8000818:	f04f 32ff 	mov.w	r2, #4294967295
 800081c:	4618      	mov	r0, r3
 800081e:	f004 ff97 	bl	8005750 <xQueueReceive>

        // Send the data string over UART
        uart_send(data);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff4b 	bl	80006c0 <uart_send>
        xQueueReceive(uart_q, &data, portMAX_DELAY);
 800082a:	bf00      	nop
 800082c:	e7f0      	b.n	8000810 <task4_uart_transmit+0xc>
 800082e:	bf00      	nop
 8000830:	20006258 	.word	0x20006258

08000834 <getCommandCode>:
    }
}

// Extracts command code from buffer
uint8_t getCommandCode(uint8_t *buffer)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    return buffer[0] - 48;  // Convert ASCII to number
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	3b30      	subs	r3, #48	@ 0x30
 8000842:	b2db      	uxtb	r3, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <make_led_on>:


// Turns LED ON (PA5)
void make_led_on(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2120      	movs	r1, #32
 8000858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085c:	f000 ffe6 	bl	800182c <HAL_GPIO_WritePin>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <make_led_off>:

// Turns LED OFF (PA5)
void make_led_off(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2120      	movs	r1, #32
 800086c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000870:	f000 ffdc 	bl	800182c <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <led_toggle>:

void led_toggle(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
    // Toggle LED 20 times with 500ms delay
    for(uint8_t i = 0; i < 20; i++)
 800087e:	2300      	movs	r3, #0
 8000880:	71fb      	strb	r3, [r7, #7]
 8000882:	e00b      	b.n	800089c <led_toggle+0x24>
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);   // Toggle LED on pin PA5
 8000884:	2120      	movs	r1, #32
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f000 ffe7 	bl	800185c <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(500));          // Delay 500 ms (FreeRTOS delay)
 800088e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000892:	f005 fb45 	bl	8005f20 <vTaskDelay>
    for(uint8_t i = 0; i < 20; i++)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	3301      	adds	r3, #1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b13      	cmp	r3, #19
 80008a0:	d9f0      	bls.n	8000884 <led_toggle+0xc>
    }
}
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <read_led_status>:
//Read LED status
void read_led_status(char *task_msg)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	sprintf(task_msg , "\r\nLED status is : %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5));
 80008b4:	687c      	ldr	r4, [r7, #4]
 80008b6:	2120      	movs	r1, #32
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f000 ff9e 	bl	80017fc <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	4907      	ldr	r1, [pc, #28]	@ (80008e4 <read_led_status+0x38>)
 80008c6:	4620      	mov	r0, r4
 80008c8:	f007 f926 	bl	8007b18 <siprintf>
	xQueueSend(uart_q,&task_msg,portMAX_DELAY);//write the LED status to Queue
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <read_led_status+0x3c>)
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	1d39      	adds	r1, r7, #4
 80008d2:	2300      	movs	r3, #0
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	f004 fd9a 	bl	8005410 <xQueueGenericSend>
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	08008470 	.word	0x08008470
 80008e8:	20006258 	.word	0x20006258

080008ec <read_rtc_info>:

// Reads RTC time/date and sends to UART queue
void read_rtc_info(char *task_msg)
{
 80008ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ee:	b08d      	sub	sp, #52	@ 0x34
 80008f0:	af04      	add	r7, sp, #16
 80008f2:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};  // Structure to store RTC time
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};  // Structure to store RTC date
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
    if ((RTC->ISR & RTC_ISR_INITS) == 0)
 8000908:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <read_rtc_info+0xc0>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	f003 0310 	and.w	r3, r3, #16
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11f      	bne.n	8000954 <read_rtc_info+0x68>
      {
        //RTC not yet initialized. Setting time and date...
       // Set default time: 11:15:30
        sTime.Hours = 9;
 8000914:	2309      	movs	r3, #9
 8000916:	733b      	strb	r3, [r7, #12]
        sTime.Minutes = 15;
 8000918:	230f      	movs	r3, #15
 800091a:	737b      	strb	r3, [r7, #13]
        sTime.Seconds = 30;
 800091c:	231e      	movs	r3, #30
 800091e:	73bb      	strb	r3, [r7, #14]
        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	481f      	ldr	r0, [pc, #124]	@ (80009b0 <read_rtc_info+0xc4>)
 8000932:	f002 fb55 	bl	8002fe0 <HAL_RTC_SetTime>
        // Set default date: Friday, 29-Aug-2025
        sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000936:	2305      	movs	r3, #5
 8000938:	723b      	strb	r3, [r7, #8]
        sDate.Month = RTC_MONTH_AUGUST;
 800093a:	2308      	movs	r3, #8
 800093c:	727b      	strb	r3, [r7, #9]
        sDate.Date = 20;
 800093e:	2314      	movs	r3, #20
 8000940:	72bb      	strb	r3, [r7, #10]
        sDate.Year = 25;
 8000942:	2319      	movs	r3, #25
 8000944:	72fb      	strb	r3, [r7, #11]
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	4818      	ldr	r0, [pc, #96]	@ (80009b0 <read_rtc_info+0xc4>)
 8000950:	f002 fc3f 	bl	80031d2 <HAL_RTC_SetDate>
      }

    // Read current RTC time and date
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	4619      	mov	r1, r3
 800095c:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <read_rtc_info+0xc4>)
 800095e:	f002 fbdc 	bl	800311a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <read_rtc_info+0xc4>)
 800096c:	f002 fcb8 	bl	80032e0 <HAL_RTC_GetDate>

    // Format time/date into string
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000970:	6878      	ldr	r0, [r7, #4]
              sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000972:	7b3b      	ldrb	r3, [r7, #12]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000974:	461d      	mov	r5, r3
              sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000976:	7b7b      	ldrb	r3, [r7, #13]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000978:	461e      	mov	r6, r3
              sTime.Hours, sTime.Minutes, sTime.Seconds,
 800097a:	7bbb      	ldrb	r3, [r7, #14]
              sDate.Date, sDate.Month, sDate.Year);
 800097c:	7aba      	ldrb	r2, [r7, #10]
 800097e:	7a79      	ldrb	r1, [r7, #9]
 8000980:	7afc      	ldrb	r4, [r7, #11]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000982:	9403      	str	r4, [sp, #12]
 8000984:	9102      	str	r1, [sp, #8]
 8000986:	9201      	str	r2, [sp, #4]
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	4633      	mov	r3, r6
 800098c:	462a      	mov	r2, r5
 800098e:	4909      	ldr	r1, [pc, #36]	@ (80009b4 <read_rtc_info+0xc8>)
 8000990:	f007 f8c2 	bl	8007b18 <siprintf>

    // Send formatted message to UART queue
    xQueueSend(uart_q, &task_msg, portMAX_DELAY);
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <read_rtc_info+0xcc>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	1d39      	adds	r1, r7, #4
 800099a:	2300      	movs	r3, #0
 800099c:	f04f 32ff 	mov.w	r2, #4294967295
 80009a0:	f004 fd36 	bl	8005410 <xQueueGenericSend>
}
 80009a4:	bf00      	nop
 80009a6:	3724      	adds	r7, #36	@ 0x24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ac:	40002800 	.word	0x40002800
 80009b0:	20006194 	.word	0x20006194
 80009b4:	08008488 	.word	0x08008488
 80009b8:	20006258 	.word	0x20006258

080009bc <print_error_message>:

// Sends error message to UART queue
void print_error_message(char *task_msg)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    sprintf(task_msg, "\r\nInvalid command received\r\n");
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4908      	ldr	r1, [pc, #32]	@ (80009e8 <print_error_message+0x2c>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f007 f8a5 	bl	8007b18 <siprintf>
    xQueueSend(uart_q, &task_msg, portMAX_DELAY);
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <print_error_message+0x30>)
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	1d39      	adds	r1, r7, #4
 80009d4:	2300      	movs	r3, #0
 80009d6:	f04f 32ff 	mov.w	r2, #4294967295
 80009da:	f004 fd19 	bl	8005410 <xQueueGenericSend>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	080084b8 	.word	0x080084b8
 80009ec:	20006258 	.word	0x20006258

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b5b0      	push	{r4, r5, r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fb4b 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f893 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f000 f971 	bl	8000ce4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a02:	f000 f93f 	bl	8000c84 <MX_USART2_UART_Init>
   // <-- required
  MX_RTC_Init();
 8000a06:	f000 f8e1 	bl	8000bcc <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a0a:	4b32      	ldr	r3, [pc, #200]	@ (8000ad4 <main+0xe4>)
 8000a0c:	1d3c      	adds	r4, r7, #4
 8000a0e:	461d      	mov	r5, r3
 8000a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 fa9e 	bl	8004f62 <osThreadCreate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad8 <main+0xe8>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  uart_send("queue\r\n");   // Send a test message over UART
 8000a2c:	482b      	ldr	r0, [pc, #172]	@ (8000adc <main+0xec>)
 8000a2e:	f7ff fe47 	bl	80006c0 <uart_send>

    // Create a queue to store 'cmd_t' type data, with a maximum of 10 items
    cmd_q = xQueueCreate(10, sizeof(cmd_t));
 8000a32:	2200      	movs	r2, #0
 8000a34:	210b      	movs	r1, #11
 8000a36:	200a      	movs	r0, #10
 8000a38:	f004 fc8f 	bl	800535a <xQueueGenericCreate>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a28      	ldr	r2, [pc, #160]	@ (8000ae0 <main+0xf0>)
 8000a40:	6013      	str	r3, [r2, #0]

    // Create another queue to store 8-byte messages, with a maximum of 10 items
    uart_q = xQueueCreate(10, 8);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2108      	movs	r1, #8
 8000a46:	200a      	movs	r0, #10
 8000a48:	f004 fc87 	bl	800535a <xQueueGenericCreate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a25      	ldr	r2, [pc, #148]	@ (8000ae4 <main+0xf4>)
 8000a50:	6013      	str	r3, [r2, #0]

    // Check if both queues were created successfully
    if((cmd_q != NULL) && (uart_q != NULL))
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <main+0xf0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d035      	beq.n	8000ac6 <main+0xd6>
 8000a5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <main+0xf4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d031      	beq.n	8000ac6 <main+0xd6>
    {
        // Create Task 1: Menu handling task
        xTaskCreate(task1_menu, "MENU", configMINIMAL_STACK_SIZE, NULL, 1, &taskhandle1);
 8000a62:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <main+0xf8>)
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a70:	491e      	ldr	r1, [pc, #120]	@ (8000aec <main+0xfc>)
 8000a72:	481f      	ldr	r0, [pc, #124]	@ (8000af0 <main+0x100>)
 8000a74:	f005 f91c 	bl	8005cb0 <xTaskCreate>

        // Create Task 2: Command handling task
        xTaskCreate(task2_command, "command_handle", configMINIMAL_STACK_SIZE, NULL, 2, &taskhandle2);
 8000a78:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <main+0x104>)
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2300      	movs	r3, #0
 8000a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a86:	491c      	ldr	r1, [pc, #112]	@ (8000af8 <main+0x108>)
 8000a88:	481c      	ldr	r0, [pc, #112]	@ (8000afc <main+0x10c>)
 8000a8a:	f005 f911 	bl	8005cb0 <xTaskCreate>

        // Create Task 3: Command processing task
        xTaskCreate(task3_command_process, "command_process", configMINIMAL_STACK_SIZE, NULL, 2, &taskhandle3);
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <main+0x110>)
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	2302      	movs	r3, #2
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a9c:	4919      	ldr	r1, [pc, #100]	@ (8000b04 <main+0x114>)
 8000a9e:	481a      	ldr	r0, [pc, #104]	@ (8000b08 <main+0x118>)
 8000aa0:	f005 f906 	bl	8005cb0 <xTaskCreate>

        // Create Task 4: UART transmission task
        xTaskCreate(task4_uart_transmit, "uart_transmit", configMINIMAL_STACK_SIZE, NULL, 2, &taskhandle4);
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <main+0x11c>)
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2300      	movs	r3, #0
 8000aae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ab2:	4917      	ldr	r1, [pc, #92]	@ (8000b10 <main+0x120>)
 8000ab4:	4817      	ldr	r0, [pc, #92]	@ (8000b14 <main+0x124>)
 8000ab6:	f005 f8fb 	bl	8005cb0 <xTaskCreate>

        // Start UART reception in interrupt mode (receive 1 byte at a time)
        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	4916      	ldr	r1, [pc, #88]	@ (8000b18 <main+0x128>)
 8000abe:	4817      	ldr	r0, [pc, #92]	@ (8000b1c <main+0x12c>)
 8000ac0:	f002 fe62 	bl	8003788 <HAL_UART_Receive_IT>
 8000ac4:	e002      	b.n	8000acc <main+0xdc>
    }
    else
    {
        // If queue creation failed, notify via UART
        uart_send("QUEUE creation failed\r\n");
 8000ac6:	4816      	ldr	r0, [pc, #88]	@ (8000b20 <main+0x130>)
 8000ac8:	f7ff fdfa 	bl	80006c0 <uart_send>
    }

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000acc:	f004 fa42 	bl	8004f54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <main+0xe0>
 8000ad4:	0800853c 	.word	0x0800853c
 8000ad8:	20006240 	.word	0x20006240
 8000adc:	080084d8 	.word	0x080084d8
 8000ae0:	20006254 	.word	0x20006254
 8000ae4:	20006258 	.word	0x20006258
 8000ae8:	20006244 	.word	0x20006244
 8000aec:	080084e0 	.word	0x080084e0
 8000af0:	080006ed 	.word	0x080006ed
 8000af4:	20006248 	.word	0x20006248
 8000af8:	080084e8 	.word	0x080084e8
 8000afc:	08000725 	.word	0x08000725
 8000b00:	2000624c 	.word	0x2000624c
 8000b04:	080084f8 	.word	0x080084f8
 8000b08:	08000781 	.word	0x08000781
 8000b0c:	20006250 	.word	0x20006250
 8000b10:	08008508 	.word	0x08008508
 8000b14:	08000805 	.word	0x08000805
 8000b18:	20006271 	.word	0x20006271
 8000b1c:	200061b8 	.word	0x200061b8
 8000b20:	08008518 	.word	0x08008518

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b096      	sub	sp, #88	@ 0x58
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2244      	movs	r2, #68	@ 0x44
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f007 f812 	bl	8007b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b46:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b4a:	f000 feaf 	bl	80018ac <HAL_PWREx_ControlVoltageScaling>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b54:	f000 f934 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b58:	230a      	movs	r3, #10
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b62:	2310      	movs	r3, #16
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b66:	2301      	movs	r3, #1
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b76:	230a      	movs	r3, #10
 8000b78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fee4 	bl	8001958 <HAL_RCC_OscConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000b96:	f000 f913 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 faac 	bl	8002110 <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bbe:	f000 f8ff 	bl	8000dc0 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3758      	adds	r7, #88	@ 0x58
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000be4:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000be6:	4a26      	ldr	r2, [pc, #152]	@ (8000c80 <MX_RTC_Init+0xb4>)
 8000be8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000bf2:	227f      	movs	r2, #127	@ 0x7f
 8000bf4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000bf8:	22ff      	movs	r2, #255	@ 0xff
 8000bfa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c14:	4819      	ldr	r0, [pc, #100]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000c16:	f002 f95b 	bl	8002ed0 <HAL_RTC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 f8ce 	bl	8000dc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480f      	ldr	r0, [pc, #60]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000c40:	f002 f9ce 	bl	8002fe0 <HAL_RTC_SetTime>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000c4a:	f000 f8b9 	bl	8000dc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c52:	2301      	movs	r3, #1
 8000c54:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2201      	movs	r2, #1
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_RTC_Init+0xb0>)
 8000c66:	f002 fab4 	bl	80031d2 <HAL_RTC_SetDate>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000c70:	f000 f8a6 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20006194 	.word	0x20006194
 8000c80:	40002800 	.word	0x40002800

08000c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cc8:	f002 fc28 	bl	800351c <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cd2:	f000 f875 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200061b8 	.word	0x200061b8
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b28      	ldr	r3, [pc, #160]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	4a24      	ldr	r2, [pc, #144]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1e:	4b22      	ldr	r3, [pc, #136]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	4a18      	ldr	r2, [pc, #96]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <MX_GPIO_Init+0xc4>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d62:	f000 fd63 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d6c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	@ (8000dac <MX_GPIO_Init+0xc8>)
 8000d7e:	f000 fb93 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d82:	2320      	movs	r3, #32
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9c:	f000 fb84 	bl	80014a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	@ 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48000800 	.word	0x48000800

08000db0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f004 f91e 	bl	8004ffa <osDelay>
 8000dbe:	e7fb      	b.n	8000db8 <StartDefaultTask+0x8>

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd6:	4a10      	ldr	r2, [pc, #64]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	210f      	movs	r1, #15
 8000e06:	f06f 0001 	mvn.w	r0, #1
 8000e0a:	f000 fa98 	bl	800133e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0a4      	sub	sp, #144	@ 0x90
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	2288      	movs	r2, #136	@ 0x88
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f006 fe95 	bl	8007b5c <memset>
  if(hrtc->Instance==RTC)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a10      	ldr	r2, [pc, #64]	@ (8000e78 <HAL_RTC_MspInit+0x5c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d118      	bne.n	8000e6e <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fb82 	bl	8002558 <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e5a:	f7ff ffb1 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_RTC_MspInit+0x60>)
 8000e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e64:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <HAL_RTC_MspInit+0x60>)
 8000e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000e6e:	bf00      	nop
 8000e70:	3790      	adds	r7, #144	@ 0x90
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40002800 	.word	0x40002800
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ac      	sub	sp, #176	@ 0xb0
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2288      	movs	r2, #136	@ 0x88
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fe5b 	bl	8007b5c <memset>
  if(huart->Instance==USART2)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a25      	ldr	r2, [pc, #148]	@ (8000f40 <HAL_UART_MspInit+0xc0>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d143      	bne.n	8000f38 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 fb4b 	bl	8002558 <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec8:	f7ff ff7a 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <HAL_UART_MspInit+0xc4>)
 8000ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f44 <HAL_UART_MspInit+0xc4>)
 8000ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <HAL_UART_MspInit+0xc4>)
 8000eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <HAL_UART_MspInit+0xc4>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee8:	4a16      	ldr	r2, [pc, #88]	@ (8000f44 <HAL_UART_MspInit+0xc4>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <HAL_UART_MspInit+0xc4>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000efc:	230c      	movs	r3, #12
 8000efe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f14:	2307      	movs	r3, #7
 8000f16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f24:	f000 fac0 	bl	80014a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2105      	movs	r1, #5
 8000f2c:	2026      	movs	r0, #38	@ 0x26
 8000f2e:	f000 fa06 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f32:	2026      	movs	r0, #38	@ 0x26
 8000f34:	f000 fa1f 	bl	8001376 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f38:	bf00      	nop
 8000f3a:	37b0      	adds	r7, #176	@ 0xb0
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40004400 	.word	0x40004400
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 f8e1 	bl	8001148 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f86:	f005 fc4d 	bl	8006824 <xTaskGetSchedulerState>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d001      	beq.n	8000f94 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f90:	f006 fb42 	bl	8007618 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <USART2_IRQHandler+0x10>)
 8000f9e:	f002 fc3f 	bl	8003820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200061b8 	.word	0x200061b8

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f006 fdc6 	bl	8007b6c <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20018000 	.word	0x20018000
 800100c:	00000400 	.word	0x00000400
 8001010:	20006274 	.word	0x20006274
 8001014:	20010658 	.word	0x20010658

08001018 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001074 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f006 fd85 	bl	8007b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106e:	f7ff fcbf 	bl	80009f0 <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001080:	080085fc 	.word	0x080085fc
  ldr r2, =_sbss
 8001084:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001088:	20010654 	.word	0x20010654

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>
	...

08001090 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <HAL_Init+0x3c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <HAL_Init+0x3c>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f000 f93e 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ac:	200f      	movs	r0, #15
 80010ae:	f000 f80f 	bl	80010d0 <HAL_InitTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	e001      	b.n	80010c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010be:	f7ff fe85 	bl	8000dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <HAL_InitTick+0x6c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d023      	beq.n	800112c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_InitTick+0x70>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <HAL_InitTick+0x6c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f949 	bl	8001392 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10f      	bne.n	8001126 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d809      	bhi.n	8001120 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 f913 	bl	800133e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001118:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_InitTick+0x74>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e007      	b.n	8001130 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e004      	b.n	8001130 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e001      	b.n	8001130 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000078 	.word	0x20000078
 8001140:	20000070 	.word	0x20000070
 8001144:	20000074 	.word	0x20000074

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000078 	.word	0x20000078
 800116c:	20006278 	.word	0x20006278

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20006278 	.word	0x20006278

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4907      	ldr	r1, [pc, #28]	@ (8001224 <__NVIC_EnableIRQ+0x38>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	@ (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	@ (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff8e 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff29 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff3e 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff8e 	bl	800127c <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5d 	bl	8001228 <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff31 	bl	80011ec <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa2 	bl	80012e4 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d008      	beq.n	80013d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2204      	movs	r2, #4
 80013c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e022      	b.n	800141a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 020e 	bic.w	r2, r2, #14
 80013e2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f8:	f003 021c 	and.w	r2, r3, #28
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f202 	lsl.w	r2, r1, r2
 8001406:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d005      	beq.n	800144a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2204      	movs	r2, #4
 8001442:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e029      	b.n	800149e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 020e 	bic.w	r2, r2, #14
 8001458:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f003 021c 	and.w	r2, r3, #28
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	4798      	blx	r3
    }
  }
  return status;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e17f      	b.n	80017b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2101      	movs	r1, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8171 	beq.w	80017b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d005      	beq.n	80014e8 <HAL_GPIO_Init+0x40>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d130      	bne.n	800154a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800151e:	2201      	movs	r2, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	f003 0201 	and.w	r2, r3, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b03      	cmp	r3, #3
 8001554:	d118      	bne.n	8001588 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	6939      	ldr	r1, [r7, #16]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80ac 	beq.w	80017b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b5f      	ldr	r3, [pc, #380]	@ (80017d8 <HAL_GPIO_Init+0x330>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800165e:	4a5e      	ldr	r2, [pc, #376]	@ (80017d8 <HAL_GPIO_Init+0x330>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6613      	str	r3, [r2, #96]	@ 0x60
 8001666:	4b5c      	ldr	r3, [pc, #368]	@ (80017d8 <HAL_GPIO_Init+0x330>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001672:	4a5a      	ldr	r2, [pc, #360]	@ (80017dc <HAL_GPIO_Init+0x334>)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800169c:	d025      	beq.n	80016ea <HAL_GPIO_Init+0x242>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	@ (80017e0 <HAL_GPIO_Init+0x338>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01f      	beq.n	80016e6 <HAL_GPIO_Init+0x23e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4e      	ldr	r2, [pc, #312]	@ (80017e4 <HAL_GPIO_Init+0x33c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x23a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4d      	ldr	r2, [pc, #308]	@ (80017e8 <HAL_GPIO_Init+0x340>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x236>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	@ (80017ec <HAL_GPIO_Init+0x344>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x232>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	@ (80017f0 <HAL_GPIO_Init+0x348>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x22e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4a      	ldr	r2, [pc, #296]	@ (80017f4 <HAL_GPIO_Init+0x34c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x22a>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016fc:	4937      	ldr	r1, [pc, #220]	@ (80017dc <HAL_GPIO_Init+0x334>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170a:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800172e:	4a32      	ldr	r2, [pc, #200]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001734:	4b30      	ldr	r3, [pc, #192]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001758:	4a27      	ldr	r2, [pc, #156]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800175e:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001782:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ac:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f ae78 	bne.w	80014b8 <HAL_GPIO_Init+0x10>
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	48000400 	.word	0x48000400
 80017e4:	48000800 	.word	0x48000800
 80017e8:	48000c00 	.word	0x48000c00
 80017ec:	48001000 	.word	0x48001000
 80017f0:	48001400 	.word	0x48001400
 80017f4:	48001800 	.word	0x48001800
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e001      	b.n	800181e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001848:	e002      	b.n	8001850 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4013      	ands	r3, r2
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43d9      	mvns	r1, r3
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	400b      	ands	r3, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	619a      	str	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ba:	d130      	bne.n	800191e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018c8:	d038      	beq.n	800193c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ca:	4b20      	ldr	r3, [pc, #128]	@ (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018d2:	4a1e      	ldr	r2, [pc, #120]	@ (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018da:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2232      	movs	r2, #50	@ 0x32
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0c9b      	lsrs	r3, r3, #18
 80018ec:	3301      	adds	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f0:	e002      	b.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001904:	d102      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f2      	bne.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001918:	d110      	bne.n	800193c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e00f      	b.n	800193e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800192a:	d007      	beq.n	800193c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001934:	4a05      	ldr	r2, [pc, #20]	@ (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001936:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40007000 	.word	0x40007000
 8001950:	20000070 	.word	0x20000070
 8001954:	431bde83 	.word	0x431bde83

08001958 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e3ca      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4b97      	ldr	r3, [pc, #604]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4b94      	ldr	r3, [pc, #592]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80e4 	beq.w	8001b54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4a>
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	f040 808b 	bne.w	8001ab0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b01      	cmp	r3, #1
 800199e:	f040 8087 	bne.w	8001ab0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a2:	4b89      	ldr	r3, [pc, #548]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x62>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e3a2      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1a      	ldr	r2, [r3, #32]
 80019be:	4b82      	ldr	r3, [pc, #520]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_RCC_OscConfig+0x7c>
 80019ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d2:	e005      	b.n	80019e0 <HAL_RCC_OscConfig+0x88>
 80019d4:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d223      	bcs.n	8001a2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fd55 	bl	8002498 <RCC_SetFlashLatencyFromMSIRange>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e383      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f8:	4b73      	ldr	r3, [pc, #460]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a72      	ldr	r2, [pc, #456]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b70      	ldr	r3, [pc, #448]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	496d      	ldr	r1, [pc, #436]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a16:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	4968      	ldr	r1, [pc, #416]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
 8001a2a:	e025      	b.n	8001a78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2c:	4b66      	ldr	r3, [pc, #408]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a65      	ldr	r2, [pc, #404]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b63      	ldr	r3, [pc, #396]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4960      	ldr	r1, [pc, #384]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	495b      	ldr	r1, [pc, #364]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fd15 	bl	8002498 <RCC_SetFlashLatencyFromMSIRange>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e343      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a78:	f000 fc4a 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b52      	ldr	r3, [pc, #328]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	4950      	ldr	r1, [pc, #320]	@ (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a8a:	5ccb      	ldrb	r3, [r1, r3]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	4a4e      	ldr	r2, [pc, #312]	@ (8001bd0 <HAL_RCC_OscConfig+0x278>)
 8001a96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a98:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd4 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fb17 	bl	80010d0 <HAL_InitTick>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d052      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	e327      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d032      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ab8:	4b43      	ldr	r3, [pc, #268]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a42      	ldr	r2, [pc, #264]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb54 	bl	8001170 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001acc:	f7ff fb50 	bl	8001170 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e310      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ade:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aea:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a36      	ldr	r2, [pc, #216]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b34      	ldr	r3, [pc, #208]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4931      	ldr	r1, [pc, #196]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b08:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	492c      	ldr	r1, [pc, #176]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	e01a      	b.n	8001b54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a29      	ldr	r2, [pc, #164]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fb21 	bl	8001170 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b32:	f7ff fb1d 	bl	8001170 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e2dd      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b44:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x1da>
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d074      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x21a>
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d10e      	bne.n	8001b8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d10b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d064      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d160      	bne.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e2ba      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x24a>
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e026      	b.n	8001bf0 <HAL_RCC_OscConfig+0x298>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001baa:	d115      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x280>
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a02      	ldr	r2, [pc, #8]	@ (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	e014      	b.n	8001bf0 <HAL_RCC_OscConfig+0x298>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08008570 	.word	0x08008570
 8001bd0:	20000070 	.word	0x20000070
 8001bd4:	20000074 	.word	0x20000074
 8001bd8:	4ba0      	ldr	r3, [pc, #640]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a9f      	ldr	r2, [pc, #636]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b9d      	ldr	r3, [pc, #628]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a9c      	ldr	r2, [pc, #624]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff faba 	bl	8001170 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fab6 	bl	8001170 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	@ 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e276      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c12:	4b92      	ldr	r3, [pc, #584]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2a8>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff faa6 	bl	8001170 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff faa2 	bl	8001170 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	@ 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e262      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	4b88      	ldr	r3, [pc, #544]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2d0>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d060      	beq.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_OscConfig+0x310>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d119      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d116      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c68:	4b7c      	ldr	r3, [pc, #496]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x328>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e23f      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b76      	ldr	r3, [pc, #472]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	4973      	ldr	r1, [pc, #460]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c94:	e040      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d023      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff fa61 	bl	8001170 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fa5d 	bl	8001170 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e21d      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	4b65      	ldr	r3, [pc, #404]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b62      	ldr	r3, [pc, #392]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	495f      	ldr	r1, [pc, #380]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	e018      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5c      	ldr	r2, [pc, #368]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fa3d 	bl	8001170 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fa39 	bl	8001170 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1f9      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d0c:	4b53      	ldr	r3, [pc, #332]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d32:	4a4a      	ldr	r2, [pc, #296]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fa18 	bl	8001170 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fa14 	bl	8001170 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1d4      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d56:	4b41      	ldr	r3, [pc, #260]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ef      	beq.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
 8001d64:	e01b      	b.n	8001d9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d66:	4b3d      	ldr	r3, [pc, #244]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff f9fb 	bl	8001170 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f9f7 	bl	8001170 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1b7      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	4b32      	ldr	r3, [pc, #200]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ef      	bne.n	8001d7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80a6 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001db0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc0:	4a26      	ldr	r2, [pc, #152]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d118      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df0:	f7ff f9be 	bl	8001170 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7ff f9ba 	bl	8001170 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e17a      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4d8>
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e2e:	e029      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d115      	bne.n	8001e64 <HAL_RCC_OscConfig+0x50c>
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	4a07      	ldr	r2, [pc, #28]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e48:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4e:	4a03      	ldr	r2, [pc, #12]	@ (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e58:	e014      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40007000 	.word	0x40007000
 8001e64:	4b9c      	ldr	r3, [pc, #624]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6a:	4a9b      	ldr	r2, [pc, #620]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e74:	4b98      	ldr	r3, [pc, #608]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7a:	4a97      	ldr	r2, [pc, #604]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d016      	beq.n	8001eba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f970 	bl	8001170 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff f96c 	bl	8001170 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e12a      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	4b8b      	ldr	r3, [pc, #556]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ed      	beq.n	8001e94 <HAL_RCC_OscConfig+0x53c>
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff f959 	bl	8001170 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff f955 	bl	8001170 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e113      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed8:	4b7f      	ldr	r3, [pc, #508]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ed      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b7a      	ldr	r3, [pc, #488]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	4a79      	ldr	r2, [pc, #484]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80fe 	beq.w	80020fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	f040 80d0 	bne.w	80020ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f0c:	4b72      	ldr	r3, [pc, #456]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d130      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d127      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d11f      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f4c:	2a07      	cmp	r2, #7
 8001f4e:	bf14      	ite	ne
 8001f50:	2201      	movne	r2, #1
 8001f52:	2200      	moveq	r2, #0
 8001f54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d113      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	3b01      	subs	r3, #1
 8001f68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d06e      	beq.n	8002060 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d069      	beq.n	800205c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f88:	4b53      	ldr	r3, [pc, #332]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f94:	4b50      	ldr	r3, [pc, #320]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0ad      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb0:	f7ff f8de 	bl	8001170 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f8da 	bl	8001170 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e09a      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fca:	4b43      	ldr	r3, [pc, #268]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd6:	4b40      	ldr	r3, [pc, #256]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	4b40      	ldr	r3, [pc, #256]	@ (80020dc <HAL_RCC_OscConfig+0x784>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	4311      	orrs	r1, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ff0:	0212      	lsls	r2, r2, #8
 8001ff2:	4311      	orrs	r1, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ff8:	0852      	lsrs	r2, r2, #1
 8001ffa:	3a01      	subs	r2, #1
 8001ffc:	0552      	lsls	r2, r2, #21
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002004:	0852      	lsrs	r2, r2, #1
 8002006:	3a01      	subs	r2, #1
 8002008:	0652      	lsls	r2, r2, #25
 800200a:	4311      	orrs	r1, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002010:	0912      	lsrs	r2, r2, #4
 8002012:	0452      	lsls	r2, r2, #17
 8002014:	430a      	orrs	r2, r1
 8002016:	4930      	ldr	r1, [pc, #192]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002018:	4313      	orrs	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800201c:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2d      	ldr	r2, [pc, #180]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002026:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002028:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a2a      	ldr	r2, [pc, #168]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002032:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002034:	f7ff f89c 	bl	8001170 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff f898 	bl	8001170 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e058      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204e:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800205a:	e050      	b.n	80020fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e04f      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002060:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d148      	bne.n	80020fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800206c:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002078:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002082:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002084:	f7ff f874 	bl	8001170 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7ff f870 	bl	8001170 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e030      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x734>
 80020aa:	e028      	b.n	80020fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d023      	beq.n	80020fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a08      	ldr	r2, [pc, #32]	@ (80020d8 <HAL_RCC_OscConfig+0x780>)
 80020b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff f857 	bl	8001170 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c4:	e00c      	b.n	80020e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff f853 	bl	8001170 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d905      	bls.n	80020e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e013      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
 80020d8:	40021000 	.word	0x40021000
 80020dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_RCC_OscConfig+0x7b0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ec      	bne.n	80020c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_RCC_OscConfig+0x7b0>)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	4905      	ldr	r1, [pc, #20]	@ (8002108 <HAL_RCC_OscConfig+0x7b0>)
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_OscConfig+0x7b4>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
 80020f8:	e001      	b.n	80020fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	feeefffc 	.word	0xfeeefffc

08002110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0e7      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b75      	ldr	r3, [pc, #468]	@ (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d910      	bls.n	8002154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b72      	ldr	r3, [pc, #456]	@ (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4970      	ldr	r1, [pc, #448]	@ (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b6e      	ldr	r3, [pc, #440]	@ (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0cf      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d010      	beq.n	8002182 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	4b66      	ldr	r3, [pc, #408]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800216c:	429a      	cmp	r2, r3
 800216e:	d908      	bls.n	8002182 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b63      	ldr	r3, [pc, #396]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4960      	ldr	r1, [pc, #384]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d04c      	beq.n	8002228 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	4b5a      	ldr	r3, [pc, #360]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d121      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0a6      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ae:	4b54      	ldr	r3, [pc, #336]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e09a      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e08e      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e086      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b46      	ldr	r3, [pc, #280]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4943      	ldr	r1, [pc, #268]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f8:	f7fe ffba 	bl	8001170 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe ffb6 	bl	8001170 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e06e      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b3a      	ldr	r3, [pc, #232]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002240:	429a      	cmp	r2, r3
 8002242:	d208      	bcs.n	8002256 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b2e      	ldr	r3, [pc, #184]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	492b      	ldr	r1, [pc, #172]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002256:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d210      	bcs.n	8002286 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002264:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 0207 	bic.w	r2, r3, #7
 800226c:	4923      	ldr	r1, [pc, #140]	@ (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002274:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e036      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002292:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4918      	ldr	r1, [pc, #96]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b0:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4910      	ldr	r1, [pc, #64]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c4:	f000 f824 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	490b      	ldr	r1, [pc, #44]	@ (8002304 <HAL_RCC_ClockConfig+0x1f4>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <HAL_RCC_ClockConfig+0x1f8>)
 80022e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_ClockConfig+0x1fc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fef1 	bl	80010d0 <HAL_InitTick>
 80022ee:	4603      	mov	r3, r0
 80022f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80022f2:	7afb      	ldrb	r3, [r7, #11]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40022000 	.word	0x40022000
 8002300:	40021000 	.word	0x40021000
 8002304:	08008570 	.word	0x08008570
 8002308:	20000070 	.word	0x20000070
 800230c:	20000074 	.word	0x20000074

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	@ 0x24
 8002314:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231e:	4b3e      	ldr	r3, [pc, #248]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002328:	4b3b      	ldr	r3, [pc, #236]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x34>
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d121      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d11e      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002344:	4b34      	ldr	r3, [pc, #208]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002350:	4b31      	ldr	r3, [pc, #196]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 8002352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e005      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002360:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800236c:	4a2b      	ldr	r2, [pc, #172]	@ (800241c <HAL_RCC_GetSysClockFreq+0x10c>)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10d      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d102      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x110>)
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e004      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d101      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002394:	4b23      	ldr	r3, [pc, #140]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x114>)
 8002396:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d134      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800239e:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d003      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0xac>
 80023b4:	e005      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x110>)
 80023b8:	617b      	str	r3, [r7, #20]
      break;
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023bc:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x114>)
 80023be:	617b      	str	r3, [r7, #20]
      break;
 80023c0:	e002      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	617b      	str	r3, [r7, #20]
      break;
 80023c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c8:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	3301      	adds	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	fb03 f202 	mul.w	r2, r3, r2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	0e5b      	lsrs	r3, r3, #25
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	3301      	adds	r3, #1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002408:	69bb      	ldr	r3, [r7, #24]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	08008588 	.word	0x08008588
 8002420:	00f42400 	.word	0x00f42400
 8002424:	007a1200 	.word	0x007a1200

08002428 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_RCC_GetHCLKFreq+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000070 	.word	0x20000070

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002444:	f7ff fff0 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4904      	ldr	r1, [pc, #16]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	08008580 	.word	0x08008580

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002470:	f7ff ffda 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0adb      	lsrs	r3, r3, #11
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4904      	ldr	r1, [pc, #16]	@ (8002494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000
 8002494:	08008580 	.word	0x08008580

08002498 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024b0:	f7ff f9ee 	bl	8001890 <HAL_PWREx_GetVoltageRange>
 80024b4:	6178      	str	r0, [r7, #20]
 80024b6:	e014      	b.n	80024e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	4a24      	ldr	r2, [pc, #144]	@ (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c4:	4b22      	ldr	r3, [pc, #136]	@ (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024d0:	f7ff f9de 	bl	8001890 <HAL_PWREx_GetVoltageRange>
 80024d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024e8:	d10b      	bne.n	8002502 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b80      	cmp	r3, #128	@ 0x80
 80024ee:	d919      	bls.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80024f4:	d902      	bls.n	80024fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024f6:	2302      	movs	r3, #2
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	e013      	b.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024fc:	2301      	movs	r3, #1
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	e010      	b.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b80      	cmp	r3, #128	@ 0x80
 8002506:	d902      	bls.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002508:	2303      	movs	r3, #3
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	e00a      	b.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b80      	cmp	r3, #128	@ 0x80
 8002512:	d102      	bne.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002514:	2302      	movs	r3, #2
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e004      	b.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b70      	cmp	r3, #112	@ 0x70
 800251e:	d101      	bne.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002520:	2301      	movs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 0207 	bic.w	r2, r3, #7
 800252c:	4909      	ldr	r1, [pc, #36]	@ (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002534:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	40022000 	.word	0x40022000

08002558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002560:	2300      	movs	r3, #0
 8002562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002564:	2300      	movs	r3, #0
 8002566:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002570:	2b00      	cmp	r3, #0
 8002572:	d041      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002578:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800257c:	d02a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800257e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002582:	d824      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002584:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800258a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800258e:	d81e      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002594:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002598:	d010      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800259a:	e018      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800259c:	4b86      	ldr	r3, [pc, #536]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a85      	ldr	r2, [pc, #532]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025a8:	e015      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fabb 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ba:	e00c      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3320      	adds	r3, #32
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fba6 	bl	8002d14 <RCCEx_PLLSAI2_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025cc:	e003      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	74fb      	strb	r3, [r7, #19]
      break;
 80025d2:	e000      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025dc:	4b76      	ldr	r3, [pc, #472]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025ea:	4973      	ldr	r1, [pc, #460]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025f2:	e001      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d041      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002608:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800260c:	d02a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800260e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002612:	d824      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002614:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800261a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800261e:	d81e      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002628:	d010      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800262a:	e018      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800262c:	4b62      	ldr	r3, [pc, #392]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a61      	ldr	r2, [pc, #388]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002636:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002638:	e015      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fa73 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 8002646:	4603      	mov	r3, r0
 8002648:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800264a:	e00c      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3320      	adds	r3, #32
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fb5e 	bl	8002d14 <RCCEx_PLLSAI2_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800265c:	e003      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	74fb      	strb	r3, [r7, #19]
      break;
 8002662:	e000      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800266c:	4b52      	ldr	r3, [pc, #328]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002672:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800267a:	494f      	ldr	r1, [pc, #316]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002682:	e001      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a0 	beq.w	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800269a:	4b47      	ldr	r3, [pc, #284]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00d      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	4b41      	ldr	r3, [pc, #260]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b4:	4a40      	ldr	r2, [pc, #256]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80026bc:	4b3e      	ldr	r3, [pc, #248]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c8:	2301      	movs	r3, #1
 80026ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026cc:	4b3b      	ldr	r3, [pc, #236]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a3a      	ldr	r2, [pc, #232]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d8:	f7fe fd4a 	bl	8001170 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026de:	e009      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e0:	f7fe fd46 	bl	8001170 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	74fb      	strb	r3, [r7, #19]
        break;
 80026f2:	e005      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026f4:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d15c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002706:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002710:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01f      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	d019      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002724:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800272e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002730:	4b21      	ldr	r3, [pc, #132]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002736:	4a20      	ldr	r2, [pc, #128]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002740:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002746:	4a1c      	ldr	r2, [pc, #112]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002750:	4a19      	ldr	r2, [pc, #100]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe fd05 	bl	8001170 <HAL_GetTick>
 8002766:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002768:	e00b      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fd01 	bl	8001170 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d902      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	74fb      	strb	r3, [r7, #19]
            break;
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ec      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002796:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027a6:	4904      	ldr	r1, [pc, #16]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027ae:	e009      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	74bb      	strb	r3, [r7, #18]
 80027b4:	e006      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c4:	7c7b      	ldrb	r3, [r7, #17]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ca:	4b9e      	ldr	r3, [pc, #632]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	4a9d      	ldr	r2, [pc, #628]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e2:	4b98      	ldr	r3, [pc, #608]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e8:	f023 0203 	bic.w	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f0:	4994      	ldr	r1, [pc, #592]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002804:	4b8f      	ldr	r3, [pc, #572]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280a:	f023 020c 	bic.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002812:	498c      	ldr	r1, [pc, #560]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002826:	4b87      	ldr	r3, [pc, #540]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	4983      	ldr	r1, [pc, #524]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002848:	4b7e      	ldr	r3, [pc, #504]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	497b      	ldr	r1, [pc, #492]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800286a:	4b76      	ldr	r3, [pc, #472]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002878:	4972      	ldr	r1, [pc, #456]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800288c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002892:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289a:	496a      	ldr	r1, [pc, #424]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ae:	4b65      	ldr	r3, [pc, #404]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	4961      	ldr	r1, [pc, #388]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028de:	4959      	ldr	r1, [pc, #356]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f2:	4b54      	ldr	r3, [pc, #336]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002900:	4950      	ldr	r1, [pc, #320]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002914:	4b4b      	ldr	r3, [pc, #300]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	4948      	ldr	r1, [pc, #288]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002936:	4b43      	ldr	r3, [pc, #268]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002944:	493f      	ldr	r1, [pc, #252]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d028      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002958:	4b3a      	ldr	r3, [pc, #232]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002966:	4937      	ldr	r1, [pc, #220]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002976:	d106      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002978:	4b32      	ldr	r3, [pc, #200]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a31      	ldr	r2, [pc, #196]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002982:	60d3      	str	r3, [r2, #12]
 8002984:	e011      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800298a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800298e:	d10c      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f8c8 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d028      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029b6:	4b23      	ldr	r3, [pc, #140]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	491f      	ldr	r1, [pc, #124]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d4:	d106      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4a1a      	ldr	r2, [pc, #104]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029e0:	60d3      	str	r3, [r2, #12]
 80029e2:	e011      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f899 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02b      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a22:	4908      	ldr	r1, [pc, #32]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a02      	ldr	r2, [pc, #8]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
 8002a40:	e014      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2101      	movs	r1, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f867 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d02f      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a86:	4928      	ldr	r1, [pc, #160]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f844 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d014      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	74bb      	strb	r3, [r7, #18]
 8002ab2:	e011      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3320      	adds	r3, #32
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f925 	bl	8002d14 <RCCEx_PLLSAI2_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ace:	7cfb      	ldrb	r3, [r7, #19]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ae4:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002af2:	490d      	ldr	r1, [pc, #52]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b16:	4904      	ldr	r1, [pc, #16]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000

08002b2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b3a:	4b75      	ldr	r3, [pc, #468]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d018      	beq.n	8002b78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b46:	4b72      	ldr	r3, [pc, #456]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0203 	and.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10d      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
       ||
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d047      	beq.n	8002c02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e044      	b.n	8002c02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d018      	beq.n	8002bb2 <RCCEx_PLLSAI1_Config+0x86>
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d825      	bhi.n	8002bd0 <RCCEx_PLLSAI1_Config+0xa4>
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d002      	beq.n	8002b8e <RCCEx_PLLSAI1_Config+0x62>
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d009      	beq.n	8002ba0 <RCCEx_PLLSAI1_Config+0x74>
 8002b8c:	e020      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b8e:	4b60      	ldr	r3, [pc, #384]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11d      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9e:	e01a      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d116      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e013      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bb2:	4b57      	ldr	r3, [pc, #348]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10f      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bbe:	4b54      	ldr	r3, [pc, #336]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bce:	e006      	b.n	8002bde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e004      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e002      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bde:	bf00      	nop
    }

    if(status == HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10d      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002be6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	4944      	ldr	r1, [pc, #272]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d17d      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c08:	4b41      	ldr	r3, [pc, #260]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a40      	ldr	r2, [pc, #256]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c14:	f7fe faac 	bl	8001170 <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c1a:	e009      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c1c:	f7fe faa8 	bl	8001170 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d902      	bls.n	8002c30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c2e:	e005      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c30:	4b37      	ldr	r3, [pc, #220]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ef      	bne.n	8002c1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d160      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d111      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c48:	4b31      	ldr	r3, [pc, #196]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	0211      	lsls	r1, r2, #8
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	0912      	lsrs	r2, r2, #4
 8002c60:	0452      	lsls	r2, r2, #17
 8002c62:	430a      	orrs	r2, r1
 8002c64:	492a      	ldr	r1, [pc, #168]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	610b      	str	r3, [r1, #16]
 8002c6a:	e027      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d112      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c72:	4b27      	ldr	r3, [pc, #156]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c7a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6892      	ldr	r2, [r2, #8]
 8002c82:	0211      	lsls	r1, r2, #8
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6912      	ldr	r2, [r2, #16]
 8002c88:	0852      	lsrs	r2, r2, #1
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0552      	lsls	r2, r2, #21
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	491f      	ldr	r1, [pc, #124]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	610b      	str	r3, [r1, #16]
 8002c96:	e011      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c98:	4b1d      	ldr	r3, [pc, #116]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ca0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6892      	ldr	r2, [r2, #8]
 8002ca8:	0211      	lsls	r1, r2, #8
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6952      	ldr	r2, [r2, #20]
 8002cae:	0852      	lsrs	r2, r2, #1
 8002cb0:	3a01      	subs	r2, #1
 8002cb2:	0652      	lsls	r2, r2, #25
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	4916      	ldr	r1, [pc, #88]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a13      	ldr	r2, [pc, #76]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fa52 	bl	8001170 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cce:	e009      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd0:	f7fe fa4e 	bl	8001170 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d902      	bls.n	8002ce4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ce2:	e005      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ef      	beq.n	8002cd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	4904      	ldr	r1, [pc, #16]	@ (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000

08002d14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d018      	beq.n	8002d60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d2e:	4b67      	ldr	r3, [pc, #412]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0203 	and.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d10d      	bne.n	8002d5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
       ||
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d46:	4b61      	ldr	r3, [pc, #388]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
       ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d047      	beq.n	8002dea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e044      	b.n	8002dea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d018      	beq.n	8002d9a <RCCEx_PLLSAI2_Config+0x86>
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d825      	bhi.n	8002db8 <RCCEx_PLLSAI2_Config+0xa4>
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d002      	beq.n	8002d76 <RCCEx_PLLSAI2_Config+0x62>
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d009      	beq.n	8002d88 <RCCEx_PLLSAI2_Config+0x74>
 8002d74:	e020      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d76:	4b55      	ldr	r3, [pc, #340]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11d      	bne.n	8002dbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d86:	e01a      	b.n	8002dbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d88:	4b50      	ldr	r3, [pc, #320]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d116      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d98:	e013      	b.n	8002dc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002da6:	4b49      	ldr	r3, [pc, #292]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002db6:	e006      	b.n	8002dc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e004      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	430b      	orrs	r3, r1
 8002de4:	4939      	ldr	r1, [pc, #228]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d167      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002df0:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a35      	ldr	r2, [pc, #212]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe f9b8 	bl	8001170 <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e02:	e009      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e04:	f7fe f9b4 	bl	8001170 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d902      	bls.n	8002e18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	73fb      	strb	r3, [r7, #15]
        break;
 8002e16:	e005      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e18:	4b2c      	ldr	r3, [pc, #176]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ef      	bne.n	8002e04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d14a      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d111      	bne.n	8002e54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e30:	4b26      	ldr	r3, [pc, #152]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6892      	ldr	r2, [r2, #8]
 8002e40:	0211      	lsls	r1, r2, #8
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	0912      	lsrs	r2, r2, #4
 8002e48:	0452      	lsls	r2, r2, #17
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	491f      	ldr	r1, [pc, #124]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	614b      	str	r3, [r1, #20]
 8002e52:	e011      	b.n	8002e78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6892      	ldr	r2, [r2, #8]
 8002e64:	0211      	lsls	r1, r2, #8
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6912      	ldr	r2, [r2, #16]
 8002e6a:	0852      	lsrs	r2, r2, #1
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	0652      	lsls	r2, r2, #25
 8002e70:	430a      	orrs	r2, r1
 8002e72:	4916      	ldr	r1, [pc, #88]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e78:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a13      	ldr	r2, [pc, #76]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe f974 	bl	8001170 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e8a:	e009      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e8c:	f7fe f970 	bl	8001170 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d902      	bls.n	8002ea0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e9e:	e005      	b.n	8002eac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ef      	beq.n	8002e8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	4904      	ldr	r1, [pc, #16]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d079      	beq.n	8002fd6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd ff90 	bl	8000e1c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d058      	beq.n	8002fc4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	22ca      	movs	r2, #202	@ 0xca
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2253      	movs	r2, #83	@ 0x53
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa4e 	bl	80033c4 <RTC_EnterInitMode>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d127      	bne.n	8002f82 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f44:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6899      	ldr	r1, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68d2      	ldr	r2, [r2, #12]
 8002f6c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6919      	ldr	r1, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	041a      	lsls	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa52 	bl	800342c <RTC_ExitInitMode>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d113      	bne.n	8002fba <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0203 	bic.w	r2, r2, #3
 8002fa0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	22ff      	movs	r2, #255	@ 0xff
 8002fc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fc2:	e001      	b.n	8002fc8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_RTC_SetTime+0x1a>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e08b      	b.n	8003112 <HAL_RTC_SetTime+0x132>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2202      	movs	r2, #2
 8003006:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	22ca      	movs	r2, #202	@ 0xca
 8003010:	625a      	str	r2, [r3, #36]	@ 0x24
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2253      	movs	r2, #83	@ 0x53
 8003018:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f9d2 	bl	80033c4 <RTC_EnterInitMode>
 8003020:	4603      	mov	r3, r0
 8003022:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d163      	bne.n	80030f2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d126      	bne.n	800307e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2200      	movs	r2, #0
 8003042:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fa2d 	bl	80034a8 <RTC_ByteToBcd2>
 800304e:	4603      	mov	r3, r0
 8003050:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fa26 	bl	80034a8 <RTC_ByteToBcd2>
 800305c:	4603      	mov	r3, r0
 800305e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003060:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	789b      	ldrb	r3, [r3, #2]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fa1e 	bl	80034a8 <RTC_ByteToBcd2>
 800306c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800306e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	78db      	ldrb	r3, [r3, #3]
 8003076:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	e018      	b.n	80030b0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2200      	movs	r2, #0
 8003090:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800309e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030a4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	78db      	ldrb	r3, [r3, #3]
 80030aa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80030ba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80030be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	431a      	orrs	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f99f 	bl	800342c <RTC_ExitInitMode>
 80030ee:	4603      	mov	r3, r0
 80030f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	22ff      	movs	r2, #255	@ 0xff
 80030f8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003110:	7cfb      	ldrb	r3, [r7, #19]
}
 8003112:	4618      	mov	r0, r3
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd90      	pop	{r4, r7, pc}

0800311a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003148:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800314c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003176:	b2da      	uxtb	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	0d9b      	lsrs	r3, r3, #22
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d11a      	bne.n	80031c8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f9a6 	bl	80034e8 <RTC_Bcd2ToByte>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	785b      	ldrb	r3, [r3, #1]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f99d 	bl	80034e8 <RTC_Bcd2ToByte>
 80031ae:	4603      	mov	r3, r0
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	789b      	ldrb	r3, [r3, #2]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f994 	bl	80034e8 <RTC_Bcd2ToByte>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031d2:	b590      	push	{r4, r7, lr}
 80031d4:	b087      	sub	sp, #28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_RTC_SetDate+0x1a>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e075      	b.n	80032d8 <HAL_RTC_SetDate+0x106>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10e      	bne.n	8003220 <HAL_RTC_SetDate+0x4e>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	f023 0310 	bic.w	r3, r3, #16
 8003216:	b2db      	uxtb	r3, r3
 8003218:	330a      	adds	r3, #10
 800321a:	b2da      	uxtb	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d11c      	bne.n	8003260 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	78db      	ldrb	r3, [r3, #3]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f93c 	bl	80034a8 <RTC_ByteToBcd2>
 8003230:	4603      	mov	r3, r0
 8003232:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 f935 	bl	80034a8 <RTC_ByteToBcd2>
 800323e:	4603      	mov	r3, r0
 8003240:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003242:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	789b      	ldrb	r3, [r3, #2]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f92d 	bl	80034a8 <RTC_ByteToBcd2>
 800324e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003250:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e00e      	b.n	800327e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	78db      	ldrb	r3, [r3, #3]
 8003264:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	785b      	ldrb	r3, [r3, #1]
 800326a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800326c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003272:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	22ca      	movs	r2, #202	@ 0xca
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2253      	movs	r2, #83	@ 0x53
 800328c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f898 	bl	80033c4 <RTC_EnterInitMode>
 8003294:	4603      	mov	r3, r0
 8003296:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10c      	bne.n	80032b8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80032ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f8bc 	bl	800342c <RTC_ExitInitMode>
 80032b4:	4603      	mov	r3, r0
 80032b6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	22ff      	movs	r2, #255	@ 0xff
 80032be:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd90      	pop	{r4, r7, pc}

080032e0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80032fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	0c1b      	lsrs	r3, r3, #16
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	0b5b      	lsrs	r3, r3, #13
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d11a      	bne.n	8003370 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	78db      	ldrb	r3, [r3, #3]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8d2 	bl	80034e8 <RTC_Bcd2ToByte>
 8003344:	4603      	mov	r3, r0
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f8c9 	bl	80034e8 <RTC_Bcd2ToByte>
 8003356:	4603      	mov	r3, r0
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	789b      	ldrb	r3, [r3, #2]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f8c0 	bl	80034e8 <RTC_Bcd2ToByte>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0d      	ldr	r2, [pc, #52]	@ (80033c0 <HAL_RTC_WaitForSynchro+0x44>)
 800338a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800338c:	f7fd fef0 	bl	8001170 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003392:	e009      	b.n	80033a8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003394:	f7fd feec 	bl	8001170 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033a2:	d901      	bls.n	80033a8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e007      	b.n	80033b8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ee      	beq.n	8003394 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	0003ff5f 	.word	0x0003ff5f

080033c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d120      	bne.n	8003420 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f04f 32ff 	mov.w	r2, #4294967295
 80033e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80033e8:	f7fd fec2 	bl	8001170 <HAL_GetTick>
 80033ec:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80033ee:	e00d      	b.n	800340c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80033f0:	f7fd febe 	bl	8001170 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033fe:	d905      	bls.n	800340c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2203      	movs	r2, #3
 8003408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <RTC_EnterInitMode+0x5c>
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d1e7      	bne.n	80033f0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003438:	4b1a      	ldr	r3, [pc, #104]	@ (80034a4 <RTC_ExitInitMode+0x78>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a19      	ldr	r2, [pc, #100]	@ (80034a4 <RTC_ExitInitMode+0x78>)
 800343e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003442:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003444:	4b17      	ldr	r3, [pc, #92]	@ (80034a4 <RTC_ExitInitMode+0x78>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10c      	bne.n	800346a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff93 	bl	800337c <HAL_RTC_WaitForSynchro>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01e      	beq.n	800349a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2203      	movs	r2, #3
 8003460:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e017      	b.n	800349a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800346a:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <RTC_ExitInitMode+0x78>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4a0d      	ldr	r2, [pc, #52]	@ (80034a4 <RTC_ExitInitMode+0x78>)
 8003470:	f023 0320 	bic.w	r3, r3, #32
 8003474:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ff80 	bl	800337c <HAL_RTC_WaitForSynchro>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800348e:	4b05      	ldr	r3, [pc, #20]	@ (80034a4 <RTC_ExitInitMode+0x78>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4a04      	ldr	r2, [pc, #16]	@ (80034a4 <RTC_ExitInitMode+0x78>)
 8003494:	f043 0320 	orr.w	r3, r3, #32
 8003498:	6093      	str	r3, [r2, #8]
  }

  return status;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40002800 	.word	0x40002800

080034a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80034ba:	e005      	b.n	80034c8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80034c2:	7afb      	ldrb	r3, [r7, #11]
 80034c4:	3b0a      	subs	r3, #10
 80034c6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80034c8:	7afb      	ldrb	r3, [r7, #11]
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	d8f6      	bhi.n	80034bc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	4313      	orrs	r3, r2
 80034da:	b2db      	uxtb	r3, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	b2da      	uxtb	r2, r3
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	4413      	add	r3, r2
 800350e:	b2db      	uxtb	r3, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e040      	b.n	80035b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd fc9e 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	@ 0x24
 8003548:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 ff3a 	bl	80043dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fc7f 	bl	8003e6c <UART_SetConfig>
 800356e:	4603      	mov	r3, r0
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e01b      	b.n	80035b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 ffb9 	bl	8004520 <UART_CheckIdleState>
 80035ae:	4603      	mov	r3, r0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	@ 0x28
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d177      	bne.n	80036c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Transmit+0x24>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e070      	b.n	80036c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2221      	movs	r2, #33	@ 0x21
 80035ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ee:	f7fd fdbf 	bl	8001170 <HAL_GetTick>
 80035f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360c:	d108      	bne.n	8003620 <HAL_UART_Transmit+0x68>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	e003      	b.n	8003628 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003628:	e02f      	b.n	800368a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2200      	movs	r2, #0
 8003632:	2180      	movs	r1, #128	@ 0x80
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f001 f81b 	bl	8004670 <UART_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e03b      	b.n	80036c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	881a      	ldrh	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800365c:	b292      	uxth	r2, r2
 800365e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	3302      	adds	r3, #2
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e007      	b.n	8003678 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3301      	adds	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1c9      	bne.n	800362a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2200      	movs	r2, #0
 800369e:	2140      	movs	r1, #64	@ 0x40
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 ffe5 	bl	8004670 <UART_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e005      	b.n	80036c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
  }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b08b      	sub	sp, #44	@ 0x2c
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d147      	bne.n	8003772 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_UART_Transmit_IT+0x22>
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e040      	b.n	8003774 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2221      	movs	r2, #33	@ 0x21
 800371a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003724:	d107      	bne.n	8003736 <HAL_UART_Transmit_IT+0x6a>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a13      	ldr	r2, [pc, #76]	@ (8003780 <HAL_UART_Transmit_IT+0xb4>)
 8003732:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003734:	e002      	b.n	800373c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a12      	ldr	r2, [pc, #72]	@ (8003784 <HAL_UART_Transmit_IT+0xb8>)
 800373a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	613b      	str	r3, [r7, #16]
   return(result);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	69f9      	ldr	r1, [r7, #28]
 8003760:	6a3a      	ldr	r2, [r7, #32]
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	61bb      	str	r3, [r7, #24]
   return(result);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e6      	bne.n	800373c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	372c      	adds	r7, #44	@ 0x2c
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	08004a83 	.word	0x08004a83
 8003784:	080049cd 	.word	0x080049cd

08003788 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	@ 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800379c:	2b20      	cmp	r3, #32
 800379e:	d137      	bne.n	8003810 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Receive_IT+0x24>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e030      	b.n	8003812 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a18      	ldr	r2, [pc, #96]	@ (800381c <HAL_UART_Receive_IT+0x94>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d01f      	beq.n	8003800 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	613b      	str	r3, [r7, #16]
   return(result);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	623b      	str	r3, [r7, #32]
 80037ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	69f9      	ldr	r1, [r7, #28]
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e6      	bne.n	80037ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	461a      	mov	r2, r3
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 ffa0 	bl	800474c <UART_Start_Receive_IT>
 800380c:	4603      	mov	r3, r0
 800380e:	e000      	b.n	8003812 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3728      	adds	r7, #40	@ 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40008000 	.word	0x40008000

08003820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b0ba      	sub	sp, #232	@ 0xe8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003846:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800384a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800384e:	4013      	ands	r3, r2
 8003850:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d115      	bne.n	8003888 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800385c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00f      	beq.n	8003888 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 82ca 	beq.w	8003e12 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
      }
      return;
 8003886:	e2c4      	b.n	8003e12 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8117 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800389e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80038a2:	4b85      	ldr	r3, [pc, #532]	@ (8003ab8 <HAL_UART_IRQHandler+0x298>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 810a 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d011      	beq.n	80038dc <HAL_UART_IRQHandler+0xbc>
 80038b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2201      	movs	r2, #1
 80038ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d011      	beq.n	800390c <HAL_UART_IRQHandler+0xec>
 80038e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2202      	movs	r2, #2
 80038fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800390c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d011      	beq.n	800393c <HAL_UART_IRQHandler+0x11c>
 8003918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2204      	movs	r2, #4
 800392a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003932:	f043 0202 	orr.w	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800393c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d017      	beq.n	8003978 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003958:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2208      	movs	r2, #8
 8003966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800396e:	f043 0208 	orr.w	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800397c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003980:	2b00      	cmp	r3, #0
 8003982:	d012      	beq.n	80039aa <HAL_UART_IRQHandler+0x18a>
 8003984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003988:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00c      	beq.n	80039aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8230 	beq.w	8003e16 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f2:	2b40      	cmp	r3, #64	@ 0x40
 80039f4:	d005      	beq.n	8003a02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d04f      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 ff68 	bl	80048d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a12:	2b40      	cmp	r3, #64	@ 0x40
 8003a14:	d141      	bne.n	8003a9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1d9      	bne.n	8003a16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d013      	beq.n	8003a92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6e:	4a13      	ldr	r2, [pc, #76]	@ (8003abc <HAL_UART_IRQHandler+0x29c>)
 8003a70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd fcd5 	bl	8001426 <HAL_DMA_Abort_IT>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d017      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a90:	e00f      	b.n	8003ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9d4 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a98:	e00b      	b.n	8003ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f9d0 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9cc 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003ab0:	e1b1      	b.n	8003e16 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab2:	bf00      	nop
    return;
 8003ab4:	e1af      	b.n	8003e16 <HAL_UART_IRQHandler+0x5f6>
 8003ab6:	bf00      	nop
 8003ab8:	04000120 	.word	0x04000120
 8003abc:	080049a1 	.word	0x080049a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	f040 816a 	bne.w	8003d9e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8163 	beq.w	8003d9e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 815c 	beq.w	8003d9e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2210      	movs	r2, #16
 8003aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af8:	2b40      	cmp	r3, #64	@ 0x40
 8003afa:	f040 80d4 	bne.w	8003ca6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80ad 	beq.w	8003c6e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	f080 80a5 	bcs.w	8003c6e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 8086 	bne.w	8003c4c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1da      	bne.n	8003b40 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e1      	bne.n	8003b8a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3308      	adds	r3, #8
 8003be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bf0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e3      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c1c:	f023 0310 	bic.w	r3, r3, #16
 8003c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e4      	bne.n	8003c0c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd fbaf 	bl	80013aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8f4 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003c6c:	e0d5      	b.n	8003e1a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	f040 80ce 	bne.w	8003e1a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	f040 80c5 	bne.w	8003e1a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8d8 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
      return;
 8003ca4:	e0b9      	b.n	8003e1a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80ab 	beq.w	8003e1e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a6 	beq.w	8003e1e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e4      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	623b      	str	r3, [r7, #32]
   return(result);
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3308      	adds	r3, #8
 8003d28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e3      	bne.n	8003d08 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f023 0310 	bic.w	r3, r3, #16
 8003d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	69b9      	ldr	r1, [r7, #24]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	617b      	str	r3, [r7, #20]
   return(result);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e4      	bne.n	8003d54 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f85c 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d9c:	e03f      	b.n	8003e1e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00e      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x5a8>
 8003daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003dbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f001 f8a5 	bl	8004f10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dc6:	e02d      	b.n	8003e24 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00e      	beq.n	8003df2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01c      	beq.n	8003e22 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
    }
    return;
 8003df0:	e017      	b.n	8003e22 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d012      	beq.n	8003e24 <HAL_UART_IRQHandler+0x604>
 8003dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00c      	beq.n	8003e24 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fe99 	bl	8004b42 <UART_EndTransmit_IT>
    return;
 8003e10:	e008      	b.n	8003e24 <HAL_UART_IRQHandler+0x604>
      return;
 8003e12:	bf00      	nop
 8003e14:	e006      	b.n	8003e24 <HAL_UART_IRQHandler+0x604>
    return;
 8003e16:	bf00      	nop
 8003e18:	e004      	b.n	8003e24 <HAL_UART_IRQHandler+0x604>
      return;
 8003e1a:	bf00      	nop
 8003e1c:	e002      	b.n	8003e24 <HAL_UART_IRQHandler+0x604>
      return;
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <HAL_UART_IRQHandler+0x604>
    return;
 8003e22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e24:	37e8      	adds	r7, #232	@ 0xe8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop

08003e2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b08a      	sub	sp, #40	@ 0x28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4ba4      	ldr	r3, [pc, #656]	@ (800412c <UART_SetConfig+0x2c0>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a99      	ldr	r2, [pc, #612]	@ (8004130 <UART_SetConfig+0x2c4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a90      	ldr	r2, [pc, #576]	@ (8004134 <UART_SetConfig+0x2c8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d126      	bne.n	8003f44 <UART_SetConfig+0xd8>
 8003ef6:	4b90      	ldr	r3, [pc, #576]	@ (8004138 <UART_SetConfig+0x2cc>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d81b      	bhi.n	8003f3c <UART_SetConfig+0xd0>
 8003f04:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <UART_SetConfig+0xa0>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f1d 	.word	0x08003f1d
 8003f10:	08003f2d 	.word	0x08003f2d
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f35 	.word	0x08003f35
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f22:	e116      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003f24:	2302      	movs	r3, #2
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2a:	e112      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f32:	e10e      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003f34:	2308      	movs	r3, #8
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3a:	e10a      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f42:	e106      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a7c      	ldr	r2, [pc, #496]	@ (800413c <UART_SetConfig+0x2d0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d138      	bne.n	8003fc0 <UART_SetConfig+0x154>
 8003f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004138 <UART_SetConfig+0x2cc>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	d82d      	bhi.n	8003fb8 <UART_SetConfig+0x14c>
 8003f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f64 <UART_SetConfig+0xf8>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f99 	.word	0x08003f99
 8003f68:	08003fb9 	.word	0x08003fb9
 8003f6c:	08003fb9 	.word	0x08003fb9
 8003f70:	08003fb9 	.word	0x08003fb9
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003fb9 	.word	0x08003fb9
 8003f7c:	08003fb9 	.word	0x08003fb9
 8003f80:	08003fb9 	.word	0x08003fb9
 8003f84:	08003fa1 	.word	0x08003fa1
 8003f88:	08003fb9 	.word	0x08003fb9
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	08003fb1 	.word	0x08003fb1
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9e:	e0d8      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	e0d4      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fae:	e0d0      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb6:	e0cc      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fbe:	e0c8      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8004140 <UART_SetConfig+0x2d4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d125      	bne.n	8004016 <UART_SetConfig+0x1aa>
 8003fca:	4b5b      	ldr	r3, [pc, #364]	@ (8004138 <UART_SetConfig+0x2cc>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003fd4:	2b30      	cmp	r3, #48	@ 0x30
 8003fd6:	d016      	beq.n	8004006 <UART_SetConfig+0x19a>
 8003fd8:	2b30      	cmp	r3, #48	@ 0x30
 8003fda:	d818      	bhi.n	800400e <UART_SetConfig+0x1a2>
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d00a      	beq.n	8003ff6 <UART_SetConfig+0x18a>
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d814      	bhi.n	800400e <UART_SetConfig+0x1a2>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <UART_SetConfig+0x182>
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d008      	beq.n	8003ffe <UART_SetConfig+0x192>
 8003fec:	e00f      	b.n	800400e <UART_SetConfig+0x1a2>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff4:	e0ad      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffc:	e0a9      	b.n	8004152 <UART_SetConfig+0x2e6>
 8003ffe:	2304      	movs	r3, #4
 8004000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004004:	e0a5      	b.n	8004152 <UART_SetConfig+0x2e6>
 8004006:	2308      	movs	r3, #8
 8004008:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400c:	e0a1      	b.n	8004152 <UART_SetConfig+0x2e6>
 800400e:	2310      	movs	r3, #16
 8004010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004014:	e09d      	b.n	8004152 <UART_SetConfig+0x2e6>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a4a      	ldr	r2, [pc, #296]	@ (8004144 <UART_SetConfig+0x2d8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d125      	bne.n	800406c <UART_SetConfig+0x200>
 8004020:	4b45      	ldr	r3, [pc, #276]	@ (8004138 <UART_SetConfig+0x2cc>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004026:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800402a:	2bc0      	cmp	r3, #192	@ 0xc0
 800402c:	d016      	beq.n	800405c <UART_SetConfig+0x1f0>
 800402e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004030:	d818      	bhi.n	8004064 <UART_SetConfig+0x1f8>
 8004032:	2b80      	cmp	r3, #128	@ 0x80
 8004034:	d00a      	beq.n	800404c <UART_SetConfig+0x1e0>
 8004036:	2b80      	cmp	r3, #128	@ 0x80
 8004038:	d814      	bhi.n	8004064 <UART_SetConfig+0x1f8>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <UART_SetConfig+0x1d8>
 800403e:	2b40      	cmp	r3, #64	@ 0x40
 8004040:	d008      	beq.n	8004054 <UART_SetConfig+0x1e8>
 8004042:	e00f      	b.n	8004064 <UART_SetConfig+0x1f8>
 8004044:	2300      	movs	r3, #0
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404a:	e082      	b.n	8004152 <UART_SetConfig+0x2e6>
 800404c:	2302      	movs	r3, #2
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004052:	e07e      	b.n	8004152 <UART_SetConfig+0x2e6>
 8004054:	2304      	movs	r3, #4
 8004056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405a:	e07a      	b.n	8004152 <UART_SetConfig+0x2e6>
 800405c:	2308      	movs	r3, #8
 800405e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004062:	e076      	b.n	8004152 <UART_SetConfig+0x2e6>
 8004064:	2310      	movs	r3, #16
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406a:	e072      	b.n	8004152 <UART_SetConfig+0x2e6>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a35      	ldr	r2, [pc, #212]	@ (8004148 <UART_SetConfig+0x2dc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d12a      	bne.n	80040cc <UART_SetConfig+0x260>
 8004076:	4b30      	ldr	r3, [pc, #192]	@ (8004138 <UART_SetConfig+0x2cc>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004084:	d01a      	beq.n	80040bc <UART_SetConfig+0x250>
 8004086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800408a:	d81b      	bhi.n	80040c4 <UART_SetConfig+0x258>
 800408c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004090:	d00c      	beq.n	80040ac <UART_SetConfig+0x240>
 8004092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004096:	d815      	bhi.n	80040c4 <UART_SetConfig+0x258>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <UART_SetConfig+0x238>
 800409c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a0:	d008      	beq.n	80040b4 <UART_SetConfig+0x248>
 80040a2:	e00f      	b.n	80040c4 <UART_SetConfig+0x258>
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040aa:	e052      	b.n	8004152 <UART_SetConfig+0x2e6>
 80040ac:	2302      	movs	r3, #2
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b2:	e04e      	b.n	8004152 <UART_SetConfig+0x2e6>
 80040b4:	2304      	movs	r3, #4
 80040b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ba:	e04a      	b.n	8004152 <UART_SetConfig+0x2e6>
 80040bc:	2308      	movs	r3, #8
 80040be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c2:	e046      	b.n	8004152 <UART_SetConfig+0x2e6>
 80040c4:	2310      	movs	r3, #16
 80040c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ca:	e042      	b.n	8004152 <UART_SetConfig+0x2e6>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a17      	ldr	r2, [pc, #92]	@ (8004130 <UART_SetConfig+0x2c4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d13a      	bne.n	800414c <UART_SetConfig+0x2e0>
 80040d6:	4b18      	ldr	r3, [pc, #96]	@ (8004138 <UART_SetConfig+0x2cc>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040e4:	d01a      	beq.n	800411c <UART_SetConfig+0x2b0>
 80040e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040ea:	d81b      	bhi.n	8004124 <UART_SetConfig+0x2b8>
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f0:	d00c      	beq.n	800410c <UART_SetConfig+0x2a0>
 80040f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f6:	d815      	bhi.n	8004124 <UART_SetConfig+0x2b8>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <UART_SetConfig+0x298>
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004100:	d008      	beq.n	8004114 <UART_SetConfig+0x2a8>
 8004102:	e00f      	b.n	8004124 <UART_SetConfig+0x2b8>
 8004104:	2300      	movs	r3, #0
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410a:	e022      	b.n	8004152 <UART_SetConfig+0x2e6>
 800410c:	2302      	movs	r3, #2
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004112:	e01e      	b.n	8004152 <UART_SetConfig+0x2e6>
 8004114:	2304      	movs	r3, #4
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411a:	e01a      	b.n	8004152 <UART_SetConfig+0x2e6>
 800411c:	2308      	movs	r3, #8
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004122:	e016      	b.n	8004152 <UART_SetConfig+0x2e6>
 8004124:	2310      	movs	r3, #16
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800412a:	e012      	b.n	8004152 <UART_SetConfig+0x2e6>
 800412c:	efff69f3 	.word	0xefff69f3
 8004130:	40008000 	.word	0x40008000
 8004134:	40013800 	.word	0x40013800
 8004138:	40021000 	.word	0x40021000
 800413c:	40004400 	.word	0x40004400
 8004140:	40004800 	.word	0x40004800
 8004144:	40004c00 	.word	0x40004c00
 8004148:	40005000 	.word	0x40005000
 800414c:	2310      	movs	r3, #16
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a9f      	ldr	r2, [pc, #636]	@ (80043d4 <UART_SetConfig+0x568>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d17a      	bne.n	8004252 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800415c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004160:	2b08      	cmp	r3, #8
 8004162:	d824      	bhi.n	80041ae <UART_SetConfig+0x342>
 8004164:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <UART_SetConfig+0x300>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	08004191 	.word	0x08004191
 8004170:	080041af 	.word	0x080041af
 8004174:	08004199 	.word	0x08004199
 8004178:	080041af 	.word	0x080041af
 800417c:	0800419f 	.word	0x0800419f
 8004180:	080041af 	.word	0x080041af
 8004184:	080041af 	.word	0x080041af
 8004188:	080041af 	.word	0x080041af
 800418c:	080041a7 	.word	0x080041a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fe f956 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8004194:	61f8      	str	r0, [r7, #28]
        break;
 8004196:	e010      	b.n	80041ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004198:	4b8f      	ldr	r3, [pc, #572]	@ (80043d8 <UART_SetConfig+0x56c>)
 800419a:	61fb      	str	r3, [r7, #28]
        break;
 800419c:	e00d      	b.n	80041ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419e:	f7fe f8b7 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80041a2:	61f8      	str	r0, [r7, #28]
        break;
 80041a4:	e009      	b.n	80041ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041aa:	61fb      	str	r3, [r7, #28]
        break;
 80041ac:	e005      	b.n	80041ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80fb 	beq.w	80043b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d305      	bcc.n	80041de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d903      	bls.n	80041e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041e4:	e0e8      	b.n	80043b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	2200      	movs	r2, #0
 80041ea:	461c      	mov	r4, r3
 80041ec:	4615      	mov	r5, r2
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	022b      	lsls	r3, r5, #8
 80041f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80041fc:	0222      	lsls	r2, r4, #8
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	6849      	ldr	r1, [r1, #4]
 8004202:	0849      	lsrs	r1, r1, #1
 8004204:	2000      	movs	r0, #0
 8004206:	4688      	mov	r8, r1
 8004208:	4681      	mov	r9, r0
 800420a:	eb12 0a08 	adds.w	sl, r2, r8
 800420e:	eb43 0b09 	adc.w	fp, r3, r9
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004220:	4650      	mov	r0, sl
 8004222:	4659      	mov	r1, fp
 8004224:	f7fc f82c 	bl	8000280 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4613      	mov	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004236:	d308      	bcc.n	800424a <UART_SetConfig+0x3de>
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800423e:	d204      	bcs.n	800424a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	60da      	str	r2, [r3, #12]
 8004248:	e0b6      	b.n	80043b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004250:	e0b2      	b.n	80043b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800425a:	d15e      	bne.n	800431a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800425c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004260:	2b08      	cmp	r3, #8
 8004262:	d828      	bhi.n	80042b6 <UART_SetConfig+0x44a>
 8004264:	a201      	add	r2, pc, #4	@ (adr r2, 800426c <UART_SetConfig+0x400>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	08004291 	.word	0x08004291
 8004270:	08004299 	.word	0x08004299
 8004274:	080042a1 	.word	0x080042a1
 8004278:	080042b7 	.word	0x080042b7
 800427c:	080042a7 	.word	0x080042a7
 8004280:	080042b7 	.word	0x080042b7
 8004284:	080042b7 	.word	0x080042b7
 8004288:	080042b7 	.word	0x080042b7
 800428c:	080042af 	.word	0x080042af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004290:	f7fe f8d6 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8004294:	61f8      	str	r0, [r7, #28]
        break;
 8004296:	e014      	b.n	80042c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004298:	f7fe f8e8 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 800429c:	61f8      	str	r0, [r7, #28]
        break;
 800429e:	e010      	b.n	80042c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a0:	4b4d      	ldr	r3, [pc, #308]	@ (80043d8 <UART_SetConfig+0x56c>)
 80042a2:	61fb      	str	r3, [r7, #28]
        break;
 80042a4:	e00d      	b.n	80042c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a6:	f7fe f833 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80042aa:	61f8      	str	r0, [r7, #28]
        break;
 80042ac:	e009      	b.n	80042c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042b2:	61fb      	str	r3, [r7, #28]
        break;
 80042b4:	e005      	b.n	80042c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d077      	beq.n	80043b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005a      	lsls	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	441a      	add	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d916      	bls.n	8004312 <UART_SetConfig+0x4a6>
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ea:	d212      	bcs.n	8004312 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f023 030f 	bic.w	r3, r3, #15
 80042f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	b29a      	uxth	r2, r3
 8004302:	8afb      	ldrh	r3, [r7, #22]
 8004304:	4313      	orrs	r3, r2
 8004306:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	8afa      	ldrh	r2, [r7, #22]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	e052      	b.n	80043b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004318:	e04e      	b.n	80043b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800431a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800431e:	2b08      	cmp	r3, #8
 8004320:	d827      	bhi.n	8004372 <UART_SetConfig+0x506>
 8004322:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <UART_SetConfig+0x4bc>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800434d 	.word	0x0800434d
 800432c:	08004355 	.word	0x08004355
 8004330:	0800435d 	.word	0x0800435d
 8004334:	08004373 	.word	0x08004373
 8004338:	08004363 	.word	0x08004363
 800433c:	08004373 	.word	0x08004373
 8004340:	08004373 	.word	0x08004373
 8004344:	08004373 	.word	0x08004373
 8004348:	0800436b 	.word	0x0800436b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434c:	f7fe f878 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8004350:	61f8      	str	r0, [r7, #28]
        break;
 8004352:	e014      	b.n	800437e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7fe f88a 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8004358:	61f8      	str	r0, [r7, #28]
        break;
 800435a:	e010      	b.n	800437e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800435c:	4b1e      	ldr	r3, [pc, #120]	@ (80043d8 <UART_SetConfig+0x56c>)
 800435e:	61fb      	str	r3, [r7, #28]
        break;
 8004360:	e00d      	b.n	800437e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004362:	f7fd ffd5 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8004366:	61f8      	str	r0, [r7, #28]
        break;
 8004368:	e009      	b.n	800437e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800436e:	61fb      	str	r3, [r7, #28]
        break;
 8004370:	e005      	b.n	800437e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800437c:	bf00      	nop
    }

    if (pclk != 0U)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d019      	beq.n	80043b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	085a      	lsrs	r2, r3, #1
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	441a      	add	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b0f      	cmp	r3, #15
 800439c:	d909      	bls.n	80043b2 <UART_SetConfig+0x546>
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a4:	d205      	bcs.n	80043b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	e002      	b.n	80043b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80043c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3728      	adds	r7, #40	@ 0x28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d2:	bf00      	nop
 80043d4:	40008000 	.word	0x40008000
 80043d8:	00f42400 	.word	0x00f42400

080043dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01a      	beq.n	80044f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044da:	d10a      	bne.n	80044f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]
  }
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b098      	sub	sp, #96	@ 0x60
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004530:	f7fc fe1e 	bl	8001170 <HAL_GetTick>
 8004534:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b08      	cmp	r3, #8
 8004542:	d12e      	bne.n	80045a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004544:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454c:	2200      	movs	r2, #0
 800454e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f88c 	bl	8004670 <UART_WaitOnFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d021      	beq.n	80045a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800456c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004572:	653b      	str	r3, [r7, #80]	@ 0x50
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800457c:	647b      	str	r3, [r7, #68]	@ 0x44
 800457e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800458a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e6      	bne.n	800455e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e062      	b.n	8004668 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d149      	bne.n	8004644 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b8:	2200      	movs	r2, #0
 80045ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f856 	bl	8004670 <UART_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d03c      	beq.n	8004644 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	623b      	str	r3, [r7, #32]
   return(result);
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e6      	bne.n	80045ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3308      	adds	r3, #8
 8004602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	60fb      	str	r3, [r7, #12]
   return(result);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3308      	adds	r3, #8
 800461a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800461c:	61fa      	str	r2, [r7, #28]
 800461e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	69b9      	ldr	r1, [r7, #24]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	617b      	str	r3, [r7, #20]
   return(result);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e011      	b.n	8004668 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3758      	adds	r7, #88	@ 0x58
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004680:	e04f      	b.n	8004722 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004688:	d04b      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468a:	f7fc fd71 	bl	8001170 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	429a      	cmp	r2, r3
 8004698:	d302      	bcc.n	80046a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e04e      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d037      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b80      	cmp	r3, #128	@ 0x80
 80046b6:	d034      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b40      	cmp	r3, #64	@ 0x40
 80046bc:	d031      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d110      	bne.n	80046ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2208      	movs	r2, #8
 80046d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f8ff 	bl	80048d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2208      	movs	r2, #8
 80046de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e029      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046fc:	d111      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f8e5 	bl	80048d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e00f      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4013      	ands	r3, r2
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	429a      	cmp	r2, r3
 8004730:	bf0c      	ite	eq
 8004732:	2301      	moveq	r3, #1
 8004734:	2300      	movne	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	429a      	cmp	r2, r3
 800473e:	d0a0      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800474c:	b480      	push	{r7}
 800474e:	b097      	sub	sp, #92	@ 0x5c
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477e:	d10e      	bne.n	800479e <UART_Start_Receive_IT+0x52>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <UART_Start_Receive_IT+0x48>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800478e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004792:	e02d      	b.n	80047f0 <UART_Start_Receive_IT+0xa4>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	22ff      	movs	r2, #255	@ 0xff
 8004798:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800479c:	e028      	b.n	80047f0 <UART_Start_Receive_IT+0xa4>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10d      	bne.n	80047c2 <UART_Start_Receive_IT+0x76>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d104      	bne.n	80047b8 <UART_Start_Receive_IT+0x6c>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	22ff      	movs	r2, #255	@ 0xff
 80047b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047b6:	e01b      	b.n	80047f0 <UART_Start_Receive_IT+0xa4>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	227f      	movs	r2, #127	@ 0x7f
 80047bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047c0:	e016      	b.n	80047f0 <UART_Start_Receive_IT+0xa4>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047ca:	d10d      	bne.n	80047e8 <UART_Start_Receive_IT+0x9c>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <UART_Start_Receive_IT+0x92>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	227f      	movs	r2, #127	@ 0x7f
 80047d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047dc:	e008      	b.n	80047f0 <UART_Start_Receive_IT+0xa4>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	223f      	movs	r2, #63	@ 0x3f
 80047e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047e6:	e003      	b.n	80047f0 <UART_Start_Receive_IT+0xa4>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2222      	movs	r2, #34	@ 0x22
 80047fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	657b      	str	r3, [r7, #84]	@ 0x54
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3308      	adds	r3, #8
 800481e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004820:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004822:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004826:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800482e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800483c:	d107      	bne.n	800484e <UART_Start_Receive_IT+0x102>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d103      	bne.n	800484e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4a21      	ldr	r2, [pc, #132]	@ (80048d0 <UART_Start_Receive_IT+0x184>)
 800484a:	669a      	str	r2, [r3, #104]	@ 0x68
 800484c:	e002      	b.n	8004854 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4a20      	ldr	r2, [pc, #128]	@ (80048d4 <UART_Start_Receive_IT+0x188>)
 8004852:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d019      	beq.n	8004890 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487a:	637b      	str	r3, [r7, #52]	@ 0x34
 800487c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004880:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e6      	bne.n	800485c <UART_Start_Receive_IT+0x110>
 800488e:	e018      	b.n	80048c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f043 0320 	orr.w	r3, r3, #32
 80048a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ae:	623b      	str	r3, [r7, #32]
 80048b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	69f9      	ldr	r1, [r7, #28]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e6      	bne.n	8004890 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	375c      	adds	r7, #92	@ 0x5c
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	08004d55 	.word	0x08004d55
 80048d4:	08004b99 	.word	0x08004b99

080048d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b095      	sub	sp, #84	@ 0x54
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004900:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800490c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	61fb      	str	r3, [r7, #28]
   return(result);
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494a:	2b01      	cmp	r3, #1
 800494c:	d118      	bne.n	8004980 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	60bb      	str	r3, [r7, #8]
   return(result);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	647b      	str	r3, [r7, #68]	@ 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6979      	ldr	r1, [r7, #20]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	613b      	str	r3, [r7, #16]
   return(result);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e6      	bne.n	800494e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004994:	bf00      	nop
 8004996:	3754      	adds	r7, #84	@ 0x54
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff fa3e 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b08f      	sub	sp, #60	@ 0x3c
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049d8:	2b21      	cmp	r3, #33	@ 0x21
 80049da:	d14c      	bne.n	8004a76 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d132      	bne.n	8004a4e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a08:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e6      	bne.n	80049e8 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6979      	ldr	r1, [r7, #20]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	613b      	str	r3, [r7, #16]
   return(result);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e6      	bne.n	8004a1a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004a4c:	e013      	b.n	8004a76 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004a76:	bf00      	nop
 8004a78:	373c      	adds	r7, #60	@ 0x3c
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b091      	sub	sp, #68	@ 0x44
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a8e:	2b21      	cmp	r3, #33	@ 0x21
 8004a90:	d151      	bne.n	8004b36 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d132      	bne.n	8004b04 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	69b9      	ldr	r1, [r7, #24]
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	617b      	str	r3, [r7, #20]
   return(result);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e6      	bne.n	8004ad0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004b02:	e018      	b.n	8004b36 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b16:	b292      	uxth	r2, r2
 8004b18:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1e:	1c9a      	adds	r2, r3, #2
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004b36:	bf00      	nop
 8004b38:	3744      	adds	r7, #68	@ 0x44
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b088      	sub	sp, #32
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6979      	ldr	r1, [r7, #20]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	613b      	str	r3, [r7, #16]
   return(result);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e6      	bne.n	8004b4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff f94f 	bl	8003e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8e:	bf00      	nop
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b09c      	sub	sp, #112	@ 0x70
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ba6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb0:	2b22      	cmp	r3, #34	@ 0x22
 8004bb2:	f040 80be 	bne.w	8004d32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004bbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004bc4:	b2d9      	uxtb	r1, r3
 8004bc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 80a3 	bne.w	8004d46 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e6      	bne.n	8004c00 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3308      	adds	r3, #8
 8004c50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c52:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e5      	bne.n	8004c32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a34      	ldr	r2, [pc, #208]	@ (8004d50 <UART_RxISR_8BIT+0x1b8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d01f      	beq.n	8004cc4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d018      	beq.n	8004cc4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e6      	bne.n	8004c92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d12e      	bne.n	8004d2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0310 	bic.w	r3, r3, #16
 8004ce6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	69b9      	ldr	r1, [r7, #24]
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e6      	bne.n	8004cd2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d103      	bne.n	8004d1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2210      	movs	r2, #16
 8004d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff f896 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d28:	e00d      	b.n	8004d46 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fb fc72 	bl	8000614 <HAL_UART_RxCpltCallback>
}
 8004d30:	e009      	b.n	8004d46 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	8b1b      	ldrh	r3, [r3, #24]
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0208 	orr.w	r2, r2, #8
 8004d42:	b292      	uxth	r2, r2
 8004d44:	831a      	strh	r2, [r3, #24]
}
 8004d46:	bf00      	nop
 8004d48:	3770      	adds	r7, #112	@ 0x70
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40008000 	.word	0x40008000

08004d54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b09c      	sub	sp, #112	@ 0x70
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d6c:	2b22      	cmp	r3, #34	@ 0x22
 8004d6e:	f040 80be 	bne.w	8004eee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004d78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d80:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004d86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d96:	1c9a      	adds	r2, r3, #2
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 80a3 	bne.w	8004f02 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ddc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004de0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e6      	bne.n	8004dbc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3308      	adds	r3, #8
 8004df4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a34      	ldr	r2, [pc, #208]	@ (8004f0c <UART_RxISR_16BIT+0x1b8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d01f      	beq.n	8004e80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e6      	bne.n	8004e4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d12e      	bne.n	8004ee6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f023 0310 	bic.w	r3, r3, #16
 8004ea2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d103      	bne.n	8004ed6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2210      	movs	r2, #16
 8004ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fe ffb8 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ee4:	e00d      	b.n	8004f02 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fb fb94 	bl	8000614 <HAL_UART_RxCpltCallback>
}
 8004eec:	e009      	b.n	8004f02 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	8b1b      	ldrh	r3, [r3, #24]
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0208 	orr.w	r2, r2, #8
 8004efe:	b292      	uxth	r2, r2
 8004f00:	831a      	strh	r2, [r3, #24]
}
 8004f02:	bf00      	nop
 8004f04:	3770      	adds	r7, #112	@ 0x70
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40008000 	.word	0x40008000

08004f10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f36:	2b84      	cmp	r3, #132	@ 0x84
 8004f38:	d005      	beq.n	8004f46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	3303      	adds	r3, #3
 8004f44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f46:	68fb      	ldr	r3, [r7, #12]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f58:	f001 f818 	bl	8005f8c <vTaskStartScheduler>
  
  return osOK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f64:	b089      	sub	sp, #36	@ 0x24
 8004f66:	af04      	add	r7, sp, #16
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d020      	beq.n	8004fb6 <osThreadCreate+0x54>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01c      	beq.n	8004fb6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685c      	ldr	r4, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691e      	ldr	r6, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff ffc8 	bl	8004f24 <makeFreeRtosPriority>
 8004f94:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f9e:	9202      	str	r2, [sp, #8]
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	9100      	str	r1, [sp, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4620      	mov	r0, r4
 8004fac:	f000 fe20 	bl	8005bf0 <xTaskCreateStatic>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e01c      	b.n	8004ff0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685c      	ldr	r4, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fc2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ffaa 	bl	8004f24 <makeFreeRtosPriority>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	f107 030c 	add.w	r3, r7, #12
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	9200      	str	r2, [sp, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	4632      	mov	r2, r6
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 fe65 	bl	8005cb0 <xTaskCreate>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ffa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <osDelay+0x16>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	e000      	b.n	8005012 <osDelay+0x18>
 8005010:	2301      	movs	r3, #1
 8005012:	4618      	mov	r0, r3
 8005014:	f000 ff84 	bl	8005f20 <vTaskDelay>
  
  return osOK;
 8005018:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f103 0208 	add.w	r2, r3, #8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f04f 32ff 	mov.w	r2, #4294967295
 800503a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f103 0208 	add.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f103 0208 	add.w	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d103      	bne.n	80050e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	e00c      	b.n	80050fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3308      	adds	r3, #8
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e002      	b.n	80050f2 <vListInsert+0x2e>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d2f6      	bcs.n	80050ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	601a      	str	r2, [r3, #0]
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6892      	ldr	r2, [r2, #8]
 800514c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6852      	ldr	r2, [r2, #4]
 8005156:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	429a      	cmp	r2, r3
 8005160:	d103      	bne.n	800516a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	1e5a      	subs	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051b8:	f002 f99e 	bl	80074f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c4:	68f9      	ldr	r1, [r7, #12]
 80051c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	441a      	add	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e8:	3b01      	subs	r3, #1
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	441a      	add	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	22ff      	movs	r2, #255	@ 0xff
 80051fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	22ff      	movs	r2, #255	@ 0xff
 8005204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d114      	bne.n	8005238 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01a      	beq.n	800524c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3310      	adds	r3, #16
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f942 	bl	80064a4 <xTaskRemoveFromEventList>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d012      	beq.n	800524c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005226:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <xQueueGenericReset+0xd0>)
 8005228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	e009      	b.n	800524c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3310      	adds	r3, #16
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fef0 	bl	8005022 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3324      	adds	r3, #36	@ 0x24
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff feeb 	bl	8005022 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800524c:	f002 f986 	bl	800755c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005250:	2301      	movs	r3, #1
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	e000ed04 	.word	0xe000ed04

08005260 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08e      	sub	sp, #56	@ 0x38
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10b      	bne.n	800528c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	e7fd      	b.n	80052a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <xQueueGenericCreateStatic+0x56>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <xQueueGenericCreateStatic+0x5a>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <xQueueGenericCreateStatic+0x5c>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	623b      	str	r3, [r7, #32]
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <xQueueGenericCreateStatic+0x84>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <xQueueGenericCreateStatic+0x88>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <xQueueGenericCreateStatic+0x8a>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	61fb      	str	r3, [r7, #28]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005306:	2348      	movs	r3, #72	@ 0x48
 8005308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b48      	cmp	r3, #72	@ 0x48
 800530e:	d00b      	beq.n	8005328 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	61bb      	str	r3, [r7, #24]
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005328:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800532e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800533c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f840 	bl	80053d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005352:	4618      	mov	r0, r3
 8005354:	3730      	adds	r7, #48	@ 0x30
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800535a:	b580      	push	{r7, lr}
 800535c:	b08a      	sub	sp, #40	@ 0x28
 800535e:	af02      	add	r7, sp, #8
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	4613      	mov	r3, r2
 8005366:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <xQueueGenericCreate+0x2c>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	613b      	str	r3, [r7, #16]
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	fb02 f303 	mul.w	r3, r2, r3
 800538e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3348      	adds	r3, #72	@ 0x48
 8005394:	4618      	mov	r0, r3
 8005396:	f002 f9d1 	bl	800773c <pvPortMalloc>
 800539a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d011      	beq.n	80053c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	3348      	adds	r3, #72	@ 0x48
 80053aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053b4:	79fa      	ldrb	r2, [r7, #7]
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f805 	bl	80053d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053c6:	69bb      	ldr	r3, [r7, #24]
	}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e002      	b.n	80053f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053fe:	2101      	movs	r1, #1
 8005400:	69b8      	ldr	r0, [r7, #24]
 8005402:	f7ff fec3 	bl	800518c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08e      	sub	sp, #56	@ 0x38
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800541e:	2300      	movs	r3, #0
 8005420:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <xQueueGenericSend+0x34>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d103      	bne.n	8005452 <xQueueGenericSend+0x42>
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <xQueueGenericSend+0x46>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <xQueueGenericSend+0x48>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10b      	bne.n	8005474 <xQueueGenericSend+0x64>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d103      	bne.n	8005482 <xQueueGenericSend+0x72>
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <xQueueGenericSend+0x76>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <xQueueGenericSend+0x78>
 8005486:	2300      	movs	r3, #0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10b      	bne.n	80054a4 <xQueueGenericSend+0x94>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	623b      	str	r3, [r7, #32]
}
 800549e:	bf00      	nop
 80054a0:	bf00      	nop
 80054a2:	e7fd      	b.n	80054a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054a4:	f001 f9be 	bl	8006824 <xTaskGetSchedulerState>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d102      	bne.n	80054b4 <xQueueGenericSend+0xa4>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <xQueueGenericSend+0xa8>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <xQueueGenericSend+0xaa>
 80054b8:	2300      	movs	r3, #0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10b      	bne.n	80054d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	61fb      	str	r3, [r7, #28]
}
 80054d0:	bf00      	nop
 80054d2:	bf00      	nop
 80054d4:	e7fd      	b.n	80054d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054d6:	f002 f80f 	bl	80074f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <xQueueGenericSend+0xdc>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d129      	bne.n	8005540 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054f2:	f000 fa0f 	bl	8005914 <prvCopyDataToQueue>
 80054f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005502:	3324      	adds	r3, #36	@ 0x24
 8005504:	4618      	mov	r0, r3
 8005506:	f000 ffcd 	bl	80064a4 <xTaskRemoveFromEventList>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d013      	beq.n	8005538 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005510:	4b3f      	ldr	r3, [pc, #252]	@ (8005610 <xQueueGenericSend+0x200>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	e00a      	b.n	8005538 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005528:	4b39      	ldr	r3, [pc, #228]	@ (8005610 <xQueueGenericSend+0x200>)
 800552a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005538:	f002 f810 	bl	800755c <vPortExitCritical>
				return pdPASS;
 800553c:	2301      	movs	r3, #1
 800553e:	e063      	b.n	8005608 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005546:	f002 f809 	bl	800755c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800554a:	2300      	movs	r3, #0
 800554c:	e05c      	b.n	8005608 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800554e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	4618      	mov	r0, r3
 800555a:	f001 f807 	bl	800656c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800555e:	2301      	movs	r3, #1
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005562:	f001 fffb 	bl	800755c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005566:	f000 fd79 	bl	800605c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800556a:	f001 ffc5 	bl	80074f8 <vPortEnterCritical>
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005574:	b25b      	sxtb	r3, r3
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d103      	bne.n	8005584 <xQueueGenericSend+0x174>
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800558a:	b25b      	sxtb	r3, r3
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d103      	bne.n	800559a <xQueueGenericSend+0x18a>
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800559a:	f001 ffdf 	bl	800755c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800559e:	1d3a      	adds	r2, r7, #4
 80055a0:	f107 0314 	add.w	r3, r7, #20
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fff6 	bl	8006598 <xTaskCheckForTimeOut>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d124      	bne.n	80055fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055b4:	f000 faa6 	bl	8005b04 <prvIsQueueFull>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d018      	beq.n	80055f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	3310      	adds	r3, #16
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 ff1a 	bl	8006400 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ce:	f000 fa31 	bl	8005a34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055d2:	f000 fd51 	bl	8006078 <xTaskResumeAll>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f47f af7c 	bne.w	80054d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80055de:	4b0c      	ldr	r3, [pc, #48]	@ (8005610 <xQueueGenericSend+0x200>)
 80055e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	e772      	b.n	80054d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055f2:	f000 fa1f 	bl	8005a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055f6:	f000 fd3f 	bl	8006078 <xTaskResumeAll>
 80055fa:	e76c      	b.n	80054d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055fe:	f000 fa19 	bl	8005a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005602:	f000 fd39 	bl	8006078 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005606:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005608:	4618      	mov	r0, r3
 800560a:	3738      	adds	r7, #56	@ 0x38
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b090      	sub	sp, #64	@ 0x40
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <xQueueGenericSendFromISR+0x3e>
 800564a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <xQueueGenericSendFromISR+0x42>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <xQueueGenericSendFromISR+0x44>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800566e:	bf00      	nop
 8005670:	bf00      	nop
 8005672:	e7fd      	b.n	8005670 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d103      	bne.n	8005682 <xQueueGenericSendFromISR+0x6e>
 800567a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <xQueueGenericSendFromISR+0x72>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <xQueueGenericSendFromISR+0x74>
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	623b      	str	r3, [r7, #32]
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056a4:	f002 f808 	bl	80076b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056a8:	f3ef 8211 	mrs	r2, BASEPRI
 80056ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	61fa      	str	r2, [r7, #28]
 80056be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <xQueueGenericSendFromISR+0xc2>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d12f      	bne.n	8005736 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80056ec:	f000 f912 	bl	8005914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d112      	bne.n	8005720 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	3324      	adds	r3, #36	@ 0x24
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fecc 	bl	80064a4 <xTaskRemoveFromEventList>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e007      	b.n	8005730 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005720:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005724:	3301      	adds	r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	b25a      	sxtb	r2, r3
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005730:	2301      	movs	r3, #1
 8005732:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005734:	e001      	b.n	800573a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005736:	2300      	movs	r3, #0
 8005738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800573a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800573c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005744:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005748:	4618      	mov	r0, r3
 800574a:	3740      	adds	r7, #64	@ 0x40
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08c      	sub	sp, #48	@ 0x30
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800575c:	2300      	movs	r3, #0
 800575e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <xQueueReceive+0x32>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	623b      	str	r3, [r7, #32]
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d103      	bne.n	8005790 <xQueueReceive+0x40>
 8005788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <xQueueReceive+0x44>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <xQueueReceive+0x46>
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10b      	bne.n	80057b2 <xQueueReceive+0x62>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	61fb      	str	r3, [r7, #28]
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	e7fd      	b.n	80057ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057b2:	f001 f837 	bl	8006824 <xTaskGetSchedulerState>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <xQueueReceive+0x72>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <xQueueReceive+0x76>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <xQueueReceive+0x78>
 80057c6:	2300      	movs	r3, #0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <xQueueReceive+0x94>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	61bb      	str	r3, [r7, #24]
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057e4:	f001 fe88 	bl	80074f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01f      	beq.n	8005834 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057f8:	f000 f8f6 	bl	80059e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	1e5a      	subs	r2, r3, #1
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00f      	beq.n	800582c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800580c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580e:	3310      	adds	r3, #16
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fe47 	bl	80064a4 <xTaskRemoveFromEventList>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800581c:	4b3c      	ldr	r3, [pc, #240]	@ (8005910 <xQueueReceive+0x1c0>)
 800581e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800582c:	f001 fe96 	bl	800755c <vPortExitCritical>
				return pdPASS;
 8005830:	2301      	movs	r3, #1
 8005832:	e069      	b.n	8005908 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800583a:	f001 fe8f 	bl	800755c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800583e:	2300      	movs	r3, #0
 8005840:	e062      	b.n	8005908 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005848:	f107 0310 	add.w	r3, r7, #16
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fe8d 	bl	800656c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005852:	2301      	movs	r3, #1
 8005854:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005856:	f001 fe81 	bl	800755c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800585a:	f000 fbff 	bl	800605c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800585e:	f001 fe4b 	bl	80074f8 <vPortEnterCritical>
 8005862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005864:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005868:	b25b      	sxtb	r3, r3
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d103      	bne.n	8005878 <xQueueReceive+0x128>
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800587e:	b25b      	sxtb	r3, r3
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d103      	bne.n	800588e <xQueueReceive+0x13e>
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800588e:	f001 fe65 	bl	800755c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005892:	1d3a      	adds	r2, r7, #4
 8005894:	f107 0310 	add.w	r3, r7, #16
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fe7c 	bl	8006598 <xTaskCheckForTimeOut>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d123      	bne.n	80058ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058a8:	f000 f916 	bl	8005ad8 <prvIsQueueEmpty>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d017      	beq.n	80058e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b4:	3324      	adds	r3, #36	@ 0x24
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fda0 	bl	8006400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c2:	f000 f8b7 	bl	8005a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058c6:	f000 fbd7 	bl	8006078 <xTaskResumeAll>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d189      	bne.n	80057e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80058d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005910 <xQueueReceive+0x1c0>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	e780      	b.n	80057e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058e4:	f000 f8a6 	bl	8005a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058e8:	f000 fbc6 	bl	8006078 <xTaskResumeAll>
 80058ec:	e77a      	b.n	80057e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058f0:	f000 f8a0 	bl	8005a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058f4:	f000 fbc0 	bl	8006078 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058fa:	f000 f8ed 	bl	8005ad8 <prvIsQueueEmpty>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	f43f af6f 	beq.w	80057e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005906:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005908:	4618      	mov	r0, r3
 800590a:	3730      	adds	r7, #48	@ 0x30
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	e000ed04 	.word	0xe000ed04

08005914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10d      	bne.n	800594e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d14d      	bne.n	80059d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 ff8e 	bl	8006860 <xTaskPriorityDisinherit>
 8005944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	e043      	b.n	80059d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d119      	bne.n	8005988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6858      	ldr	r0, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595c:	461a      	mov	r2, r3
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	f002 f930 	bl	8007bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	441a      	add	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	d32b      	bcc.n	80059d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	e026      	b.n	80059d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	68d8      	ldr	r0, [r3, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005990:	461a      	mov	r2, r3
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	f002 f916 	bl	8007bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	425b      	negs	r3, r3
 80059a2:	441a      	add	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d207      	bcs.n	80059c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	425b      	negs	r3, r3
 80059be:	441a      	add	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d105      	bne.n	80059d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80059de:	697b      	ldr	r3, [r7, #20]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d018      	beq.n	8005a2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	441a      	add	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d303      	bcc.n	8005a1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68d9      	ldr	r1, [r3, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	461a      	mov	r2, r3
 8005a26:	6838      	ldr	r0, [r7, #0]
 8005a28:	f002 f8cc 	bl	8007bc4 <memcpy>
	}
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a3c:	f001 fd5c 	bl	80074f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a48:	e011      	b.n	8005a6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d012      	beq.n	8005a78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3324      	adds	r3, #36	@ 0x24
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fd24 	bl	80064a4 <xTaskRemoveFromEventList>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a62:	f000 fdfd 	bl	8006660 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	dce9      	bgt.n	8005a4a <prvUnlockQueue+0x16>
 8005a76:	e000      	b.n	8005a7a <prvUnlockQueue+0x46>
					break;
 8005a78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	22ff      	movs	r2, #255	@ 0xff
 8005a7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005a82:	f001 fd6b 	bl	800755c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a86:	f001 fd37 	bl	80074f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a92:	e011      	b.n	8005ab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d012      	beq.n	8005ac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3310      	adds	r3, #16
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fcff 	bl	80064a4 <xTaskRemoveFromEventList>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005aac:	f000 fdd8 	bl	8006660 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dce9      	bgt.n	8005a94 <prvUnlockQueue+0x60>
 8005ac0:	e000      	b.n	8005ac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	22ff      	movs	r2, #255	@ 0xff
 8005ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005acc:	f001 fd46 	bl	800755c <vPortExitCritical>
}
 8005ad0:	bf00      	nop
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ae0:	f001 fd0a 	bl	80074f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005aec:	2301      	movs	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e001      	b.n	8005af6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005af6:	f001 fd31 	bl	800755c <vPortExitCritical>

	return xReturn;
 8005afa:	68fb      	ldr	r3, [r7, #12]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b0c:	f001 fcf4 	bl	80074f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d102      	bne.n	8005b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e001      	b.n	8005b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b26:	f001 fd19 	bl	800755c <vPortExitCritical>

	return xReturn;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e014      	b.n	8005b6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b44:	4a0f      	ldr	r2, [pc, #60]	@ (8005b84 <vQueueAddToRegistry+0x50>)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b50:	490c      	ldr	r1, [pc, #48]	@ (8005b84 <vQueueAddToRegistry+0x50>)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b84 <vQueueAddToRegistry+0x50>)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4413      	add	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b66:	e006      	b.n	8005b76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b07      	cmp	r3, #7
 8005b72:	d9e7      	bls.n	8005b44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000627c 	.word	0x2000627c

08005b88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b98:	f001 fcae 	bl	80074f8 <vPortEnterCritical>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ba2:	b25b      	sxtb	r3, r3
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d103      	bne.n	8005bb2 <vQueueWaitForMessageRestricted+0x2a>
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bb8:	b25b      	sxtb	r3, r3
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d103      	bne.n	8005bc8 <vQueueWaitForMessageRestricted+0x40>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bc8:	f001 fcc8 	bl	800755c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3324      	adds	r3, #36	@ 0x24
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fc35 	bl	800644c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff ff26 	bl	8005a34 <prvUnlockQueue>
	}
 8005be8:	bf00      	nop
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08e      	sub	sp, #56	@ 0x38
 8005bf4:	af04      	add	r7, sp, #16
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10b      	bne.n	8005c1c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	623b      	str	r3, [r7, #32]
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	61fb      	str	r3, [r7, #28]
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c3a:	2354      	movs	r3, #84	@ 0x54
 8005c3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b54      	cmp	r3, #84	@ 0x54
 8005c42:	d00b      	beq.n	8005c5c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	61bb      	str	r3, [r7, #24]
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01e      	beq.n	8005ca2 <xTaskCreateStatic+0xb2>
 8005c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01b      	beq.n	8005ca2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	9303      	str	r3, [sp, #12]
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	9302      	str	r3, [sp, #8]
 8005c84:	f107 0314 	add.w	r3, r7, #20
 8005c88:	9301      	str	r3, [sp, #4]
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f850 	bl	8005d3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c9c:	f000 f8d6 	bl	8005e4c <prvAddNewTaskToReadyList>
 8005ca0:	e001      	b.n	8005ca6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ca6:	697b      	ldr	r3, [r7, #20]
	}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3728      	adds	r7, #40	@ 0x28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08c      	sub	sp, #48	@ 0x30
 8005cb4:	af04      	add	r7, sp, #16
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fd39 	bl	800773c <pvPortMalloc>
 8005cca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00e      	beq.n	8005cf0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cd2:	2054      	movs	r0, #84	@ 0x54
 8005cd4:	f001 fd32 	bl	800773c <pvPortMalloc>
 8005cd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ce6:	e005      	b.n	8005cf4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ce8:	6978      	ldr	r0, [r7, #20]
 8005cea:	f001 fdf5 	bl	80078d8 <vPortFree>
 8005cee:	e001      	b.n	8005cf4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d017      	beq.n	8005d2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d02:	88fa      	ldrh	r2, [r7, #6]
 8005d04:	2300      	movs	r3, #0
 8005d06:	9303      	str	r3, [sp, #12]
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	9302      	str	r3, [sp, #8]
 8005d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f80e 	bl	8005d3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d1e:	69f8      	ldr	r0, [r7, #28]
 8005d20:	f000 f894 	bl	8005e4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d24:	2301      	movs	r3, #1
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e002      	b.n	8005d30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d30:	69bb      	ldr	r3, [r7, #24]
	}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b088      	sub	sp, #32
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d52:	3b01      	subs	r3, #1
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	f023 0307 	bic.w	r3, r3, #7
 8005d60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	617b      	str	r3, [r7, #20]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01f      	beq.n	8005dca <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e012      	b.n	8005db6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	7819      	ldrb	r1, [r3, #0]
 8005d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3334      	adds	r3, #52	@ 0x34
 8005da0:	460a      	mov	r2, r1
 8005da2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	3301      	adds	r3, #1
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	2b0f      	cmp	r3, #15
 8005dba:	d9e9      	bls.n	8005d90 <prvInitialiseNewTask+0x56>
 8005dbc:	e000      	b.n	8005dc0 <prvInitialiseNewTask+0x86>
			{
				break;
 8005dbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dc8:	e003      	b.n	8005dd2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	2b06      	cmp	r3, #6
 8005dd6:	d901      	bls.n	8005ddc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dd8:	2306      	movs	r3, #6
 8005dda:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005de0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005de6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	2200      	movs	r2, #0
 8005dec:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	3304      	adds	r3, #4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff f935 	bl	8005062 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfa:	3318      	adds	r3, #24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff f930 	bl	8005062 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0a:	f1c3 0207 	rsb	r2, r3, #7
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	69b8      	ldr	r0, [r7, #24]
 8005e2c:	f001 fa32 	bl	8007294 <pxPortInitialiseStack>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e42:	bf00      	nop
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e54:	f001 fb50 	bl	80074f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e58:	4b2a      	ldr	r3, [pc, #168]	@ (8005f04 <prvAddNewTaskToReadyList+0xb8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	4a29      	ldr	r2, [pc, #164]	@ (8005f04 <prvAddNewTaskToReadyList+0xb8>)
 8005e60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e62:	4b29      	ldr	r3, [pc, #164]	@ (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e6a:	4a27      	ldr	r2, [pc, #156]	@ (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e70:	4b24      	ldr	r3, [pc, #144]	@ (8005f04 <prvAddNewTaskToReadyList+0xb8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d110      	bne.n	8005e9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e78:	f000 fc16 	bl	80066a8 <prvInitialiseTaskLists>
 8005e7c:	e00d      	b.n	8005e9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e7e:	4b23      	ldr	r3, [pc, #140]	@ (8005f0c <prvAddNewTaskToReadyList+0xc0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e86:	4b20      	ldr	r3, [pc, #128]	@ (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d802      	bhi.n	8005e9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e94:	4a1c      	ldr	r2, [pc, #112]	@ (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005f10 <prvAddNewTaskToReadyList+0xc4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f10 <prvAddNewTaskToReadyList+0xc4>)
 8005ea2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	4b19      	ldr	r3, [pc, #100]	@ (8005f14 <prvAddNewTaskToReadyList+0xc8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	4a18      	ldr	r2, [pc, #96]	@ (8005f14 <prvAddNewTaskToReadyList+0xc8>)
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4a15      	ldr	r2, [pc, #84]	@ (8005f18 <prvAddNewTaskToReadyList+0xcc>)
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7ff f8d5 	bl	800507c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ed2:	f001 fb43 	bl	800755c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <prvAddNewTaskToReadyList+0xc0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00e      	beq.n	8005efc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ede:	4b0a      	ldr	r3, [pc, #40]	@ (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d207      	bcs.n	8005efc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005eec:	4b0b      	ldr	r3, [pc, #44]	@ (8005f1c <prvAddNewTaskToReadyList+0xd0>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	200063bc 	.word	0x200063bc
 8005f08:	200062bc 	.word	0x200062bc
 8005f0c:	200063c8 	.word	0x200063c8
 8005f10:	200063d8 	.word	0x200063d8
 8005f14:	200063c4 	.word	0x200063c4
 8005f18:	200062c0 	.word	0x200062c0
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d018      	beq.n	8005f64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f32:	4b14      	ldr	r3, [pc, #80]	@ (8005f84 <vTaskDelay+0x64>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <vTaskDelay+0x32>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	60bb      	str	r3, [r7, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f52:	f000 f883 	bl	800605c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f56:	2100      	movs	r1, #0
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fdf7 	bl	8006b4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f5e:	f000 f88b 	bl	8006078 <xTaskResumeAll>
 8005f62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d107      	bne.n	8005f7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005f6a:	4b07      	ldr	r3, [pc, #28]	@ (8005f88 <vTaskDelay+0x68>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200063e4 	.word	0x200063e4
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	@ 0x28
 8005f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f9a:	463a      	mov	r2, r7
 8005f9c:	1d39      	adds	r1, r7, #4
 8005f9e:	f107 0308 	add.w	r3, r7, #8
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa fb02 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	9202      	str	r2, [sp, #8]
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	460a      	mov	r2, r1
 8005fba:	4922      	ldr	r1, [pc, #136]	@ (8006044 <vTaskStartScheduler+0xb8>)
 8005fbc:	4822      	ldr	r0, [pc, #136]	@ (8006048 <vTaskStartScheduler+0xbc>)
 8005fbe:	f7ff fe17 	bl	8005bf0 <xTaskCreateStatic>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4a21      	ldr	r2, [pc, #132]	@ (800604c <vTaskStartScheduler+0xc0>)
 8005fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fc8:	4b20      	ldr	r3, [pc, #128]	@ (800604c <vTaskStartScheduler+0xc0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e001      	b.n	8005fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d102      	bne.n	8005fe6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005fe0:	f000 fe1a 	bl	8006c18 <xTimerCreateTimerTask>
 8005fe4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d116      	bne.n	800601a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	613b      	str	r3, [r7, #16]
}
 8005ffe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006000:	4b13      	ldr	r3, [pc, #76]	@ (8006050 <vTaskStartScheduler+0xc4>)
 8006002:	f04f 32ff 	mov.w	r2, #4294967295
 8006006:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006008:	4b12      	ldr	r3, [pc, #72]	@ (8006054 <vTaskStartScheduler+0xc8>)
 800600a:	2201      	movs	r2, #1
 800600c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800600e:	4b12      	ldr	r3, [pc, #72]	@ (8006058 <vTaskStartScheduler+0xcc>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006014:	f001 f9cc 	bl	80073b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006018:	e00f      	b.n	800603a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d10b      	bne.n	800603a <vTaskStartScheduler+0xae>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	60fb      	str	r3, [r7, #12]
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	e7fd      	b.n	8006036 <vTaskStartScheduler+0xaa>
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	08008558 	.word	0x08008558
 8006048:	08006679 	.word	0x08006679
 800604c:	200063e0 	.word	0x200063e0
 8006050:	200063dc 	.word	0x200063dc
 8006054:	200063c8 	.word	0x200063c8
 8006058:	200063c0 	.word	0x200063c0

0800605c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006060:	4b04      	ldr	r3, [pc, #16]	@ (8006074 <vTaskSuspendAll+0x18>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	4a03      	ldr	r2, [pc, #12]	@ (8006074 <vTaskSuspendAll+0x18>)
 8006068:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800606a:	bf00      	nop
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	200063e4 	.word	0x200063e4

08006078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006086:	4b42      	ldr	r3, [pc, #264]	@ (8006190 <xTaskResumeAll+0x118>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	603b      	str	r3, [r7, #0]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060a6:	f001 fa27 	bl	80074f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060aa:	4b39      	ldr	r3, [pc, #228]	@ (8006190 <xTaskResumeAll+0x118>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	4a37      	ldr	r2, [pc, #220]	@ (8006190 <xTaskResumeAll+0x118>)
 80060b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b4:	4b36      	ldr	r3, [pc, #216]	@ (8006190 <xTaskResumeAll+0x118>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d161      	bne.n	8006180 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060bc:	4b35      	ldr	r3, [pc, #212]	@ (8006194 <xTaskResumeAll+0x11c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d05d      	beq.n	8006180 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060c4:	e02e      	b.n	8006124 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c6:	4b34      	ldr	r3, [pc, #208]	@ (8006198 <xTaskResumeAll+0x120>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3318      	adds	r3, #24
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff f82f 	bl	8005136 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3304      	adds	r3, #4
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff f82a 	bl	8005136 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	2201      	movs	r2, #1
 80060e8:	409a      	lsls	r2, r3
 80060ea:	4b2c      	ldr	r3, [pc, #176]	@ (800619c <xTaskResumeAll+0x124>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	4a2a      	ldr	r2, [pc, #168]	@ (800619c <xTaskResumeAll+0x124>)
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4a27      	ldr	r2, [pc, #156]	@ (80061a0 <xTaskResumeAll+0x128>)
 8006102:	441a      	add	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3304      	adds	r3, #4
 8006108:	4619      	mov	r1, r3
 800610a:	4610      	mov	r0, r2
 800610c:	f7fe ffb6 	bl	800507c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006114:	4b23      	ldr	r3, [pc, #140]	@ (80061a4 <xTaskResumeAll+0x12c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800611e:	4b22      	ldr	r3, [pc, #136]	@ (80061a8 <xTaskResumeAll+0x130>)
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006124:	4b1c      	ldr	r3, [pc, #112]	@ (8006198 <xTaskResumeAll+0x120>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1cc      	bne.n	80060c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006132:	f000 fb57 	bl	80067e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006136:	4b1d      	ldr	r3, [pc, #116]	@ (80061ac <xTaskResumeAll+0x134>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d010      	beq.n	8006164 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006142:	f000 f847 	bl	80061d4 <xTaskIncrementTick>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800614c:	4b16      	ldr	r3, [pc, #88]	@ (80061a8 <xTaskResumeAll+0x130>)
 800614e:	2201      	movs	r2, #1
 8006150:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3b01      	subs	r3, #1
 8006156:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f1      	bne.n	8006142 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800615e:	4b13      	ldr	r3, [pc, #76]	@ (80061ac <xTaskResumeAll+0x134>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006164:	4b10      	ldr	r3, [pc, #64]	@ (80061a8 <xTaskResumeAll+0x130>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800616c:	2301      	movs	r3, #1
 800616e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006170:	4b0f      	ldr	r3, [pc, #60]	@ (80061b0 <xTaskResumeAll+0x138>)
 8006172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006180:	f001 f9ec 	bl	800755c <vPortExitCritical>

	return xAlreadyYielded;
 8006184:	68bb      	ldr	r3, [r7, #8]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200063e4 	.word	0x200063e4
 8006194:	200063bc 	.word	0x200063bc
 8006198:	2000637c 	.word	0x2000637c
 800619c:	200063c4 	.word	0x200063c4
 80061a0:	200062c0 	.word	0x200062c0
 80061a4:	200062bc 	.word	0x200062bc
 80061a8:	200063d0 	.word	0x200063d0
 80061ac:	200063cc 	.word	0x200063cc
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061ba:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <xTaskGetTickCount+0x1c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061c0:	687b      	ldr	r3, [r7, #4]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	200063c0 	.word	0x200063c0

080061d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061de:	4b4f      	ldr	r3, [pc, #316]	@ (800631c <xTaskIncrementTick+0x148>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f040 808f 	bne.w	8006306 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061e8:	4b4d      	ldr	r3, [pc, #308]	@ (8006320 <xTaskIncrementTick+0x14c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3301      	adds	r3, #1
 80061ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006320 <xTaskIncrementTick+0x14c>)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d121      	bne.n	8006240 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80061fc:	4b49      	ldr	r3, [pc, #292]	@ (8006324 <xTaskIncrementTick+0x150>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	603b      	str	r3, [r7, #0]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <xTaskIncrementTick+0x46>
 800621e:	4b41      	ldr	r3, [pc, #260]	@ (8006324 <xTaskIncrementTick+0x150>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	4b40      	ldr	r3, [pc, #256]	@ (8006328 <xTaskIncrementTick+0x154>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a3e      	ldr	r2, [pc, #248]	@ (8006324 <xTaskIncrementTick+0x150>)
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	4a3e      	ldr	r2, [pc, #248]	@ (8006328 <xTaskIncrementTick+0x154>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b3e      	ldr	r3, [pc, #248]	@ (800632c <xTaskIncrementTick+0x158>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	4a3c      	ldr	r2, [pc, #240]	@ (800632c <xTaskIncrementTick+0x158>)
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	f000 fad2 	bl	80067e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006240:	4b3b      	ldr	r3, [pc, #236]	@ (8006330 <xTaskIncrementTick+0x15c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	d348      	bcc.n	80062dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800624a:	4b36      	ldr	r3, [pc, #216]	@ (8006324 <xTaskIncrementTick+0x150>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006254:	4b36      	ldr	r3, [pc, #216]	@ (8006330 <xTaskIncrementTick+0x15c>)
 8006256:	f04f 32ff 	mov.w	r2, #4294967295
 800625a:	601a      	str	r2, [r3, #0]
					break;
 800625c:	e03e      	b.n	80062dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625e:	4b31      	ldr	r3, [pc, #196]	@ (8006324 <xTaskIncrementTick+0x150>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d203      	bcs.n	800627e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006276:	4a2e      	ldr	r2, [pc, #184]	@ (8006330 <xTaskIncrementTick+0x15c>)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800627c:	e02e      	b.n	80062dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	3304      	adds	r3, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe ff57 	bl	8005136 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	3318      	adds	r3, #24
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe ff4e 	bl	8005136 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	2201      	movs	r2, #1
 80062a0:	409a      	lsls	r2, r3
 80062a2:	4b24      	ldr	r3, [pc, #144]	@ (8006334 <xTaskIncrementTick+0x160>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	4a22      	ldr	r2, [pc, #136]	@ (8006334 <xTaskIncrementTick+0x160>)
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006338 <xTaskIncrementTick+0x164>)
 80062ba:	441a      	add	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f7fe feda 	bl	800507c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062cc:	4b1b      	ldr	r3, [pc, #108]	@ (800633c <xTaskIncrementTick+0x168>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d3b9      	bcc.n	800624a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80062d6:	2301      	movs	r3, #1
 80062d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062da:	e7b6      	b.n	800624a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062dc:	4b17      	ldr	r3, [pc, #92]	@ (800633c <xTaskIncrementTick+0x168>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e2:	4915      	ldr	r1, [pc, #84]	@ (8006338 <xTaskIncrementTick+0x164>)
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d901      	bls.n	80062f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062f8:	4b11      	ldr	r3, [pc, #68]	@ (8006340 <xTaskIncrementTick+0x16c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006300:	2301      	movs	r3, #1
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e004      	b.n	8006310 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006306:	4b0f      	ldr	r3, [pc, #60]	@ (8006344 <xTaskIncrementTick+0x170>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	4a0d      	ldr	r2, [pc, #52]	@ (8006344 <xTaskIncrementTick+0x170>)
 800630e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006310:	697b      	ldr	r3, [r7, #20]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	200063e4 	.word	0x200063e4
 8006320:	200063c0 	.word	0x200063c0
 8006324:	20006374 	.word	0x20006374
 8006328:	20006378 	.word	0x20006378
 800632c:	200063d4 	.word	0x200063d4
 8006330:	200063dc 	.word	0x200063dc
 8006334:	200063c4 	.word	0x200063c4
 8006338:	200062c0 	.word	0x200062c0
 800633c:	200062bc 	.word	0x200062bc
 8006340:	200063d0 	.word	0x200063d0
 8006344:	200063cc 	.word	0x200063cc

08006348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800634e:	4b27      	ldr	r3, [pc, #156]	@ (80063ec <vTaskSwitchContext+0xa4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006356:	4b26      	ldr	r3, [pc, #152]	@ (80063f0 <vTaskSwitchContext+0xa8>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800635c:	e040      	b.n	80063e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800635e:	4b24      	ldr	r3, [pc, #144]	@ (80063f0 <vTaskSwitchContext+0xa8>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006364:	4b23      	ldr	r3, [pc, #140]	@ (80063f4 <vTaskSwitchContext+0xac>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	fab3 f383 	clz	r3, r3
 8006370:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006372:	7afb      	ldrb	r3, [r7, #11]
 8006374:	f1c3 031f 	rsb	r3, r3, #31
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	491f      	ldr	r1, [pc, #124]	@ (80063f8 <vTaskSwitchContext+0xb0>)
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	607b      	str	r3, [r7, #4]
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	e7fd      	b.n	80063a2 <vTaskSwitchContext+0x5a>
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4a11      	ldr	r2, [pc, #68]	@ (80063f8 <vTaskSwitchContext+0xb0>)
 80063b2:	4413      	add	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	3308      	adds	r3, #8
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d104      	bne.n	80063d6 <vTaskSwitchContext+0x8e>
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4a07      	ldr	r2, [pc, #28]	@ (80063fc <vTaskSwitchContext+0xb4>)
 80063de:	6013      	str	r3, [r2, #0]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	200063e4 	.word	0x200063e4
 80063f0:	200063d0 	.word	0x200063d0
 80063f4:	200063c4 	.word	0x200063c4
 80063f8:	200062c0 	.word	0x200062c0
 80063fc:	200062bc 	.word	0x200062bc

08006400 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	60fb      	str	r3, [r7, #12]
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006428:	4b07      	ldr	r3, [pc, #28]	@ (8006448 <vTaskPlaceOnEventList+0x48>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3318      	adds	r3, #24
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fe fe47 	bl	80050c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006436:	2101      	movs	r1, #1
 8006438:	6838      	ldr	r0, [r7, #0]
 800643a:	f000 fb87 	bl	8006b4c <prvAddCurrentTaskToDelayedList>
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	200062bc 	.word	0x200062bc

0800644c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10b      	bne.n	8006476 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	617b      	str	r3, [r7, #20]
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006476:	4b0a      	ldr	r3, [pc, #40]	@ (80064a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3318      	adds	r3, #24
 800647c:	4619      	mov	r1, r3
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f7fe fdfc 	bl	800507c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800648a:	f04f 33ff 	mov.w	r3, #4294967295
 800648e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	68b8      	ldr	r0, [r7, #8]
 8006494:	f000 fb5a 	bl	8006b4c <prvAddCurrentTaskToDelayedList>
	}
 8006498:	bf00      	nop
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200062bc 	.word	0x200062bc

080064a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60fb      	str	r3, [r7, #12]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3318      	adds	r3, #24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fe2d 	bl	8005136 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006554 <xTaskRemoveFromEventList+0xb0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d11c      	bne.n	800651e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe fe24 	bl	8005136 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f2:	2201      	movs	r2, #1
 80064f4:	409a      	lsls	r2, r3
 80064f6:	4b18      	ldr	r3, [pc, #96]	@ (8006558 <xTaskRemoveFromEventList+0xb4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	4a16      	ldr	r2, [pc, #88]	@ (8006558 <xTaskRemoveFromEventList+0xb4>)
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4a13      	ldr	r2, [pc, #76]	@ (800655c <xTaskRemoveFromEventList+0xb8>)
 800650e:	441a      	add	r2, r3
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f7fe fdb0 	bl	800507c <vListInsertEnd>
 800651c:	e005      	b.n	800652a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3318      	adds	r3, #24
 8006522:	4619      	mov	r1, r3
 8006524:	480e      	ldr	r0, [pc, #56]	@ (8006560 <xTaskRemoveFromEventList+0xbc>)
 8006526:	f7fe fda9 	bl	800507c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652e:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <xTaskRemoveFromEventList+0xc0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006534:	429a      	cmp	r2, r3
 8006536:	d905      	bls.n	8006544 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800653c:	4b0a      	ldr	r3, [pc, #40]	@ (8006568 <xTaskRemoveFromEventList+0xc4>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	e001      	b.n	8006548 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006548:	697b      	ldr	r3, [r7, #20]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200063e4 	.word	0x200063e4
 8006558:	200063c4 	.word	0x200063c4
 800655c:	200062c0 	.word	0x200062c0
 8006560:	2000637c 	.word	0x2000637c
 8006564:	200062bc 	.word	0x200062bc
 8006568:	200063d0 	.word	0x200063d0

0800656c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006574:	4b06      	ldr	r3, [pc, #24]	@ (8006590 <vTaskInternalSetTimeOutState+0x24>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <vTaskInternalSetTimeOutState+0x28>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	605a      	str	r2, [r3, #4]
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	200063d4 	.word	0x200063d4
 8006594:	200063c0 	.word	0x200063c0

08006598 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10b      	bne.n	80065c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	613b      	str	r3, [r7, #16]
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10b      	bne.n	80065de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	60fb      	str	r3, [r7, #12]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80065de:	f000 ff8b 	bl	80074f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006658 <xTaskCheckForTimeOut+0xc0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d102      	bne.n	8006602 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	e023      	b.n	800664a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b15      	ldr	r3, [pc, #84]	@ (800665c <xTaskCheckForTimeOut+0xc4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d007      	beq.n	800661e <xTaskCheckForTimeOut+0x86>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e015      	b.n	800664a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	429a      	cmp	r2, r3
 8006626:	d20b      	bcs.n	8006640 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff ff99 	bl	800656c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	61fb      	str	r3, [r7, #28]
 800663e:	e004      	b.n	800664a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006646:	2301      	movs	r3, #1
 8006648:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800664a:	f000 ff87 	bl	800755c <vPortExitCritical>

	return xReturn;
 800664e:	69fb      	ldr	r3, [r7, #28]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	200063c0 	.word	0x200063c0
 800665c:	200063d4 	.word	0x200063d4

08006660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006664:	4b03      	ldr	r3, [pc, #12]	@ (8006674 <vTaskMissedYield+0x14>)
 8006666:	2201      	movs	r2, #1
 8006668:	601a      	str	r2, [r3, #0]
}
 800666a:	bf00      	nop
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	200063d0 	.word	0x200063d0

08006678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006680:	f000 f852 	bl	8006728 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006684:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <prvIdleTask+0x28>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d9f9      	bls.n	8006680 <prvIdleTask+0x8>
			{
				taskYIELD();
 800668c:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <prvIdleTask+0x2c>)
 800668e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800669c:	e7f0      	b.n	8006680 <prvIdleTask+0x8>
 800669e:	bf00      	nop
 80066a0:	200062c0 	.word	0x200062c0
 80066a4:	e000ed04 	.word	0xe000ed04

080066a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ae:	2300      	movs	r3, #0
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	e00c      	b.n	80066ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4a12      	ldr	r2, [pc, #72]	@ (8006708 <prvInitialiseTaskLists+0x60>)
 80066c0:	4413      	add	r3, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fe fcad 	bl	8005022 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3301      	adds	r3, #1
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b06      	cmp	r3, #6
 80066d2:	d9ef      	bls.n	80066b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066d4:	480d      	ldr	r0, [pc, #52]	@ (800670c <prvInitialiseTaskLists+0x64>)
 80066d6:	f7fe fca4 	bl	8005022 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066da:	480d      	ldr	r0, [pc, #52]	@ (8006710 <prvInitialiseTaskLists+0x68>)
 80066dc:	f7fe fca1 	bl	8005022 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066e0:	480c      	ldr	r0, [pc, #48]	@ (8006714 <prvInitialiseTaskLists+0x6c>)
 80066e2:	f7fe fc9e 	bl	8005022 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066e6:	480c      	ldr	r0, [pc, #48]	@ (8006718 <prvInitialiseTaskLists+0x70>)
 80066e8:	f7fe fc9b 	bl	8005022 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066ec:	480b      	ldr	r0, [pc, #44]	@ (800671c <prvInitialiseTaskLists+0x74>)
 80066ee:	f7fe fc98 	bl	8005022 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006720 <prvInitialiseTaskLists+0x78>)
 80066f4:	4a05      	ldr	r2, [pc, #20]	@ (800670c <prvInitialiseTaskLists+0x64>)
 80066f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <prvInitialiseTaskLists+0x7c>)
 80066fa:	4a05      	ldr	r2, [pc, #20]	@ (8006710 <prvInitialiseTaskLists+0x68>)
 80066fc:	601a      	str	r2, [r3, #0]
}
 80066fe:	bf00      	nop
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200062c0 	.word	0x200062c0
 800670c:	2000634c 	.word	0x2000634c
 8006710:	20006360 	.word	0x20006360
 8006714:	2000637c 	.word	0x2000637c
 8006718:	20006390 	.word	0x20006390
 800671c:	200063a8 	.word	0x200063a8
 8006720:	20006374 	.word	0x20006374
 8006724:	20006378 	.word	0x20006378

08006728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800672e:	e019      	b.n	8006764 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006730:	f000 fee2 	bl	80074f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006734:	4b10      	ldr	r3, [pc, #64]	@ (8006778 <prvCheckTasksWaitingTermination+0x50>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fcf8 	bl	8005136 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006746:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <prvCheckTasksWaitingTermination+0x54>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3b01      	subs	r3, #1
 800674c:	4a0b      	ldr	r2, [pc, #44]	@ (800677c <prvCheckTasksWaitingTermination+0x54>)
 800674e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006750:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <prvCheckTasksWaitingTermination+0x58>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3b01      	subs	r3, #1
 8006756:	4a0a      	ldr	r2, [pc, #40]	@ (8006780 <prvCheckTasksWaitingTermination+0x58>)
 8006758:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800675a:	f000 feff 	bl	800755c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f810 	bl	8006784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006764:	4b06      	ldr	r3, [pc, #24]	@ (8006780 <prvCheckTasksWaitingTermination+0x58>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e1      	bne.n	8006730 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20006390 	.word	0x20006390
 800677c:	200063bc 	.word	0x200063bc
 8006780:	200063a4 	.word	0x200063a4

08006784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006792:	2b00      	cmp	r3, #0
 8006794:	d108      	bne.n	80067a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679a:	4618      	mov	r0, r3
 800679c:	f001 f89c 	bl	80078d8 <vPortFree>
				vPortFree( pxTCB );
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 f899 	bl	80078d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067a6:	e019      	b.n	80067dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d103      	bne.n	80067ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 f890 	bl	80078d8 <vPortFree>
	}
 80067b8:	e010      	b.n	80067dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d00b      	beq.n	80067dc <prvDeleteTCB+0x58>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60fb      	str	r3, [r7, #12]
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <prvDeleteTCB+0x54>
	}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ea:	4b0c      	ldr	r3, [pc, #48]	@ (800681c <prvResetNextTaskUnblockTime+0x38>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006820 <prvResetNextTaskUnblockTime+0x3c>)
 80067f6:	f04f 32ff 	mov.w	r2, #4294967295
 80067fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067fc:	e008      	b.n	8006810 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fe:	4b07      	ldr	r3, [pc, #28]	@ (800681c <prvResetNextTaskUnblockTime+0x38>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4a04      	ldr	r2, [pc, #16]	@ (8006820 <prvResetNextTaskUnblockTime+0x3c>)
 800680e:	6013      	str	r3, [r2, #0]
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20006374 	.word	0x20006374
 8006820:	200063dc 	.word	0x200063dc

08006824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800682a:	4b0b      	ldr	r3, [pc, #44]	@ (8006858 <xTaskGetSchedulerState+0x34>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d102      	bne.n	8006838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006832:	2301      	movs	r3, #1
 8006834:	607b      	str	r3, [r7, #4]
 8006836:	e008      	b.n	800684a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006838:	4b08      	ldr	r3, [pc, #32]	@ (800685c <xTaskGetSchedulerState+0x38>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006840:	2302      	movs	r3, #2
 8006842:	607b      	str	r3, [r7, #4]
 8006844:	e001      	b.n	800684a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006846:	2300      	movs	r3, #0
 8006848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800684a:	687b      	ldr	r3, [r7, #4]
	}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	200063c8 	.word	0x200063c8
 800685c:	200063e4 	.word	0x200063e4

08006860 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800686c:	2300      	movs	r3, #0
 800686e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d070      	beq.n	8006958 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006876:	4b3b      	ldr	r3, [pc, #236]	@ (8006964 <xTaskPriorityDisinherit+0x104>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	d00b      	beq.n	8006898 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
}
 8006892:	bf00      	nop
 8006894:	bf00      	nop
 8006896:	e7fd      	b.n	8006894 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10b      	bne.n	80068b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	60bb      	str	r3, [r7, #8]
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	e7fd      	b.n	80068b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068bc:	1e5a      	subs	r2, r3, #1
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d044      	beq.n	8006958 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d140      	bne.n	8006958 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	3304      	adds	r3, #4
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fc2b 	bl	8005136 <uxListRemove>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d115      	bne.n	8006912 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ea:	491f      	ldr	r1, [pc, #124]	@ (8006968 <xTaskPriorityDisinherit+0x108>)
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xTaskPriorityDisinherit+0xb2>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	2201      	movs	r2, #1
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	43da      	mvns	r2, r3
 8006908:	4b18      	ldr	r3, [pc, #96]	@ (800696c <xTaskPriorityDisinherit+0x10c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4013      	ands	r3, r2
 800690e:	4a17      	ldr	r2, [pc, #92]	@ (800696c <xTaskPriorityDisinherit+0x10c>)
 8006910:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	f1c3 0207 	rsb	r2, r3, #7
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	2201      	movs	r2, #1
 800692c:	409a      	lsls	r2, r3
 800692e:	4b0f      	ldr	r3, [pc, #60]	@ (800696c <xTaskPriorityDisinherit+0x10c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4313      	orrs	r3, r2
 8006934:	4a0d      	ldr	r2, [pc, #52]	@ (800696c <xTaskPriorityDisinherit+0x10c>)
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4a08      	ldr	r2, [pc, #32]	@ (8006968 <xTaskPriorityDisinherit+0x108>)
 8006946:	441a      	add	r2, r3
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	3304      	adds	r3, #4
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f7fe fb94 	bl	800507c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006954:	2301      	movs	r3, #1
 8006956:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006958:	697b      	ldr	r3, [r7, #20]
	}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200062bc 	.word	0x200062bc
 8006968:	200062c0 	.word	0x200062c0
 800696c:	200063c4 	.word	0x200063c4

08006970 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800697e:	f000 fdbb 	bl	80074f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006982:	4b26      	ldr	r3, [pc, #152]	@ (8006a1c <xTaskNotifyWait+0xac>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d01a      	beq.n	80069c6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006990:	4b22      	ldr	r3, [pc, #136]	@ (8006a1c <xTaskNotifyWait+0xac>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	43d2      	mvns	r2, r2
 800699a:	400a      	ands	r2, r1
 800699c:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800699e:	4b1f      	ldr	r3, [pc, #124]	@ (8006a1c <xTaskNotifyWait+0xac>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069ae:	2101      	movs	r1, #1
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	f000 f8cb 	bl	8006b4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80069b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006a20 <xTaskNotifyWait+0xb0>)
 80069b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80069c6:	f000 fdc9 	bl	800755c <vPortExitCritical>

		taskENTER_CRITICAL();
 80069ca:	f000 fd95 	bl	80074f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80069d4:	4b11      	ldr	r3, [pc, #68]	@ (8006a1c <xTaskNotifyWait+0xac>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80069de:	4b0f      	ldr	r3, [pc, #60]	@ (8006a1c <xTaskNotifyWait+0xac>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d002      	beq.n	80069f2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	e008      	b.n	8006a04 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80069f2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a1c <xTaskNotifyWait+0xac>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	43d2      	mvns	r2, r2
 80069fc:	400a      	ands	r2, r1
 80069fe:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a04:	4b05      	ldr	r3, [pc, #20]	@ (8006a1c <xTaskNotifyWait+0xac>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8006a0e:	f000 fda5 	bl	800755c <vPortExitCritical>

		return xReturn;
 8006a12:	697b      	ldr	r3, [r7, #20]
	}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200062bc 	.word	0x200062bc
 8006a20:	e000ed04 	.word	0xe000ed04

08006a24 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08a      	sub	sp, #40	@ 0x28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	61bb      	str	r3, [r7, #24]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a4c:	f000 fe34 	bl	80076b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006a54:	f3ef 8211 	mrs	r2, BASEPRI
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	617a      	str	r2, [r7, #20]
 8006a6a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006a6c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a6e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a76:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a8a:	7ffb      	ldrb	r3, [r7, #31]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d146      	bne.n	8006b1e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	60fb      	str	r3, [r7, #12]
}
 8006aaa:	bf00      	nop
 8006aac:	bf00      	nop
 8006aae:	e7fd      	b.n	8006aac <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab0:	4b20      	ldr	r3, [pc, #128]	@ (8006b34 <vTaskNotifyGiveFromISR+0x110>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d11c      	bne.n	8006af2 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fb3a 	bl	8005136 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	409a      	lsls	r2, r3
 8006aca:	4b1b      	ldr	r3, [pc, #108]	@ (8006b38 <vTaskNotifyGiveFromISR+0x114>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	4a19      	ldr	r2, [pc, #100]	@ (8006b38 <vTaskNotifyGiveFromISR+0x114>)
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <vTaskNotifyGiveFromISR+0x118>)
 8006ae2:	441a      	add	r2, r3
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4610      	mov	r0, r2
 8006aec:	f7fe fac6 	bl	800507c <vListInsertEnd>
 8006af0:	e005      	b.n	8006afe <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	3318      	adds	r3, #24
 8006af6:	4619      	mov	r1, r3
 8006af8:	4811      	ldr	r0, [pc, #68]	@ (8006b40 <vTaskNotifyGiveFromISR+0x11c>)
 8006afa:	f7fe fabf 	bl	800507c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b02:	4b10      	ldr	r3, [pc, #64]	@ (8006b44 <vTaskNotifyGiveFromISR+0x120>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d908      	bls.n	8006b1e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2201      	movs	r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006b18:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <vTaskNotifyGiveFromISR+0x124>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f383 8811 	msr	BASEPRI, r3
}
 8006b28:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006b2a:	bf00      	nop
 8006b2c:	3728      	adds	r7, #40	@ 0x28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200063e4 	.word	0x200063e4
 8006b38:	200063c4 	.word	0x200063c4
 8006b3c:	200062c0 	.word	0x200062c0
 8006b40:	2000637c 	.word	0x2000637c
 8006b44:	200062bc 	.word	0x200062bc
 8006b48:	200063d0 	.word	0x200063d0

08006b4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b56:	4b29      	ldr	r3, [pc, #164]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b5c:	4b28      	ldr	r3, [pc, #160]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fae7 	bl	8005136 <uxListRemove>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b6e:	4b24      	ldr	r3, [pc, #144]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	2201      	movs	r2, #1
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43da      	mvns	r2, r3
 8006b7c:	4b21      	ldr	r3, [pc, #132]	@ (8006c04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4013      	ands	r3, r2
 8006b82:	4a20      	ldr	r2, [pc, #128]	@ (8006c04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8c:	d10a      	bne.n	8006ba4 <prvAddCurrentTaskToDelayedList+0x58>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d007      	beq.n	8006ba4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b94:	4b1a      	ldr	r3, [pc, #104]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	481a      	ldr	r0, [pc, #104]	@ (8006c08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b9e:	f7fe fa6d 	bl	800507c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ba2:	e026      	b.n	8006bf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4413      	add	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bac:	4b14      	ldr	r3, [pc, #80]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d209      	bcs.n	8006bd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bbc:	4b13      	ldr	r3, [pc, #76]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fe fa7b 	bl	80050c4 <vListInsert>
}
 8006bce:	e010      	b.n	8006bf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006c10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f7fe fa71 	bl	80050c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006be2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d202      	bcs.n	8006bf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bec:	4a09      	ldr	r2, [pc, #36]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6013      	str	r3, [r2, #0]
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	200063c0 	.word	0x200063c0
 8006c00:	200062bc 	.word	0x200062bc
 8006c04:	200063c4 	.word	0x200063c4
 8006c08:	200063a8 	.word	0x200063a8
 8006c0c:	20006378 	.word	0x20006378
 8006c10:	20006374 	.word	0x20006374
 8006c14:	200063dc 	.word	0x200063dc

08006c18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	@ 0x28
 8006c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c22:	f000 faf7 	bl	8007214 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c26:	4b1d      	ldr	r3, [pc, #116]	@ (8006c9c <xTimerCreateTimerTask+0x84>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d021      	beq.n	8006c72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c36:	1d3a      	adds	r2, r7, #4
 8006c38:	f107 0108 	add.w	r1, r7, #8
 8006c3c:	f107 030c 	add.w	r3, r7, #12
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7f9 fccd 	bl	80005e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	9202      	str	r2, [sp, #8]
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	2302      	movs	r3, #2
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	2300      	movs	r3, #0
 8006c56:	460a      	mov	r2, r1
 8006c58:	4911      	ldr	r1, [pc, #68]	@ (8006ca0 <xTimerCreateTimerTask+0x88>)
 8006c5a:	4812      	ldr	r0, [pc, #72]	@ (8006ca4 <xTimerCreateTimerTask+0x8c>)
 8006c5c:	f7fe ffc8 	bl	8005bf0 <xTaskCreateStatic>
 8006c60:	4603      	mov	r3, r0
 8006c62:	4a11      	ldr	r2, [pc, #68]	@ (8006ca8 <xTimerCreateTimerTask+0x90>)
 8006c64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c66:	4b10      	ldr	r3, [pc, #64]	@ (8006ca8 <xTimerCreateTimerTask+0x90>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10b      	bne.n	8006c90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	613b      	str	r3, [r7, #16]
}
 8006c8a:	bf00      	nop
 8006c8c:	bf00      	nop
 8006c8e:	e7fd      	b.n	8006c8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c90:	697b      	ldr	r3, [r7, #20]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20006418 	.word	0x20006418
 8006ca0:	08008560 	.word	0x08008560
 8006ca4:	08006de5 	.word	0x08006de5
 8006ca8:	2000641c 	.word	0x2000641c

08006cac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	@ 0x28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <xTimerGenericCommand+0x30>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	623b      	str	r3, [r7, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	e7fd      	b.n	8006cd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cdc:	4b19      	ldr	r3, [pc, #100]	@ (8006d44 <xTimerGenericCommand+0x98>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d02a      	beq.n	8006d3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	dc18      	bgt.n	8006d28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cf6:	f7ff fd95 	bl	8006824 <xTaskGetSchedulerState>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d109      	bne.n	8006d14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d00:	4b10      	ldr	r3, [pc, #64]	@ (8006d44 <xTimerGenericCommand+0x98>)
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	f107 0114 	add.w	r1, r7, #20
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d0c:	f7fe fb80 	bl	8005410 <xQueueGenericSend>
 8006d10:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d12:	e012      	b.n	8006d3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d14:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <xTimerGenericCommand+0x98>)
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	f107 0114 	add.w	r1, r7, #20
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f7fe fb76 	bl	8005410 <xQueueGenericSend>
 8006d24:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d26:	e008      	b.n	8006d3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d28:	4b06      	ldr	r3, [pc, #24]	@ (8006d44 <xTimerGenericCommand+0x98>)
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	f107 0114 	add.w	r1, r7, #20
 8006d30:	2300      	movs	r3, #0
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	f7fe fc6e 	bl	8005614 <xQueueGenericSendFromISR>
 8006d38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3728      	adds	r7, #40	@ 0x28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20006418 	.word	0x20006418

08006d48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d52:	4b23      	ldr	r3, [pc, #140]	@ (8006de0 <prvProcessExpiredTimer+0x98>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe f9e8 	bl	8005136 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d023      	beq.n	8006dbc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	699a      	ldr	r2, [r3, #24]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	18d1      	adds	r1, r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	6978      	ldr	r0, [r7, #20]
 8006d82:	f000 f8d5 	bl	8006f30 <prvInsertTimerInActiveList>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d020      	beq.n	8006dce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2300      	movs	r3, #0
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	2100      	movs	r1, #0
 8006d96:	6978      	ldr	r0, [r7, #20]
 8006d98:	f7ff ff88 	bl	8006cac <xTimerGenericCommand>
 8006d9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d114      	bne.n	8006dce <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	60fb      	str	r3, [r7, #12]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	6978      	ldr	r0, [r7, #20]
 8006dd4:	4798      	blx	r3
}
 8006dd6:	bf00      	nop
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20006410 	.word	0x20006410

08006de4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dec:	f107 0308 	add.w	r3, r7, #8
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 f859 	bl	8006ea8 <prvGetNextExpireTime>
 8006df6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 f805 	bl	8006e0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e02:	f000 f8d7 	bl	8006fb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e06:	bf00      	nop
 8006e08:	e7f0      	b.n	8006dec <prvTimerTask+0x8>
	...

08006e0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e16:	f7ff f921 	bl	800605c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e1a:	f107 0308 	add.w	r3, r7, #8
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f866 	bl	8006ef0 <prvSampleTimeNow>
 8006e24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d130      	bne.n	8006e8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <prvProcessTimerOrBlockTask+0x3c>
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d806      	bhi.n	8006e48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e3a:	f7ff f91d 	bl	8006078 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e3e:	68f9      	ldr	r1, [r7, #12]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7ff ff81 	bl	8006d48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e46:	e024      	b.n	8006e92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d008      	beq.n	8006e60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e4e:	4b13      	ldr	r3, [pc, #76]	@ (8006e9c <prvProcessTimerOrBlockTask+0x90>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <prvProcessTimerOrBlockTask+0x50>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <prvProcessTimerOrBlockTask+0x52>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e60:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea0 <prvProcessTimerOrBlockTask+0x94>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f7fe fe8b 	bl	8005b88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e72:	f7ff f901 	bl	8006078 <xTaskResumeAll>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e7c:	4b09      	ldr	r3, [pc, #36]	@ (8006ea4 <prvProcessTimerOrBlockTask+0x98>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	f3bf 8f6f 	isb	sy
}
 8006e8c:	e001      	b.n	8006e92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e8e:	f7ff f8f3 	bl	8006078 <xTaskResumeAll>
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20006414 	.word	0x20006414
 8006ea0:	20006418 	.word	0x20006418
 8006ea4:	e000ed04 	.word	0xe000ed04

08006ea8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8006eec <prvGetNextExpireTime+0x44>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <prvGetNextExpireTime+0x16>
 8006eba:	2201      	movs	r2, #1
 8006ebc:	e000      	b.n	8006ec0 <prvGetNextExpireTime+0x18>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d105      	bne.n	8006ed8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ecc:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <prvGetNextExpireTime+0x44>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	e001      	b.n	8006edc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006edc:	68fb      	ldr	r3, [r7, #12]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20006410 	.word	0x20006410

08006ef0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ef8:	f7ff f95c 	bl	80061b4 <xTaskGetTickCount>
 8006efc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006efe:	4b0b      	ldr	r3, [pc, #44]	@ (8006f2c <prvSampleTimeNow+0x3c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d205      	bcs.n	8006f14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f08:	f000 f91e 	bl	8007148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	e002      	b.n	8006f1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f1a:	4a04      	ldr	r2, [pc, #16]	@ (8006f2c <prvSampleTimeNow+0x3c>)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f20:	68fb      	ldr	r3, [r7, #12]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20006420 	.word	0x20006420

08006f30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d812      	bhi.n	8006f7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	1ad2      	subs	r2, r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d302      	bcc.n	8006f6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f64:	2301      	movs	r3, #1
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e01b      	b.n	8006fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f6a:	4b10      	ldr	r3, [pc, #64]	@ (8006fac <prvInsertTimerInActiveList+0x7c>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4619      	mov	r1, r3
 8006f74:	4610      	mov	r0, r2
 8006f76:	f7fe f8a5 	bl	80050c4 <vListInsert>
 8006f7a:	e012      	b.n	8006fa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d206      	bcs.n	8006f92 <prvInsertTimerInActiveList+0x62>
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d302      	bcc.n	8006f92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e007      	b.n	8006fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f92:	4b07      	ldr	r3, [pc, #28]	@ (8006fb0 <prvInsertTimerInActiveList+0x80>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f7fe f891 	bl	80050c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fa2:	697b      	ldr	r3, [r7, #20]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20006414 	.word	0x20006414
 8006fb0:	20006410 	.word	0x20006410

08006fb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08c      	sub	sp, #48	@ 0x30
 8006fb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fba:	e0b2      	b.n	8007122 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f2c0 80af 	blt.w	8007122 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe f8ae 	bl	8005136 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fda:	1d3b      	adds	r3, r7, #4
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff ff87 	bl	8006ef0 <prvSampleTimeNow>
 8006fe2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b09      	cmp	r3, #9
 8006fe8:	f200 8098 	bhi.w	800711c <prvProcessReceivedCommands+0x168>
 8006fec:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <prvProcessReceivedCommands+0x40>)
 8006fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff2:	bf00      	nop
 8006ff4:	0800701d 	.word	0x0800701d
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	0800701d 	.word	0x0800701d
 8007000:	08007093 	.word	0x08007093
 8007004:	080070a7 	.word	0x080070a7
 8007008:	080070f3 	.word	0x080070f3
 800700c:	0800701d 	.word	0x0800701d
 8007010:	0800701d 	.word	0x0800701d
 8007014:	08007093 	.word	0x08007093
 8007018:	080070a7 	.word	0x080070a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800701c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	b2da      	uxtb	r2, r3
 8007028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	18d1      	adds	r1, r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a3a      	ldr	r2, [r7, #32]
 800703a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800703c:	f7ff ff78 	bl	8006f30 <prvInsertTimerInActiveList>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d06c      	beq.n	8007120 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800704c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d061      	beq.n	8007120 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	441a      	add	r2, r3
 8007064:	2300      	movs	r3, #0
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	2300      	movs	r3, #0
 800706a:	2100      	movs	r1, #0
 800706c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800706e:	f7ff fe1d 	bl	8006cac <xTimerGenericCommand>
 8007072:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d152      	bne.n	8007120 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	61bb      	str	r3, [r7, #24]
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	e7fd      	b.n	800708e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007098:	f023 0301 	bic.w	r3, r3, #1
 800709c:	b2da      	uxtb	r2, r3
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80070a4:	e03d      	b.n	8007122 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070ac:	f043 0301 	orr.w	r3, r3, #1
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10b      	bne.n	80070de <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	617b      	str	r3, [r7, #20]
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	18d1      	adds	r1, r2, r3
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	6a3a      	ldr	r2, [r7, #32]
 80070ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070ec:	f7ff ff20 	bl	8006f30 <prvInsertTimerInActiveList>
					break;
 80070f0:	e017      	b.n	8007122 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d103      	bne.n	8007108 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8007100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007102:	f000 fbe9 	bl	80078d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007106:	e00c      	b.n	8007122 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	b2da      	uxtb	r2, r3
 8007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800711a:	e002      	b.n	8007122 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800711c:	bf00      	nop
 800711e:	e000      	b.n	8007122 <prvProcessReceivedCommands+0x16e>
					break;
 8007120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007122:	4b08      	ldr	r3, [pc, #32]	@ (8007144 <prvProcessReceivedCommands+0x190>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f107 0108 	add.w	r1, r7, #8
 800712a:	2200      	movs	r2, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fb0f 	bl	8005750 <xQueueReceive>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	f47f af41 	bne.w	8006fbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	3728      	adds	r7, #40	@ 0x28
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20006418 	.word	0x20006418

08007148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800714e:	e049      	b.n	80071e4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007150:	4b2e      	ldr	r3, [pc, #184]	@ (800720c <prvSwitchTimerLists+0xc4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800715a:	4b2c      	ldr	r3, [pc, #176]	@ (800720c <prvSwitchTimerLists+0xc4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3304      	adds	r3, #4
 8007168:	4618      	mov	r0, r3
 800716a:	f7fd ffe4 	bl	8005136 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b00      	cmp	r3, #0
 8007182:	d02f      	beq.n	80071e4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4413      	add	r3, r2
 800718c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	429a      	cmp	r2, r3
 8007194:	d90e      	bls.n	80071b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071a2:	4b1a      	ldr	r3, [pc, #104]	@ (800720c <prvSwitchTimerLists+0xc4>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f7fd ff89 	bl	80050c4 <vListInsert>
 80071b2:	e017      	b.n	80071e4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071b4:	2300      	movs	r3, #0
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	2100      	movs	r1, #0
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f7ff fd74 	bl	8006cac <xTimerGenericCommand>
 80071c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	603b      	str	r3, [r7, #0]
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071e4:	4b09      	ldr	r3, [pc, #36]	@ (800720c <prvSwitchTimerLists+0xc4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1b0      	bne.n	8007150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071ee:	4b07      	ldr	r3, [pc, #28]	@ (800720c <prvSwitchTimerLists+0xc4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071f4:	4b06      	ldr	r3, [pc, #24]	@ (8007210 <prvSwitchTimerLists+0xc8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a04      	ldr	r2, [pc, #16]	@ (800720c <prvSwitchTimerLists+0xc4>)
 80071fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071fc:	4a04      	ldr	r2, [pc, #16]	@ (8007210 <prvSwitchTimerLists+0xc8>)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	6013      	str	r3, [r2, #0]
}
 8007202:	bf00      	nop
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20006410 	.word	0x20006410
 8007210:	20006414 	.word	0x20006414

08007214 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800721a:	f000 f96d 	bl	80074f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800721e:	4b15      	ldr	r3, [pc, #84]	@ (8007274 <prvCheckForValidListAndQueue+0x60>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d120      	bne.n	8007268 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007226:	4814      	ldr	r0, [pc, #80]	@ (8007278 <prvCheckForValidListAndQueue+0x64>)
 8007228:	f7fd fefb 	bl	8005022 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800722c:	4813      	ldr	r0, [pc, #76]	@ (800727c <prvCheckForValidListAndQueue+0x68>)
 800722e:	f7fd fef8 	bl	8005022 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007232:	4b13      	ldr	r3, [pc, #76]	@ (8007280 <prvCheckForValidListAndQueue+0x6c>)
 8007234:	4a10      	ldr	r2, [pc, #64]	@ (8007278 <prvCheckForValidListAndQueue+0x64>)
 8007236:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007238:	4b12      	ldr	r3, [pc, #72]	@ (8007284 <prvCheckForValidListAndQueue+0x70>)
 800723a:	4a10      	ldr	r2, [pc, #64]	@ (800727c <prvCheckForValidListAndQueue+0x68>)
 800723c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800723e:	2300      	movs	r3, #0
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	4b11      	ldr	r3, [pc, #68]	@ (8007288 <prvCheckForValidListAndQueue+0x74>)
 8007244:	4a11      	ldr	r2, [pc, #68]	@ (800728c <prvCheckForValidListAndQueue+0x78>)
 8007246:	210c      	movs	r1, #12
 8007248:	200a      	movs	r0, #10
 800724a:	f7fe f809 	bl	8005260 <xQueueGenericCreateStatic>
 800724e:	4603      	mov	r3, r0
 8007250:	4a08      	ldr	r2, [pc, #32]	@ (8007274 <prvCheckForValidListAndQueue+0x60>)
 8007252:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007254:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <prvCheckForValidListAndQueue+0x60>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800725c:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <prvCheckForValidListAndQueue+0x60>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	490b      	ldr	r1, [pc, #44]	@ (8007290 <prvCheckForValidListAndQueue+0x7c>)
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fc66 	bl	8005b34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007268:	f000 f978 	bl	800755c <vPortExitCritical>
}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20006418 	.word	0x20006418
 8007278:	200063e8 	.word	0x200063e8
 800727c:	200063fc 	.word	0x200063fc
 8007280:	20006410 	.word	0x20006410
 8007284:	20006414 	.word	0x20006414
 8007288:	2000649c 	.word	0x2000649c
 800728c:	20006424 	.word	0x20006424
 8007290:	08008568 	.word	0x08008568

08007294 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3b04      	subs	r3, #4
 80072a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b04      	subs	r3, #4
 80072b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f023 0201 	bic.w	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072c4:	4a0c      	ldr	r2, [pc, #48]	@ (80072f8 <pxPortInitialiseStack+0x64>)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b14      	subs	r3, #20
 80072ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b04      	subs	r3, #4
 80072da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f06f 0202 	mvn.w	r2, #2
 80072e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3b20      	subs	r3, #32
 80072e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	080072fd 	.word	0x080072fd

080072fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007306:	4b13      	ldr	r3, [pc, #76]	@ (8007354 <prvTaskExitError+0x58>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d00b      	beq.n	8007328 <prvTaskExitError+0x2c>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	60fb      	str	r3, [r7, #12]
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <prvTaskExitError+0x28>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	60bb      	str	r3, [r7, #8]
}
 800733a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800733c:	bf00      	nop
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0fc      	beq.n	800733e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	2000007c 	.word	0x2000007c
	...

08007360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007360:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <pxCurrentTCBConst2>)
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	6808      	ldr	r0, [r1, #0]
 8007366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	f380 8809 	msr	PSP, r0
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	4770      	bx	lr
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst2>:
 8007380:	200062bc 	.word	0x200062bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007388:	4808      	ldr	r0, [pc, #32]	@ (80073ac <prvPortStartFirstTask+0x24>)
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f380 8808 	msr	MSP, r0
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8814 	msr	CONTROL, r0
 800739a:	b662      	cpsie	i
 800739c:	b661      	cpsie	f
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	df00      	svc	0
 80073a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073aa:	bf00      	nop
 80073ac:	e000ed08 	.word	0xe000ed08

080073b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073b6:	4b47      	ldr	r3, [pc, #284]	@ (80074d4 <xPortStartScheduler+0x124>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a47      	ldr	r2, [pc, #284]	@ (80074d8 <xPortStartScheduler+0x128>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10b      	bne.n	80073d8 <xPortStartScheduler+0x28>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	60fb      	str	r3, [r7, #12]
}
 80073d2:	bf00      	nop
 80073d4:	bf00      	nop
 80073d6:	e7fd      	b.n	80073d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073d8:	4b3e      	ldr	r3, [pc, #248]	@ (80074d4 <xPortStartScheduler+0x124>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a3f      	ldr	r2, [pc, #252]	@ (80074dc <xPortStartScheduler+0x12c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d10b      	bne.n	80073fa <xPortStartScheduler+0x4a>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	613b      	str	r3, [r7, #16]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073fa:	4b39      	ldr	r3, [pc, #228]	@ (80074e0 <xPortStartScheduler+0x130>)
 80073fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	22ff      	movs	r2, #255	@ 0xff
 800740a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800741c:	b2da      	uxtb	r2, r3
 800741e:	4b31      	ldr	r3, [pc, #196]	@ (80074e4 <xPortStartScheduler+0x134>)
 8007420:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007422:	4b31      	ldr	r3, [pc, #196]	@ (80074e8 <xPortStartScheduler+0x138>)
 8007424:	2207      	movs	r2, #7
 8007426:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007428:	e009      	b.n	800743e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800742a:	4b2f      	ldr	r3, [pc, #188]	@ (80074e8 <xPortStartScheduler+0x138>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3b01      	subs	r3, #1
 8007430:	4a2d      	ldr	r2, [pc, #180]	@ (80074e8 <xPortStartScheduler+0x138>)
 8007432:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	b2db      	uxtb	r3, r3
 800743c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007446:	2b80      	cmp	r3, #128	@ 0x80
 8007448:	d0ef      	beq.n	800742a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800744a:	4b27      	ldr	r3, [pc, #156]	@ (80074e8 <xPortStartScheduler+0x138>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1c3 0307 	rsb	r3, r3, #7
 8007452:	2b04      	cmp	r3, #4
 8007454:	d00b      	beq.n	800746e <xPortStartScheduler+0xbe>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60bb      	str	r3, [r7, #8]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800746e:	4b1e      	ldr	r3, [pc, #120]	@ (80074e8 <xPortStartScheduler+0x138>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	4a1c      	ldr	r2, [pc, #112]	@ (80074e8 <xPortStartScheduler+0x138>)
 8007476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007478:	4b1b      	ldr	r3, [pc, #108]	@ (80074e8 <xPortStartScheduler+0x138>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007480:	4a19      	ldr	r2, [pc, #100]	@ (80074e8 <xPortStartScheduler+0x138>)
 8007482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800748c:	4b17      	ldr	r3, [pc, #92]	@ (80074ec <xPortStartScheduler+0x13c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a16      	ldr	r2, [pc, #88]	@ (80074ec <xPortStartScheduler+0x13c>)
 8007492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007498:	4b14      	ldr	r3, [pc, #80]	@ (80074ec <xPortStartScheduler+0x13c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a13      	ldr	r2, [pc, #76]	@ (80074ec <xPortStartScheduler+0x13c>)
 800749e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80074a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074a4:	f000 f8da 	bl	800765c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074a8:	4b11      	ldr	r3, [pc, #68]	@ (80074f0 <xPortStartScheduler+0x140>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074ae:	f000 f8f9 	bl	80076a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074b2:	4b10      	ldr	r3, [pc, #64]	@ (80074f4 <xPortStartScheduler+0x144>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a0f      	ldr	r2, [pc, #60]	@ (80074f4 <xPortStartScheduler+0x144>)
 80074b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80074bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074be:	f7ff ff63 	bl	8007388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074c2:	f7fe ff41 	bl	8006348 <vTaskSwitchContext>
	prvTaskExitError();
 80074c6:	f7ff ff19 	bl	80072fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	e000ed00 	.word	0xe000ed00
 80074d8:	410fc271 	.word	0x410fc271
 80074dc:	410fc270 	.word	0x410fc270
 80074e0:	e000e400 	.word	0xe000e400
 80074e4:	200064e4 	.word	0x200064e4
 80074e8:	200064e8 	.word	0x200064e8
 80074ec:	e000ed20 	.word	0xe000ed20
 80074f0:	2000007c 	.word	0x2000007c
 80074f4:	e000ef34 	.word	0xe000ef34

080074f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	607b      	str	r3, [r7, #4]
}
 8007510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007512:	4b10      	ldr	r3, [pc, #64]	@ (8007554 <vPortEnterCritical+0x5c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	4a0e      	ldr	r2, [pc, #56]	@ (8007554 <vPortEnterCritical+0x5c>)
 800751a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800751c:	4b0d      	ldr	r3, [pc, #52]	@ (8007554 <vPortEnterCritical+0x5c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d110      	bne.n	8007546 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007524:	4b0c      	ldr	r3, [pc, #48]	@ (8007558 <vPortEnterCritical+0x60>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <vPortEnterCritical+0x4e>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	603b      	str	r3, [r7, #0]
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	e7fd      	b.n	8007542 <vPortEnterCritical+0x4a>
	}
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	2000007c 	.word	0x2000007c
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007562:	4b12      	ldr	r3, [pc, #72]	@ (80075ac <vPortExitCritical+0x50>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10b      	bne.n	8007582 <vPortExitCritical+0x26>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	607b      	str	r3, [r7, #4]
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	e7fd      	b.n	800757e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007582:	4b0a      	ldr	r3, [pc, #40]	@ (80075ac <vPortExitCritical+0x50>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3b01      	subs	r3, #1
 8007588:	4a08      	ldr	r2, [pc, #32]	@ (80075ac <vPortExitCritical+0x50>)
 800758a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800758c:	4b07      	ldr	r3, [pc, #28]	@ (80075ac <vPortExitCritical+0x50>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d105      	bne.n	80075a0 <vPortExitCritical+0x44>
 8007594:	2300      	movs	r3, #0
 8007596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f383 8811 	msr	BASEPRI, r3
}
 800759e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	2000007c 	.word	0x2000007c

080075b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075b0:	f3ef 8009 	mrs	r0, PSP
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4b15      	ldr	r3, [pc, #84]	@ (8007610 <pxCurrentTCBConst>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	f01e 0f10 	tst.w	lr, #16
 80075c0:	bf08      	it	eq
 80075c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	6010      	str	r0, [r2, #0]
 80075cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80075d4:	f380 8811 	msr	BASEPRI, r0
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f7fe feb2 	bl	8006348 <vTaskSwitchContext>
 80075e4:	f04f 0000 	mov.w	r0, #0
 80075e8:	f380 8811 	msr	BASEPRI, r0
 80075ec:	bc09      	pop	{r0, r3}
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	6808      	ldr	r0, [r1, #0]
 80075f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f6:	f01e 0f10 	tst.w	lr, #16
 80075fa:	bf08      	it	eq
 80075fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007600:	f380 8809 	msr	PSP, r0
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	f3af 8000 	nop.w

08007610 <pxCurrentTCBConst>:
 8007610:	200062bc 	.word	0x200062bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007632:	f7fe fdcf 	bl	80061d4 <xTaskIncrementTick>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800763c:	4b06      	ldr	r3, [pc, #24]	@ (8007658 <xPortSysTickHandler+0x40>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f383 8811 	msr	BASEPRI, r3
}
 800764e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007660:	4b0b      	ldr	r3, [pc, #44]	@ (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007666:	4b0b      	ldr	r3, [pc, #44]	@ (8007694 <vPortSetupTimerInterrupt+0x38>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800766c:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <vPortSetupTimerInterrupt+0x3c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a0a      	ldr	r2, [pc, #40]	@ (800769c <vPortSetupTimerInterrupt+0x40>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	099b      	lsrs	r3, r3, #6
 8007678:	4a09      	ldr	r2, [pc, #36]	@ (80076a0 <vPortSetupTimerInterrupt+0x44>)
 800767a:	3b01      	subs	r3, #1
 800767c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800767e:	4b04      	ldr	r3, [pc, #16]	@ (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007680:	2207      	movs	r2, #7
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	e000e010 	.word	0xe000e010
 8007694:	e000e018 	.word	0xe000e018
 8007698:	20000070 	.word	0x20000070
 800769c:	10624dd3 	.word	0x10624dd3
 80076a0:	e000e014 	.word	0xe000e014

080076a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80076b4 <vPortEnableVFP+0x10>
 80076a8:	6801      	ldr	r1, [r0, #0]
 80076aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80076ae:	6001      	str	r1, [r0, #0]
 80076b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076b2:	bf00      	nop
 80076b4:	e000ed88 	.word	0xe000ed88

080076b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076be:	f3ef 8305 	mrs	r3, IPSR
 80076c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b0f      	cmp	r3, #15
 80076c8:	d915      	bls.n	80076f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ca:	4a18      	ldr	r2, [pc, #96]	@ (800772c <vPortValidateInterruptPriority+0x74>)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076d4:	4b16      	ldr	r3, [pc, #88]	@ (8007730 <vPortValidateInterruptPriority+0x78>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	7afa      	ldrb	r2, [r7, #11]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d20b      	bcs.n	80076f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	607b      	str	r3, [r7, #4]
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	e7fd      	b.n	80076f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007734 <vPortValidateInterruptPriority+0x7c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80076fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007738 <vPortValidateInterruptPriority+0x80>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d90b      	bls.n	800771e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	603b      	str	r3, [r7, #0]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <vPortValidateInterruptPriority+0x62>
	}
 800771e:	bf00      	nop
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	e000e3f0 	.word	0xe000e3f0
 8007730:	200064e4 	.word	0x200064e4
 8007734:	e000ed0c 	.word	0xe000ed0c
 8007738:	200064e8 	.word	0x200064e8

0800773c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	@ 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007744:	2300      	movs	r3, #0
 8007746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007748:	f7fe fc88 	bl	800605c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800774c:	4b5c      	ldr	r3, [pc, #368]	@ (80078c0 <pvPortMalloc+0x184>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007754:	f000 f924 	bl	80079a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007758:	4b5a      	ldr	r3, [pc, #360]	@ (80078c4 <pvPortMalloc+0x188>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	f040 8095 	bne.w	8007890 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01e      	beq.n	80077aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800776c:	2208      	movs	r2, #8
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4413      	add	r3, r2
 8007772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	2b00      	cmp	r3, #0
 800777c:	d015      	beq.n	80077aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f023 0307 	bic.w	r3, r3, #7
 8007784:	3308      	adds	r3, #8
 8007786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <pvPortMalloc+0x6e>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	617b      	str	r3, [r7, #20]
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop
 80077a8:	e7fd      	b.n	80077a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d06f      	beq.n	8007890 <pvPortMalloc+0x154>
 80077b0:	4b45      	ldr	r3, [pc, #276]	@ (80078c8 <pvPortMalloc+0x18c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d86a      	bhi.n	8007890 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077ba:	4b44      	ldr	r3, [pc, #272]	@ (80078cc <pvPortMalloc+0x190>)
 80077bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077be:	4b43      	ldr	r3, [pc, #268]	@ (80078cc <pvPortMalloc+0x190>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077c4:	e004      	b.n	80077d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d903      	bls.n	80077e2 <pvPortMalloc+0xa6>
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1f1      	bne.n	80077c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077e2:	4b37      	ldr	r3, [pc, #220]	@ (80078c0 <pvPortMalloc+0x184>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d051      	beq.n	8007890 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2208      	movs	r2, #8
 80077f2:	4413      	add	r3, r2
 80077f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	1ad2      	subs	r2, r2, r3
 8007806:	2308      	movs	r3, #8
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	429a      	cmp	r2, r3
 800780c:	d920      	bls.n	8007850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800780e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4413      	add	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f003 0307 	and.w	r3, r3, #7
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <pvPortMalloc+0xfc>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	613b      	str	r3, [r7, #16]
}
 8007832:	bf00      	nop
 8007834:	bf00      	nop
 8007836:	e7fd      	b.n	8007834 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800784a:	69b8      	ldr	r0, [r7, #24]
 800784c:	f000 f90a 	bl	8007a64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007850:	4b1d      	ldr	r3, [pc, #116]	@ (80078c8 <pvPortMalloc+0x18c>)
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	4a1b      	ldr	r2, [pc, #108]	@ (80078c8 <pvPortMalloc+0x18c>)
 800785c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800785e:	4b1a      	ldr	r3, [pc, #104]	@ (80078c8 <pvPortMalloc+0x18c>)
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	4b1b      	ldr	r3, [pc, #108]	@ (80078d0 <pvPortMalloc+0x194>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d203      	bcs.n	8007872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800786a:	4b17      	ldr	r3, [pc, #92]	@ (80078c8 <pvPortMalloc+0x18c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a18      	ldr	r2, [pc, #96]	@ (80078d0 <pvPortMalloc+0x194>)
 8007870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	4b13      	ldr	r3, [pc, #76]	@ (80078c4 <pvPortMalloc+0x188>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	431a      	orrs	r2, r3
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007886:	4b13      	ldr	r3, [pc, #76]	@ (80078d4 <pvPortMalloc+0x198>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	4a11      	ldr	r2, [pc, #68]	@ (80078d4 <pvPortMalloc+0x198>)
 800788e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007890:	f7fe fbf2 	bl	8006078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00b      	beq.n	80078b6 <pvPortMalloc+0x17a>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	60fb      	str	r3, [r7, #12]
}
 80078b0:	bf00      	nop
 80078b2:	bf00      	nop
 80078b4:	e7fd      	b.n	80078b2 <pvPortMalloc+0x176>
	return pvReturn;
 80078b6:	69fb      	ldr	r3, [r7, #28]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3728      	adds	r7, #40	@ 0x28
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	200104f4 	.word	0x200104f4
 80078c4:	20010508 	.word	0x20010508
 80078c8:	200104f8 	.word	0x200104f8
 80078cc:	200104ec 	.word	0x200104ec
 80078d0:	200104fc 	.word	0x200104fc
 80078d4:	20010500 	.word	0x20010500

080078d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d04f      	beq.n	800798a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078ea:	2308      	movs	r3, #8
 80078ec:	425b      	negs	r3, r3
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4413      	add	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	4b25      	ldr	r3, [pc, #148]	@ (8007994 <vPortFree+0xbc>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4013      	ands	r3, r2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10b      	bne.n	800791e <vPortFree+0x46>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	60fb      	str	r3, [r7, #12]
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <vPortFree+0x66>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	60bb      	str	r3, [r7, #8]
}
 8007938:	bf00      	nop
 800793a:	bf00      	nop
 800793c:	e7fd      	b.n	800793a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	4b14      	ldr	r3, [pc, #80]	@ (8007994 <vPortFree+0xbc>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4013      	ands	r3, r2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01e      	beq.n	800798a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d11a      	bne.n	800798a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	4b0e      	ldr	r3, [pc, #56]	@ (8007994 <vPortFree+0xbc>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	43db      	mvns	r3, r3
 800795e:	401a      	ands	r2, r3
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007964:	f7fe fb7a 	bl	800605c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4b0a      	ldr	r3, [pc, #40]	@ (8007998 <vPortFree+0xc0>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4413      	add	r3, r2
 8007972:	4a09      	ldr	r2, [pc, #36]	@ (8007998 <vPortFree+0xc0>)
 8007974:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007976:	6938      	ldr	r0, [r7, #16]
 8007978:	f000 f874 	bl	8007a64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800797c:	4b07      	ldr	r3, [pc, #28]	@ (800799c <vPortFree+0xc4>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	4a06      	ldr	r2, [pc, #24]	@ (800799c <vPortFree+0xc4>)
 8007984:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007986:	f7fe fb77 	bl	8006078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800798a:	bf00      	nop
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20010508 	.word	0x20010508
 8007998:	200104f8 	.word	0x200104f8
 800799c:	20010504 	.word	0x20010504

080079a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079a6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80079aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079ac:	4b27      	ldr	r3, [pc, #156]	@ (8007a4c <prvHeapInit+0xac>)
 80079ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00c      	beq.n	80079d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3307      	adds	r3, #7
 80079be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0307 	bic.w	r3, r3, #7
 80079c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	4a1f      	ldr	r2, [pc, #124]	@ (8007a4c <prvHeapInit+0xac>)
 80079d0:	4413      	add	r3, r2
 80079d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a50 <prvHeapInit+0xb0>)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079de:	4b1c      	ldr	r3, [pc, #112]	@ (8007a50 <prvHeapInit+0xb0>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	4413      	add	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079ec:	2208      	movs	r2, #8
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0307 	bic.w	r3, r3, #7
 80079fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4a15      	ldr	r2, [pc, #84]	@ (8007a54 <prvHeapInit+0xb4>)
 8007a00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a02:	4b14      	ldr	r3, [pc, #80]	@ (8007a54 <prvHeapInit+0xb4>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2200      	movs	r2, #0
 8007a08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a0a:	4b12      	ldr	r3, [pc, #72]	@ (8007a54 <prvHeapInit+0xb4>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	1ad2      	subs	r2, r2, r3
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a20:	4b0c      	ldr	r3, [pc, #48]	@ (8007a54 <prvHeapInit+0xb4>)
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a58 <prvHeapInit+0xb8>)
 8007a2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	4a09      	ldr	r2, [pc, #36]	@ (8007a5c <prvHeapInit+0xbc>)
 8007a36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a38:	4b09      	ldr	r3, [pc, #36]	@ (8007a60 <prvHeapInit+0xc0>)
 8007a3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a3e:	601a      	str	r2, [r3, #0]
}
 8007a40:	bf00      	nop
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	200064ec 	.word	0x200064ec
 8007a50:	200104ec 	.word	0x200104ec
 8007a54:	200104f4 	.word	0x200104f4
 8007a58:	200104fc 	.word	0x200104fc
 8007a5c:	200104f8 	.word	0x200104f8
 8007a60:	20010508 	.word	0x20010508

08007a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a6c:	4b28      	ldr	r3, [pc, #160]	@ (8007b10 <prvInsertBlockIntoFreeList+0xac>)
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	e002      	b.n	8007a78 <prvInsertBlockIntoFreeList+0x14>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d8f7      	bhi.n	8007a72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d108      	bne.n	8007aa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	441a      	add	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d118      	bne.n	8007aec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4b15      	ldr	r3, [pc, #84]	@ (8007b14 <prvInsertBlockIntoFreeList+0xb0>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d00d      	beq.n	8007ae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	441a      	add	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e008      	b.n	8007af4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8007b14 <prvInsertBlockIntoFreeList+0xb0>)
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e003      	b.n	8007af4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d002      	beq.n	8007b02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b02:	bf00      	nop
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	200104ec 	.word	0x200104ec
 8007b14:	200104f4 	.word	0x200104f4

08007b18 <siprintf>:
 8007b18:	b40e      	push	{r1, r2, r3}
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	b09d      	sub	sp, #116	@ 0x74
 8007b1e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007b20:	9002      	str	r0, [sp, #8]
 8007b22:	9006      	str	r0, [sp, #24]
 8007b24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b28:	480a      	ldr	r0, [pc, #40]	@ (8007b54 <siprintf+0x3c>)
 8007b2a:	9107      	str	r1, [sp, #28]
 8007b2c:	9104      	str	r1, [sp, #16]
 8007b2e:	490a      	ldr	r1, [pc, #40]	@ (8007b58 <siprintf+0x40>)
 8007b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b34:	9105      	str	r1, [sp, #20]
 8007b36:	2400      	movs	r4, #0
 8007b38:	a902      	add	r1, sp, #8
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007b40:	f000 f9a2 	bl	8007e88 <_svfiprintf_r>
 8007b44:	9b02      	ldr	r3, [sp, #8]
 8007b46:	701c      	strb	r4, [r3, #0]
 8007b48:	b01d      	add	sp, #116	@ 0x74
 8007b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b4e:	b003      	add	sp, #12
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20000080 	.word	0x20000080
 8007b58:	ffff0208 	.word	0xffff0208

08007b5c <memset>:
 8007b5c:	4402      	add	r2, r0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d100      	bne.n	8007b66 <memset+0xa>
 8007b64:	4770      	bx	lr
 8007b66:	f803 1b01 	strb.w	r1, [r3], #1
 8007b6a:	e7f9      	b.n	8007b60 <memset+0x4>

08007b6c <__errno>:
 8007b6c:	4b01      	ldr	r3, [pc, #4]	@ (8007b74 <__errno+0x8>)
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000080 	.word	0x20000080

08007b78 <__libc_init_array>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8007bb0 <__libc_init_array+0x38>)
 8007b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8007bb4 <__libc_init_array+0x3c>)
 8007b7e:	1b64      	subs	r4, r4, r5
 8007b80:	10a4      	asrs	r4, r4, #2
 8007b82:	2600      	movs	r6, #0
 8007b84:	42a6      	cmp	r6, r4
 8007b86:	d109      	bne.n	8007b9c <__libc_init_array+0x24>
 8007b88:	4d0b      	ldr	r5, [pc, #44]	@ (8007bb8 <__libc_init_array+0x40>)
 8007b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8007bbc <__libc_init_array+0x44>)
 8007b8c:	f000 fc64 	bl	8008458 <_init>
 8007b90:	1b64      	subs	r4, r4, r5
 8007b92:	10a4      	asrs	r4, r4, #2
 8007b94:	2600      	movs	r6, #0
 8007b96:	42a6      	cmp	r6, r4
 8007b98:	d105      	bne.n	8007ba6 <__libc_init_array+0x2e>
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
 8007b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba0:	4798      	blx	r3
 8007ba2:	3601      	adds	r6, #1
 8007ba4:	e7ee      	b.n	8007b84 <__libc_init_array+0xc>
 8007ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007baa:	4798      	blx	r3
 8007bac:	3601      	adds	r6, #1
 8007bae:	e7f2      	b.n	8007b96 <__libc_init_array+0x1e>
 8007bb0:	080085f4 	.word	0x080085f4
 8007bb4:	080085f4 	.word	0x080085f4
 8007bb8:	080085f4 	.word	0x080085f4
 8007bbc:	080085f8 	.word	0x080085f8

08007bc0 <__retarget_lock_acquire_recursive>:
 8007bc0:	4770      	bx	lr

08007bc2 <__retarget_lock_release_recursive>:
 8007bc2:	4770      	bx	lr

08007bc4 <memcpy>:
 8007bc4:	440a      	add	r2, r1
 8007bc6:	4291      	cmp	r1, r2
 8007bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bcc:	d100      	bne.n	8007bd0 <memcpy+0xc>
 8007bce:	4770      	bx	lr
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bda:	4291      	cmp	r1, r2
 8007bdc:	d1f9      	bne.n	8007bd2 <memcpy+0xe>
 8007bde:	bd10      	pop	{r4, pc}

08007be0 <_free_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4605      	mov	r5, r0
 8007be4:	2900      	cmp	r1, #0
 8007be6:	d041      	beq.n	8007c6c <_free_r+0x8c>
 8007be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bec:	1f0c      	subs	r4, r1, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	bfb8      	it	lt
 8007bf2:	18e4      	addlt	r4, r4, r3
 8007bf4:	f000 f8e0 	bl	8007db8 <__malloc_lock>
 8007bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c70 <_free_r+0x90>)
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	b933      	cbnz	r3, 8007c0c <_free_r+0x2c>
 8007bfe:	6063      	str	r3, [r4, #4]
 8007c00:	6014      	str	r4, [r2, #0]
 8007c02:	4628      	mov	r0, r5
 8007c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c08:	f000 b8dc 	b.w	8007dc4 <__malloc_unlock>
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	d908      	bls.n	8007c22 <_free_r+0x42>
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	1821      	adds	r1, r4, r0
 8007c14:	428b      	cmp	r3, r1
 8007c16:	bf01      	itttt	eq
 8007c18:	6819      	ldreq	r1, [r3, #0]
 8007c1a:	685b      	ldreq	r3, [r3, #4]
 8007c1c:	1809      	addeq	r1, r1, r0
 8007c1e:	6021      	streq	r1, [r4, #0]
 8007c20:	e7ed      	b.n	8007bfe <_free_r+0x1e>
 8007c22:	461a      	mov	r2, r3
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	b10b      	cbz	r3, 8007c2c <_free_r+0x4c>
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	d9fa      	bls.n	8007c22 <_free_r+0x42>
 8007c2c:	6811      	ldr	r1, [r2, #0]
 8007c2e:	1850      	adds	r0, r2, r1
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d10b      	bne.n	8007c4c <_free_r+0x6c>
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	4401      	add	r1, r0
 8007c38:	1850      	adds	r0, r2, r1
 8007c3a:	4283      	cmp	r3, r0
 8007c3c:	6011      	str	r1, [r2, #0]
 8007c3e:	d1e0      	bne.n	8007c02 <_free_r+0x22>
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	6053      	str	r3, [r2, #4]
 8007c46:	4408      	add	r0, r1
 8007c48:	6010      	str	r0, [r2, #0]
 8007c4a:	e7da      	b.n	8007c02 <_free_r+0x22>
 8007c4c:	d902      	bls.n	8007c54 <_free_r+0x74>
 8007c4e:	230c      	movs	r3, #12
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	e7d6      	b.n	8007c02 <_free_r+0x22>
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	1821      	adds	r1, r4, r0
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	bf04      	itt	eq
 8007c5c:	6819      	ldreq	r1, [r3, #0]
 8007c5e:	685b      	ldreq	r3, [r3, #4]
 8007c60:	6063      	str	r3, [r4, #4]
 8007c62:	bf04      	itt	eq
 8007c64:	1809      	addeq	r1, r1, r0
 8007c66:	6021      	streq	r1, [r4, #0]
 8007c68:	6054      	str	r4, [r2, #4]
 8007c6a:	e7ca      	b.n	8007c02 <_free_r+0x22>
 8007c6c:	bd38      	pop	{r3, r4, r5, pc}
 8007c6e:	bf00      	nop
 8007c70:	20010650 	.word	0x20010650

08007c74 <sbrk_aligned>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	4e0f      	ldr	r6, [pc, #60]	@ (8007cb4 <sbrk_aligned+0x40>)
 8007c78:	460c      	mov	r4, r1
 8007c7a:	6831      	ldr	r1, [r6, #0]
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	b911      	cbnz	r1, 8007c86 <sbrk_aligned+0x12>
 8007c80:	f000 fba4 	bl	80083cc <_sbrk_r>
 8007c84:	6030      	str	r0, [r6, #0]
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 fb9f 	bl	80083cc <_sbrk_r>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	d103      	bne.n	8007c9a <sbrk_aligned+0x26>
 8007c92:	f04f 34ff 	mov.w	r4, #4294967295
 8007c96:	4620      	mov	r0, r4
 8007c98:	bd70      	pop	{r4, r5, r6, pc}
 8007c9a:	1cc4      	adds	r4, r0, #3
 8007c9c:	f024 0403 	bic.w	r4, r4, #3
 8007ca0:	42a0      	cmp	r0, r4
 8007ca2:	d0f8      	beq.n	8007c96 <sbrk_aligned+0x22>
 8007ca4:	1a21      	subs	r1, r4, r0
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 fb90 	bl	80083cc <_sbrk_r>
 8007cac:	3001      	adds	r0, #1
 8007cae:	d1f2      	bne.n	8007c96 <sbrk_aligned+0x22>
 8007cb0:	e7ef      	b.n	8007c92 <sbrk_aligned+0x1e>
 8007cb2:	bf00      	nop
 8007cb4:	2001064c 	.word	0x2001064c

08007cb8 <_malloc_r>:
 8007cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cbc:	1ccd      	adds	r5, r1, #3
 8007cbe:	f025 0503 	bic.w	r5, r5, #3
 8007cc2:	3508      	adds	r5, #8
 8007cc4:	2d0c      	cmp	r5, #12
 8007cc6:	bf38      	it	cc
 8007cc8:	250c      	movcc	r5, #12
 8007cca:	2d00      	cmp	r5, #0
 8007ccc:	4606      	mov	r6, r0
 8007cce:	db01      	blt.n	8007cd4 <_malloc_r+0x1c>
 8007cd0:	42a9      	cmp	r1, r5
 8007cd2:	d904      	bls.n	8007cde <_malloc_r+0x26>
 8007cd4:	230c      	movs	r3, #12
 8007cd6:	6033      	str	r3, [r6, #0]
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007db4 <_malloc_r+0xfc>
 8007ce2:	f000 f869 	bl	8007db8 <__malloc_lock>
 8007ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8007cea:	461c      	mov	r4, r3
 8007cec:	bb44      	cbnz	r4, 8007d40 <_malloc_r+0x88>
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7ff ffbf 	bl	8007c74 <sbrk_aligned>
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	d158      	bne.n	8007dae <_malloc_r+0xf6>
 8007cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8007d00:	4627      	mov	r7, r4
 8007d02:	2f00      	cmp	r7, #0
 8007d04:	d143      	bne.n	8007d8e <_malloc_r+0xd6>
 8007d06:	2c00      	cmp	r4, #0
 8007d08:	d04b      	beq.n	8007da2 <_malloc_r+0xea>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4630      	mov	r0, r6
 8007d10:	eb04 0903 	add.w	r9, r4, r3
 8007d14:	f000 fb5a 	bl	80083cc <_sbrk_r>
 8007d18:	4581      	cmp	r9, r0
 8007d1a:	d142      	bne.n	8007da2 <_malloc_r+0xea>
 8007d1c:	6821      	ldr	r1, [r4, #0]
 8007d1e:	1a6d      	subs	r5, r5, r1
 8007d20:	4629      	mov	r1, r5
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7ff ffa6 	bl	8007c74 <sbrk_aligned>
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d03a      	beq.n	8007da2 <_malloc_r+0xea>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	442b      	add	r3, r5
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	f8d8 3000 	ldr.w	r3, [r8]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	bb62      	cbnz	r2, 8007d94 <_malloc_r+0xdc>
 8007d3a:	f8c8 7000 	str.w	r7, [r8]
 8007d3e:	e00f      	b.n	8007d60 <_malloc_r+0xa8>
 8007d40:	6822      	ldr	r2, [r4, #0]
 8007d42:	1b52      	subs	r2, r2, r5
 8007d44:	d420      	bmi.n	8007d88 <_malloc_r+0xd0>
 8007d46:	2a0b      	cmp	r2, #11
 8007d48:	d917      	bls.n	8007d7a <_malloc_r+0xc2>
 8007d4a:	1961      	adds	r1, r4, r5
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	6025      	str	r5, [r4, #0]
 8007d50:	bf18      	it	ne
 8007d52:	6059      	strne	r1, [r3, #4]
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	bf08      	it	eq
 8007d58:	f8c8 1000 	streq.w	r1, [r8]
 8007d5c:	5162      	str	r2, [r4, r5]
 8007d5e:	604b      	str	r3, [r1, #4]
 8007d60:	4630      	mov	r0, r6
 8007d62:	f000 f82f 	bl	8007dc4 <__malloc_unlock>
 8007d66:	f104 000b 	add.w	r0, r4, #11
 8007d6a:	1d23      	adds	r3, r4, #4
 8007d6c:	f020 0007 	bic.w	r0, r0, #7
 8007d70:	1ac2      	subs	r2, r0, r3
 8007d72:	bf1c      	itt	ne
 8007d74:	1a1b      	subne	r3, r3, r0
 8007d76:	50a3      	strne	r3, [r4, r2]
 8007d78:	e7af      	b.n	8007cda <_malloc_r+0x22>
 8007d7a:	6862      	ldr	r2, [r4, #4]
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	bf0c      	ite	eq
 8007d80:	f8c8 2000 	streq.w	r2, [r8]
 8007d84:	605a      	strne	r2, [r3, #4]
 8007d86:	e7eb      	b.n	8007d60 <_malloc_r+0xa8>
 8007d88:	4623      	mov	r3, r4
 8007d8a:	6864      	ldr	r4, [r4, #4]
 8007d8c:	e7ae      	b.n	8007cec <_malloc_r+0x34>
 8007d8e:	463c      	mov	r4, r7
 8007d90:	687f      	ldr	r7, [r7, #4]
 8007d92:	e7b6      	b.n	8007d02 <_malloc_r+0x4a>
 8007d94:	461a      	mov	r2, r3
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	d1fb      	bne.n	8007d94 <_malloc_r+0xdc>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	6053      	str	r3, [r2, #4]
 8007da0:	e7de      	b.n	8007d60 <_malloc_r+0xa8>
 8007da2:	230c      	movs	r3, #12
 8007da4:	6033      	str	r3, [r6, #0]
 8007da6:	4630      	mov	r0, r6
 8007da8:	f000 f80c 	bl	8007dc4 <__malloc_unlock>
 8007dac:	e794      	b.n	8007cd8 <_malloc_r+0x20>
 8007dae:	6005      	str	r5, [r0, #0]
 8007db0:	e7d6      	b.n	8007d60 <_malloc_r+0xa8>
 8007db2:	bf00      	nop
 8007db4:	20010650 	.word	0x20010650

08007db8 <__malloc_lock>:
 8007db8:	4801      	ldr	r0, [pc, #4]	@ (8007dc0 <__malloc_lock+0x8>)
 8007dba:	f7ff bf01 	b.w	8007bc0 <__retarget_lock_acquire_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	20010648 	.word	0x20010648

08007dc4 <__malloc_unlock>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	@ (8007dcc <__malloc_unlock+0x8>)
 8007dc6:	f7ff befc 	b.w	8007bc2 <__retarget_lock_release_recursive>
 8007dca:	bf00      	nop
 8007dcc:	20010648 	.word	0x20010648

08007dd0 <__ssputs_r>:
 8007dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	688e      	ldr	r6, [r1, #8]
 8007dd6:	461f      	mov	r7, r3
 8007dd8:	42be      	cmp	r6, r7
 8007dda:	680b      	ldr	r3, [r1, #0]
 8007ddc:	4682      	mov	sl, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	4690      	mov	r8, r2
 8007de2:	d82d      	bhi.n	8007e40 <__ssputs_r+0x70>
 8007de4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007de8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007dec:	d026      	beq.n	8007e3c <__ssputs_r+0x6c>
 8007dee:	6965      	ldr	r5, [r4, #20]
 8007df0:	6909      	ldr	r1, [r1, #16]
 8007df2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007df6:	eba3 0901 	sub.w	r9, r3, r1
 8007dfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dfe:	1c7b      	adds	r3, r7, #1
 8007e00:	444b      	add	r3, r9
 8007e02:	106d      	asrs	r5, r5, #1
 8007e04:	429d      	cmp	r5, r3
 8007e06:	bf38      	it	cc
 8007e08:	461d      	movcc	r5, r3
 8007e0a:	0553      	lsls	r3, r2, #21
 8007e0c:	d527      	bpl.n	8007e5e <__ssputs_r+0x8e>
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f7ff ff52 	bl	8007cb8 <_malloc_r>
 8007e14:	4606      	mov	r6, r0
 8007e16:	b360      	cbz	r0, 8007e72 <__ssputs_r+0xa2>
 8007e18:	6921      	ldr	r1, [r4, #16]
 8007e1a:	464a      	mov	r2, r9
 8007e1c:	f7ff fed2 	bl	8007bc4 <memcpy>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	6126      	str	r6, [r4, #16]
 8007e2e:	6165      	str	r5, [r4, #20]
 8007e30:	444e      	add	r6, r9
 8007e32:	eba5 0509 	sub.w	r5, r5, r9
 8007e36:	6026      	str	r6, [r4, #0]
 8007e38:	60a5      	str	r5, [r4, #8]
 8007e3a:	463e      	mov	r6, r7
 8007e3c:	42be      	cmp	r6, r7
 8007e3e:	d900      	bls.n	8007e42 <__ssputs_r+0x72>
 8007e40:	463e      	mov	r6, r7
 8007e42:	6820      	ldr	r0, [r4, #0]
 8007e44:	4632      	mov	r2, r6
 8007e46:	4641      	mov	r1, r8
 8007e48:	f000 faa6 	bl	8008398 <memmove>
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	1b9b      	subs	r3, r3, r6
 8007e50:	60a3      	str	r3, [r4, #8]
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	4433      	add	r3, r6
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5e:	462a      	mov	r2, r5
 8007e60:	f000 fac4 	bl	80083ec <_realloc_r>
 8007e64:	4606      	mov	r6, r0
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d1e0      	bne.n	8007e2c <__ssputs_r+0x5c>
 8007e6a:	6921      	ldr	r1, [r4, #16]
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	f7ff feb7 	bl	8007be0 <_free_r>
 8007e72:	230c      	movs	r3, #12
 8007e74:	f8ca 3000 	str.w	r3, [sl]
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	e7e9      	b.n	8007e5a <__ssputs_r+0x8a>
	...

08007e88 <_svfiprintf_r>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	4698      	mov	r8, r3
 8007e8e:	898b      	ldrh	r3, [r1, #12]
 8007e90:	061b      	lsls	r3, r3, #24
 8007e92:	b09d      	sub	sp, #116	@ 0x74
 8007e94:	4607      	mov	r7, r0
 8007e96:	460d      	mov	r5, r1
 8007e98:	4614      	mov	r4, r2
 8007e9a:	d510      	bpl.n	8007ebe <_svfiprintf_r+0x36>
 8007e9c:	690b      	ldr	r3, [r1, #16]
 8007e9e:	b973      	cbnz	r3, 8007ebe <_svfiprintf_r+0x36>
 8007ea0:	2140      	movs	r1, #64	@ 0x40
 8007ea2:	f7ff ff09 	bl	8007cb8 <_malloc_r>
 8007ea6:	6028      	str	r0, [r5, #0]
 8007ea8:	6128      	str	r0, [r5, #16]
 8007eaa:	b930      	cbnz	r0, 8007eba <_svfiprintf_r+0x32>
 8007eac:	230c      	movs	r3, #12
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	b01d      	add	sp, #116	@ 0x74
 8007eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eba:	2340      	movs	r3, #64	@ 0x40
 8007ebc:	616b      	str	r3, [r5, #20]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec2:	2320      	movs	r3, #32
 8007ec4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ec8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ecc:	2330      	movs	r3, #48	@ 0x30
 8007ece:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800806c <_svfiprintf_r+0x1e4>
 8007ed2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ed6:	f04f 0901 	mov.w	r9, #1
 8007eda:	4623      	mov	r3, r4
 8007edc:	469a      	mov	sl, r3
 8007ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ee2:	b10a      	cbz	r2, 8007ee8 <_svfiprintf_r+0x60>
 8007ee4:	2a25      	cmp	r2, #37	@ 0x25
 8007ee6:	d1f9      	bne.n	8007edc <_svfiprintf_r+0x54>
 8007ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8007eec:	d00b      	beq.n	8007f06 <_svfiprintf_r+0x7e>
 8007eee:	465b      	mov	r3, fp
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff ff6b 	bl	8007dd0 <__ssputs_r>
 8007efa:	3001      	adds	r0, #1
 8007efc:	f000 80a7 	beq.w	800804e <_svfiprintf_r+0x1c6>
 8007f00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f02:	445a      	add	r2, fp
 8007f04:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f06:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 809f 	beq.w	800804e <_svfiprintf_r+0x1c6>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295
 8007f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f1a:	f10a 0a01 	add.w	sl, sl, #1
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	9307      	str	r3, [sp, #28]
 8007f22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f26:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f28:	4654      	mov	r4, sl
 8007f2a:	2205      	movs	r2, #5
 8007f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f30:	484e      	ldr	r0, [pc, #312]	@ (800806c <_svfiprintf_r+0x1e4>)
 8007f32:	f7f8 f955 	bl	80001e0 <memchr>
 8007f36:	9a04      	ldr	r2, [sp, #16]
 8007f38:	b9d8      	cbnz	r0, 8007f72 <_svfiprintf_r+0xea>
 8007f3a:	06d0      	lsls	r0, r2, #27
 8007f3c:	bf44      	itt	mi
 8007f3e:	2320      	movmi	r3, #32
 8007f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f44:	0711      	lsls	r1, r2, #28
 8007f46:	bf44      	itt	mi
 8007f48:	232b      	movmi	r3, #43	@ 0x2b
 8007f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f54:	d015      	beq.n	8007f82 <_svfiprintf_r+0xfa>
 8007f56:	9a07      	ldr	r2, [sp, #28]
 8007f58:	4654      	mov	r4, sl
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	f04f 0c0a 	mov.w	ip, #10
 8007f60:	4621      	mov	r1, r4
 8007f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f66:	3b30      	subs	r3, #48	@ 0x30
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d94b      	bls.n	8008004 <_svfiprintf_r+0x17c>
 8007f6c:	b1b0      	cbz	r0, 8007f9c <_svfiprintf_r+0x114>
 8007f6e:	9207      	str	r2, [sp, #28]
 8007f70:	e014      	b.n	8007f9c <_svfiprintf_r+0x114>
 8007f72:	eba0 0308 	sub.w	r3, r0, r8
 8007f76:	fa09 f303 	lsl.w	r3, r9, r3
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	46a2      	mov	sl, r4
 8007f80:	e7d2      	b.n	8007f28 <_svfiprintf_r+0xa0>
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	1d19      	adds	r1, r3, #4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	9103      	str	r1, [sp, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bfbb      	ittet	lt
 8007f8e:	425b      	neglt	r3, r3
 8007f90:	f042 0202 	orrlt.w	r2, r2, #2
 8007f94:	9307      	strge	r3, [sp, #28]
 8007f96:	9307      	strlt	r3, [sp, #28]
 8007f98:	bfb8      	it	lt
 8007f9a:	9204      	strlt	r2, [sp, #16]
 8007f9c:	7823      	ldrb	r3, [r4, #0]
 8007f9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fa0:	d10a      	bne.n	8007fb8 <_svfiprintf_r+0x130>
 8007fa2:	7863      	ldrb	r3, [r4, #1]
 8007fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fa6:	d132      	bne.n	800800e <_svfiprintf_r+0x186>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	1d1a      	adds	r2, r3, #4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	9203      	str	r2, [sp, #12]
 8007fb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fb4:	3402      	adds	r4, #2
 8007fb6:	9305      	str	r3, [sp, #20]
 8007fb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800807c <_svfiprintf_r+0x1f4>
 8007fbc:	7821      	ldrb	r1, [r4, #0]
 8007fbe:	2203      	movs	r2, #3
 8007fc0:	4650      	mov	r0, sl
 8007fc2:	f7f8 f90d 	bl	80001e0 <memchr>
 8007fc6:	b138      	cbz	r0, 8007fd8 <_svfiprintf_r+0x150>
 8007fc8:	9b04      	ldr	r3, [sp, #16]
 8007fca:	eba0 000a 	sub.w	r0, r0, sl
 8007fce:	2240      	movs	r2, #64	@ 0x40
 8007fd0:	4082      	lsls	r2, r0
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	3401      	adds	r4, #1
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fdc:	4824      	ldr	r0, [pc, #144]	@ (8008070 <_svfiprintf_r+0x1e8>)
 8007fde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fe2:	2206      	movs	r2, #6
 8007fe4:	f7f8 f8fc 	bl	80001e0 <memchr>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d036      	beq.n	800805a <_svfiprintf_r+0x1d2>
 8007fec:	4b21      	ldr	r3, [pc, #132]	@ (8008074 <_svfiprintf_r+0x1ec>)
 8007fee:	bb1b      	cbnz	r3, 8008038 <_svfiprintf_r+0x1b0>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	3307      	adds	r3, #7
 8007ff4:	f023 0307 	bic.w	r3, r3, #7
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffe:	4433      	add	r3, r6
 8008000:	9309      	str	r3, [sp, #36]	@ 0x24
 8008002:	e76a      	b.n	8007eda <_svfiprintf_r+0x52>
 8008004:	fb0c 3202 	mla	r2, ip, r2, r3
 8008008:	460c      	mov	r4, r1
 800800a:	2001      	movs	r0, #1
 800800c:	e7a8      	b.n	8007f60 <_svfiprintf_r+0xd8>
 800800e:	2300      	movs	r3, #0
 8008010:	3401      	adds	r4, #1
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	4619      	mov	r1, r3
 8008016:	f04f 0c0a 	mov.w	ip, #10
 800801a:	4620      	mov	r0, r4
 800801c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008020:	3a30      	subs	r2, #48	@ 0x30
 8008022:	2a09      	cmp	r2, #9
 8008024:	d903      	bls.n	800802e <_svfiprintf_r+0x1a6>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0c6      	beq.n	8007fb8 <_svfiprintf_r+0x130>
 800802a:	9105      	str	r1, [sp, #20]
 800802c:	e7c4      	b.n	8007fb8 <_svfiprintf_r+0x130>
 800802e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008032:	4604      	mov	r4, r0
 8008034:	2301      	movs	r3, #1
 8008036:	e7f0      	b.n	800801a <_svfiprintf_r+0x192>
 8008038:	ab03      	add	r3, sp, #12
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	462a      	mov	r2, r5
 800803e:	4b0e      	ldr	r3, [pc, #56]	@ (8008078 <_svfiprintf_r+0x1f0>)
 8008040:	a904      	add	r1, sp, #16
 8008042:	4638      	mov	r0, r7
 8008044:	f3af 8000 	nop.w
 8008048:	1c42      	adds	r2, r0, #1
 800804a:	4606      	mov	r6, r0
 800804c:	d1d6      	bne.n	8007ffc <_svfiprintf_r+0x174>
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	065b      	lsls	r3, r3, #25
 8008052:	f53f af2d 	bmi.w	8007eb0 <_svfiprintf_r+0x28>
 8008056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008058:	e72c      	b.n	8007eb4 <_svfiprintf_r+0x2c>
 800805a:	ab03      	add	r3, sp, #12
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	462a      	mov	r2, r5
 8008060:	4b05      	ldr	r3, [pc, #20]	@ (8008078 <_svfiprintf_r+0x1f0>)
 8008062:	a904      	add	r1, sp, #16
 8008064:	4638      	mov	r0, r7
 8008066:	f000 f879 	bl	800815c <_printf_i>
 800806a:	e7ed      	b.n	8008048 <_svfiprintf_r+0x1c0>
 800806c:	080085b8 	.word	0x080085b8
 8008070:	080085c2 	.word	0x080085c2
 8008074:	00000000 	.word	0x00000000
 8008078:	08007dd1 	.word	0x08007dd1
 800807c:	080085be 	.word	0x080085be

08008080 <_printf_common>:
 8008080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	4616      	mov	r6, r2
 8008086:	4698      	mov	r8, r3
 8008088:	688a      	ldr	r2, [r1, #8]
 800808a:	690b      	ldr	r3, [r1, #16]
 800808c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008090:	4293      	cmp	r3, r2
 8008092:	bfb8      	it	lt
 8008094:	4613      	movlt	r3, r2
 8008096:	6033      	str	r3, [r6, #0]
 8008098:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800809c:	4607      	mov	r7, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	b10a      	cbz	r2, 80080a6 <_printf_common+0x26>
 80080a2:	3301      	adds	r3, #1
 80080a4:	6033      	str	r3, [r6, #0]
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	0699      	lsls	r1, r3, #26
 80080aa:	bf42      	ittt	mi
 80080ac:	6833      	ldrmi	r3, [r6, #0]
 80080ae:	3302      	addmi	r3, #2
 80080b0:	6033      	strmi	r3, [r6, #0]
 80080b2:	6825      	ldr	r5, [r4, #0]
 80080b4:	f015 0506 	ands.w	r5, r5, #6
 80080b8:	d106      	bne.n	80080c8 <_printf_common+0x48>
 80080ba:	f104 0a19 	add.w	sl, r4, #25
 80080be:	68e3      	ldr	r3, [r4, #12]
 80080c0:	6832      	ldr	r2, [r6, #0]
 80080c2:	1a9b      	subs	r3, r3, r2
 80080c4:	42ab      	cmp	r3, r5
 80080c6:	dc26      	bgt.n	8008116 <_printf_common+0x96>
 80080c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080cc:	6822      	ldr	r2, [r4, #0]
 80080ce:	3b00      	subs	r3, #0
 80080d0:	bf18      	it	ne
 80080d2:	2301      	movne	r3, #1
 80080d4:	0692      	lsls	r2, r2, #26
 80080d6:	d42b      	bmi.n	8008130 <_printf_common+0xb0>
 80080d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080dc:	4641      	mov	r1, r8
 80080de:	4638      	mov	r0, r7
 80080e0:	47c8      	blx	r9
 80080e2:	3001      	adds	r0, #1
 80080e4:	d01e      	beq.n	8008124 <_printf_common+0xa4>
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	6922      	ldr	r2, [r4, #16]
 80080ea:	f003 0306 	and.w	r3, r3, #6
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	bf02      	ittt	eq
 80080f2:	68e5      	ldreq	r5, [r4, #12]
 80080f4:	6833      	ldreq	r3, [r6, #0]
 80080f6:	1aed      	subeq	r5, r5, r3
 80080f8:	68a3      	ldr	r3, [r4, #8]
 80080fa:	bf0c      	ite	eq
 80080fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008100:	2500      	movne	r5, #0
 8008102:	4293      	cmp	r3, r2
 8008104:	bfc4      	itt	gt
 8008106:	1a9b      	subgt	r3, r3, r2
 8008108:	18ed      	addgt	r5, r5, r3
 800810a:	2600      	movs	r6, #0
 800810c:	341a      	adds	r4, #26
 800810e:	42b5      	cmp	r5, r6
 8008110:	d11a      	bne.n	8008148 <_printf_common+0xc8>
 8008112:	2000      	movs	r0, #0
 8008114:	e008      	b.n	8008128 <_printf_common+0xa8>
 8008116:	2301      	movs	r3, #1
 8008118:	4652      	mov	r2, sl
 800811a:	4641      	mov	r1, r8
 800811c:	4638      	mov	r0, r7
 800811e:	47c8      	blx	r9
 8008120:	3001      	adds	r0, #1
 8008122:	d103      	bne.n	800812c <_printf_common+0xac>
 8008124:	f04f 30ff 	mov.w	r0, #4294967295
 8008128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812c:	3501      	adds	r5, #1
 800812e:	e7c6      	b.n	80080be <_printf_common+0x3e>
 8008130:	18e1      	adds	r1, r4, r3
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	2030      	movs	r0, #48	@ 0x30
 8008136:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800813a:	4422      	add	r2, r4
 800813c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008140:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008144:	3302      	adds	r3, #2
 8008146:	e7c7      	b.n	80080d8 <_printf_common+0x58>
 8008148:	2301      	movs	r3, #1
 800814a:	4622      	mov	r2, r4
 800814c:	4641      	mov	r1, r8
 800814e:	4638      	mov	r0, r7
 8008150:	47c8      	blx	r9
 8008152:	3001      	adds	r0, #1
 8008154:	d0e6      	beq.n	8008124 <_printf_common+0xa4>
 8008156:	3601      	adds	r6, #1
 8008158:	e7d9      	b.n	800810e <_printf_common+0x8e>
	...

0800815c <_printf_i>:
 800815c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008160:	7e0f      	ldrb	r7, [r1, #24]
 8008162:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008164:	2f78      	cmp	r7, #120	@ 0x78
 8008166:	4691      	mov	r9, r2
 8008168:	4680      	mov	r8, r0
 800816a:	460c      	mov	r4, r1
 800816c:	469a      	mov	sl, r3
 800816e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008172:	d807      	bhi.n	8008184 <_printf_i+0x28>
 8008174:	2f62      	cmp	r7, #98	@ 0x62
 8008176:	d80a      	bhi.n	800818e <_printf_i+0x32>
 8008178:	2f00      	cmp	r7, #0
 800817a:	f000 80d1 	beq.w	8008320 <_printf_i+0x1c4>
 800817e:	2f58      	cmp	r7, #88	@ 0x58
 8008180:	f000 80b8 	beq.w	80082f4 <_printf_i+0x198>
 8008184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008188:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800818c:	e03a      	b.n	8008204 <_printf_i+0xa8>
 800818e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008192:	2b15      	cmp	r3, #21
 8008194:	d8f6      	bhi.n	8008184 <_printf_i+0x28>
 8008196:	a101      	add	r1, pc, #4	@ (adr r1, 800819c <_printf_i+0x40>)
 8008198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800819c:	080081f5 	.word	0x080081f5
 80081a0:	08008209 	.word	0x08008209
 80081a4:	08008185 	.word	0x08008185
 80081a8:	08008185 	.word	0x08008185
 80081ac:	08008185 	.word	0x08008185
 80081b0:	08008185 	.word	0x08008185
 80081b4:	08008209 	.word	0x08008209
 80081b8:	08008185 	.word	0x08008185
 80081bc:	08008185 	.word	0x08008185
 80081c0:	08008185 	.word	0x08008185
 80081c4:	08008185 	.word	0x08008185
 80081c8:	08008307 	.word	0x08008307
 80081cc:	08008233 	.word	0x08008233
 80081d0:	080082c1 	.word	0x080082c1
 80081d4:	08008185 	.word	0x08008185
 80081d8:	08008185 	.word	0x08008185
 80081dc:	08008329 	.word	0x08008329
 80081e0:	08008185 	.word	0x08008185
 80081e4:	08008233 	.word	0x08008233
 80081e8:	08008185 	.word	0x08008185
 80081ec:	08008185 	.word	0x08008185
 80081f0:	080082c9 	.word	0x080082c9
 80081f4:	6833      	ldr	r3, [r6, #0]
 80081f6:	1d1a      	adds	r2, r3, #4
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6032      	str	r2, [r6, #0]
 80081fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008200:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008204:	2301      	movs	r3, #1
 8008206:	e09c      	b.n	8008342 <_printf_i+0x1e6>
 8008208:	6833      	ldr	r3, [r6, #0]
 800820a:	6820      	ldr	r0, [r4, #0]
 800820c:	1d19      	adds	r1, r3, #4
 800820e:	6031      	str	r1, [r6, #0]
 8008210:	0606      	lsls	r6, r0, #24
 8008212:	d501      	bpl.n	8008218 <_printf_i+0xbc>
 8008214:	681d      	ldr	r5, [r3, #0]
 8008216:	e003      	b.n	8008220 <_printf_i+0xc4>
 8008218:	0645      	lsls	r5, r0, #25
 800821a:	d5fb      	bpl.n	8008214 <_printf_i+0xb8>
 800821c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008220:	2d00      	cmp	r5, #0
 8008222:	da03      	bge.n	800822c <_printf_i+0xd0>
 8008224:	232d      	movs	r3, #45	@ 0x2d
 8008226:	426d      	negs	r5, r5
 8008228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800822c:	4858      	ldr	r0, [pc, #352]	@ (8008390 <_printf_i+0x234>)
 800822e:	230a      	movs	r3, #10
 8008230:	e011      	b.n	8008256 <_printf_i+0xfa>
 8008232:	6821      	ldr	r1, [r4, #0]
 8008234:	6833      	ldr	r3, [r6, #0]
 8008236:	0608      	lsls	r0, r1, #24
 8008238:	f853 5b04 	ldr.w	r5, [r3], #4
 800823c:	d402      	bmi.n	8008244 <_printf_i+0xe8>
 800823e:	0649      	lsls	r1, r1, #25
 8008240:	bf48      	it	mi
 8008242:	b2ad      	uxthmi	r5, r5
 8008244:	2f6f      	cmp	r7, #111	@ 0x6f
 8008246:	4852      	ldr	r0, [pc, #328]	@ (8008390 <_printf_i+0x234>)
 8008248:	6033      	str	r3, [r6, #0]
 800824a:	bf14      	ite	ne
 800824c:	230a      	movne	r3, #10
 800824e:	2308      	moveq	r3, #8
 8008250:	2100      	movs	r1, #0
 8008252:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008256:	6866      	ldr	r6, [r4, #4]
 8008258:	60a6      	str	r6, [r4, #8]
 800825a:	2e00      	cmp	r6, #0
 800825c:	db05      	blt.n	800826a <_printf_i+0x10e>
 800825e:	6821      	ldr	r1, [r4, #0]
 8008260:	432e      	orrs	r6, r5
 8008262:	f021 0104 	bic.w	r1, r1, #4
 8008266:	6021      	str	r1, [r4, #0]
 8008268:	d04b      	beq.n	8008302 <_printf_i+0x1a6>
 800826a:	4616      	mov	r6, r2
 800826c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008270:	fb03 5711 	mls	r7, r3, r1, r5
 8008274:	5dc7      	ldrb	r7, [r0, r7]
 8008276:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800827a:	462f      	mov	r7, r5
 800827c:	42bb      	cmp	r3, r7
 800827e:	460d      	mov	r5, r1
 8008280:	d9f4      	bls.n	800826c <_printf_i+0x110>
 8008282:	2b08      	cmp	r3, #8
 8008284:	d10b      	bne.n	800829e <_printf_i+0x142>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	07df      	lsls	r7, r3, #31
 800828a:	d508      	bpl.n	800829e <_printf_i+0x142>
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	6861      	ldr	r1, [r4, #4]
 8008290:	4299      	cmp	r1, r3
 8008292:	bfde      	ittt	le
 8008294:	2330      	movle	r3, #48	@ 0x30
 8008296:	f806 3c01 	strble.w	r3, [r6, #-1]
 800829a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800829e:	1b92      	subs	r2, r2, r6
 80082a0:	6122      	str	r2, [r4, #16]
 80082a2:	f8cd a000 	str.w	sl, [sp]
 80082a6:	464b      	mov	r3, r9
 80082a8:	aa03      	add	r2, sp, #12
 80082aa:	4621      	mov	r1, r4
 80082ac:	4640      	mov	r0, r8
 80082ae:	f7ff fee7 	bl	8008080 <_printf_common>
 80082b2:	3001      	adds	r0, #1
 80082b4:	d14a      	bne.n	800834c <_printf_i+0x1f0>
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	b004      	add	sp, #16
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	f043 0320 	orr.w	r3, r3, #32
 80082c6:	6023      	str	r3, [r4, #0]
 80082c8:	4832      	ldr	r0, [pc, #200]	@ (8008394 <_printf_i+0x238>)
 80082ca:	2778      	movs	r7, #120	@ 0x78
 80082cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	6831      	ldr	r1, [r6, #0]
 80082d4:	061f      	lsls	r7, r3, #24
 80082d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80082da:	d402      	bmi.n	80082e2 <_printf_i+0x186>
 80082dc:	065f      	lsls	r7, r3, #25
 80082de:	bf48      	it	mi
 80082e0:	b2ad      	uxthmi	r5, r5
 80082e2:	6031      	str	r1, [r6, #0]
 80082e4:	07d9      	lsls	r1, r3, #31
 80082e6:	bf44      	itt	mi
 80082e8:	f043 0320 	orrmi.w	r3, r3, #32
 80082ec:	6023      	strmi	r3, [r4, #0]
 80082ee:	b11d      	cbz	r5, 80082f8 <_printf_i+0x19c>
 80082f0:	2310      	movs	r3, #16
 80082f2:	e7ad      	b.n	8008250 <_printf_i+0xf4>
 80082f4:	4826      	ldr	r0, [pc, #152]	@ (8008390 <_printf_i+0x234>)
 80082f6:	e7e9      	b.n	80082cc <_printf_i+0x170>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	f023 0320 	bic.w	r3, r3, #32
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	e7f6      	b.n	80082f0 <_printf_i+0x194>
 8008302:	4616      	mov	r6, r2
 8008304:	e7bd      	b.n	8008282 <_printf_i+0x126>
 8008306:	6833      	ldr	r3, [r6, #0]
 8008308:	6825      	ldr	r5, [r4, #0]
 800830a:	6961      	ldr	r1, [r4, #20]
 800830c:	1d18      	adds	r0, r3, #4
 800830e:	6030      	str	r0, [r6, #0]
 8008310:	062e      	lsls	r6, r5, #24
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	d501      	bpl.n	800831a <_printf_i+0x1be>
 8008316:	6019      	str	r1, [r3, #0]
 8008318:	e002      	b.n	8008320 <_printf_i+0x1c4>
 800831a:	0668      	lsls	r0, r5, #25
 800831c:	d5fb      	bpl.n	8008316 <_printf_i+0x1ba>
 800831e:	8019      	strh	r1, [r3, #0]
 8008320:	2300      	movs	r3, #0
 8008322:	6123      	str	r3, [r4, #16]
 8008324:	4616      	mov	r6, r2
 8008326:	e7bc      	b.n	80082a2 <_printf_i+0x146>
 8008328:	6833      	ldr	r3, [r6, #0]
 800832a:	1d1a      	adds	r2, r3, #4
 800832c:	6032      	str	r2, [r6, #0]
 800832e:	681e      	ldr	r6, [r3, #0]
 8008330:	6862      	ldr	r2, [r4, #4]
 8008332:	2100      	movs	r1, #0
 8008334:	4630      	mov	r0, r6
 8008336:	f7f7 ff53 	bl	80001e0 <memchr>
 800833a:	b108      	cbz	r0, 8008340 <_printf_i+0x1e4>
 800833c:	1b80      	subs	r0, r0, r6
 800833e:	6060      	str	r0, [r4, #4]
 8008340:	6863      	ldr	r3, [r4, #4]
 8008342:	6123      	str	r3, [r4, #16]
 8008344:	2300      	movs	r3, #0
 8008346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800834a:	e7aa      	b.n	80082a2 <_printf_i+0x146>
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	4632      	mov	r2, r6
 8008350:	4649      	mov	r1, r9
 8008352:	4640      	mov	r0, r8
 8008354:	47d0      	blx	sl
 8008356:	3001      	adds	r0, #1
 8008358:	d0ad      	beq.n	80082b6 <_printf_i+0x15a>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	079b      	lsls	r3, r3, #30
 800835e:	d413      	bmi.n	8008388 <_printf_i+0x22c>
 8008360:	68e0      	ldr	r0, [r4, #12]
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	4298      	cmp	r0, r3
 8008366:	bfb8      	it	lt
 8008368:	4618      	movlt	r0, r3
 800836a:	e7a6      	b.n	80082ba <_printf_i+0x15e>
 800836c:	2301      	movs	r3, #1
 800836e:	4632      	mov	r2, r6
 8008370:	4649      	mov	r1, r9
 8008372:	4640      	mov	r0, r8
 8008374:	47d0      	blx	sl
 8008376:	3001      	adds	r0, #1
 8008378:	d09d      	beq.n	80082b6 <_printf_i+0x15a>
 800837a:	3501      	adds	r5, #1
 800837c:	68e3      	ldr	r3, [r4, #12]
 800837e:	9903      	ldr	r1, [sp, #12]
 8008380:	1a5b      	subs	r3, r3, r1
 8008382:	42ab      	cmp	r3, r5
 8008384:	dcf2      	bgt.n	800836c <_printf_i+0x210>
 8008386:	e7eb      	b.n	8008360 <_printf_i+0x204>
 8008388:	2500      	movs	r5, #0
 800838a:	f104 0619 	add.w	r6, r4, #25
 800838e:	e7f5      	b.n	800837c <_printf_i+0x220>
 8008390:	080085c9 	.word	0x080085c9
 8008394:	080085da 	.word	0x080085da

08008398 <memmove>:
 8008398:	4288      	cmp	r0, r1
 800839a:	b510      	push	{r4, lr}
 800839c:	eb01 0402 	add.w	r4, r1, r2
 80083a0:	d902      	bls.n	80083a8 <memmove+0x10>
 80083a2:	4284      	cmp	r4, r0
 80083a4:	4623      	mov	r3, r4
 80083a6:	d807      	bhi.n	80083b8 <memmove+0x20>
 80083a8:	1e43      	subs	r3, r0, #1
 80083aa:	42a1      	cmp	r1, r4
 80083ac:	d008      	beq.n	80083c0 <memmove+0x28>
 80083ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083b6:	e7f8      	b.n	80083aa <memmove+0x12>
 80083b8:	4402      	add	r2, r0
 80083ba:	4601      	mov	r1, r0
 80083bc:	428a      	cmp	r2, r1
 80083be:	d100      	bne.n	80083c2 <memmove+0x2a>
 80083c0:	bd10      	pop	{r4, pc}
 80083c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083ca:	e7f7      	b.n	80083bc <memmove+0x24>

080083cc <_sbrk_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d06      	ldr	r5, [pc, #24]	@ (80083e8 <_sbrk_r+0x1c>)
 80083d0:	2300      	movs	r3, #0
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7f8 fde8 	bl	8000fac <_sbrk>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_sbrk_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_sbrk_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20010644 	.word	0x20010644

080083ec <_realloc_r>:
 80083ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f0:	4607      	mov	r7, r0
 80083f2:	4614      	mov	r4, r2
 80083f4:	460d      	mov	r5, r1
 80083f6:	b921      	cbnz	r1, 8008402 <_realloc_r+0x16>
 80083f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083fc:	4611      	mov	r1, r2
 80083fe:	f7ff bc5b 	b.w	8007cb8 <_malloc_r>
 8008402:	b92a      	cbnz	r2, 8008410 <_realloc_r+0x24>
 8008404:	f7ff fbec 	bl	8007be0 <_free_r>
 8008408:	4625      	mov	r5, r4
 800840a:	4628      	mov	r0, r5
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008410:	f000 f81a 	bl	8008448 <_malloc_usable_size_r>
 8008414:	4284      	cmp	r4, r0
 8008416:	4606      	mov	r6, r0
 8008418:	d802      	bhi.n	8008420 <_realloc_r+0x34>
 800841a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800841e:	d8f4      	bhi.n	800840a <_realloc_r+0x1e>
 8008420:	4621      	mov	r1, r4
 8008422:	4638      	mov	r0, r7
 8008424:	f7ff fc48 	bl	8007cb8 <_malloc_r>
 8008428:	4680      	mov	r8, r0
 800842a:	b908      	cbnz	r0, 8008430 <_realloc_r+0x44>
 800842c:	4645      	mov	r5, r8
 800842e:	e7ec      	b.n	800840a <_realloc_r+0x1e>
 8008430:	42b4      	cmp	r4, r6
 8008432:	4622      	mov	r2, r4
 8008434:	4629      	mov	r1, r5
 8008436:	bf28      	it	cs
 8008438:	4632      	movcs	r2, r6
 800843a:	f7ff fbc3 	bl	8007bc4 <memcpy>
 800843e:	4629      	mov	r1, r5
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff fbcd 	bl	8007be0 <_free_r>
 8008446:	e7f1      	b.n	800842c <_realloc_r+0x40>

08008448 <_malloc_usable_size_r>:
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f18      	subs	r0, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfbc      	itt	lt
 8008452:	580b      	ldrlt	r3, [r1, r0]
 8008454:	18c0      	addlt	r0, r0, r3
 8008456:	4770      	bx	lr

08008458 <_init>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	bf00      	nop
 800845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845e:	bc08      	pop	{r3}
 8008460:	469e      	mov	lr, r3
 8008462:	4770      	bx	lr

08008464 <_fini>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	bf00      	nop
 8008468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846a:	bc08      	pop	{r3}
 800846c:	469e      	mov	lr, r3
 800846e:	4770      	bx	lr
