
queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008190  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08008320  08008320  00009320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008484  08008484  0000a0e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008484  08008484  00009484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800848c  0800848c  0000a0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800848c  0800848c  0000948c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008490  08008490  00009490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08008494  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e54  200000e4  08008578  0000a0e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008f38  08008578  0000af38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015351  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003561  00000000  00000000  0001f465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  000229c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000daa  00000000  00000000  00023ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a20  00000000  00000000  0002494a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c71  00000000  00000000  0004d36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7696  00000000  00000000  00061fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159671  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d88  00000000  00000000  001596b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0015e43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008308 	.word	0x08008308

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	08008308 	.word	0x08008308

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000100 	.word	0x20000100
 80005dc:	20000154 	.word	0x20000154

080005e0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <vApplicationGetTimerTaskMemory+0x2c>)
 80005f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <vApplicationGetTimerTaskMemory+0x30>)
 80005f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005fe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	200010f4 	.word	0x200010f4
 8000610:	20001148 	.word	0x20001148

08000614 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rx_byte;
// UART receive complete interrupt callback (called when a byte is received)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == USART2)  // Ensure it is USART2
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d136      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x84>
    {
        // Echo received byte back using interrupt transmit
        HAL_UART_Transmit_IT(&huart2, &rx_byte, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	491d      	ldr	r1, [pc, #116]	@ (80006a4 <HAL_UART_RxCpltCallback+0x90>)
 800062e:	481e      	ldr	r0, [pc, #120]	@ (80006a8 <HAL_UART_RxCpltCallback+0x94>)
 8000630:	f002 ffa8 	bl	8003584 <HAL_UART_Transmit_IT>

        // Store received byte into buffer
        cmd_buf[cmd_len++] = rx_byte;
 8000634:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <HAL_UART_RxCpltCallback+0x98>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	b2d1      	uxtb	r1, r2
 800063c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ac <HAL_UART_RxCpltCallback+0x98>)
 800063e:	7011      	strb	r1, [r2, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_UART_RxCpltCallback+0x90>)
 8000644:	7819      	ldrb	r1, [r3, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <HAL_UART_RxCpltCallback+0x9c>)
 8000648:	5499      	strb	r1, [r3, r2]

        // If ENTER key (\r) is pressed, command is complete
        if (rx_byte == '\r')
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <HAL_UART_RxCpltCallback+0x90>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b0d      	cmp	r3, #13
 8000650:	d112      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x64>
        {
            cmd_len = 0; // reset buffer index for next command
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <HAL_UART_RxCpltCallback+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

            // Notify tasks 1 and 2 that command is ready
            vTaskNotifyGiveFromISR(taskhandle1, &xHigherPriorityTaskWoken);
 8000658:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <HAL_UART_RxCpltCallback+0xa0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f107 020c 	add.w	r2, r7, #12
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f006 f93a 	bl	80068dc <vTaskNotifyGiveFromISR>
            vTaskNotifyGiveFromISR(taskhandle2, &xHigherPriorityTaskWoken);
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <HAL_UART_RxCpltCallback+0xa4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f107 020c 	add.w	r2, r7, #12
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f006 f932 	bl	80068dc <vTaskNotifyGiveFromISR>
        }

        // Re-enable UART to receive next byte
        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	490a      	ldr	r1, [pc, #40]	@ (80006a4 <HAL_UART_RxCpltCallback+0x90>)
 800067c:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <HAL_UART_RxCpltCallback+0x94>)
 800067e:	f002 ffdf 	bl	8003640 <HAL_UART_Receive_IT>

        // Yield to higher priority task if required
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d007      	beq.n	8000698 <HAL_UART_RxCpltCallback+0x84>
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <HAL_UART_RxCpltCallback+0xa8>)
 800068a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	f3bf 8f6f 	isb	sy
    }
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40004400 	.word	0x40004400
 80006a4:	20001625 	.word	0x20001625
 80006a8:	2000156c 	.word	0x2000156c
 80006ac:	20001624 	.word	0x20001624
 80006b0:	20001610 	.word	0x20001610
 80006b4:	200015f8 	.word	0x200015f8
 80006b8:	200015fc 	.word	0x200015fc
 80006bc:	e000ed04 	.word	0xe000ed04

080006c0 <uart_send>:

// Simple wrapper to send string over UART (blocking mode)
void uart_send(char *s)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fd81 	bl	80001d0 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <uart_send+0x28>)
 80006da:	f002 fec9 	bl	8003470 <HAL_UART_Transmit>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000156c 	.word	0x2000156c

080006ec <task1_menu>:

// Task 1: Sends the menu to UART queue and waits for notification
void task1_menu(void *p)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    char *data = menu;   // Menu string to be sent
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <task1_menu+0x30>)
 80006f6:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        // Put menu string in UART queue
        xQueueSend(uart_q, &data, portMAX_DELAY);
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <task1_menu+0x34>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	f107 010c 	add.w	r1, r7, #12
 8000700:	2300      	movs	r3, #0
 8000702:	f04f 32ff 	mov.w	r2, #4294967295
 8000706:	f004 fddf 	bl	80052c8 <xQueueGenericSend>

        // Wait until notified (when new command arrives)
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f006 f888 	bl	8006828 <xTaskNotifyWait>
        xQueueSend(uart_q, &data, portMAX_DELAY);
 8000718:	bf00      	nop
 800071a:	e7ed      	b.n	80006f8 <task1_menu+0xc>
 800071c:	20000000 	.word	0x20000000
 8000720:	2000160c 	.word	0x2000160c

08000724 <task2_command>:
    }
}

// Task 2: Parses received command and forwards it for processing
void task2_command(void *p)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    uint8_t cmd_code = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]
    cmd_t *new_cmd;

    while(1)
    {
        // Wait until notified (command received)
        xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	2000      	movs	r0, #0
 800073a:	f006 f875 	bl	8006828 <xTaskNotifyWait>

        // Allocate memory for new command structure
        new_cmd = (cmd_t*)pvPortMalloc(sizeof(cmd_t));
 800073e:	200b      	movs	r0, #11
 8000740:	f006 ff54 	bl	80075ec <pvPortMalloc>
 8000744:	4603      	mov	r3, r0
 8000746:	60bb      	str	r3, [r7, #8]

        // Critical section: read and store command code
        taskENTER_CRITICAL();
 8000748:	f006 fe2e 	bl	80073a8 <vPortEnterCritical>
        cmd_code = getCommandCode(cmd_buf);
 800074c:	480a      	ldr	r0, [pc, #40]	@ (8000778 <task2_command+0x54>)
 800074e:	f000 f861 	bl	8000814 <getCommandCode>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
        new_cmd->cmd_no = cmd_code;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	701a      	strb	r2, [r3, #0]
        // getArguments(new_cmd->cmd_arg);  // Placeholder if arguments exist
        taskEXIT_CRITICAL();
 800075c:	f006 fe56 	bl	800740c <vPortExitCritical>

        // Send new command structure to command queue
        xQueueSend(cmd_q, &new_cmd, portMAX_DELAY);
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <task2_command+0x58>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	f107 0108 	add.w	r1, r7, #8
 8000768:	2300      	movs	r3, #0
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	f004 fdab 	bl	80052c8 <xQueueGenericSend>
        xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000772:	bf00      	nop
 8000774:	e7dc      	b.n	8000730 <task2_command+0xc>
 8000776:	bf00      	nop
 8000778:	20001610 	.word	0x20001610
 800077c:	20001608 	.word	0x20001608

08000780 <task3_command_process>:
    }
}

// Task 3: Processes commands received from Task 2
void task3_command_process(void *p)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b090      	sub	sp, #64	@ 0x40
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    char task_msg[50];

    while(1)
    {
        // Wait for command from queue
        xQueueReceive(cmd_q, (void*)&new_cmd, portMAX_DELAY);
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <task3_command_process+0x60>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	4618      	mov	r0, r3
 8000796:	f004 ff37 	bl	8005608 <xQueueReceive>

        // Process based on command code
        if(new_cmd->cmd_no == LED_ON)
 800079a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d102      	bne.n	80007a8 <task3_command_process+0x28>
        {
            make_led_on();
 80007a2:	f000 f845 	bl	8000830 <make_led_on>
 80007a6:	e015      	b.n	80007d4 <task3_command_process+0x54>
        }
        else if(new_cmd->cmd_no == LED_OFF)
 80007a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d102      	bne.n	80007b6 <task3_command_process+0x36>
        {
            make_led_off();
 80007b0:	f000 f848 	bl	8000844 <make_led_off>
 80007b4:	e00e      	b.n	80007d4 <task3_command_process+0x54>
        }
        else if(new_cmd->cmd_no == RTC_READ)
 80007b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d105      	bne.n	80007ca <task3_command_process+0x4a>
        {
            read_rtc_info(task_msg);   // Read RTC and send message
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f848 	bl	8000858 <read_rtc_info>
 80007c8:	e004      	b.n	80007d4 <task3_command_process+0x54>
        }
        else
        {
            print_error_message(task_msg); // Invalid command
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f882 	bl	80008d8 <print_error_message>
        }

        // Free allocated memory after processing
        vPortFree(new_cmd);
 80007d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007d6:	4618      	mov	r0, r3
 80007d8:	f006 ffd6 	bl	8007788 <vPortFree>
        xQueueReceive(cmd_q, (void*)&new_cmd, portMAX_DELAY);
 80007dc:	e7d4      	b.n	8000788 <task3_command_process+0x8>
 80007de:	bf00      	nop
 80007e0:	20001608 	.word	0x20001608

080007e4 <task4_uart_transmit>:
    }
}

// Task 4: Transmits data placed in UART queue
void task4_uart_transmit(void *p)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    char *data = NULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        // Wait for data from UART queue
        xQueueReceive(uart_q, &data, portMAX_DELAY);
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <task4_uart_transmit+0x2c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f107 010c 	add.w	r1, r7, #12
 80007f8:	f04f 32ff 	mov.w	r2, #4294967295
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 ff03 	bl	8005608 <xQueueReceive>

        // Send the data string over UART
        uart_send(data);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff5b 	bl	80006c0 <uart_send>
        xQueueReceive(uart_q, &data, portMAX_DELAY);
 800080a:	bf00      	nop
 800080c:	e7f0      	b.n	80007f0 <task4_uart_transmit+0xc>
 800080e:	bf00      	nop
 8000810:	2000160c 	.word	0x2000160c

08000814 <getCommandCode>:
    }
}

// Extracts command code from buffer
uint8_t getCommandCode(uint8_t *buffer)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
    return buffer[0] - 48;  // Convert ASCII to number
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3b30      	subs	r3, #48	@ 0x30
 8000822:	b2db      	uxtb	r3, r3
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <make_led_on>:


// Turns LED ON (PA5)
void make_led_on(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2120      	movs	r1, #32
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f000 ff6c 	bl	8001718 <HAL_GPIO_WritePin>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <make_led_off>:

// Turns LED OFF (PA5)
void make_led_off(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2120      	movs	r1, #32
 800084c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000850:	f000 ff62 	bl	8001718 <HAL_GPIO_WritePin>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <read_rtc_info>:

// Reads RTC time/date and sends to UART queue
void read_rtc_info(char *task_msg)
{
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	b08d      	sub	sp, #52	@ 0x34
 800085c:	af04      	add	r7, sp, #16
 800085e:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};  // Structure to store RTC time
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};  // Structure to store RTC date
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]

    // Read current RTC time and date
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	4813      	ldr	r0, [pc, #76]	@ (80008cc <read_rtc_info+0x74>)
 800087e:	f002 fba8 	bl	8002fd2 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4810      	ldr	r0, [pc, #64]	@ (80008cc <read_rtc_info+0x74>)
 800088c:	f002 fc84 	bl	8003198 <HAL_RTC_GetDate>

    // Format time/date into string
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000890:	6878      	ldr	r0, [r7, #4]
              sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000892:	7b3b      	ldrb	r3, [r7, #12]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000894:	461d      	mov	r5, r3
              sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000896:	7b7b      	ldrb	r3, [r7, #13]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000898:	461e      	mov	r6, r3
              sTime.Hours, sTime.Minutes, sTime.Seconds,
 800089a:	7bbb      	ldrb	r3, [r7, #14]
              sDate.Date, sDate.Month, sDate.Year);
 800089c:	7aba      	ldrb	r2, [r7, #10]
 800089e:	7a79      	ldrb	r1, [r7, #9]
 80008a0:	7afc      	ldrb	r4, [r7, #11]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 80008a2:	9403      	str	r4, [sp, #12]
 80008a4:	9102      	str	r1, [sp, #8]
 80008a6:	9201      	str	r2, [sp, #4]
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	4633      	mov	r3, r6
 80008ac:	462a      	mov	r2, r5
 80008ae:	4908      	ldr	r1, [pc, #32]	@ (80008d0 <read_rtc_info+0x78>)
 80008b0:	f007 f88a 	bl	80079c8 <siprintf>

    // Send formatted message to UART queue
    xQueueSend(uart_q, &task_msg, portMAX_DELAY);
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <read_rtc_info+0x7c>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	1d39      	adds	r1, r7, #4
 80008ba:	2300      	movs	r3, #0
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	f004 fd02 	bl	80052c8 <xQueueGenericSend>
}
 80008c4:	bf00      	nop
 80008c6:	3724      	adds	r7, #36	@ 0x24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008cc:	20001548 	.word	0x20001548
 80008d0:	08008320 	.word	0x08008320
 80008d4:	2000160c 	.word	0x2000160c

080008d8 <print_error_message>:

// Sends error message to UART queue
void print_error_message(char *task_msg)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    sprintf(task_msg, "\r\nInvalid command received\r\n");
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4908      	ldr	r1, [pc, #32]	@ (8000904 <print_error_message+0x2c>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f007 f86f 	bl	80079c8 <siprintf>
    xQueueSend(uart_q, &task_msg, portMAX_DELAY);
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <print_error_message+0x30>)
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	1d39      	adds	r1, r7, #4
 80008f0:	2300      	movs	r3, #0
 80008f2:	f04f 32ff 	mov.w	r2, #4294967295
 80008f6:	f004 fce7 	bl	80052c8 <xQueueGenericSend>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	08008350 	.word	0x08008350
 8000908:	2000160c 	.word	0x2000160c

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b5b0      	push	{r4, r5, r7, lr}
 800090e:	b08a      	sub	sp, #40	@ 0x28
 8000910:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f000 fb4b 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000916:	f000 f893 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f000 f971 	bl	8000c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800091e:	f000 f93f 	bl	8000ba0 <MX_USART2_UART_Init>
   // <-- required
  MX_RTC_Init();
 8000922:	f000 f8e1 	bl	8000ae8 <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000926:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <main+0xe4>)
 8000928:	1d3c      	adds	r4, r7, #4
 800092a:	461d      	mov	r5, r3
 800092c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000930:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f004 fa6c 	bl	8004e1a <osThreadCreate>
 8000942:	4603      	mov	r3, r0
 8000944:	4a2b      	ldr	r2, [pc, #172]	@ (80009f4 <main+0xe8>)
 8000946:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  uart_send("queue\r\n");   // Send a test message over UART
 8000948:	482b      	ldr	r0, [pc, #172]	@ (80009f8 <main+0xec>)
 800094a:	f7ff feb9 	bl	80006c0 <uart_send>

  // Create a queue to store 'cmd_t' type data, with a maximum of 10 items
  cmd_q = xQueueCreate(10, sizeof(cmd_t));
 800094e:	2200      	movs	r2, #0
 8000950:	210b      	movs	r1, #11
 8000952:	200a      	movs	r0, #10
 8000954:	f004 fc5d 	bl	8005212 <xQueueGenericCreate>
 8000958:	4603      	mov	r3, r0
 800095a:	4a28      	ldr	r2, [pc, #160]	@ (80009fc <main+0xf0>)
 800095c:	6013      	str	r3, [r2, #0]

  // Create another queue to store 8-byte messages, with a maximum of 10 items
  uart_q = xQueueCreate(10, 8);
 800095e:	2200      	movs	r2, #0
 8000960:	2108      	movs	r1, #8
 8000962:	200a      	movs	r0, #10
 8000964:	f004 fc55 	bl	8005212 <xQueueGenericCreate>
 8000968:	4603      	mov	r3, r0
 800096a:	4a25      	ldr	r2, [pc, #148]	@ (8000a00 <main+0xf4>)
 800096c:	6013      	str	r3, [r2, #0]

  // Check if both queues were created successfully
  if((cmd_q != NULL) && (uart_q != NULL))
 800096e:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <main+0xf0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d035      	beq.n	80009e2 <main+0xd6>
 8000976:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <main+0xf4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d031      	beq.n	80009e2 <main+0xd6>
  {
      // Create Task 1: Menu handling task
      xTaskCreate(task1_menu, "MENU", configMINIMAL_STACK_SIZE, NULL, 1, &taskhandle1);
 800097e:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <main+0xf8>)
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	2301      	movs	r3, #1
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2300      	movs	r3, #0
 8000988:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800098c:	491e      	ldr	r1, [pc, #120]	@ (8000a08 <main+0xfc>)
 800098e:	481f      	ldr	r0, [pc, #124]	@ (8000a0c <main+0x100>)
 8000990:	f005 f8ea 	bl	8005b68 <xTaskCreate>

      // Create Task 2: Command handling task
      xTaskCreate(task2_command, "command_handle", configMINIMAL_STACK_SIZE, NULL, 2, &taskhandle2);
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <main+0x104>)
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	2302      	movs	r3, #2
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2300      	movs	r3, #0
 800099e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a2:	491c      	ldr	r1, [pc, #112]	@ (8000a14 <main+0x108>)
 80009a4:	481c      	ldr	r0, [pc, #112]	@ (8000a18 <main+0x10c>)
 80009a6:	f005 f8df 	bl	8005b68 <xTaskCreate>

      // Create Task 3: Command processing task
      xTaskCreate(task3_command_process, "command_process", configMINIMAL_STACK_SIZE, NULL, 2, &taskhandle3);
 80009aa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <main+0x110>)
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	2302      	movs	r3, #2
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009b8:	4919      	ldr	r1, [pc, #100]	@ (8000a20 <main+0x114>)
 80009ba:	481a      	ldr	r0, [pc, #104]	@ (8000a24 <main+0x118>)
 80009bc:	f005 f8d4 	bl	8005b68 <xTaskCreate>

      // Create Task 4: UART transmission task
      xTaskCreate(task4_uart_transmit, "uart_transmit", configMINIMAL_STACK_SIZE, NULL, 2, &taskhandle4);
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <main+0x11c>)
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	2302      	movs	r3, #2
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2300      	movs	r3, #0
 80009ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ce:	4917      	ldr	r1, [pc, #92]	@ (8000a2c <main+0x120>)
 80009d0:	4817      	ldr	r0, [pc, #92]	@ (8000a30 <main+0x124>)
 80009d2:	f005 f8c9 	bl	8005b68 <xTaskCreate>

      // Start UART reception in interrupt mode (receive 1 byte at a time)
      HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	4916      	ldr	r1, [pc, #88]	@ (8000a34 <main+0x128>)
 80009da:	4817      	ldr	r0, [pc, #92]	@ (8000a38 <main+0x12c>)
 80009dc:	f002 fe30 	bl	8003640 <HAL_UART_Receive_IT>
 80009e0:	e002      	b.n	80009e8 <main+0xdc>
  }
  else
  {
      // If queue creation failed, notify via UART
      uart_send("QUEUE creation failed\r\n");
 80009e2:	4816      	ldr	r0, [pc, #88]	@ (8000a3c <main+0x130>)
 80009e4:	f7ff fe6c 	bl	80006c0 <uart_send>
  }

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009e8:	f004 fa10 	bl	8004e0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <main+0xe0>
 80009f0:	080083d4 	.word	0x080083d4
 80009f4:	200015f4 	.word	0x200015f4
 80009f8:	08008370 	.word	0x08008370
 80009fc:	20001608 	.word	0x20001608
 8000a00:	2000160c 	.word	0x2000160c
 8000a04:	200015f8 	.word	0x200015f8
 8000a08:	08008378 	.word	0x08008378
 8000a0c:	080006ed 	.word	0x080006ed
 8000a10:	200015fc 	.word	0x200015fc
 8000a14:	08008380 	.word	0x08008380
 8000a18:	08000725 	.word	0x08000725
 8000a1c:	20001600 	.word	0x20001600
 8000a20:	08008390 	.word	0x08008390
 8000a24:	08000781 	.word	0x08000781
 8000a28:	20001604 	.word	0x20001604
 8000a2c:	080083a0 	.word	0x080083a0
 8000a30:	080007e5 	.word	0x080007e5
 8000a34:	20001625 	.word	0x20001625
 8000a38:	2000156c 	.word	0x2000156c
 8000a3c:	080083b0 	.word	0x080083b0

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b096      	sub	sp, #88	@ 0x58
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2244      	movs	r2, #68	@ 0x44
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f006 ffdc 	bl	8007a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a66:	f000 fe7d 	bl	8001764 <HAL_PWREx_ControlVoltageScaling>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a70:	f000 f934 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a74:	230a      	movs	r3, #10
 8000a76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a82:	2301      	movs	r3, #1
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a92:	230a      	movs	r3, #10
 8000a94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a96:	2307      	movs	r3, #7
 8000a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 feb2 	bl	8001810 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000ab2:	f000 f913 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2303      	movs	r3, #3
 8000abc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	2104      	movs	r1, #4
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fa7a 	bl	8001fc8 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ada:	f000 f8ff 	bl	8000cdc <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3758      	adds	r7, #88	@ 0x58
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000afc:	2300      	movs	r3, #0
 8000afe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b00:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b02:	4a26      	ldr	r2, [pc, #152]	@ (8000b9c <MX_RTC_Init+0xb4>)
 8000b04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b06:	4b24      	ldr	r3, [pc, #144]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b0e:	227f      	movs	r2, #127	@ 0x7f
 8000b10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b14:	22ff      	movs	r2, #255	@ 0xff
 8000b16:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b30:	4819      	ldr	r0, [pc, #100]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b32:	f002 f929 	bl	8002d88 <HAL_RTC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000b3c:	f000 f8ce 	bl	8000cdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2201      	movs	r2, #1
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480f      	ldr	r0, [pc, #60]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b5c:	f002 f99c 	bl	8002e98 <HAL_RTC_SetTime>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000b66:	f000 f8b9 	bl	8000cdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_RTC_Init+0xb0>)
 8000b82:	f002 fa82 	bl	800308a <HAL_RTC_SetDate>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b8c:	f000 f8a6 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20001548 	.word	0x20001548
 8000b9c:	40002800 	.word	0x40002800

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	@ (8000bfc <MX_USART2_UART_Init+0x5c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000be4:	f002 fbf6 	bl	80033d4 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bee:	f000 f875 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000156c 	.word	0x2000156c
 8000bfc:	40004400 	.word	0x40004400

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c22:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	4a24      	ldr	r2, [pc, #144]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3a:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	4a18      	ldr	r2, [pc, #96]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2120      	movs	r1, #32
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7e:	f000 fd4b 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c88:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <MX_GPIO_Init+0xc8>)
 8000c9a:	f000 fb93 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb8:	f000 fb84 	bl	80013c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	@ 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000800 	.word	0x48000800

08000ccc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f004 f8ec 	bl	8004eb2 <osDelay>
 8000cda:	e7fb      	b.n	8000cd4 <StartDefaultTask+0x8>

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <Error_Handler+0x8>

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf2:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	210f      	movs	r1, #15
 8000d22:	f06f 0001 	mvn.w	r0, #1
 8000d26:	f000 fa98 	bl	800125a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0a4      	sub	sp, #144	@ 0x90
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2288      	movs	r2, #136	@ 0x88
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f006 fe5f 	bl	8007a0c <memset>
  if(hrtc->Instance==RTC)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <HAL_RTC_MspInit+0x5c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d118      	bne.n	8000d8a <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fb50 	bl	8002410 <HAL_RCCEx_PeriphCLKConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d76:	f7ff ffb1 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <HAL_RTC_MspInit+0x60>)
 8000d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d80:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <HAL_RTC_MspInit+0x60>)
 8000d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3790      	adds	r7, #144	@ 0x90
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40002800 	.word	0x40002800
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2288      	movs	r2, #136	@ 0x88
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f006 fe25 	bl	8007a0c <memset>
  if(huart->Instance==USART2)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a25      	ldr	r2, [pc, #148]	@ (8000e5c <HAL_UART_MspInit+0xc0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d143      	bne.n	8000e54 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fb19 	bl	8002410 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000de4:	f7ff ff7a 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <HAL_UART_MspInit+0xc4>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dec:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <HAL_UART_MspInit+0xc4>)
 8000dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <HAL_UART_MspInit+0xc4>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_UART_MspInit+0xc4>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	4a16      	ldr	r2, [pc, #88]	@ (8000e60 <HAL_UART_MspInit+0xc4>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <HAL_UART_MspInit+0xc4>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e30:	2307      	movs	r3, #7
 8000e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e40:	f000 fac0 	bl	80013c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2105      	movs	r1, #5
 8000e48:	2026      	movs	r0, #38	@ 0x26
 8000e4a:	f000 fa06 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e4e:	2026      	movs	r0, #38	@ 0x26
 8000e50:	f000 fa1f 	bl	8001292 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	37b0      	adds	r7, #176	@ 0xb0
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40021000 	.word	0x40021000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <NMI_Handler+0x4>

08000e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9e:	f000 f8e1 	bl	8001064 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ea2:	f005 fc1b 	bl	80066dc <xTaskGetSchedulerState>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d001      	beq.n	8000eb0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000eac:	f006 fb0c 	bl	80074c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	f002 fc0d 	bl	80036d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000156c 	.word	0x2000156c

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f006 fd90 	bl	8007a1c <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20018000 	.word	0x20018000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20001628 	.word	0x20001628
 8000f30:	20008f38 	.word	0x20008f38

08000f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f5c:	f7ff ffea 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	@ (8000f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <LoopForever+0xe>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa4 <LoopForever+0x16>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f86:	f006 fd4f 	bl	8007a28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8a:	f7ff fcbf 	bl	800090c <main>

08000f8e <LoopForever>:

LoopForever:
    b LoopForever
 8000f8e:	e7fe      	b.n	8000f8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8000f9c:	08008494 	.word	0x08008494
  ldr r2, =_sbss
 8000fa0:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8000fa4:	20008f38 	.word	0x20008f38

08000fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_2_IRQHandler>
	...

08000fac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <HAL_Init+0x3c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <HAL_Init+0x3c>)
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f000 f93e 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc8:	200f      	movs	r0, #15
 8000fca:	f000 f80f 	bl	8000fec <HAL_InitTick>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	e001      	b.n	8000fde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fda:	f7ff fe85 	bl	8000ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ff8:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d023      	beq.n	8001048 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001000:	4b16      	ldr	r3, [pc, #88]	@ (800105c <HAL_InitTick+0x70>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_InitTick+0x6c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f949 	bl	80012ae <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10f      	bne.n	8001042 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d809      	bhi.n	800103c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f913 	bl	800125a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_InitTick+0x74>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e007      	b.n	800104c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e004      	b.n	800104c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e001      	b.n	800104c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000008c 	.word	0x2000008c
 800105c:	20000084 	.word	0x20000084
 8001060:	20000088 	.word	0x20000088

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	2000008c 	.word	0x2000008c
 8001088:	2000162c 	.word	0x2000162c

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2000162c 	.word	0x2000162c

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	@ (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	@ (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	@ (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	@ 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d008      	beq.n	80012f0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2204      	movs	r2, #4
 80012e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e022      	b.n	8001336 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 020e 	bic.w	r2, r2, #14
 80012fe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001314:	f003 021c 	and.w	r2, r3, #28
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	2101      	movs	r1, #1
 800131e:	fa01 f202 	lsl.w	r2, r1, r2
 8001322:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d005      	beq.n	8001366 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2204      	movs	r2, #4
 800135e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e029      	b.n	80013ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 020e 	bic.w	r2, r2, #14
 8001374:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	f003 021c 	and.w	r2, r3, #28
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
    }
  }
  return status;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	e17f      	b.n	80016d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8171 	beq.w	80016ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d005      	beq.n	8001404 <HAL_GPIO_Init+0x40>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d130      	bne.n	8001466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143a:	2201      	movs	r2, #1
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	f003 0201 	and.w	r2, r3, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b03      	cmp	r3, #3
 8001470:	d118      	bne.n	80014a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d017      	beq.n	80014e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d123      	bne.n	8001534 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	6939      	ldr	r1, [r7, #16]
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80ac 	beq.w	80016ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b5f      	ldr	r3, [pc, #380]	@ (80016f4 <HAL_GPIO_Init+0x330>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157a:	4a5e      	ldr	r2, [pc, #376]	@ (80016f4 <HAL_GPIO_Init+0x330>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6613      	str	r3, [r2, #96]	@ 0x60
 8001582:	4b5c      	ldr	r3, [pc, #368]	@ (80016f4 <HAL_GPIO_Init+0x330>)
 8001584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800158e:	4a5a      	ldr	r2, [pc, #360]	@ (80016f8 <HAL_GPIO_Init+0x334>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015b8:	d025      	beq.n	8001606 <HAL_GPIO_Init+0x242>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4f      	ldr	r2, [pc, #316]	@ (80016fc <HAL_GPIO_Init+0x338>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01f      	beq.n	8001602 <HAL_GPIO_Init+0x23e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001700 <HAL_GPIO_Init+0x33c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0x23a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001704 <HAL_GPIO_Init+0x340>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x236>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001708 <HAL_GPIO_Init+0x344>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x232>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4b      	ldr	r2, [pc, #300]	@ (800170c <HAL_GPIO_Init+0x348>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x22e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001710 <HAL_GPIO_Init+0x34c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x22a>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e00c      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e00a      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015f2:	2305      	movs	r3, #5
 80015f4:	e008      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015fa:	2303      	movs	r3, #3
 80015fc:	e004      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015fe:	2302      	movs	r3, #2
 8001600:	e002      	b.n	8001608 <HAL_GPIO_Init+0x244>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_GPIO_Init+0x244>
 8001606:	2300      	movs	r3, #0
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	f002 0203 	and.w	r2, r2, #3
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	4093      	lsls	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001618:	4937      	ldr	r1, [pc, #220]	@ (80016f8 <HAL_GPIO_Init+0x334>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001626:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <HAL_GPIO_Init+0x350>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800164a:	4a32      	ldr	r2, [pc, #200]	@ (8001714 <HAL_GPIO_Init+0x350>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001650:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <HAL_GPIO_Init+0x350>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001674:	4a27      	ldr	r2, [pc, #156]	@ (8001714 <HAL_GPIO_Init+0x350>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800167a:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <HAL_GPIO_Init+0x350>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169e:	4a1d      	ldr	r2, [pc, #116]	@ (8001714 <HAL_GPIO_Init+0x350>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_GPIO_Init+0x350>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c8:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <HAL_GPIO_Init+0x350>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f47f ae78 	bne.w	80013d4 <HAL_GPIO_Init+0x10>
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800
 8001704:	48000c00 	.word	0x48000c00
 8001708:	48001000 	.word	0x48001000
 800170c:	48001400 	.word	0x48001400
 8001710:	48001800 	.word	0x48001800
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001734:	e002      	b.n	800173c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800174c:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <HAL_PWREx_GetVoltageRange+0x18>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40007000 	.word	0x40007000

08001764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001772:	d130      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001774:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800177c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001780:	d038      	beq.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001782:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800178a:	4a1e      	ldr	r2, [pc, #120]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2232      	movs	r2, #50	@ 0x32
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	4a1b      	ldr	r2, [pc, #108]	@ (800180c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	0c9b      	lsrs	r3, r3, #18
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a8:	e002      	b.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017bc:	d102      	bne.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f2      	bne.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017d0:	d110      	bne.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e00f      	b.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e2:	d007      	beq.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017ec:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40007000 	.word	0x40007000
 8001808:	20000084 	.word	0x20000084
 800180c:	431bde83 	.word	0x431bde83

08001810 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e3ca      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001822:	4b97      	ldr	r3, [pc, #604]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800182c:	4b94      	ldr	r3, [pc, #592]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80e4 	beq.w	8001a0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_RCC_OscConfig+0x4a>
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b0c      	cmp	r3, #12
 800184e:	f040 808b 	bne.w	8001968 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b01      	cmp	r3, #1
 8001856:	f040 8087 	bne.w	8001968 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185a:	4b89      	ldr	r3, [pc, #548]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x62>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e3a2      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1a      	ldr	r2, [r3, #32]
 8001876:	4b82      	ldr	r3, [pc, #520]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <HAL_RCC_OscConfig+0x7c>
 8001882:	4b7f      	ldr	r3, [pc, #508]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800188a:	e005      	b.n	8001898 <HAL_RCC_OscConfig+0x88>
 800188c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001898:	4293      	cmp	r3, r2
 800189a:	d223      	bcs.n	80018e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fd55 	bl	8002350 <RCC_SetFlashLatencyFromMSIRange>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e383      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b0:	4b73      	ldr	r3, [pc, #460]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a72      	ldr	r2, [pc, #456]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b70      	ldr	r3, [pc, #448]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	496d      	ldr	r1, [pc, #436]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	4968      	ldr	r1, [pc, #416]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
 80018e2:	e025      	b.n	8001930 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e4:	4b66      	ldr	r3, [pc, #408]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a65      	ldr	r2, [pc, #404]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b63      	ldr	r3, [pc, #396]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4960      	ldr	r1, [pc, #384]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001902:	4b5f      	ldr	r3, [pc, #380]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	495b      	ldr	r1, [pc, #364]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fd15 	bl	8002350 <RCC_SetFlashLatencyFromMSIRange>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e343      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001930:	f000 fc4a 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8001934:	4602      	mov	r2, r0
 8001936:	4b52      	ldr	r3, [pc, #328]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	4950      	ldr	r1, [pc, #320]	@ (8001a84 <HAL_RCC_OscConfig+0x274>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	4a4e      	ldr	r2, [pc, #312]	@ (8001a88 <HAL_RCC_OscConfig+0x278>)
 800194e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001950:	4b4e      	ldr	r3, [pc, #312]	@ (8001a8c <HAL_RCC_OscConfig+0x27c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fb49 	bl	8000fec <HAL_InitTick>
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d052      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	e327      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d032      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001970:	4b43      	ldr	r3, [pc, #268]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a42      	ldr	r2, [pc, #264]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800197c:	f7ff fb86 	bl	800108c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001984:	f7ff fb82 	bl	800108c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e310      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001996:	4b3a      	ldr	r3, [pc, #232]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a2:	4b37      	ldr	r3, [pc, #220]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a36      	ldr	r2, [pc, #216]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019a8:	f043 0308 	orr.w	r3, r3, #8
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4931      	ldr	r1, [pc, #196]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	492c      	ldr	r1, [pc, #176]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
 80019d4:	e01a      	b.n	8001a0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a29      	ldr	r2, [pc, #164]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fb53 	bl	800108c <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ea:	f7ff fb4f 	bl	800108c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e2dd      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019fc:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x1da>
 8001a08:	e000      	b.n	8001a0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d074      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x21a>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d10e      	bne.n	8001a42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d10b      	bne.n	8001a42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d064      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d160      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e2ba      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x24a>
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e026      	b.n	8001aa8 <HAL_RCC_OscConfig+0x298>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a62:	d115      	bne.n	8001a90 <HAL_RCC_OscConfig+0x280>
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a02      	ldr	r2, [pc, #8]	@ (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x298>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08008408 	.word	0x08008408
 8001a88:	20000084 	.word	0x20000084
 8001a8c:	20000088 	.word	0x20000088
 8001a90:	4ba0      	ldr	r3, [pc, #640]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a9f      	ldr	r2, [pc, #636]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b9d      	ldr	r3, [pc, #628]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff faec 	bl	800108c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fae8 	bl	800108c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	@ 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e276      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aca:	4b92      	ldr	r3, [pc, #584]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x2a8>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fad8 	bl	800108c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fad4 	bl	800108c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	@ 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e262      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af2:	4b88      	ldr	r3, [pc, #544]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2d0>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d060      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x310>
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d119      	bne.n	8001b4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d116      	bne.n	8001b4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b20:	4b7c      	ldr	r3, [pc, #496]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x328>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e23f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b76      	ldr	r3, [pc, #472]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	4973      	ldr	r1, [pc, #460]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	e040      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d023      	beq.n	8001b9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b56:	4b6f      	ldr	r3, [pc, #444]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6e      	ldr	r2, [pc, #440]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fa93 	bl	800108c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fa8f 	bl	800108c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e21d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b7c:	4b65      	ldr	r3, [pc, #404]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b62      	ldr	r3, [pc, #392]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	495f      	ldr	r1, [pc, #380]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	e018      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a5c      	ldr	r2, [pc, #368]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff fa6f 	bl	800108c <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fa6b 	bl	800108c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e1f9      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc4:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d03c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bea:	4a4a      	ldr	r2, [pc, #296]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fa4a 	bl	800108c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fa46 	bl	800108c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1d4      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0e:	4b41      	ldr	r3, [pc, #260]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ef      	beq.n	8001bfc <HAL_RCC_OscConfig+0x3ec>
 8001c1c:	e01b      	b.n	8001c56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c24:	4a3b      	ldr	r2, [pc, #236]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fa2d 	bl	800108c <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff fa29 	bl	800108c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1b7      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c48:	4b32      	ldr	r3, [pc, #200]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ef      	bne.n	8001c36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80a6 	beq.w	8001db0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c68:	4b2a      	ldr	r3, [pc, #168]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	4a26      	ldr	r2, [pc, #152]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c80:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <HAL_RCC_OscConfig+0x508>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d118      	bne.n	8001cce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <HAL_RCC_OscConfig+0x508>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d18 <HAL_RCC_OscConfig+0x508>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f9f0 	bl	800108c <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7ff f9ec 	bl	800108c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e17a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <HAL_RCC_OscConfig+0x508>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4d8>
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ce6:	e029      	b.n	8001d3c <HAL_RCC_OscConfig+0x52c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d115      	bne.n	8001d1c <HAL_RCC_OscConfig+0x50c>
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf6:	4a07      	ldr	r2, [pc, #28]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d00:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d06:	4a03      	ldr	r2, [pc, #12]	@ (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d10:	e014      	b.n	8001d3c <HAL_RCC_OscConfig+0x52c>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d22:	4a9b      	ldr	r2, [pc, #620]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d2c:	4b98      	ldr	r3, [pc, #608]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d32:	4a97      	ldr	r2, [pc, #604]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d016      	beq.n	8001d72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7ff f9a2 	bl	800108c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7ff f99e 	bl	800108c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e12a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d62:	4b8b      	ldr	r3, [pc, #556]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0ed      	beq.n	8001d4c <HAL_RCC_OscConfig+0x53c>
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d72:	f7ff f98b 	bl	800108c <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff f987 	bl	800108c <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e113      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d90:	4b7f      	ldr	r3, [pc, #508]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ed      	bne.n	8001d7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b7a      	ldr	r3, [pc, #488]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	4a79      	ldr	r2, [pc, #484]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80fe 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	f040 80d0 	bne.w	8001f64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dc4:	4b72      	ldr	r3, [pc, #456]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d130      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	3b01      	subs	r3, #1
 8001de4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d127      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d11f      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e04:	2a07      	cmp	r2, #7
 8001e06:	bf14      	ite	ne
 8001e08:	2201      	movne	r2, #1
 8001e0a:	2200      	moveq	r2, #0
 8001e0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d113      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d06e      	beq.n	8001f18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b0c      	cmp	r3, #12
 8001e3e:	d069      	beq.n	8001f14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e40:	4b53      	ldr	r3, [pc, #332]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e4c:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0ad      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a4b      	ldr	r2, [pc, #300]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e68:	f7ff f910 	bl	800108c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e70:	f7ff f90c 	bl	800108c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e09a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e82:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8e:	4b40      	ldr	r3, [pc, #256]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	4b40      	ldr	r3, [pc, #256]	@ (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ea8:	0212      	lsls	r2, r2, #8
 8001eaa:	4311      	orrs	r1, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001eb0:	0852      	lsrs	r2, r2, #1
 8001eb2:	3a01      	subs	r2, #1
 8001eb4:	0552      	lsls	r2, r2, #21
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ebc:	0852      	lsrs	r2, r2, #1
 8001ebe:	3a01      	subs	r2, #1
 8001ec0:	0652      	lsls	r2, r2, #25
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ec8:	0912      	lsrs	r2, r2, #4
 8001eca:	0452      	lsls	r2, r2, #17
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	4930      	ldr	r1, [pc, #192]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ede:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eec:	f7ff f8ce 	bl	800108c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7ff f8ca 	bl	800108c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e058      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f06:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f12:	e050      	b.n	8001fb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e04f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f18:	4b1d      	ldr	r3, [pc, #116]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d148      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f24:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a19      	ldr	r2, [pc, #100]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f30:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a16      	ldr	r2, [pc, #88]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f3c:	f7ff f8a6 	bl	800108c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff f8a2 	bl	800108c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e030      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x734>
 8001f62:	e028      	b.n	8001fb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d023      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a08      	ldr	r2, [pc, #32]	@ (8001f90 <HAL_RCC_OscConfig+0x780>)
 8001f70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff f889 	bl	800108c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7c:	e00c      	b.n	8001f98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff f885 	bl	800108c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d905      	bls.n	8001f98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e013      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
 8001f90:	40021000 	.word	0x40021000
 8001f94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_RCC_OscConfig+0x7b0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ec      	bne.n	8001f7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_RCC_OscConfig+0x7b0>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4905      	ldr	r1, [pc, #20]	@ (8001fc0 <HAL_RCC_OscConfig+0x7b0>)
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_RCC_OscConfig+0x7b4>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
 8001fb0:	e001      	b.n	8001fb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	feeefffc 	.word	0xfeeefffc

08001fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0e7      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b75      	ldr	r3, [pc, #468]	@ (80021b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d910      	bls.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b72      	ldr	r3, [pc, #456]	@ (80021b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4970      	ldr	r1, [pc, #448]	@ (80021b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b6e      	ldr	r3, [pc, #440]	@ (80021b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0cf      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d010      	beq.n	800203a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4b66      	ldr	r3, [pc, #408]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002024:	429a      	cmp	r2, r3
 8002026:	d908      	bls.n	800203a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b63      	ldr	r3, [pc, #396]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4960      	ldr	r1, [pc, #384]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d04c      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204e:	4b5a      	ldr	r3, [pc, #360]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d121      	bne.n	800209e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0a6      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002066:	4b54      	ldr	r3, [pc, #336]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d115      	bne.n	800209e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e09a      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207e:	4b4e      	ldr	r3, [pc, #312]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e08e      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800208e:	4b4a      	ldr	r3, [pc, #296]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e086      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b46      	ldr	r3, [pc, #280]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4943      	ldr	r1, [pc, #268]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b0:	f7fe ffec 	bl	800108c <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7fe ffe8 	bl	800108c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e06e      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b3a      	ldr	r3, [pc, #232]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d010      	beq.n	800210e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b31      	ldr	r3, [pc, #196]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d208      	bcs.n	800210e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b2e      	ldr	r3, [pc, #184]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	492b      	ldr	r1, [pc, #172]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210e:	4b29      	ldr	r3, [pc, #164]	@ (80021b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d210      	bcs.n	800213e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211c:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <HAL_RCC_ClockConfig+0x1ec>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 0207 	bic.w	r2, r3, #7
 8002124:	4923      	ldr	r1, [pc, #140]	@ (80021b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212c:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <HAL_RCC_ClockConfig+0x1ec>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d001      	beq.n	800213e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e036      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214a:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	4918      	ldr	r1, [pc, #96]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002158:	4313      	orrs	r3, r2
 800215a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d009      	beq.n	800217c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4910      	ldr	r1, [pc, #64]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800217c:	f000 f824 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	490b      	ldr	r1, [pc, #44]	@ (80021bc <HAL_RCC_ClockConfig+0x1f4>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	4a09      	ldr	r2, [pc, #36]	@ (80021c0 <HAL_RCC_ClockConfig+0x1f8>)
 800219a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800219c:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <HAL_RCC_ClockConfig+0x1fc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ff23 	bl	8000fec <HAL_InitTick>
 80021a6:	4603      	mov	r3, r0
 80021a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80021aa:	7afb      	ldrb	r3, [r7, #11]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08008408 	.word	0x08008408
 80021c0:	20000084 	.word	0x20000084
 80021c4:	20000088 	.word	0x20000088

080021c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	@ 0x24
 80021cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d6:	4b3e      	ldr	r3, [pc, #248]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e0:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x34>
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d121      	bne.n	800223a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d11e      	bne.n	800223a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021fc:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002208:	4b31      	ldr	r3, [pc, #196]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e005      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002218:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002224:	4a2b      	ldr	r2, [pc, #172]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10d      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d102      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002240:	4b25      	ldr	r3, [pc, #148]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	e004      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d101      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800224c:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x114>)
 800224e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d134      	bne.n	80022c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002256:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d003      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0xa6>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d003      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0xac>
 800226c:	e005      	b.n	800227a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800226e:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002270:	617b      	str	r3, [r7, #20]
      break;
 8002272:	e005      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002276:	617b      	str	r3, [r7, #20]
      break;
 8002278:	e002      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	617b      	str	r3, [r7, #20]
      break;
 800227e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	3301      	adds	r3, #1
 800228c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	fb03 f202 	mul.w	r2, r3, r2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a6:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	0e5b      	lsrs	r3, r3, #25
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	3301      	adds	r3, #1
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022c0:	69bb      	ldr	r3, [r7, #24]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	@ 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08008420 	.word	0x08008420
 80022d8:	00f42400 	.word	0x00f42400
 80022dc:	007a1200 	.word	0x007a1200

080022e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000084 	.word	0x20000084

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022fc:	f7ff fff0 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4904      	ldr	r1, [pc, #16]	@ (8002320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	08008418 	.word	0x08008418

08002324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002328:	f7ff ffda 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0adb      	lsrs	r3, r3, #11
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4904      	ldr	r1, [pc, #16]	@ (800234c <HAL_RCC_GetPCLK2Freq+0x28>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	08008418 	.word	0x08008418

08002350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800235c:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002368:	f7ff f9ee 	bl	8001748 <HAL_PWREx_GetVoltageRange>
 800236c:	6178      	str	r0, [r7, #20]
 800236e:	e014      	b.n	800239a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b25      	ldr	r3, [pc, #148]	@ (8002408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	4a24      	ldr	r2, [pc, #144]	@ (8002408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237a:	6593      	str	r3, [r2, #88]	@ 0x58
 800237c:	4b22      	ldr	r3, [pc, #136]	@ (8002408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002388:	f7ff f9de 	bl	8001748 <HAL_PWREx_GetVoltageRange>
 800238c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800238e:	4b1e      	ldr	r3, [pc, #120]	@ (8002408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002398:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a0:	d10b      	bne.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b80      	cmp	r3, #128	@ 0x80
 80023a6:	d919      	bls.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80023ac:	d902      	bls.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ae:	2302      	movs	r3, #2
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	e013      	b.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e010      	b.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b80      	cmp	r3, #128	@ 0x80
 80023be:	d902      	bls.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023c0:	2303      	movs	r3, #3
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e00a      	b.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b80      	cmp	r3, #128	@ 0x80
 80023ca:	d102      	bne.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023cc:	2302      	movs	r3, #2
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e004      	b.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b70      	cmp	r3, #112	@ 0x70
 80023d6:	d101      	bne.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023d8:	2301      	movs	r3, #1
 80023da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 0207 	bic.w	r2, r3, #7
 80023e4:	4909      	ldr	r1, [pc, #36]	@ (800240c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023ec:	4b07      	ldr	r3, [pc, #28]	@ (800240c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d001      	beq.n	80023fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	40022000 	.word	0x40022000

08002410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002418:	2300      	movs	r3, #0
 800241a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800241c:	2300      	movs	r3, #0
 800241e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002428:	2b00      	cmp	r3, #0
 800242a:	d041      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002430:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002434:	d02a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002436:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800243a:	d824      	bhi.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800243c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002446:	d81e      	bhi.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800244c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002450:	d010      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002452:	e018      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002454:	4b86      	ldr	r3, [pc, #536]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a85      	ldr	r2, [pc, #532]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002460:	e015      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fabb 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002472:	e00c      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3320      	adds	r3, #32
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fba6 	bl	8002bcc <RCCEx_PLLSAI2_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002484:	e003      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	74fb      	strb	r3, [r7, #19]
      break;
 800248a:	e000      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800248c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002494:	4b76      	ldr	r3, [pc, #472]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024a2:	4973      	ldr	r1, [pc, #460]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024aa:	e001      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d041      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024c4:	d02a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024ca:	d824      	bhi.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024d0:	d008      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024d6:	d81e      	bhi.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024e0:	d010      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024e2:	e018      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024e4:	4b62      	ldr	r3, [pc, #392]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a61      	ldr	r2, [pc, #388]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024f0:	e015      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fa73 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 80024fe:	4603      	mov	r3, r0
 8002500:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002502:	e00c      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3320      	adds	r3, #32
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fb5e 	bl	8002bcc <RCCEx_PLLSAI2_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002514:	e003      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	74fb      	strb	r3, [r7, #19]
      break;
 800251a:	e000      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800251c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002524:	4b52      	ldr	r3, [pc, #328]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002532:	494f      	ldr	r1, [pc, #316]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800253a:	e001      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80a0 	beq.w	800268e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	4a40      	ldr	r2, [pc, #256]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002572:	6593      	str	r3, [r2, #88]	@ 0x58
 8002574:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002580:	2301      	movs	r3, #1
 8002582:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002584:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a3a      	ldr	r2, [pc, #232]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800258a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002590:	f7fe fd7c 	bl	800108c <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002596:	e009      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002598:	f7fe fd78 	bl	800108c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d902      	bls.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	74fb      	strb	r3, [r7, #19]
        break;
 80025aa:	e005      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ac:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ef      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d15c      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025be:	4b2c      	ldr	r3, [pc, #176]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01f      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d019      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025dc:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025e8:	4b21      	ldr	r3, [pc, #132]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ee:	4a20      	ldr	r2, [pc, #128]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002608:	4a19      	ldr	r2, [pc, #100]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe fd37 	bl	800108c <HAL_GetTick>
 800261e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002620:	e00b      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fd33 	bl	800108c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d902      	bls.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	74fb      	strb	r3, [r7, #19]
            break;
 8002638:	e006      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263a:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ec      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10c      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800265e:	4904      	ldr	r1, [pc, #16]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002666:	e009      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
 800266c:	e006      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267c:	7c7b      	ldrb	r3, [r7, #17]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d105      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002682:	4b9e      	ldr	r3, [pc, #632]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	4a9d      	ldr	r2, [pc, #628]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800268c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800269a:	4b98      	ldr	r3, [pc, #608]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a0:	f023 0203 	bic.w	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a8:	4994      	ldr	r1, [pc, #592]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026bc:	4b8f      	ldr	r3, [pc, #572]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c2:	f023 020c 	bic.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ca:	498c      	ldr	r1, [pc, #560]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026de:	4b87      	ldr	r3, [pc, #540]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	4983      	ldr	r1, [pc, #524]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002700:	4b7e      	ldr	r3, [pc, #504]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002706:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	497b      	ldr	r1, [pc, #492]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002722:	4b76      	ldr	r3, [pc, #472]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002728:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002730:	4972      	ldr	r1, [pc, #456]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002744:	4b6d      	ldr	r3, [pc, #436]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002752:	496a      	ldr	r1, [pc, #424]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002766:	4b65      	ldr	r3, [pc, #404]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	4961      	ldr	r1, [pc, #388]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002788:	4b5c      	ldr	r3, [pc, #368]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002796:	4959      	ldr	r1, [pc, #356]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027aa:	4b54      	ldr	r3, [pc, #336]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b8:	4950      	ldr	r1, [pc, #320]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027cc:	4b4b      	ldr	r3, [pc, #300]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027da:	4948      	ldr	r1, [pc, #288]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ee:	4b43      	ldr	r3, [pc, #268]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	493f      	ldr	r1, [pc, #252]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d028      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002810:	4b3a      	ldr	r3, [pc, #232]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800281e:	4937      	ldr	r1, [pc, #220]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800282a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800282e:	d106      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b32      	ldr	r3, [pc, #200]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a31      	ldr	r2, [pc, #196]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
 800283c:	e011      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002842:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002846:	d10c      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3304      	adds	r3, #4
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f8c8 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d028      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800286e:	4b23      	ldr	r3, [pc, #140]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002874:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287c:	491f      	ldr	r1, [pc, #124]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800288c:	d106      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800288e:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4a1a      	ldr	r2, [pc, #104]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002894:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002898:	60d3      	str	r3, [r2, #12]
 800289a:	e011      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2101      	movs	r1, #1
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f899 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 80028b2:	4603      	mov	r3, r0
 80028b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02b      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028da:	4908      	ldr	r1, [pc, #32]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ea:	d109      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a02      	ldr	r2, [pc, #8]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028f6:	60d3      	str	r3, [r2, #12]
 80028f8:	e014      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002904:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002908:	d10c      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f000 f867 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02f      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002930:	4b2b      	ldr	r3, [pc, #172]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002936:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800293e:	4928      	ldr	r1, [pc, #160]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800294a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800294e:	d10d      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	2102      	movs	r1, #2
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f844 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d014      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	74bb      	strb	r3, [r7, #18]
 800296a:	e011      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002974:	d10c      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3320      	adds	r3, #32
 800297a:	2102      	movs	r1, #2
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f925 	bl	8002bcc <RCCEx_PLLSAI2_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800299c:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029aa:	490d      	ldr	r1, [pc, #52]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ce:	4904      	ldr	r1, [pc, #16]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000

080029e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029f2:	4b75      	ldr	r3, [pc, #468]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d018      	beq.n	8002a30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029fe:	4b72      	ldr	r3, [pc, #456]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0203 	and.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d10d      	bne.n	8002a2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
       ||
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a16:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
       ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d047      	beq.n	8002aba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	e044      	b.n	8002aba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d018      	beq.n	8002a6a <RCCEx_PLLSAI1_Config+0x86>
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d825      	bhi.n	8002a88 <RCCEx_PLLSAI1_Config+0xa4>
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d002      	beq.n	8002a46 <RCCEx_PLLSAI1_Config+0x62>
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d009      	beq.n	8002a58 <RCCEx_PLLSAI1_Config+0x74>
 8002a44:	e020      	b.n	8002a88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a46:	4b60      	ldr	r3, [pc, #384]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11d      	bne.n	8002a8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a56:	e01a      	b.n	8002a8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a58:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d116      	bne.n	8002a92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a68:	e013      	b.n	8002a92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a6a:	4b57      	ldr	r3, [pc, #348]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a76:	4b54      	ldr	r3, [pc, #336]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a86:	e006      	b.n	8002a96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8c:	e004      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10d      	bne.n	8002aba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	4944      	ldr	r1, [pc, #272]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d17d      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ac0:	4b41      	ldr	r3, [pc, #260]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a40      	ldr	r2, [pc, #256]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002acc:	f7fe fade 	bl	800108c <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ad2:	e009      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ad4:	f7fe fada 	bl	800108c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d902      	bls.n	8002ae8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ae6:	e005      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ae8:	4b37      	ldr	r3, [pc, #220]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1ef      	bne.n	8002ad4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d160      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d111      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b00:	4b31      	ldr	r3, [pc, #196]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6892      	ldr	r2, [r2, #8]
 8002b10:	0211      	lsls	r1, r2, #8
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68d2      	ldr	r2, [r2, #12]
 8002b16:	0912      	lsrs	r2, r2, #4
 8002b18:	0452      	lsls	r2, r2, #17
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	492a      	ldr	r1, [pc, #168]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	610b      	str	r3, [r1, #16]
 8002b22:	e027      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d112      	bne.n	8002b50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b2a:	4b27      	ldr	r3, [pc, #156]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b32:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6892      	ldr	r2, [r2, #8]
 8002b3a:	0211      	lsls	r1, r2, #8
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6912      	ldr	r2, [r2, #16]
 8002b40:	0852      	lsrs	r2, r2, #1
 8002b42:	3a01      	subs	r2, #1
 8002b44:	0552      	lsls	r2, r2, #21
 8002b46:	430a      	orrs	r2, r1
 8002b48:	491f      	ldr	r1, [pc, #124]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	610b      	str	r3, [r1, #16]
 8002b4e:	e011      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b50:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	0211      	lsls	r1, r2, #8
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6952      	ldr	r2, [r2, #20]
 8002b66:	0852      	lsrs	r2, r2, #1
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0652      	lsls	r2, r2, #25
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	4916      	ldr	r1, [pc, #88]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b74:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a13      	ldr	r2, [pc, #76]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7fe fa84 	bl	800108c <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b86:	e009      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b88:	f7fe fa80 	bl	800108c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	73fb      	strb	r3, [r7, #15]
          break;
 8002b9a:	e005      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	4904      	ldr	r1, [pc, #16]	@ (8002bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000

08002bcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bda:	4b6a      	ldr	r3, [pc, #424]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d018      	beq.n	8002c18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002be6:	4b67      	ldr	r3, [pc, #412]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d10d      	bne.n	8002c12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bfe:	4b61      	ldr	r3, [pc, #388]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d047      	beq.n	8002ca2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	e044      	b.n	8002ca2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d018      	beq.n	8002c52 <RCCEx_PLLSAI2_Config+0x86>
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d825      	bhi.n	8002c70 <RCCEx_PLLSAI2_Config+0xa4>
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d002      	beq.n	8002c2e <RCCEx_PLLSAI2_Config+0x62>
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d009      	beq.n	8002c40 <RCCEx_PLLSAI2_Config+0x74>
 8002c2c:	e020      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c2e:	4b55      	ldr	r3, [pc, #340]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11d      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3e:	e01a      	b.n	8002c76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c40:	4b50      	ldr	r3, [pc, #320]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d116      	bne.n	8002c7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c50:	e013      	b.n	8002c7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c52:	4b4c      	ldr	r3, [pc, #304]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c5e:	4b49      	ldr	r3, [pc, #292]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c6e:	e006      	b.n	8002c7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e004      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c86:	4b3f      	ldr	r3, [pc, #252]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	4939      	ldr	r1, [pc, #228]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d167      	bne.n	8002d78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ca8:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7fe f9ea 	bl	800108c <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cba:	e009      	b.n	8002cd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cbc:	f7fe f9e6 	bl	800108c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d902      	bls.n	8002cd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8002cce:	e005      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ef      	bne.n	8002cbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d14a      	bne.n	8002d78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d111      	bne.n	8002d0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ce8:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	0211      	lsls	r1, r2, #8
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68d2      	ldr	r2, [r2, #12]
 8002cfe:	0912      	lsrs	r2, r2, #4
 8002d00:	0452      	lsls	r2, r2, #17
 8002d02:	430a      	orrs	r2, r1
 8002d04:	491f      	ldr	r1, [pc, #124]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	614b      	str	r3, [r1, #20]
 8002d0a:	e011      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6892      	ldr	r2, [r2, #8]
 8002d1c:	0211      	lsls	r1, r2, #8
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6912      	ldr	r2, [r2, #16]
 8002d22:	0852      	lsrs	r2, r2, #1
 8002d24:	3a01      	subs	r2, #1
 8002d26:	0652      	lsls	r2, r2, #25
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	4916      	ldr	r1, [pc, #88]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a13      	ldr	r2, [pc, #76]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe f9a6 	bl	800108c <HAL_GetTick>
 8002d40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d42:	e009      	b.n	8002d58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d44:	f7fe f9a2 	bl	800108c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d902      	bls.n	8002d58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	73fb      	strb	r3, [r7, #15]
          break;
 8002d56:	e005      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d58:	4b0a      	ldr	r3, [pc, #40]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ef      	beq.n	8002d44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4904      	ldr	r1, [pc, #16]	@ (8002d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000

08002d88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d079      	beq.n	8002e8e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd ffc2 	bl	8000d38 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d058      	beq.n	8002e7c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	22ca      	movs	r2, #202	@ 0xca
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2253      	movs	r2, #83	@ 0x53
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa4e 	bl	800327c <RTC_EnterInitMode>
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d127      	bne.n	8002e3a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dfc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68d2      	ldr	r2, [r2, #12]
 8002e24:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6919      	ldr	r1, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa52 	bl	80032e4 <RTC_ExitInitMode>
 8002e40:	4603      	mov	r3, r0
 8002e42:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d113      	bne.n	8002e72 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0203 	bic.w	r2, r2, #3
 8002e58:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	22ff      	movs	r2, #255	@ 0xff
 8002e78:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e7a:	e001      	b.n	8002e80 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d103      	bne.n	8002e8e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_RTC_SetTime+0x1a>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e08b      	b.n	8002fca <HAL_RTC_SetTime+0x132>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	22ca      	movs	r2, #202	@ 0xca
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2253      	movs	r2, #83	@ 0x53
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f9d2 	bl	800327c <RTC_EnterInitMode>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d163      	bne.n	8002faa <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d126      	bne.n	8002f36 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fa2d 	bl	8003360 <RTC_ByteToBcd2>
 8002f06:	4603      	mov	r3, r0
 8002f08:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fa26 	bl	8003360 <RTC_ByteToBcd2>
 8002f14:	4603      	mov	r3, r0
 8002f16:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f18:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	789b      	ldrb	r3, [r3, #2]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa1e 	bl	8003360 <RTC_ByteToBcd2>
 8002f24:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f26:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	78db      	ldrb	r3, [r3, #3]
 8002f2e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e018      	b.n	8002f68 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2200      	movs	r2, #0
 8002f48:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f56:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f5c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	78db      	ldrb	r3, [r3, #3]
 8002f62:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002f72:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002f76:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6899      	ldr	r1, [r3, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f99f 	bl	80032e4 <RTC_ExitInitMode>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	22ff      	movs	r2, #255	@ 0xff
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd90      	pop	{r4, r7, pc}

08002fd2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003000:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003004:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800302e:	b2da      	uxtb	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	0d9b      	lsrs	r3, r3, #22
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	b2da      	uxtb	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11a      	bne.n	8003080 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f9a6 	bl	80033a0 <RTC_Bcd2ToByte>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	785b      	ldrb	r3, [r3, #1]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f99d 	bl	80033a0 <RTC_Bcd2ToByte>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	789b      	ldrb	r3, [r3, #2]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f994 	bl	80033a0 <RTC_Bcd2ToByte>
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b087      	sub	sp, #28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_RTC_SetDate+0x1a>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e075      	b.n	8003190 <HAL_RTC_SetDate+0x106>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10e      	bne.n	80030d8 <HAL_RTC_SetDate+0x4e>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	785b      	ldrb	r3, [r3, #1]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	f023 0310 	bic.w	r3, r3, #16
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	330a      	adds	r3, #10
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d11c      	bne.n	8003118 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	78db      	ldrb	r3, [r3, #3]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f93c 	bl	8003360 <RTC_ByteToBcd2>
 80030e8:	4603      	mov	r3, r0
 80030ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 f935 	bl	8003360 <RTC_ByteToBcd2>
 80030f6:	4603      	mov	r3, r0
 80030f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80030fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	789b      	ldrb	r3, [r3, #2]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f92d 	bl	8003360 <RTC_ByteToBcd2>
 8003106:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003108:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e00e      	b.n	8003136 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	78db      	ldrb	r3, [r3, #3]
 800311c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	785b      	ldrb	r3, [r3, #1]
 8003122:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003124:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800312a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	22ca      	movs	r2, #202	@ 0xca
 800313c:	625a      	str	r2, [r3, #36]	@ 0x24
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2253      	movs	r2, #83	@ 0x53
 8003144:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f898 	bl	800327c <RTC_EnterInitMode>
 800314c:	4603      	mov	r3, r0
 800314e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003160:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003164:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f8bc 	bl	80032e4 <RTC_ExitInitMode>
 800316c:	4603      	mov	r3, r0
 800316e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	22ff      	movs	r2, #255	@ 0xff
 8003176:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800318e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003190:	4618      	mov	r0, r3
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}

08003198 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80031b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	0c1b      	lsrs	r3, r3, #16
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11a      	bne.n	8003228 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	78db      	ldrb	r3, [r3, #3]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f8d2 	bl	80033a0 <RTC_Bcd2ToByte>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	785b      	ldrb	r3, [r3, #1]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f8c9 	bl	80033a0 <RTC_Bcd2ToByte>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	789b      	ldrb	r3, [r3, #2]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f8c0 	bl	80033a0 <RTC_Bcd2ToByte>
 8003220:	4603      	mov	r3, r0
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0d      	ldr	r2, [pc, #52]	@ (8003278 <HAL_RTC_WaitForSynchro+0x44>)
 8003242:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003244:	f7fd ff22 	bl	800108c <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800324a:	e009      	b.n	8003260 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800324c:	f7fd ff1e 	bl	800108c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800325a:	d901      	bls.n	8003260 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e007      	b.n	8003270 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0ee      	beq.n	800324c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0003ff5f 	.word	0x0003ff5f

0800327c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d120      	bne.n	80032d8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032a0:	f7fd fef4 	bl	800108c <HAL_GetTick>
 80032a4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032a6:	e00d      	b.n	80032c4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80032a8:	f7fd fef0 	bl	800108c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032b6:	d905      	bls.n	80032c4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2203      	movs	r2, #3
 80032c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <RTC_EnterInitMode+0x5c>
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d1e7      	bne.n	80032a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <RTC_ExitInitMode+0x78>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a19      	ldr	r2, [pc, #100]	@ (800335c <RTC_ExitInitMode+0x78>)
 80032f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032fa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80032fc:	4b17      	ldr	r3, [pc, #92]	@ (800335c <RTC_ExitInitMode+0x78>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10c      	bne.n	8003322 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff93 	bl	8003234 <HAL_RTC_WaitForSynchro>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01e      	beq.n	8003352 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2203      	movs	r2, #3
 8003318:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e017      	b.n	8003352 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <RTC_ExitInitMode+0x78>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4a0d      	ldr	r2, [pc, #52]	@ (800335c <RTC_ExitInitMode+0x78>)
 8003328:	f023 0320 	bic.w	r3, r3, #32
 800332c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ff80 	bl	8003234 <HAL_RTC_WaitForSynchro>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <RTC_ExitInitMode+0x78>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	4a04      	ldr	r2, [pc, #16]	@ (800335c <RTC_ExitInitMode+0x78>)
 800334c:	f043 0320 	orr.w	r3, r3, #32
 8003350:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40002800 	.word	0x40002800

08003360 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003372:	e005      	b.n	8003380 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	3b0a      	subs	r3, #10
 800337e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003380:	7afb      	ldrb	r3, [r7, #11]
 8003382:	2b09      	cmp	r3, #9
 8003384:	d8f6      	bhi.n	8003374 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	b2da      	uxtb	r2, r3
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	4313      	orrs	r3, r2
 8003392:	b2db      	uxtb	r3, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	0092      	lsls	r2, r2, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	4413      	add	r3, r2
 80033c6:	b2db      	uxtb	r3, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e040      	b.n	8003468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fcd0 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	@ 0x24
 8003400:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 ff3a 	bl	8004294 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fc7f 	bl	8003d24 <UART_SetConfig>
 8003426:	4603      	mov	r3, r0
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e01b      	b.n	8003468 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800343e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800344e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 ffb9 	bl	80043d8 <UART_CheckIdleState>
 8003466:	4603      	mov	r3, r0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	@ 0x28
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003484:	2b20      	cmp	r3, #32
 8003486:	d177      	bne.n	8003578 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_UART_Transmit+0x24>
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e070      	b.n	800357a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2221      	movs	r2, #33	@ 0x21
 80034a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034a6:	f7fd fdf1 	bl	800108c <HAL_GetTick>
 80034aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c4:	d108      	bne.n	80034d8 <HAL_UART_Transmit+0x68>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d104      	bne.n	80034d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	e003      	b.n	80034e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034e0:	e02f      	b.n	8003542 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2200      	movs	r2, #0
 80034ea:	2180      	movs	r1, #128	@ 0x80
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f001 f81b 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e03b      	b.n	800357a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	881a      	ldrh	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003514:	b292      	uxth	r2, r2
 8003516:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	3302      	adds	r3, #2
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e007      	b.n	8003530 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3301      	adds	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1c9      	bne.n	80034e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2140      	movs	r1, #64	@ 0x40
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 ffe5 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e005      	b.n	800357a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003584:	b480      	push	{r7}
 8003586:	b08b      	sub	sp, #44	@ 0x2c
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003596:	2b20      	cmp	r3, #32
 8003598:	d147      	bne.n	800362a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_UART_Transmit_IT+0x22>
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e040      	b.n	800362c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2221      	movs	r2, #33	@ 0x21
 80035d2:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035dc:	d107      	bne.n	80035ee <HAL_UART_Transmit_IT+0x6a>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a13      	ldr	r2, [pc, #76]	@ (8003638 <HAL_UART_Transmit_IT+0xb4>)
 80035ea:	66da      	str	r2, [r3, #108]	@ 0x6c
 80035ec:	e002      	b.n	80035f4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a12      	ldr	r2, [pc, #72]	@ (800363c <HAL_UART_Transmit_IT+0xb8>)
 80035f2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	613b      	str	r3, [r7, #16]
   return(result);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	69f9      	ldr	r1, [r7, #28]
 8003618:	6a3a      	ldr	r2, [r7, #32]
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e6      	bne.n	80035f4 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	372c      	adds	r7, #44	@ 0x2c
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	0800493b 	.word	0x0800493b
 800363c:	08004885 	.word	0x08004885

08003640 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	@ 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003654:	2b20      	cmp	r3, #32
 8003656:	d137      	bne.n	80036c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_UART_Receive_IT+0x24>
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e030      	b.n	80036ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a18      	ldr	r2, [pc, #96]	@ (80036d4 <HAL_UART_Receive_IT+0x94>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d01f      	beq.n	80036b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d018      	beq.n	80036b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	613b      	str	r3, [r7, #16]
   return(result);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	623b      	str	r3, [r7, #32]
 80036a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	69f9      	ldr	r1, [r7, #28]
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e6      	bne.n	8003686 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	461a      	mov	r2, r3
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 ffa0 	bl	8004604 <UART_Start_Receive_IT>
 80036c4:	4603      	mov	r3, r0
 80036c6:	e000      	b.n	80036ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3728      	adds	r7, #40	@ 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40008000 	.word	0x40008000

080036d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b0ba      	sub	sp, #232	@ 0xe8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003702:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003706:	4013      	ands	r3, r2
 8003708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800370c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d115      	bne.n	8003740 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00f      	beq.n	8003740 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 82ca 	beq.w	8003cca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
      }
      return;
 800373e:	e2c4      	b.n	8003cca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8117 	beq.w	8003978 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800374a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003756:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800375a:	4b85      	ldr	r3, [pc, #532]	@ (8003970 <HAL_UART_IRQHandler+0x298>)
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 810a 	beq.w	8003978 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d011      	beq.n	8003794 <HAL_UART_IRQHandler+0xbc>
 8003770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2201      	movs	r2, #1
 8003782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d011      	beq.n	80037c4 <HAL_UART_IRQHandler+0xec>
 80037a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2202      	movs	r2, #2
 80037b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ba:	f043 0204 	orr.w	r2, r3, #4
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d011      	beq.n	80037f4 <HAL_UART_IRQHandler+0x11c>
 80037d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2204      	movs	r2, #4
 80037e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ea:	f043 0202 	orr.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d017      	beq.n	8003830 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800380c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003810:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2208      	movs	r2, #8
 800381e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003826:	f043 0208 	orr.w	r2, r3, #8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003838:	2b00      	cmp	r3, #0
 800383a:	d012      	beq.n	8003862 <HAL_UART_IRQHandler+0x18a>
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003840:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8230 	beq.w	8003cce <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800387a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800389c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b40      	cmp	r3, #64	@ 0x40
 80038ac:	d005      	beq.n	80038ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d04f      	beq.n	800395a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 ff68 	bl	8004790 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	d141      	bne.n	8003952 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1d9      	bne.n	80038ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003926:	4a13      	ldr	r2, [pc, #76]	@ (8003974 <HAL_UART_IRQHandler+0x29c>)
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fd07 	bl	8001342 <HAL_DMA_Abort_IT>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d017      	beq.n	800396a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003944:	4610      	mov	r0, r2
 8003946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	e00f      	b.n	800396a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9d4 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	e00b      	b.n	800396a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f9d0 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	e007      	b.n	800396a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9cc 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003968:	e1b1      	b.n	8003cce <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396a:	bf00      	nop
    return;
 800396c:	e1af      	b.n	8003cce <HAL_UART_IRQHandler+0x5f6>
 800396e:	bf00      	nop
 8003970:	04000120 	.word	0x04000120
 8003974:	08004859 	.word	0x08004859

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397c:	2b01      	cmp	r3, #1
 800397e:	f040 816a 	bne.w	8003c56 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 8163 	beq.w	8003c56 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 815c 	beq.w	8003c56 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2210      	movs	r2, #16
 80039a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	f040 80d4 	bne.w	8003b5e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80ad 	beq.w	8003b26 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039d6:	429a      	cmp	r2, r3
 80039d8:	f080 80a5 	bcs.w	8003b26 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 8086 	bne.w	8003b04 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1da      	bne.n	80039f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e1      	bne.n	8003a42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3308      	adds	r3, #8
 8003a84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003aa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003aa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e3      	bne.n	8003a7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ad4:	f023 0310 	bic.w	r3, r3, #16
 8003ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ae8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e4      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fbe1 	bl	80012c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8f4 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003b24:	e0d5      	b.n	8003cd2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b30:	429a      	cmp	r2, r3
 8003b32:	f040 80ce 	bne.w	8003cd2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	f040 80c5 	bne.w	8003cd2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8d8 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
      return;
 8003b5c:	e0b9      	b.n	8003cd2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80ab 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a6 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e4      	bne.n	8003b8a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3308      	adds	r3, #8
 8003be0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003be4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e3      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f023 0310 	bic.w	r3, r3, #16
 8003c20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e4      	bne.n	8003c0c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f85c 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c54:	e03f      	b.n	8003cd6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00e      	beq.n	8003c80 <HAL_UART_IRQHandler+0x5a8>
 8003c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f001 f8a5 	bl	8004dc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c7e:	e02d      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01c      	beq.n	8003cda <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
    }
    return;
 8003ca8:	e017      	b.n	8003cda <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d012      	beq.n	8003cdc <HAL_UART_IRQHandler+0x604>
 8003cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00c      	beq.n	8003cdc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fe99 	bl	80049fa <UART_EndTransmit_IT>
    return;
 8003cc8:	e008      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
      return;
 8003cca:	bf00      	nop
 8003ccc:	e006      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
    return;
 8003cce:	bf00      	nop
 8003cd0:	e004      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
      return;
 8003cd2:	bf00      	nop
 8003cd4:	e002      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
      return;
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
    return;
 8003cda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003cdc:	37e8      	adds	r7, #232	@ 0xe8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop

08003ce4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d28:	b08a      	sub	sp, #40	@ 0x28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4ba4      	ldr	r3, [pc, #656]	@ (8003fe4 <UART_SetConfig+0x2c0>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a99      	ldr	r2, [pc, #612]	@ (8003fe8 <UART_SetConfig+0x2c4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a90      	ldr	r2, [pc, #576]	@ (8003fec <UART_SetConfig+0x2c8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d126      	bne.n	8003dfc <UART_SetConfig+0xd8>
 8003dae:	4b90      	ldr	r3, [pc, #576]	@ (8003ff0 <UART_SetConfig+0x2cc>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d81b      	bhi.n	8003df4 <UART_SetConfig+0xd0>
 8003dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc4 <UART_SetConfig+0xa0>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003de5 	.word	0x08003de5
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dda:	e116      	b.n	800400a <UART_SetConfig+0x2e6>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de2:	e112      	b.n	800400a <UART_SetConfig+0x2e6>
 8003de4:	2304      	movs	r3, #4
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dea:	e10e      	b.n	800400a <UART_SetConfig+0x2e6>
 8003dec:	2308      	movs	r3, #8
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df2:	e10a      	b.n	800400a <UART_SetConfig+0x2e6>
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfa:	e106      	b.n	800400a <UART_SetConfig+0x2e6>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff4 <UART_SetConfig+0x2d0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d138      	bne.n	8003e78 <UART_SetConfig+0x154>
 8003e06:	4b7a      	ldr	r3, [pc, #488]	@ (8003ff0 <UART_SetConfig+0x2cc>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d82d      	bhi.n	8003e70 <UART_SetConfig+0x14c>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <UART_SetConfig+0xf8>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e71 	.word	0x08003e71
 8003e24:	08003e71 	.word	0x08003e71
 8003e28:	08003e71 	.word	0x08003e71
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e71 	.word	0x08003e71
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	08003e71 	.word	0x08003e71
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e69 	.word	0x08003e69
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e56:	e0d8      	b.n	800400a <UART_SetConfig+0x2e6>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e0d4      	b.n	800400a <UART_SetConfig+0x2e6>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e0d0      	b.n	800400a <UART_SetConfig+0x2e6>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e0cc      	b.n	800400a <UART_SetConfig+0x2e6>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e0c8      	b.n	800400a <UART_SetConfig+0x2e6>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ff8 <UART_SetConfig+0x2d4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d125      	bne.n	8003ece <UART_SetConfig+0x1aa>
 8003e82:	4b5b      	ldr	r3, [pc, #364]	@ (8003ff0 <UART_SetConfig+0x2cc>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e8c:	2b30      	cmp	r3, #48	@ 0x30
 8003e8e:	d016      	beq.n	8003ebe <UART_SetConfig+0x19a>
 8003e90:	2b30      	cmp	r3, #48	@ 0x30
 8003e92:	d818      	bhi.n	8003ec6 <UART_SetConfig+0x1a2>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d00a      	beq.n	8003eae <UART_SetConfig+0x18a>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d814      	bhi.n	8003ec6 <UART_SetConfig+0x1a2>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <UART_SetConfig+0x182>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d008      	beq.n	8003eb6 <UART_SetConfig+0x192>
 8003ea4:	e00f      	b.n	8003ec6 <UART_SetConfig+0x1a2>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eac:	e0ad      	b.n	800400a <UART_SetConfig+0x2e6>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb4:	e0a9      	b.n	800400a <UART_SetConfig+0x2e6>
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ebc:	e0a5      	b.n	800400a <UART_SetConfig+0x2e6>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec4:	e0a1      	b.n	800400a <UART_SetConfig+0x2e6>
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ecc:	e09d      	b.n	800400a <UART_SetConfig+0x2e6>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ffc <UART_SetConfig+0x2d8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d125      	bne.n	8003f24 <UART_SetConfig+0x200>
 8003ed8:	4b45      	ldr	r3, [pc, #276]	@ (8003ff0 <UART_SetConfig+0x2cc>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee4:	d016      	beq.n	8003f14 <UART_SetConfig+0x1f0>
 8003ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee8:	d818      	bhi.n	8003f1c <UART_SetConfig+0x1f8>
 8003eea:	2b80      	cmp	r3, #128	@ 0x80
 8003eec:	d00a      	beq.n	8003f04 <UART_SetConfig+0x1e0>
 8003eee:	2b80      	cmp	r3, #128	@ 0x80
 8003ef0:	d814      	bhi.n	8003f1c <UART_SetConfig+0x1f8>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <UART_SetConfig+0x1d8>
 8003ef6:	2b40      	cmp	r3, #64	@ 0x40
 8003ef8:	d008      	beq.n	8003f0c <UART_SetConfig+0x1e8>
 8003efa:	e00f      	b.n	8003f1c <UART_SetConfig+0x1f8>
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f02:	e082      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f04:	2302      	movs	r3, #2
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0a:	e07e      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f12:	e07a      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f14:	2308      	movs	r3, #8
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1a:	e076      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f22:	e072      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a35      	ldr	r2, [pc, #212]	@ (8004000 <UART_SetConfig+0x2dc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d12a      	bne.n	8003f84 <UART_SetConfig+0x260>
 8003f2e:	4b30      	ldr	r3, [pc, #192]	@ (8003ff0 <UART_SetConfig+0x2cc>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f3c:	d01a      	beq.n	8003f74 <UART_SetConfig+0x250>
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f42:	d81b      	bhi.n	8003f7c <UART_SetConfig+0x258>
 8003f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f48:	d00c      	beq.n	8003f64 <UART_SetConfig+0x240>
 8003f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f4e:	d815      	bhi.n	8003f7c <UART_SetConfig+0x258>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <UART_SetConfig+0x238>
 8003f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f58:	d008      	beq.n	8003f6c <UART_SetConfig+0x248>
 8003f5a:	e00f      	b.n	8003f7c <UART_SetConfig+0x258>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f62:	e052      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6a:	e04e      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f72:	e04a      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7a:	e046      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f82:	e042      	b.n	800400a <UART_SetConfig+0x2e6>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a17      	ldr	r2, [pc, #92]	@ (8003fe8 <UART_SetConfig+0x2c4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d13a      	bne.n	8004004 <UART_SetConfig+0x2e0>
 8003f8e:	4b18      	ldr	r3, [pc, #96]	@ (8003ff0 <UART_SetConfig+0x2cc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f9c:	d01a      	beq.n	8003fd4 <UART_SetConfig+0x2b0>
 8003f9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa2:	d81b      	bhi.n	8003fdc <UART_SetConfig+0x2b8>
 8003fa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa8:	d00c      	beq.n	8003fc4 <UART_SetConfig+0x2a0>
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fae:	d815      	bhi.n	8003fdc <UART_SetConfig+0x2b8>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <UART_SetConfig+0x298>
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb8:	d008      	beq.n	8003fcc <UART_SetConfig+0x2a8>
 8003fba:	e00f      	b.n	8003fdc <UART_SetConfig+0x2b8>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e022      	b.n	800400a <UART_SetConfig+0x2e6>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e01e      	b.n	800400a <UART_SetConfig+0x2e6>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e01a      	b.n	800400a <UART_SetConfig+0x2e6>
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fda:	e016      	b.n	800400a <UART_SetConfig+0x2e6>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe2:	e012      	b.n	800400a <UART_SetConfig+0x2e6>
 8003fe4:	efff69f3 	.word	0xefff69f3
 8003fe8:	40008000 	.word	0x40008000
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	40004800 	.word	0x40004800
 8003ffc:	40004c00 	.word	0x40004c00
 8004000:	40005000 	.word	0x40005000
 8004004:	2310      	movs	r3, #16
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a9f      	ldr	r2, [pc, #636]	@ (800428c <UART_SetConfig+0x568>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d17a      	bne.n	800410a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004014:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004018:	2b08      	cmp	r3, #8
 800401a:	d824      	bhi.n	8004066 <UART_SetConfig+0x342>
 800401c:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <UART_SetConfig+0x300>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004049 	.word	0x08004049
 8004028:	08004067 	.word	0x08004067
 800402c:	08004051 	.word	0x08004051
 8004030:	08004067 	.word	0x08004067
 8004034:	08004057 	.word	0x08004057
 8004038:	08004067 	.word	0x08004067
 800403c:	08004067 	.word	0x08004067
 8004040:	08004067 	.word	0x08004067
 8004044:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004048:	f7fe f956 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 800404c:	61f8      	str	r0, [r7, #28]
        break;
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b8f      	ldr	r3, [pc, #572]	@ (8004290 <UART_SetConfig+0x56c>)
 8004052:	61fb      	str	r3, [r7, #28]
        break;
 8004054:	e00d      	b.n	8004072 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe f8b7 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 800405a:	61f8      	str	r0, [r7, #28]
        break;
 800405c:	e009      	b.n	8004072 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004062:	61fb      	str	r3, [r7, #28]
        break;
 8004064:	e005      	b.n	8004072 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80fb 	beq.w	8004270 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	429a      	cmp	r2, r3
 8004088:	d305      	bcc.n	8004096 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	429a      	cmp	r2, r3
 8004094:	d903      	bls.n	800409e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800409c:	e0e8      	b.n	8004270 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2200      	movs	r2, #0
 80040a2:	461c      	mov	r4, r3
 80040a4:	4615      	mov	r5, r2
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	022b      	lsls	r3, r5, #8
 80040b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040b4:	0222      	lsls	r2, r4, #8
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	6849      	ldr	r1, [r1, #4]
 80040ba:	0849      	lsrs	r1, r1, #1
 80040bc:	2000      	movs	r0, #0
 80040be:	4688      	mov	r8, r1
 80040c0:	4681      	mov	r9, r0
 80040c2:	eb12 0a08 	adds.w	sl, r2, r8
 80040c6:	eb43 0b09 	adc.w	fp, r3, r9
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040d8:	4650      	mov	r0, sl
 80040da:	4659      	mov	r1, fp
 80040dc:	f7fc f8d0 	bl	8000280 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ee:	d308      	bcc.n	8004102 <UART_SetConfig+0x3de>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040f6:	d204      	bcs.n	8004102 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	e0b6      	b.n	8004270 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004108:	e0b2      	b.n	8004270 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004112:	d15e      	bne.n	80041d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004114:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004118:	2b08      	cmp	r3, #8
 800411a:	d828      	bhi.n	800416e <UART_SetConfig+0x44a>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <UART_SetConfig+0x400>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004149 	.word	0x08004149
 8004128:	08004151 	.word	0x08004151
 800412c:	08004159 	.word	0x08004159
 8004130:	0800416f 	.word	0x0800416f
 8004134:	0800415f 	.word	0x0800415f
 8004138:	0800416f 	.word	0x0800416f
 800413c:	0800416f 	.word	0x0800416f
 8004140:	0800416f 	.word	0x0800416f
 8004144:	08004167 	.word	0x08004167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004148:	f7fe f8d6 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 800414c:	61f8      	str	r0, [r7, #28]
        break;
 800414e:	e014      	b.n	800417a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004150:	f7fe f8e8 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 8004154:	61f8      	str	r0, [r7, #28]
        break;
 8004156:	e010      	b.n	800417a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004158:	4b4d      	ldr	r3, [pc, #308]	@ (8004290 <UART_SetConfig+0x56c>)
 800415a:	61fb      	str	r3, [r7, #28]
        break;
 800415c:	e00d      	b.n	800417a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415e:	f7fe f833 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8004162:	61f8      	str	r0, [r7, #28]
        break;
 8004164:	e009      	b.n	800417a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800416a:	61fb      	str	r3, [r7, #28]
        break;
 800416c:	e005      	b.n	800417a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d077      	beq.n	8004270 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	005a      	lsls	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	085b      	lsrs	r3, r3, #1
 800418a:	441a      	add	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b0f      	cmp	r3, #15
 800419a:	d916      	bls.n	80041ca <UART_SetConfig+0x4a6>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a2:	d212      	bcs.n	80041ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f023 030f 	bic.w	r3, r3, #15
 80041ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	8afb      	ldrh	r3, [r7, #22]
 80041bc:	4313      	orrs	r3, r2
 80041be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	8afa      	ldrh	r2, [r7, #22]
 80041c6:	60da      	str	r2, [r3, #12]
 80041c8:	e052      	b.n	8004270 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041d0:	e04e      	b.n	8004270 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d827      	bhi.n	800422a <UART_SetConfig+0x506>
 80041da:	a201      	add	r2, pc, #4	@ (adr r2, 80041e0 <UART_SetConfig+0x4bc>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004205 	.word	0x08004205
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004215 	.word	0x08004215
 80041ec:	0800422b 	.word	0x0800422b
 80041f0:	0800421b 	.word	0x0800421b
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	0800422b 	.word	0x0800422b
 8004200:	08004223 	.word	0x08004223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004204:	f7fe f878 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8004208:	61f8      	str	r0, [r7, #28]
        break;
 800420a:	e014      	b.n	8004236 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7fe f88a 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 8004210:	61f8      	str	r0, [r7, #28]
        break;
 8004212:	e010      	b.n	8004236 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b1e      	ldr	r3, [pc, #120]	@ (8004290 <UART_SetConfig+0x56c>)
 8004216:	61fb      	str	r3, [r7, #28]
        break;
 8004218:	e00d      	b.n	8004236 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7fd ffd5 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 800421e:	61f8      	str	r0, [r7, #28]
        break;
 8004220:	e009      	b.n	8004236 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004226:	61fb      	str	r3, [r7, #28]
        break;
 8004228:	e005      	b.n	8004236 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004234:	bf00      	nop
    }

    if (pclk != 0U)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d019      	beq.n	8004270 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	085a      	lsrs	r2, r3, #1
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b0f      	cmp	r3, #15
 8004254:	d909      	bls.n	800426a <UART_SetConfig+0x546>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800425c:	d205      	bcs.n	800426a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60da      	str	r2, [r3, #12]
 8004268:	e002      	b.n	8004270 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800427c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004280:	4618      	mov	r0, r3
 8004282:	3728      	adds	r7, #40	@ 0x28
 8004284:	46bd      	mov	sp, r7
 8004286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428a:	bf00      	nop
 800428c:	40008000 	.word	0x40008000
 8004290:	00f42400 	.word	0x00f42400

08004294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01a      	beq.n	80043aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004392:	d10a      	bne.n	80043aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b098      	sub	sp, #96	@ 0x60
 80043dc:	af02      	add	r7, sp, #8
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043e8:	f7fc fe50 	bl	800108c <HAL_GetTick>
 80043ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d12e      	bne.n	800445a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004404:	2200      	movs	r2, #0
 8004406:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f88c 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d021      	beq.n	800445a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800442a:	653b      	str	r3, [r7, #80]	@ 0x50
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004434:	647b      	str	r3, [r7, #68]	@ 0x44
 8004436:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800443a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e6      	bne.n	8004416 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e062      	b.n	8004520 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b04      	cmp	r3, #4
 8004466:	d149      	bne.n	80044fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004470:	2200      	movs	r2, #0
 8004472:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f856 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d03c      	beq.n	80044fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	623b      	str	r3, [r7, #32]
   return(result);
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e6      	bne.n	8004482 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d4:	61fa      	str	r2, [r7, #28]
 80044d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	617b      	str	r3, [r7, #20]
   return(result);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e011      	b.n	8004520 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3758      	adds	r7, #88	@ 0x58
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004538:	e04f      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d04b      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004542:	f7fc fda3 	bl	800108c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <UART_WaitOnFlagUntilTimeout+0x30>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e04e      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d037      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0xb2>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b80      	cmp	r3, #128	@ 0x80
 800456e:	d034      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b40      	cmp	r3, #64	@ 0x40
 8004574:	d031      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d110      	bne.n	80045a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2208      	movs	r2, #8
 800458a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f8ff 	bl	8004790 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2208      	movs	r2, #8
 8004596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e029      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b4:	d111      	bne.n	80045da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f8e5 	bl	8004790 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e00f      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d0a0      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004604:	b480      	push	{r7}
 8004606:	b097      	sub	sp, #92	@ 0x5c
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	88fa      	ldrh	r2, [r7, #6]
 8004624:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004636:	d10e      	bne.n	8004656 <UART_Start_Receive_IT+0x52>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <UART_Start_Receive_IT+0x48>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004646:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800464a:	e02d      	b.n	80046a8 <UART_Start_Receive_IT+0xa4>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	22ff      	movs	r2, #255	@ 0xff
 8004650:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004654:	e028      	b.n	80046a8 <UART_Start_Receive_IT+0xa4>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10d      	bne.n	800467a <UART_Start_Receive_IT+0x76>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d104      	bne.n	8004670 <UART_Start_Receive_IT+0x6c>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	22ff      	movs	r2, #255	@ 0xff
 800466a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800466e:	e01b      	b.n	80046a8 <UART_Start_Receive_IT+0xa4>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	227f      	movs	r2, #127	@ 0x7f
 8004674:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004678:	e016      	b.n	80046a8 <UART_Start_Receive_IT+0xa4>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004682:	d10d      	bne.n	80046a0 <UART_Start_Receive_IT+0x9c>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <UART_Start_Receive_IT+0x92>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	227f      	movs	r2, #127	@ 0x7f
 8004690:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004694:	e008      	b.n	80046a8 <UART_Start_Receive_IT+0xa4>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	223f      	movs	r2, #63	@ 0x3f
 800469a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800469e:	e003      	b.n	80046a8 <UART_Start_Receive_IT+0xa4>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2222      	movs	r2, #34	@ 0x22
 80046b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3308      	adds	r3, #8
 80046be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3308      	adds	r3, #8
 80046d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80046da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80046e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e5      	bne.n	80046b8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f4:	d107      	bne.n	8004706 <UART_Start_Receive_IT+0x102>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a21      	ldr	r2, [pc, #132]	@ (8004788 <UART_Start_Receive_IT+0x184>)
 8004702:	669a      	str	r2, [r3, #104]	@ 0x68
 8004704:	e002      	b.n	800470c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a20      	ldr	r2, [pc, #128]	@ (800478c <UART_Start_Receive_IT+0x188>)
 800470a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d019      	beq.n	8004748 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
 8004734:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004738:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e6      	bne.n	8004714 <UART_Start_Receive_IT+0x110>
 8004746:	e018      	b.n	800477a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	613b      	str	r3, [r7, #16]
   return(result);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f043 0320 	orr.w	r3, r3, #32
 800475c:	653b      	str	r3, [r7, #80]	@ 0x50
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004766:	623b      	str	r3, [r7, #32]
 8004768:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	69f9      	ldr	r1, [r7, #28]
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	61bb      	str	r3, [r7, #24]
   return(result);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e6      	bne.n	8004748 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	375c      	adds	r7, #92	@ 0x5c
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	08004c0d 	.word	0x08004c0d
 800478c:	08004a51 	.word	0x08004a51

08004790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b095      	sub	sp, #84	@ 0x54
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80047b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e6      	bne.n	8004798 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3308      	adds	r3, #8
 80047e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004802:	2b01      	cmp	r3, #1
 8004804:	d118      	bne.n	8004838 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	60bb      	str	r3, [r7, #8]
   return(result);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f023 0310 	bic.w	r3, r3, #16
 800481a:	647b      	str	r3, [r7, #68]	@ 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6979      	ldr	r1, [r7, #20]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	613b      	str	r3, [r7, #16]
   return(result);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e6      	bne.n	8004806 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800484c:	bf00      	nop
 800484e:	3754      	adds	r7, #84	@ 0x54
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff fa3e 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b08f      	sub	sp, #60	@ 0x3c
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004890:	2b21      	cmp	r3, #33	@ 0x21
 8004892:	d14c      	bne.n	800492e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d132      	bne.n	8004906 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6979      	ldr	r1, [r7, #20]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	613b      	str	r3, [r7, #16]
   return(result);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e6      	bne.n	80048d2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004904:	e013      	b.n	800492e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490a:	781a      	ldrb	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800492e:	bf00      	nop
 8004930:	373c      	adds	r7, #60	@ 0x3c
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800493a:	b480      	push	{r7}
 800493c:	b091      	sub	sp, #68	@ 0x44
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004946:	2b21      	cmp	r3, #33	@ 0x21
 8004948:	d151      	bne.n	80049ee <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d132      	bne.n	80049bc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	623b      	str	r3, [r7, #32]
   return(result);
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800496a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004974:	633b      	str	r3, [r7, #48]	@ 0x30
 8004976:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800497a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e6      	bne.n	8004956 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	60fb      	str	r3, [r7, #12]
   return(result);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800499c:	637b      	str	r3, [r7, #52]	@ 0x34
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	69b9      	ldr	r1, [r7, #24]
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	617b      	str	r3, [r7, #20]
   return(result);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e6      	bne.n	8004988 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80049ba:	e018      	b.n	80049ee <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80049c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049c4:	881a      	ldrh	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ce:	b292      	uxth	r2, r2
 80049d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d6:	1c9a      	adds	r2, r3, #2
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80049ee:	bf00      	nop
 80049f0:	3744      	adds	r7, #68	@ 0x44
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b088      	sub	sp, #32
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6979      	ldr	r1, [r7, #20]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e6      	bne.n	8004a02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff f94f 	bl	8003ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a46:	bf00      	nop
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b09c      	sub	sp, #112	@ 0x70
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a68:	2b22      	cmp	r3, #34	@ 0x22
 8004a6a:	f040 80be 	bne.w	8004bea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a7c:	b2d9      	uxtb	r1, r3
 8004a7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a88:	400a      	ands	r2, r1
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f040 80a3 	bne.w	8004bfe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004acc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ad8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004adc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e6      	bne.n	8004ab8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3308      	adds	r3, #8
 8004b08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a34      	ldr	r2, [pc, #208]	@ (8004c08 <UART_RxISR_8BIT+0x1b8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d01f      	beq.n	8004b7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	623b      	str	r3, [r7, #32]
   return(result);
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e6      	bne.n	8004b4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d12e      	bne.n	8004be2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0310 	bic.w	r3, r3, #16
 8004b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	69b9      	ldr	r1, [r7, #24]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e6      	bne.n	8004b8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d103      	bne.n	8004bd2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2210      	movs	r2, #16
 8004bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff f896 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004be0:	e00d      	b.n	8004bfe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fb fd16 	bl	8000614 <HAL_UART_RxCpltCallback>
}
 8004be8:	e009      	b.n	8004bfe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	8b1b      	ldrh	r3, [r3, #24]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	b292      	uxth	r2, r2
 8004bfc:	831a      	strh	r2, [r3, #24]
}
 8004bfe:	bf00      	nop
 8004c00:	3770      	adds	r7, #112	@ 0x70
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40008000 	.word	0x40008000

08004c0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b09c      	sub	sp, #112	@ 0x70
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c24:	2b22      	cmp	r3, #34	@ 0x22
 8004c26:	f040 80be 	bne.w	8004da6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004c30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c38:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004c3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004c42:	4013      	ands	r3, r2
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4e:	1c9a      	adds	r2, r3, #2
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f040 80a3 	bne.w	8004dba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c88:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c92:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e6      	bne.n	8004c74 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3308      	adds	r3, #8
 8004cac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e5      	bne.n	8004ca6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a34      	ldr	r2, [pc, #208]	@ (8004dc4 <UART_RxISR_16BIT+0x1b8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d01f      	beq.n	8004d38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e6      	bne.n	8004d06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d12e      	bne.n	8004d9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f023 0310 	bic.w	r3, r3, #16
 8004d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6979      	ldr	r1, [r7, #20]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	613b      	str	r3, [r7, #16]
   return(result);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e6      	bne.n	8004d46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d103      	bne.n	8004d8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2210      	movs	r2, #16
 8004d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fe ffb8 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d9c:	e00d      	b.n	8004dba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fb fc38 	bl	8000614 <HAL_UART_RxCpltCallback>
}
 8004da4:	e009      	b.n	8004dba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	8b1b      	ldrh	r3, [r3, #24]
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	b292      	uxth	r2, r2
 8004db8:	831a      	strh	r2, [r3, #24]
}
 8004dba:	bf00      	nop
 8004dbc:	3770      	adds	r7, #112	@ 0x70
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40008000 	.word	0x40008000

08004dc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dee:	2b84      	cmp	r3, #132	@ 0x84
 8004df0:	d005      	beq.n	8004dfe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004df2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	3303      	adds	r3, #3
 8004dfc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e10:	f001 f818 	bl	8005e44 <vTaskStartScheduler>
  
  return osOK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1c:	b089      	sub	sp, #36	@ 0x24
 8004e1e:	af04      	add	r7, sp, #16
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <osThreadCreate+0x54>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01c      	beq.n	8004e6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685c      	ldr	r4, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691e      	ldr	r6, [r3, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff ffc8 	bl	8004ddc <makeFreeRtosPriority>
 8004e4c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e56:	9202      	str	r2, [sp, #8]
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	9100      	str	r1, [sp, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	4632      	mov	r2, r6
 8004e60:	4629      	mov	r1, r5
 8004e62:	4620      	mov	r0, r4
 8004e64:	f000 fe20 	bl	8005aa8 <xTaskCreateStatic>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e01c      	b.n	8004ea8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685c      	ldr	r4, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e7a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff ffaa 	bl	8004ddc <makeFreeRtosPriority>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	f107 030c 	add.w	r3, r7, #12
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	9200      	str	r2, [sp, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	4632      	mov	r2, r6
 8004e96:	4629      	mov	r1, r5
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 fe65 	bl	8005b68 <xTaskCreate>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d001      	beq.n	8004ea8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <osDelay+0x16>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	e000      	b.n	8004eca <osDelay+0x18>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 ff84 	bl	8005dd8 <vTaskDelay>
  
  return osOK;
 8004ed0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f103 0208 	add.w	r2, r3, #8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f103 0208 	add.w	r2, r3, #8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f103 0208 	add.w	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	601a      	str	r2, [r3, #0]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d103      	bne.n	8004f9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e00c      	b.n	8004fb6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e002      	b.n	8004faa <vListInsert+0x2e>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d2f6      	bcs.n	8004fa4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6892      	ldr	r2, [r2, #8]
 8005004:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6852      	ldr	r2, [r2, #4]
 800500e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d103      	bne.n	8005022 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	1e5a      	subs	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005070:	f002 f99a 	bl	80073a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507c:	68f9      	ldr	r1, [r7, #12]
 800507e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	441a      	add	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a0:	3b01      	subs	r3, #1
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	441a      	add	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	22ff      	movs	r2, #255	@ 0xff
 80050b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	22ff      	movs	r2, #255	@ 0xff
 80050bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d114      	bne.n	80050f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01a      	beq.n	8005104 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3310      	adds	r3, #16
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 f942 	bl	800635c <xTaskRemoveFromEventList>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d012      	beq.n	8005104 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <xQueueGenericReset+0xd0>)
 80050e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	e009      	b.n	8005104 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3310      	adds	r3, #16
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff fef0 	bl	8004eda <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3324      	adds	r3, #36	@ 0x24
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff feeb 	bl	8004eda <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005104:	f002 f982 	bl	800740c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005108:	2301      	movs	r3, #1
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08e      	sub	sp, #56	@ 0x38
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10b      	bne.n	8005144 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	e7fd      	b.n	8005140 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	e7fd      	b.n	800515e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <xQueueGenericCreateStatic+0x56>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <xQueueGenericCreateStatic+0x5a>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <xQueueGenericCreateStatic+0x5c>
 8005172:	2300      	movs	r3, #0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	623b      	str	r3, [r7, #32]
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	e7fd      	b.n	800518c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <xQueueGenericCreateStatic+0x84>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <xQueueGenericCreateStatic+0x88>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <xQueueGenericCreateStatic+0x8a>
 80051a0:	2300      	movs	r3, #0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	61fb      	str	r3, [r7, #28]
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	e7fd      	b.n	80051ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051be:	2348      	movs	r3, #72	@ 0x48
 80051c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b48      	cmp	r3, #72	@ 0x48
 80051c6:	d00b      	beq.n	80051e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	61bb      	str	r3, [r7, #24]
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80051e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80051f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f840 	bl	8005288 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800520a:	4618      	mov	r0, r3
 800520c:	3730      	adds	r7, #48	@ 0x30
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005212:	b580      	push	{r7, lr}
 8005214:	b08a      	sub	sp, #40	@ 0x28
 8005216:	af02      	add	r7, sp, #8
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	4613      	mov	r3, r2
 800521e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10b      	bne.n	800523e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	613b      	str	r3, [r7, #16]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3348      	adds	r3, #72	@ 0x48
 800524c:	4618      	mov	r0, r3
 800524e:	f002 f9cd 	bl	80075ec <pvPortMalloc>
 8005252:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d011      	beq.n	800527e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	3348      	adds	r3, #72	@ 0x48
 8005262:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800526c:	79fa      	ldrb	r2, [r7, #7]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f805 	bl	8005288 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800527e:	69bb      	ldr	r3, [r7, #24]
	}
 8005280:	4618      	mov	r0, r3
 8005282:	3720      	adds	r7, #32
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e002      	b.n	80052aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052b6:	2101      	movs	r1, #1
 80052b8:	69b8      	ldr	r0, [r7, #24]
 80052ba:	f7ff fec3 	bl	8005044 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08e      	sub	sp, #56	@ 0x38
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052d6:	2300      	movs	r3, #0
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <xQueueGenericSend+0x34>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	e7fd      	b.n	80052f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d103      	bne.n	800530a <xQueueGenericSend+0x42>
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <xQueueGenericSend+0x46>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <xQueueGenericSend+0x48>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <xQueueGenericSend+0x64>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d103      	bne.n	800533a <xQueueGenericSend+0x72>
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <xQueueGenericSend+0x76>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <xQueueGenericSend+0x78>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <xQueueGenericSend+0x94>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	623b      	str	r3, [r7, #32]
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	e7fd      	b.n	8005358 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800535c:	f001 f9be 	bl	80066dc <xTaskGetSchedulerState>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <xQueueGenericSend+0xa4>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <xQueueGenericSend+0xa8>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <xQueueGenericSend+0xaa>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <xQueueGenericSend+0xc6>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	61fb      	str	r3, [r7, #28]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800538e:	f002 f80b 	bl	80073a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <xQueueGenericSend+0xdc>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d129      	bne.n	80053f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053aa:	f000 fa0f 	bl	80057cc <prvCopyDataToQueue>
 80053ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d010      	beq.n	80053da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ba:	3324      	adds	r3, #36	@ 0x24
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 ffcd 	bl	800635c <xTaskRemoveFromEventList>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d013      	beq.n	80053f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053c8:	4b3f      	ldr	r3, [pc, #252]	@ (80054c8 <xQueueGenericSend+0x200>)
 80053ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	e00a      	b.n	80053f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053e0:	4b39      	ldr	r3, [pc, #228]	@ (80054c8 <xQueueGenericSend+0x200>)
 80053e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053f0:	f002 f80c 	bl	800740c <vPortExitCritical>
				return pdPASS;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e063      	b.n	80054c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053fe:	f002 f805 	bl	800740c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005402:	2300      	movs	r3, #0
 8005404:	e05c      	b.n	80054c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800540c:	f107 0314 	add.w	r3, r7, #20
 8005410:	4618      	mov	r0, r3
 8005412:	f001 f807 	bl	8006424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005416:	2301      	movs	r3, #1
 8005418:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800541a:	f001 fff7 	bl	800740c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800541e:	f000 fd79 	bl	8005f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005422:	f001 ffc1 	bl	80073a8 <vPortEnterCritical>
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800542c:	b25b      	sxtb	r3, r3
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	d103      	bne.n	800543c <xQueueGenericSend+0x174>
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005442:	b25b      	sxtb	r3, r3
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d103      	bne.n	8005452 <xQueueGenericSend+0x18a>
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005452:	f001 ffdb 	bl	800740c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005456:	1d3a      	adds	r2, r7, #4
 8005458:	f107 0314 	add.w	r3, r7, #20
 800545c:	4611      	mov	r1, r2
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fff6 	bl	8006450 <xTaskCheckForTimeOut>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d124      	bne.n	80054b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800546a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800546c:	f000 faa6 	bl	80059bc <prvIsQueueFull>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d018      	beq.n	80054a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	3310      	adds	r3, #16
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4611      	mov	r1, r2
 800547e:	4618      	mov	r0, r3
 8005480:	f000 ff1a 	bl	80062b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005486:	f000 fa31 	bl	80058ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800548a:	f000 fd51 	bl	8005f30 <xTaskResumeAll>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	f47f af7c 	bne.w	800538e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005496:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <xQueueGenericSend+0x200>)
 8005498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	e772      	b.n	800538e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054aa:	f000 fa1f 	bl	80058ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054ae:	f000 fd3f 	bl	8005f30 <xTaskResumeAll>
 80054b2:	e76c      	b.n	800538e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054b6:	f000 fa19 	bl	80058ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054ba:	f000 fd39 	bl	8005f30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3738      	adds	r7, #56	@ 0x38
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b090      	sub	sp, #64	@ 0x40
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80054de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <xQueueGenericSendFromISR+0x3e>
 8005502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <xQueueGenericSendFromISR+0x42>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericSendFromISR+0x44>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d103      	bne.n	800553a <xQueueGenericSendFromISR+0x6e>
 8005532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <xQueueGenericSendFromISR+0x72>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <xQueueGenericSendFromISR+0x74>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	623b      	str	r3, [r7, #32]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800555c:	f002 f804 	bl	8007568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005560:	f3ef 8211 	mrs	r2, BASEPRI
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	61fa      	str	r2, [r7, #28]
 8005576:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005578:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800557c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005584:	429a      	cmp	r2, r3
 8005586:	d302      	bcc.n	800558e <xQueueGenericSendFromISR+0xc2>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d12f      	bne.n	80055ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800558e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005590:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005594:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80055a4:	f000 f912 	bl	80057cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d112      	bne.n	80055d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d016      	beq.n	80055e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055bc:	3324      	adds	r3, #36	@ 0x24
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fecc 	bl	800635c <xTaskRemoveFromEventList>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00e      	beq.n	80055e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e007      	b.n	80055e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80055dc:	3301      	adds	r3, #1
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	b25a      	sxtb	r2, r3
 80055e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80055e8:	2301      	movs	r3, #1
 80055ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80055ec:	e001      	b.n	80055f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005600:	4618      	mov	r0, r3
 8005602:	3740      	adds	r7, #64	@ 0x40
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	@ 0x30
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005614:	2300      	movs	r3, #0
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <xQueueReceive+0x32>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	623b      	str	r3, [r7, #32]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d103      	bne.n	8005648 <xQueueReceive+0x40>
 8005640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <xQueueReceive+0x44>
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <xQueueReceive+0x46>
 800564c:	2300      	movs	r3, #0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <xQueueReceive+0x62>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61fb      	str	r3, [r7, #28]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800566a:	f001 f837 	bl	80066dc <xTaskGetSchedulerState>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <xQueueReceive+0x72>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <xQueueReceive+0x76>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueReceive+0x78>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <xQueueReceive+0x94>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800569c:	f001 fe84 	bl	80073a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01f      	beq.n	80056ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056b0:	f000 f8f6 	bl	80058a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	1e5a      	subs	r2, r3, #1
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00f      	beq.n	80056e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	3310      	adds	r3, #16
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fe47 	bl	800635c <xTaskRemoveFromEventList>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056d4:	4b3c      	ldr	r3, [pc, #240]	@ (80057c8 <xQueueReceive+0x1c0>)
 80056d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056e4:	f001 fe92 	bl	800740c <vPortExitCritical>
				return pdPASS;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e069      	b.n	80057c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d103      	bne.n	80056fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056f2:	f001 fe8b 	bl	800740c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e062      	b.n	80057c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005700:	f107 0310 	add.w	r3, r7, #16
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fe8d 	bl	8006424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800570a:	2301      	movs	r3, #1
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800570e:	f001 fe7d 	bl	800740c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005712:	f000 fbff 	bl	8005f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005716:	f001 fe47 	bl	80073a8 <vPortEnterCritical>
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005720:	b25b      	sxtb	r3, r3
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005726:	d103      	bne.n	8005730 <xQueueReceive+0x128>
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005736:	b25b      	sxtb	r3, r3
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d103      	bne.n	8005746 <xQueueReceive+0x13e>
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005746:	f001 fe61 	bl	800740c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800574a:	1d3a      	adds	r2, r7, #4
 800574c:	f107 0310 	add.w	r3, r7, #16
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fe7c 	bl	8006450 <xTaskCheckForTimeOut>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d123      	bne.n	80057a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800575e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005760:	f000 f916 	bl	8005990 <prvIsQueueEmpty>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d017      	beq.n	800579a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	3324      	adds	r3, #36	@ 0x24
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fda0 	bl	80062b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800577a:	f000 f8b7 	bl	80058ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800577e:	f000 fbd7 	bl	8005f30 <xTaskResumeAll>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d189      	bne.n	800569c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005788:	4b0f      	ldr	r3, [pc, #60]	@ (80057c8 <xQueueReceive+0x1c0>)
 800578a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	e780      	b.n	800569c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800579a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800579c:	f000 f8a6 	bl	80058ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057a0:	f000 fbc6 	bl	8005f30 <xTaskResumeAll>
 80057a4:	e77a      	b.n	800569c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057a8:	f000 f8a0 	bl	80058ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057ac:	f000 fbc0 	bl	8005f30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057b2:	f000 f8ed 	bl	8005990 <prvIsQueueEmpty>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f43f af6f 	beq.w	800569c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3730      	adds	r7, #48	@ 0x30
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10d      	bne.n	8005806 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d14d      	bne.n	800588e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 ff8e 	bl	8006718 <xTaskPriorityDisinherit>
 80057fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	e043      	b.n	800588e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d119      	bne.n	8005840 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6858      	ldr	r0, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	461a      	mov	r2, r3
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	f002 f92c 	bl	8007a74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	441a      	add	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	d32b      	bcc.n	800588e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	e026      	b.n	800588e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68d8      	ldr	r0, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	461a      	mov	r2, r3
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	f002 f912 	bl	8007a74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005858:	425b      	negs	r3, r3
 800585a:	441a      	add	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d207      	bcs.n	800587c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	425b      	negs	r3, r3
 8005876:	441a      	add	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d105      	bne.n	800588e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	3b01      	subs	r3, #1
 800588c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005896:	697b      	ldr	r3, [r7, #20]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d018      	beq.n	80058e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	441a      	add	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d303      	bcc.n	80058d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68d9      	ldr	r1, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058dc:	461a      	mov	r2, r3
 80058de:	6838      	ldr	r0, [r7, #0]
 80058e0:	f002 f8c8 	bl	8007a74 <memcpy>
	}
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058f4:	f001 fd58 	bl	80073a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005900:	e011      	b.n	8005926 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d012      	beq.n	8005930 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3324      	adds	r3, #36	@ 0x24
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fd24 	bl	800635c <xTaskRemoveFromEventList>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800591a:	f000 fdfd 	bl	8006518 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	3b01      	subs	r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dce9      	bgt.n	8005902 <prvUnlockQueue+0x16>
 800592e:	e000      	b.n	8005932 <prvUnlockQueue+0x46>
					break;
 8005930:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	22ff      	movs	r2, #255	@ 0xff
 8005936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800593a:	f001 fd67 	bl	800740c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800593e:	f001 fd33 	bl	80073a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005948:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800594a:	e011      	b.n	8005970 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d012      	beq.n	800597a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3310      	adds	r3, #16
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fcff 	bl	800635c <xTaskRemoveFromEventList>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005964:	f000 fdd8 	bl	8006518 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	3b01      	subs	r3, #1
 800596c:	b2db      	uxtb	r3, r3
 800596e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005974:	2b00      	cmp	r3, #0
 8005976:	dce9      	bgt.n	800594c <prvUnlockQueue+0x60>
 8005978:	e000      	b.n	800597c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800597a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	22ff      	movs	r2, #255	@ 0xff
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005984:	f001 fd42 	bl	800740c <vPortExitCritical>
}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005998:	f001 fd06 	bl	80073a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e001      	b.n	80059ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059ae:	f001 fd2d 	bl	800740c <vPortExitCritical>

	return xReturn;
 80059b2:	68fb      	ldr	r3, [r7, #12]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059c4:	f001 fcf0 	bl	80073a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d102      	bne.n	80059da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e001      	b.n	80059de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059de:	f001 fd15 	bl	800740c <vPortExitCritical>

	return xReturn;
 80059e2:	68fb      	ldr	r3, [r7, #12]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e014      	b.n	8005a26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059fc:	4a0f      	ldr	r2, [pc, #60]	@ (8005a3c <vQueueAddToRegistry+0x50>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a08:	490c      	ldr	r1, [pc, #48]	@ (8005a3c <vQueueAddToRegistry+0x50>)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a12:	4a0a      	ldr	r2, [pc, #40]	@ (8005a3c <vQueueAddToRegistry+0x50>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a1e:	e006      	b.n	8005a2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b07      	cmp	r3, #7
 8005a2a:	d9e7      	bls.n	80059fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20001630 	.word	0x20001630

08005a40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a50:	f001 fcaa 	bl	80073a8 <vPortEnterCritical>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d103      	bne.n	8005a6a <vQueueWaitForMessageRestricted+0x2a>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d103      	bne.n	8005a80 <vQueueWaitForMessageRestricted+0x40>
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a80:	f001 fcc4 	bl	800740c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	3324      	adds	r3, #36	@ 0x24
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fc35 	bl	8006304 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a9a:	6978      	ldr	r0, [r7, #20]
 8005a9c:	f7ff ff26 	bl	80058ec <prvUnlockQueue>
	}
 8005aa0:	bf00      	nop
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08e      	sub	sp, #56	@ 0x38
 8005aac:	af04      	add	r7, sp, #16
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10b      	bne.n	8005ad4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	623b      	str	r3, [r7, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	bf00      	nop
 8005ad2:	e7fd      	b.n	8005ad0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	61fb      	str	r3, [r7, #28]
}
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	e7fd      	b.n	8005aee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005af2:	2354      	movs	r3, #84	@ 0x54
 8005af4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b54      	cmp	r3, #84	@ 0x54
 8005afa:	d00b      	beq.n	8005b14 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	61bb      	str	r3, [r7, #24]
}
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01e      	beq.n	8005b5a <xTaskCreateStatic+0xb2>
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01b      	beq.n	8005b5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b34:	2300      	movs	r3, #0
 8005b36:	9303      	str	r3, [sp, #12]
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	9302      	str	r3, [sp, #8]
 8005b3c:	f107 0314 	add.w	r3, r7, #20
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f850 	bl	8005bf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b54:	f000 f8d6 	bl	8005d04 <prvAddNewTaskToReadyList>
 8005b58:	e001      	b.n	8005b5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b5e:	697b      	ldr	r3, [r7, #20]
	}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3728      	adds	r7, #40	@ 0x28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08c      	sub	sp, #48	@ 0x30
 8005b6c:	af04      	add	r7, sp, #16
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b78:	88fb      	ldrh	r3, [r7, #6]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 fd35 	bl	80075ec <pvPortMalloc>
 8005b82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b8a:	2054      	movs	r0, #84	@ 0x54
 8005b8c:	f001 fd2e 	bl	80075ec <pvPortMalloc>
 8005b90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b9e:	e005      	b.n	8005bac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ba0:	6978      	ldr	r0, [r7, #20]
 8005ba2:	f001 fdf1 	bl	8007788 <vPortFree>
 8005ba6:	e001      	b.n	8005bac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d017      	beq.n	8005be2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9303      	str	r3, [sp, #12]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	9302      	str	r3, [sp, #8]
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f80e 	bl	8005bf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bd6:	69f8      	ldr	r0, [r7, #28]
 8005bd8:	f000 f894 	bl	8005d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e002      	b.n	8005be8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005be2:	f04f 33ff 	mov.w	r3, #4294967295
 8005be6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005be8:	69bb      	ldr	r3, [r7, #24]
	}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b088      	sub	sp, #32
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f023 0307 	bic.w	r3, r3, #7
 8005c18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	617b      	str	r3, [r7, #20]
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	e7fd      	b.n	8005c38 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01f      	beq.n	8005c82 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	e012      	b.n	8005c6e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	7819      	ldrb	r1, [r3, #0]
 8005c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	3334      	adds	r3, #52	@ 0x34
 8005c58:	460a      	mov	r2, r1
 8005c5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d006      	beq.n	8005c76 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2b0f      	cmp	r3, #15
 8005c72:	d9e9      	bls.n	8005c48 <prvInitialiseNewTask+0x56>
 8005c74:	e000      	b.n	8005c78 <prvInitialiseNewTask+0x86>
			{
				break;
 8005c76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c80:	e003      	b.n	8005c8a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d901      	bls.n	8005c94 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c90:	2306      	movs	r3, #6
 8005c92:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c98:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c9e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f935 	bl	8004f1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	3318      	adds	r3, #24
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff f930 	bl	8004f1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc2:	f1c3 0207 	rsb	r2, r3, #7
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	68f9      	ldr	r1, [r7, #12]
 8005ce2:	69b8      	ldr	r0, [r7, #24]
 8005ce4:	f001 fa32 	bl	800714c <pxPortInitialiseStack>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cfa:	bf00      	nop
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d0c:	f001 fb4c 	bl	80073a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d10:	4b2a      	ldr	r3, [pc, #168]	@ (8005dbc <prvAddNewTaskToReadyList+0xb8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	4a29      	ldr	r2, [pc, #164]	@ (8005dbc <prvAddNewTaskToReadyList+0xb8>)
 8005d18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d1a:	4b29      	ldr	r3, [pc, #164]	@ (8005dc0 <prvAddNewTaskToReadyList+0xbc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d22:	4a27      	ldr	r2, [pc, #156]	@ (8005dc0 <prvAddNewTaskToReadyList+0xbc>)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d28:	4b24      	ldr	r3, [pc, #144]	@ (8005dbc <prvAddNewTaskToReadyList+0xb8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d110      	bne.n	8005d52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d30:	f000 fc16 	bl	8006560 <prvInitialiseTaskLists>
 8005d34:	e00d      	b.n	8005d52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d36:	4b23      	ldr	r3, [pc, #140]	@ (8005dc4 <prvAddNewTaskToReadyList+0xc0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d3e:	4b20      	ldr	r3, [pc, #128]	@ (8005dc0 <prvAddNewTaskToReadyList+0xbc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d802      	bhi.n	8005d52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc0 <prvAddNewTaskToReadyList+0xbc>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d52:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc8 <prvAddNewTaskToReadyList+0xc4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3301      	adds	r3, #1
 8005d58:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc8 <prvAddNewTaskToReadyList+0xc4>)
 8005d5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	2201      	movs	r2, #1
 8005d62:	409a      	lsls	r2, r3
 8005d64:	4b19      	ldr	r3, [pc, #100]	@ (8005dcc <prvAddNewTaskToReadyList+0xc8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	4a18      	ldr	r2, [pc, #96]	@ (8005dcc <prvAddNewTaskToReadyList+0xc8>)
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4a15      	ldr	r2, [pc, #84]	@ (8005dd0 <prvAddNewTaskToReadyList+0xcc>)
 8005d7c:	441a      	add	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4619      	mov	r1, r3
 8005d84:	4610      	mov	r0, r2
 8005d86:	f7ff f8d5 	bl	8004f34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d8a:	f001 fb3f 	bl	800740c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <prvAddNewTaskToReadyList+0xc0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00e      	beq.n	8005db4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d96:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <prvAddNewTaskToReadyList+0xbc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d207      	bcs.n	8005db4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005da4:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <prvAddNewTaskToReadyList+0xd0>)
 8005da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005db4:	bf00      	nop
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20001770 	.word	0x20001770
 8005dc0:	20001670 	.word	0x20001670
 8005dc4:	2000177c 	.word	0x2000177c
 8005dc8:	2000178c 	.word	0x2000178c
 8005dcc:	20001778 	.word	0x20001778
 8005dd0:	20001674 	.word	0x20001674
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d018      	beq.n	8005e1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dea:	4b14      	ldr	r3, [pc, #80]	@ (8005e3c <vTaskDelay+0x64>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <vTaskDelay+0x32>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	60bb      	str	r3, [r7, #8]
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	e7fd      	b.n	8005e06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e0a:	f000 f883 	bl	8005f14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e0e:	2100      	movs	r1, #0
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fdf7 	bl	8006a04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e16:	f000 f88b 	bl	8005f30 <xTaskResumeAll>
 8005e1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d107      	bne.n	8005e32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e22:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <vTaskDelay+0x68>)
 8005e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20001798 	.word	0x20001798
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	@ 0x28
 8005e48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e52:	463a      	mov	r2, r7
 8005e54:	1d39      	adds	r1, r7, #4
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fa fba6 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	9202      	str	r2, [sp, #8]
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	460a      	mov	r2, r1
 8005e72:	4922      	ldr	r1, [pc, #136]	@ (8005efc <vTaskStartScheduler+0xb8>)
 8005e74:	4822      	ldr	r0, [pc, #136]	@ (8005f00 <vTaskStartScheduler+0xbc>)
 8005e76:	f7ff fe17 	bl	8005aa8 <xTaskCreateStatic>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4a21      	ldr	r2, [pc, #132]	@ (8005f04 <vTaskStartScheduler+0xc0>)
 8005e7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e80:	4b20      	ldr	r3, [pc, #128]	@ (8005f04 <vTaskStartScheduler+0xc0>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e001      	b.n	8005e92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d102      	bne.n	8005e9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e98:	f000 fe1a 	bl	8006ad0 <xTimerCreateTimerTask>
 8005e9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d116      	bne.n	8005ed2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	613b      	str	r3, [r7, #16]
}
 8005eb6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb8:	4b13      	ldr	r3, [pc, #76]	@ (8005f08 <vTaskStartScheduler+0xc4>)
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ec0:	4b12      	ldr	r3, [pc, #72]	@ (8005f0c <vTaskStartScheduler+0xc8>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ec6:	4b12      	ldr	r3, [pc, #72]	@ (8005f10 <vTaskStartScheduler+0xcc>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ecc:	f001 f9c8 	bl	8007260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ed0:	e00f      	b.n	8005ef2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d10b      	bne.n	8005ef2 <vTaskStartScheduler+0xae>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	60fb      	str	r3, [r7, #12]
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	e7fd      	b.n	8005eee <vTaskStartScheduler+0xaa>
}
 8005ef2:	bf00      	nop
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	080083f0 	.word	0x080083f0
 8005f00:	08006531 	.word	0x08006531
 8005f04:	20001794 	.word	0x20001794
 8005f08:	20001790 	.word	0x20001790
 8005f0c:	2000177c 	.word	0x2000177c
 8005f10:	20001774 	.word	0x20001774

08005f14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f18:	4b04      	ldr	r3, [pc, #16]	@ (8005f2c <vTaskSuspendAll+0x18>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	4a03      	ldr	r2, [pc, #12]	@ (8005f2c <vTaskSuspendAll+0x18>)
 8005f20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f22:	bf00      	nop
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	20001798 	.word	0x20001798

08005f30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f3e:	4b42      	ldr	r3, [pc, #264]	@ (8006048 <xTaskResumeAll+0x118>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <xTaskResumeAll+0x2e>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	603b      	str	r3, [r7, #0]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f5e:	f001 fa23 	bl	80073a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f62:	4b39      	ldr	r3, [pc, #228]	@ (8006048 <xTaskResumeAll+0x118>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	4a37      	ldr	r2, [pc, #220]	@ (8006048 <xTaskResumeAll+0x118>)
 8005f6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f6c:	4b36      	ldr	r3, [pc, #216]	@ (8006048 <xTaskResumeAll+0x118>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d161      	bne.n	8006038 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f74:	4b35      	ldr	r3, [pc, #212]	@ (800604c <xTaskResumeAll+0x11c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d05d      	beq.n	8006038 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f7c:	e02e      	b.n	8005fdc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7e:	4b34      	ldr	r3, [pc, #208]	@ (8006050 <xTaskResumeAll+0x120>)
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3318      	adds	r3, #24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff f82f 	bl	8004fee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff f82a 	bl	8004fee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	409a      	lsls	r2, r3
 8005fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8006054 <xTaskResumeAll+0x124>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8006054 <xTaskResumeAll+0x124>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a27      	ldr	r2, [pc, #156]	@ (8006058 <xTaskResumeAll+0x128>)
 8005fba:	441a      	add	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe ffb6 	bl	8004f34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fcc:	4b23      	ldr	r3, [pc, #140]	@ (800605c <xTaskResumeAll+0x12c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fd6:	4b22      	ldr	r3, [pc, #136]	@ (8006060 <xTaskResumeAll+0x130>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8006050 <xTaskResumeAll+0x120>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1cc      	bne.n	8005f7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fea:	f000 fb57 	bl	800669c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fee:	4b1d      	ldr	r3, [pc, #116]	@ (8006064 <xTaskResumeAll+0x134>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d010      	beq.n	800601c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ffa:	f000 f847 	bl	800608c <xTaskIncrementTick>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006004:	4b16      	ldr	r3, [pc, #88]	@ (8006060 <xTaskResumeAll+0x130>)
 8006006:	2201      	movs	r2, #1
 8006008:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3b01      	subs	r3, #1
 800600e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1f1      	bne.n	8005ffa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006016:	4b13      	ldr	r3, [pc, #76]	@ (8006064 <xTaskResumeAll+0x134>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800601c:	4b10      	ldr	r3, [pc, #64]	@ (8006060 <xTaskResumeAll+0x130>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d009      	beq.n	8006038 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006028:	4b0f      	ldr	r3, [pc, #60]	@ (8006068 <xTaskResumeAll+0x138>)
 800602a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006038:	f001 f9e8 	bl	800740c <vPortExitCritical>

	return xAlreadyYielded;
 800603c:	68bb      	ldr	r3, [r7, #8]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20001798 	.word	0x20001798
 800604c:	20001770 	.word	0x20001770
 8006050:	20001730 	.word	0x20001730
 8006054:	20001778 	.word	0x20001778
 8006058:	20001674 	.word	0x20001674
 800605c:	20001670 	.word	0x20001670
 8006060:	20001784 	.word	0x20001784
 8006064:	20001780 	.word	0x20001780
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006072:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <xTaskGetTickCount+0x1c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006078:	687b      	ldr	r3, [r7, #4]
}
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	20001774 	.word	0x20001774

0800608c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006096:	4b4f      	ldr	r3, [pc, #316]	@ (80061d4 <xTaskIncrementTick+0x148>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f040 808f 	bne.w	80061be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060a0:	4b4d      	ldr	r3, [pc, #308]	@ (80061d8 <xTaskIncrementTick+0x14c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060a8:	4a4b      	ldr	r2, [pc, #300]	@ (80061d8 <xTaskIncrementTick+0x14c>)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d121      	bne.n	80060f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80060b4:	4b49      	ldr	r3, [pc, #292]	@ (80061dc <xTaskIncrementTick+0x150>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	603b      	str	r3, [r7, #0]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <xTaskIncrementTick+0x46>
 80060d6:	4b41      	ldr	r3, [pc, #260]	@ (80061dc <xTaskIncrementTick+0x150>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	4b40      	ldr	r3, [pc, #256]	@ (80061e0 <xTaskIncrementTick+0x154>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a3e      	ldr	r2, [pc, #248]	@ (80061dc <xTaskIncrementTick+0x150>)
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4a3e      	ldr	r2, [pc, #248]	@ (80061e0 <xTaskIncrementTick+0x154>)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	4b3e      	ldr	r3, [pc, #248]	@ (80061e4 <xTaskIncrementTick+0x158>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3301      	adds	r3, #1
 80060f0:	4a3c      	ldr	r2, [pc, #240]	@ (80061e4 <xTaskIncrementTick+0x158>)
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	f000 fad2 	bl	800669c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060f8:	4b3b      	ldr	r3, [pc, #236]	@ (80061e8 <xTaskIncrementTick+0x15c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d348      	bcc.n	8006194 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006102:	4b36      	ldr	r3, [pc, #216]	@ (80061dc <xTaskIncrementTick+0x150>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800610c:	4b36      	ldr	r3, [pc, #216]	@ (80061e8 <xTaskIncrementTick+0x15c>)
 800610e:	f04f 32ff 	mov.w	r2, #4294967295
 8006112:	601a      	str	r2, [r3, #0]
					break;
 8006114:	e03e      	b.n	8006194 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006116:	4b31      	ldr	r3, [pc, #196]	@ (80061dc <xTaskIncrementTick+0x150>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	429a      	cmp	r2, r3
 800612c:	d203      	bcs.n	8006136 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800612e:	4a2e      	ldr	r2, [pc, #184]	@ (80061e8 <xTaskIncrementTick+0x15c>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006134:	e02e      	b.n	8006194 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	3304      	adds	r3, #4
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe ff57 	bl	8004fee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	3318      	adds	r3, #24
 800614c:	4618      	mov	r0, r3
 800614e:	f7fe ff4e 	bl	8004fee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006156:	2201      	movs	r2, #1
 8006158:	409a      	lsls	r2, r3
 800615a:	4b24      	ldr	r3, [pc, #144]	@ (80061ec <xTaskIncrementTick+0x160>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4313      	orrs	r3, r2
 8006160:	4a22      	ldr	r2, [pc, #136]	@ (80061ec <xTaskIncrementTick+0x160>)
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4a1f      	ldr	r2, [pc, #124]	@ (80061f0 <xTaskIncrementTick+0x164>)
 8006172:	441a      	add	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	3304      	adds	r3, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f7fe feda 	bl	8004f34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006184:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <xTaskIncrementTick+0x168>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	429a      	cmp	r2, r3
 800618c:	d3b9      	bcc.n	8006102 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800618e:	2301      	movs	r3, #1
 8006190:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006192:	e7b6      	b.n	8006102 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006194:	4b17      	ldr	r3, [pc, #92]	@ (80061f4 <xTaskIncrementTick+0x168>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619a:	4915      	ldr	r1, [pc, #84]	@ (80061f0 <xTaskIncrementTick+0x164>)
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d901      	bls.n	80061b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80061ac:	2301      	movs	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061b0:	4b11      	ldr	r3, [pc, #68]	@ (80061f8 <xTaskIncrementTick+0x16c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	e004      	b.n	80061c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061be:	4b0f      	ldr	r3, [pc, #60]	@ (80061fc <xTaskIncrementTick+0x170>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	4a0d      	ldr	r2, [pc, #52]	@ (80061fc <xTaskIncrementTick+0x170>)
 80061c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061c8:	697b      	ldr	r3, [r7, #20]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20001798 	.word	0x20001798
 80061d8:	20001774 	.word	0x20001774
 80061dc:	20001728 	.word	0x20001728
 80061e0:	2000172c 	.word	0x2000172c
 80061e4:	20001788 	.word	0x20001788
 80061e8:	20001790 	.word	0x20001790
 80061ec:	20001778 	.word	0x20001778
 80061f0:	20001674 	.word	0x20001674
 80061f4:	20001670 	.word	0x20001670
 80061f8:	20001784 	.word	0x20001784
 80061fc:	20001780 	.word	0x20001780

08006200 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006206:	4b27      	ldr	r3, [pc, #156]	@ (80062a4 <vTaskSwitchContext+0xa4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800620e:	4b26      	ldr	r3, [pc, #152]	@ (80062a8 <vTaskSwitchContext+0xa8>)
 8006210:	2201      	movs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006214:	e040      	b.n	8006298 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006216:	4b24      	ldr	r3, [pc, #144]	@ (80062a8 <vTaskSwitchContext+0xa8>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800621c:	4b23      	ldr	r3, [pc, #140]	@ (80062ac <vTaskSwitchContext+0xac>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	fab3 f383 	clz	r3, r3
 8006228:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800622a:	7afb      	ldrb	r3, [r7, #11]
 800622c:	f1c3 031f 	rsb	r3, r3, #31
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	491f      	ldr	r1, [pc, #124]	@ (80062b0 <vTaskSwitchContext+0xb0>)
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	607b      	str	r3, [r7, #4]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <vTaskSwitchContext+0x5a>
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4a11      	ldr	r2, [pc, #68]	@ (80062b0 <vTaskSwitchContext+0xb0>)
 800626a:	4413      	add	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	605a      	str	r2, [r3, #4]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	3308      	adds	r3, #8
 8006280:	429a      	cmp	r2, r3
 8006282:	d104      	bne.n	800628e <vTaskSwitchContext+0x8e>
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	4a07      	ldr	r2, [pc, #28]	@ (80062b4 <vTaskSwitchContext+0xb4>)
 8006296:	6013      	str	r3, [r2, #0]
}
 8006298:	bf00      	nop
 800629a:	371c      	adds	r7, #28
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	20001798 	.word	0x20001798
 80062a8:	20001784 	.word	0x20001784
 80062ac:	20001778 	.word	0x20001778
 80062b0:	20001674 	.word	0x20001674
 80062b4:	20001670 	.word	0x20001670

080062b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10b      	bne.n	80062e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	60fb      	str	r3, [r7, #12]
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	e7fd      	b.n	80062dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062e0:	4b07      	ldr	r3, [pc, #28]	@ (8006300 <vTaskPlaceOnEventList+0x48>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3318      	adds	r3, #24
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fe fe47 	bl	8004f7c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062ee:	2101      	movs	r1, #1
 80062f0:	6838      	ldr	r0, [r7, #0]
 80062f2:	f000 fb87 	bl	8006a04 <prvAddCurrentTaskToDelayedList>
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20001670 	.word	0x20001670

08006304 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	617b      	str	r3, [r7, #20]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800632e:	4b0a      	ldr	r3, [pc, #40]	@ (8006358 <vTaskPlaceOnEventListRestricted+0x54>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3318      	adds	r3, #24
 8006334:	4619      	mov	r1, r3
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7fe fdfc 	bl	8004f34 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006342:	f04f 33ff 	mov.w	r3, #4294967295
 8006346:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	68b8      	ldr	r0, [r7, #8]
 800634c:	f000 fb5a 	bl	8006a04 <prvAddCurrentTaskToDelayedList>
	}
 8006350:	bf00      	nop
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20001670 	.word	0x20001670

0800635c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	60fb      	str	r3, [r7, #12]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	3318      	adds	r3, #24
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fe2d 	bl	8004fee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006394:	4b1d      	ldr	r3, [pc, #116]	@ (800640c <xTaskRemoveFromEventList+0xb0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d11c      	bne.n	80063d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	3304      	adds	r3, #4
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe fe24 	bl	8004fee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063aa:	2201      	movs	r2, #1
 80063ac:	409a      	lsls	r2, r3
 80063ae:	4b18      	ldr	r3, [pc, #96]	@ (8006410 <xTaskRemoveFromEventList+0xb4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	4a16      	ldr	r2, [pc, #88]	@ (8006410 <xTaskRemoveFromEventList+0xb4>)
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4a13      	ldr	r2, [pc, #76]	@ (8006414 <xTaskRemoveFromEventList+0xb8>)
 80063c6:	441a      	add	r2, r3
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f7fe fdb0 	bl	8004f34 <vListInsertEnd>
 80063d4:	e005      	b.n	80063e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	3318      	adds	r3, #24
 80063da:	4619      	mov	r1, r3
 80063dc:	480e      	ldr	r0, [pc, #56]	@ (8006418 <xTaskRemoveFromEventList+0xbc>)
 80063de:	f7fe fda9 	bl	8004f34 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e6:	4b0d      	ldr	r3, [pc, #52]	@ (800641c <xTaskRemoveFromEventList+0xc0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d905      	bls.n	80063fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063f0:	2301      	movs	r3, #1
 80063f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006420 <xTaskRemoveFromEventList+0xc4>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e001      	b.n	8006400 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006400:	697b      	ldr	r3, [r7, #20]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20001798 	.word	0x20001798
 8006410:	20001778 	.word	0x20001778
 8006414:	20001674 	.word	0x20001674
 8006418:	20001730 	.word	0x20001730
 800641c:	20001670 	.word	0x20001670
 8006420:	20001784 	.word	0x20001784

08006424 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800642c:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <vTaskInternalSetTimeOutState+0x24>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006434:	4b05      	ldr	r3, [pc, #20]	@ (800644c <vTaskInternalSetTimeOutState+0x28>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	605a      	str	r2, [r3, #4]
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	20001788 	.word	0x20001788
 800644c:	20001774 	.word	0x20001774

08006450 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	613b      	str	r3, [r7, #16]
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	e7fd      	b.n	8006474 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	60fb      	str	r3, [r7, #12]
}
 8006490:	bf00      	nop
 8006492:	bf00      	nop
 8006494:	e7fd      	b.n	8006492 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006496:	f000 ff87 	bl	80073a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800649a:	4b1d      	ldr	r3, [pc, #116]	@ (8006510 <xTaskCheckForTimeOut+0xc0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d102      	bne.n	80064ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	e023      	b.n	8006502 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b15      	ldr	r3, [pc, #84]	@ (8006514 <xTaskCheckForTimeOut+0xc4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d007      	beq.n	80064d6 <xTaskCheckForTimeOut+0x86>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d302      	bcc.n	80064d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	e015      	b.n	8006502 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d20b      	bcs.n	80064f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff ff99 	bl	8006424 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	e004      	b.n	8006502 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064fe:	2301      	movs	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006502:	f000 ff83 	bl	800740c <vPortExitCritical>

	return xReturn;
 8006506:	69fb      	ldr	r3, [r7, #28]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20001774 	.word	0x20001774
 8006514:	20001788 	.word	0x20001788

08006518 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800651c:	4b03      	ldr	r3, [pc, #12]	@ (800652c <vTaskMissedYield+0x14>)
 800651e:	2201      	movs	r2, #1
 8006520:	601a      	str	r2, [r3, #0]
}
 8006522:	bf00      	nop
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	20001784 	.word	0x20001784

08006530 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006538:	f000 f852 	bl	80065e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <prvIdleTask+0x28>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d9f9      	bls.n	8006538 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006544:	4b05      	ldr	r3, [pc, #20]	@ (800655c <prvIdleTask+0x2c>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006554:	e7f0      	b.n	8006538 <prvIdleTask+0x8>
 8006556:	bf00      	nop
 8006558:	20001674 	.word	0x20001674
 800655c:	e000ed04 	.word	0xe000ed04

08006560 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
 800656a:	e00c      	b.n	8006586 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a12      	ldr	r2, [pc, #72]	@ (80065c0 <prvInitialiseTaskLists+0x60>)
 8006578:	4413      	add	r3, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe fcad 	bl	8004eda <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3301      	adds	r3, #1
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b06      	cmp	r3, #6
 800658a:	d9ef      	bls.n	800656c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800658c:	480d      	ldr	r0, [pc, #52]	@ (80065c4 <prvInitialiseTaskLists+0x64>)
 800658e:	f7fe fca4 	bl	8004eda <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006592:	480d      	ldr	r0, [pc, #52]	@ (80065c8 <prvInitialiseTaskLists+0x68>)
 8006594:	f7fe fca1 	bl	8004eda <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006598:	480c      	ldr	r0, [pc, #48]	@ (80065cc <prvInitialiseTaskLists+0x6c>)
 800659a:	f7fe fc9e 	bl	8004eda <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800659e:	480c      	ldr	r0, [pc, #48]	@ (80065d0 <prvInitialiseTaskLists+0x70>)
 80065a0:	f7fe fc9b 	bl	8004eda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065a4:	480b      	ldr	r0, [pc, #44]	@ (80065d4 <prvInitialiseTaskLists+0x74>)
 80065a6:	f7fe fc98 	bl	8004eda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065aa:	4b0b      	ldr	r3, [pc, #44]	@ (80065d8 <prvInitialiseTaskLists+0x78>)
 80065ac:	4a05      	ldr	r2, [pc, #20]	@ (80065c4 <prvInitialiseTaskLists+0x64>)
 80065ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065b0:	4b0a      	ldr	r3, [pc, #40]	@ (80065dc <prvInitialiseTaskLists+0x7c>)
 80065b2:	4a05      	ldr	r2, [pc, #20]	@ (80065c8 <prvInitialiseTaskLists+0x68>)
 80065b4:	601a      	str	r2, [r3, #0]
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20001674 	.word	0x20001674
 80065c4:	20001700 	.word	0x20001700
 80065c8:	20001714 	.word	0x20001714
 80065cc:	20001730 	.word	0x20001730
 80065d0:	20001744 	.word	0x20001744
 80065d4:	2000175c 	.word	0x2000175c
 80065d8:	20001728 	.word	0x20001728
 80065dc:	2000172c 	.word	0x2000172c

080065e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065e6:	e019      	b.n	800661c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065e8:	f000 fede 	bl	80073a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ec:	4b10      	ldr	r3, [pc, #64]	@ (8006630 <prvCheckTasksWaitingTermination+0x50>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fcf8 	bl	8004fee <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006634 <prvCheckTasksWaitingTermination+0x54>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3b01      	subs	r3, #1
 8006604:	4a0b      	ldr	r2, [pc, #44]	@ (8006634 <prvCheckTasksWaitingTermination+0x54>)
 8006606:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006608:	4b0b      	ldr	r3, [pc, #44]	@ (8006638 <prvCheckTasksWaitingTermination+0x58>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3b01      	subs	r3, #1
 800660e:	4a0a      	ldr	r2, [pc, #40]	@ (8006638 <prvCheckTasksWaitingTermination+0x58>)
 8006610:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006612:	f000 fefb 	bl	800740c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f810 	bl	800663c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800661c:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <prvCheckTasksWaitingTermination+0x58>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e1      	bne.n	80065e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20001744 	.word	0x20001744
 8006634:	20001770 	.word	0x20001770
 8006638:	20001758 	.word	0x20001758

0800663c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800664a:	2b00      	cmp	r3, #0
 800664c:	d108      	bne.n	8006660 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	4618      	mov	r0, r3
 8006654:	f001 f898 	bl	8007788 <vPortFree>
				vPortFree( pxTCB );
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 f895 	bl	8007788 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800665e:	e019      	b.n	8006694 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006666:	2b01      	cmp	r3, #1
 8006668:	d103      	bne.n	8006672 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 f88c 	bl	8007788 <vPortFree>
	}
 8006670:	e010      	b.n	8006694 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006678:	2b02      	cmp	r3, #2
 800667a:	d00b      	beq.n	8006694 <prvDeleteTCB+0x58>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	60fb      	str	r3, [r7, #12]
}
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	e7fd      	b.n	8006690 <prvDeleteTCB+0x54>
	}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a2:	4b0c      	ldr	r3, [pc, #48]	@ (80066d4 <prvResetNextTaskUnblockTime+0x38>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d104      	bne.n	80066b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	@ (80066d8 <prvResetNextTaskUnblockTime+0x3c>)
 80066ae:	f04f 32ff 	mov.w	r2, #4294967295
 80066b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066b4:	e008      	b.n	80066c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b6:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <prvResetNextTaskUnblockTime+0x38>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4a04      	ldr	r2, [pc, #16]	@ (80066d8 <prvResetNextTaskUnblockTime+0x3c>)
 80066c6:	6013      	str	r3, [r2, #0]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	20001728 	.word	0x20001728
 80066d8:	20001790 	.word	0x20001790

080066dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006710 <xTaskGetSchedulerState+0x34>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d102      	bne.n	80066f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066ea:	2301      	movs	r3, #1
 80066ec:	607b      	str	r3, [r7, #4]
 80066ee:	e008      	b.n	8006702 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f0:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <xTaskGetSchedulerState+0x38>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066f8:	2302      	movs	r3, #2
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	e001      	b.n	8006702 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066fe:	2300      	movs	r3, #0
 8006700:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006702:	687b      	ldr	r3, [r7, #4]
	}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	2000177c 	.word	0x2000177c
 8006714:	20001798 	.word	0x20001798

08006718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d070      	beq.n	8006810 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800672e:	4b3b      	ldr	r3, [pc, #236]	@ (800681c <xTaskPriorityDisinherit+0x104>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	429a      	cmp	r2, r3
 8006736:	d00b      	beq.n	8006750 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	60fb      	str	r3, [r7, #12]
}
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	e7fd      	b.n	800674c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10b      	bne.n	8006770 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60bb      	str	r3, [r7, #8]
}
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	e7fd      	b.n	800676c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006774:	1e5a      	subs	r2, r3, #1
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006782:	429a      	cmp	r2, r3
 8006784:	d044      	beq.n	8006810 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800678a:	2b00      	cmp	r3, #0
 800678c:	d140      	bne.n	8006810 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fc2b 	bl	8004fee <uxListRemove>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d115      	bne.n	80067ca <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a2:	491f      	ldr	r1, [pc, #124]	@ (8006820 <xTaskPriorityDisinherit+0x108>)
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xTaskPriorityDisinherit+0xb2>
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	2201      	movs	r2, #1
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43da      	mvns	r2, r3
 80067c0:	4b18      	ldr	r3, [pc, #96]	@ (8006824 <xTaskPriorityDisinherit+0x10c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4013      	ands	r3, r2
 80067c6:	4a17      	ldr	r2, [pc, #92]	@ (8006824 <xTaskPriorityDisinherit+0x10c>)
 80067c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	f1c3 0207 	rsb	r2, r3, #7
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e2:	2201      	movs	r2, #1
 80067e4:	409a      	lsls	r2, r3
 80067e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006824 <xTaskPriorityDisinherit+0x10c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006824 <xTaskPriorityDisinherit+0x10c>)
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4a08      	ldr	r2, [pc, #32]	@ (8006820 <xTaskPriorityDisinherit+0x108>)
 80067fe:	441a      	add	r2, r3
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f7fe fb94 	bl	8004f34 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800680c:	2301      	movs	r3, #1
 800680e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006810:	697b      	ldr	r3, [r7, #20]
	}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20001670 	.word	0x20001670
 8006820:	20001674 	.word	0x20001674
 8006824:	20001778 	.word	0x20001778

08006828 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006836:	f000 fdb7 	bl	80073a8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800683a:	4b26      	ldr	r3, [pc, #152]	@ (80068d4 <xTaskNotifyWait+0xac>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d01a      	beq.n	800687e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006848:	4b22      	ldr	r3, [pc, #136]	@ (80068d4 <xTaskNotifyWait+0xac>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	43d2      	mvns	r2, r2
 8006852:	400a      	ands	r2, r1
 8006854:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006856:	4b1f      	ldr	r3, [pc, #124]	@ (80068d4 <xTaskNotifyWait+0xac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00b      	beq.n	800687e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006866:	2101      	movs	r1, #1
 8006868:	6838      	ldr	r0, [r7, #0]
 800686a:	f000 f8cb 	bl	8006a04 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800686e:	4b1a      	ldr	r3, [pc, #104]	@ (80068d8 <xTaskNotifyWait+0xb0>)
 8006870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800687e:	f000 fdc5 	bl	800740c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006882:	f000 fd91 	bl	80073a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800688c:	4b11      	ldr	r3, [pc, #68]	@ (80068d4 <xTaskNotifyWait+0xac>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006896:	4b0f      	ldr	r3, [pc, #60]	@ (80068d4 <xTaskNotifyWait+0xac>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d002      	beq.n	80068aa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e008      	b.n	80068bc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80068aa:	4b0a      	ldr	r3, [pc, #40]	@ (80068d4 <xTaskNotifyWait+0xac>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	43d2      	mvns	r2, r2
 80068b4:	400a      	ands	r2, r1
 80068b6:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068bc:	4b05      	ldr	r3, [pc, #20]	@ (80068d4 <xTaskNotifyWait+0xac>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 80068c6:	f000 fda1 	bl	800740c <vPortExitCritical>

		return xReturn;
 80068ca:	697b      	ldr	r3, [r7, #20]
	}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20001670 	.word	0x20001670
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	@ 0x28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10b      	bne.n	8006904 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	61bb      	str	r3, [r7, #24]
}
 80068fe:	bf00      	nop
 8006900:	bf00      	nop
 8006902:	e7fd      	b.n	8006900 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006904:	f000 fe30 	bl	8007568 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800690c:	f3ef 8211 	mrs	r2, BASEPRI
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	617a      	str	r2, [r7, #20]
 8006922:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006924:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006926:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800692e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	2202      	movs	r2, #2
 8006934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006942:	7ffb      	ldrb	r3, [r7, #31]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d146      	bne.n	80069d6 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60fb      	str	r3, [r7, #12]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006968:	4b20      	ldr	r3, [pc, #128]	@ (80069ec <vTaskNotifyGiveFromISR+0x110>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11c      	bne.n	80069aa <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	3304      	adds	r3, #4
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fb3a 	bl	8004fee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697e:	2201      	movs	r2, #1
 8006980:	409a      	lsls	r2, r3
 8006982:	4b1b      	ldr	r3, [pc, #108]	@ (80069f0 <vTaskNotifyGiveFromISR+0x114>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4313      	orrs	r3, r2
 8006988:	4a19      	ldr	r2, [pc, #100]	@ (80069f0 <vTaskNotifyGiveFromISR+0x114>)
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4a16      	ldr	r2, [pc, #88]	@ (80069f4 <vTaskNotifyGiveFromISR+0x118>)
 800699a:	441a      	add	r2, r3
 800699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fe fac6 	bl	8004f34 <vListInsertEnd>
 80069a8:	e005      	b.n	80069b6 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	3318      	adds	r3, #24
 80069ae:	4619      	mov	r1, r3
 80069b0:	4811      	ldr	r0, [pc, #68]	@ (80069f8 <vTaskNotifyGiveFromISR+0x11c>)
 80069b2:	f7fe fabf 	bl	8004f34 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ba:	4b10      	ldr	r3, [pc, #64]	@ (80069fc <vTaskNotifyGiveFromISR+0x120>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d908      	bls.n	80069d6 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80069d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a00 <vTaskNotifyGiveFromISR+0x124>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f383 8811 	msr	BASEPRI, r3
}
 80069e0:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80069e2:	bf00      	nop
 80069e4:	3728      	adds	r7, #40	@ 0x28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20001798 	.word	0x20001798
 80069f0:	20001778 	.word	0x20001778
 80069f4:	20001674 	.word	0x20001674
 80069f8:	20001730 	.word	0x20001730
 80069fc:	20001670 	.word	0x20001670
 8006a00:	20001784 	.word	0x20001784

08006a04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a0e:	4b29      	ldr	r3, [pc, #164]	@ (8006ab4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a14:	4b28      	ldr	r3, [pc, #160]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fae7 	bl	8004fee <uxListRemove>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10b      	bne.n	8006a3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a26:	4b24      	ldr	r3, [pc, #144]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43da      	mvns	r2, r3
 8006a34:	4b21      	ldr	r3, [pc, #132]	@ (8006abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	4a20      	ldr	r2, [pc, #128]	@ (8006abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d10a      	bne.n	8006a5c <prvAddCurrentTaskToDelayedList+0x58>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4619      	mov	r1, r3
 8006a54:	481a      	ldr	r0, [pc, #104]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a56:	f7fe fa6d 	bl	8004f34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a5a:	e026      	b.n	8006aaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a64:	4b14      	ldr	r3, [pc, #80]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d209      	bcs.n	8006a88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a74:	4b13      	ldr	r3, [pc, #76]	@ (8006ac4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4b0f      	ldr	r3, [pc, #60]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f7fe fa7b 	bl	8004f7c <vListInsert>
}
 8006a86:	e010      	b.n	8006aaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a88:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4619      	mov	r1, r3
 8006a94:	4610      	mov	r0, r2
 8006a96:	f7fe fa71 	bl	8004f7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d202      	bcs.n	8006aaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006aa4:	4a09      	ldr	r2, [pc, #36]	@ (8006acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6013      	str	r3, [r2, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20001774 	.word	0x20001774
 8006ab8:	20001670 	.word	0x20001670
 8006abc:	20001778 	.word	0x20001778
 8006ac0:	2000175c 	.word	0x2000175c
 8006ac4:	2000172c 	.word	0x2000172c
 8006ac8:	20001728 	.word	0x20001728
 8006acc:	20001790 	.word	0x20001790

08006ad0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	@ 0x28
 8006ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ada:	f000 faf7 	bl	80070cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ade:	4b1d      	ldr	r3, [pc, #116]	@ (8006b54 <xTimerCreateTimerTask+0x84>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d021      	beq.n	8006b2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006aee:	1d3a      	adds	r2, r7, #4
 8006af0:	f107 0108 	add.w	r1, r7, #8
 8006af4:	f107 030c 	add.w	r3, r7, #12
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7f9 fd71 	bl	80005e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	9202      	str	r2, [sp, #8]
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	2302      	movs	r3, #2
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	460a      	mov	r2, r1
 8006b10:	4911      	ldr	r1, [pc, #68]	@ (8006b58 <xTimerCreateTimerTask+0x88>)
 8006b12:	4812      	ldr	r0, [pc, #72]	@ (8006b5c <xTimerCreateTimerTask+0x8c>)
 8006b14:	f7fe ffc8 	bl	8005aa8 <xTaskCreateStatic>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	4a11      	ldr	r2, [pc, #68]	@ (8006b60 <xTimerCreateTimerTask+0x90>)
 8006b1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b1e:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <xTimerCreateTimerTask+0x90>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b26:	2301      	movs	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10b      	bne.n	8006b48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	613b      	str	r3, [r7, #16]
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	e7fd      	b.n	8006b44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b48:	697b      	ldr	r3, [r7, #20]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200017cc 	.word	0x200017cc
 8006b58:	080083f8 	.word	0x080083f8
 8006b5c:	08006c9d 	.word	0x08006c9d
 8006b60:	200017d0 	.word	0x200017d0

08006b64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	@ 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10b      	bne.n	8006b94 <xTimerGenericCommand+0x30>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	623b      	str	r3, [r7, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b94:	4b19      	ldr	r3, [pc, #100]	@ (8006bfc <xTimerGenericCommand+0x98>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d02a      	beq.n	8006bf2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b05      	cmp	r3, #5
 8006bac:	dc18      	bgt.n	8006be0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bae:	f7ff fd95 	bl	80066dc <xTaskGetSchedulerState>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d109      	bne.n	8006bcc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bb8:	4b10      	ldr	r3, [pc, #64]	@ (8006bfc <xTimerGenericCommand+0x98>)
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	f107 0114 	add.w	r1, r7, #20
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc4:	f7fe fb80 	bl	80052c8 <xQueueGenericSend>
 8006bc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bca:	e012      	b.n	8006bf2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bfc <xTimerGenericCommand+0x98>)
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	f107 0114 	add.w	r1, r7, #20
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f7fe fb76 	bl	80052c8 <xQueueGenericSend>
 8006bdc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bde:	e008      	b.n	8006bf2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006be0:	4b06      	ldr	r3, [pc, #24]	@ (8006bfc <xTimerGenericCommand+0x98>)
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	f107 0114 	add.w	r1, r7, #20
 8006be8:	2300      	movs	r3, #0
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	f7fe fc6e 	bl	80054cc <xQueueGenericSendFromISR>
 8006bf0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3728      	adds	r7, #40	@ 0x28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200017cc 	.word	0x200017cc

08006c00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c0a:	4b23      	ldr	r3, [pc, #140]	@ (8006c98 <prvProcessExpiredTimer+0x98>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe f9e8 	bl	8004fee <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d023      	beq.n	8006c74 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	699a      	ldr	r2, [r3, #24]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	18d1      	adds	r1, r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	6978      	ldr	r0, [r7, #20]
 8006c3a:	f000 f8d5 	bl	8006de8 <prvInsertTimerInActiveList>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d020      	beq.n	8006c86 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c44:	2300      	movs	r3, #0
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	6978      	ldr	r0, [r7, #20]
 8006c50:	f7ff ff88 	bl	8006b64 <xTimerGenericCommand>
 8006c54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d114      	bne.n	8006c86 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	60fb      	str	r3, [r7, #12]
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	e7fd      	b.n	8006c70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	6978      	ldr	r0, [r7, #20]
 8006c8c:	4798      	blx	r3
}
 8006c8e:	bf00      	nop
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200017c4 	.word	0x200017c4

08006c9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ca4:	f107 0308 	add.w	r3, r7, #8
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 f859 	bl	8006d60 <prvGetNextExpireTime>
 8006cae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f805 	bl	8006cc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cba:	f000 f8d7 	bl	8006e6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cbe:	bf00      	nop
 8006cc0:	e7f0      	b.n	8006ca4 <prvTimerTask+0x8>
	...

08006cc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006cce:	f7ff f921 	bl	8005f14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cd2:	f107 0308 	add.w	r3, r7, #8
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 f866 	bl	8006da8 <prvSampleTimeNow>
 8006cdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d130      	bne.n	8006d46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <prvProcessTimerOrBlockTask+0x3c>
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d806      	bhi.n	8006d00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006cf2:	f7ff f91d 	bl	8005f30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff ff81 	bl	8006c00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006cfe:	e024      	b.n	8006d4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d008      	beq.n	8006d18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d06:	4b13      	ldr	r3, [pc, #76]	@ (8006d54 <prvProcessTimerOrBlockTask+0x90>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <prvProcessTimerOrBlockTask+0x50>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <prvProcessTimerOrBlockTask+0x52>
 8006d14:	2300      	movs	r3, #0
 8006d16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d18:	4b0f      	ldr	r3, [pc, #60]	@ (8006d58 <prvProcessTimerOrBlockTask+0x94>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	4619      	mov	r1, r3
 8006d26:	f7fe fe8b 	bl	8005a40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d2a:	f7ff f901 	bl	8005f30 <xTaskResumeAll>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d34:	4b09      	ldr	r3, [pc, #36]	@ (8006d5c <prvProcessTimerOrBlockTask+0x98>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
}
 8006d44:	e001      	b.n	8006d4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d46:	f7ff f8f3 	bl	8005f30 <xTaskResumeAll>
}
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	200017c8 	.word	0x200017c8
 8006d58:	200017cc 	.word	0x200017cc
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d68:	4b0e      	ldr	r3, [pc, #56]	@ (8006da4 <prvGetNextExpireTime+0x44>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <prvGetNextExpireTime+0x16>
 8006d72:	2201      	movs	r2, #1
 8006d74:	e000      	b.n	8006d78 <prvGetNextExpireTime+0x18>
 8006d76:	2200      	movs	r2, #0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d105      	bne.n	8006d90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d84:	4b07      	ldr	r3, [pc, #28]	@ (8006da4 <prvGetNextExpireTime+0x44>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e001      	b.n	8006d94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d94:	68fb      	ldr	r3, [r7, #12]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	200017c4 	.word	0x200017c4

08006da8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006db0:	f7ff f95c 	bl	800606c <xTaskGetTickCount>
 8006db4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006db6:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <prvSampleTimeNow+0x3c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d205      	bcs.n	8006dcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006dc0:	f000 f91e 	bl	8007000 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	e002      	b.n	8006dd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006dd2:	4a04      	ldr	r2, [pc, #16]	@ (8006de4 <prvSampleTimeNow+0x3c>)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	200017d4 	.word	0x200017d4

08006de8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d812      	bhi.n	8006e34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d302      	bcc.n	8006e22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e01b      	b.n	8006e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e22:	4b10      	ldr	r3, [pc, #64]	@ (8006e64 <prvInsertTimerInActiveList+0x7c>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	f7fe f8a5 	bl	8004f7c <vListInsert>
 8006e32:	e012      	b.n	8006e5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d206      	bcs.n	8006e4a <prvInsertTimerInActiveList+0x62>
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d302      	bcc.n	8006e4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	e007      	b.n	8006e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e4a:	4b07      	ldr	r3, [pc, #28]	@ (8006e68 <prvInsertTimerInActiveList+0x80>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7fe f891 	bl	8004f7c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e5a:	697b      	ldr	r3, [r7, #20]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	200017c8 	.word	0x200017c8
 8006e68:	200017c4 	.word	0x200017c4

08006e6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08c      	sub	sp, #48	@ 0x30
 8006e70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e72:	e0b2      	b.n	8006fda <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f2c0 80af 	blt.w	8006fda <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe f8ae 	bl	8004fee <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e92:	1d3b      	adds	r3, r7, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ff87 	bl	8006da8 <prvSampleTimeNow>
 8006e9a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b09      	cmp	r3, #9
 8006ea0:	f200 8098 	bhi.w	8006fd4 <prvProcessReceivedCommands+0x168>
 8006ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8006eac <prvProcessReceivedCommands+0x40>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006ed5 	.word	0x08006ed5
 8006eb8:	08006f4b 	.word	0x08006f4b
 8006ebc:	08006f5f 	.word	0x08006f5f
 8006ec0:	08006fab 	.word	0x08006fab
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ed5 	.word	0x08006ed5
 8006ecc:	08006f4b 	.word	0x08006f4b
 8006ed0:	08006f5f 	.word	0x08006f5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	18d1      	adds	r1, r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a3a      	ldr	r2, [r7, #32]
 8006ef2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ef4:	f7ff ff78 	bl	8006de8 <prvInsertTimerInActiveList>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d06c      	beq.n	8006fd8 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d061      	beq.n	8006fd8 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	441a      	add	r2, r3
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2300      	movs	r3, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f26:	f7ff fe1d 	bl	8006b64 <xTimerGenericCommand>
 8006f2a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d152      	bne.n	8006fd8 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61bb      	str	r3, [r7, #24]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006f5c:	e03d      	b.n	8006fda <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	617b      	str	r3, [r7, #20]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	18d1      	adds	r1, r2, r3
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	6a3a      	ldr	r2, [r7, #32]
 8006fa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fa4:	f7ff ff20 	bl	8006de8 <prvInsertTimerInActiveList>
					break;
 8006fa8:	e017      	b.n	8006fda <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8006fb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fba:	f000 fbe5 	bl	8007788 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fbe:	e00c      	b.n	8006fda <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006fd2:	e002      	b.n	8006fda <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8006fd4:	bf00      	nop
 8006fd6:	e000      	b.n	8006fda <prvProcessReceivedCommands+0x16e>
					break;
 8006fd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fda:	4b08      	ldr	r3, [pc, #32]	@ (8006ffc <prvProcessReceivedCommands+0x190>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f107 0108 	add.w	r1, r7, #8
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fe fb0f 	bl	8005608 <xQueueReceive>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f af41 	bne.w	8006e74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	3728      	adds	r7, #40	@ 0x28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	200017cc 	.word	0x200017cc

08007000 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007006:	e049      	b.n	800709c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007008:	4b2e      	ldr	r3, [pc, #184]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007012:	4b2c      	ldr	r3, [pc, #176]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3304      	adds	r3, #4
 8007020:	4618      	mov	r0, r3
 8007022:	f7fd ffe4 	bl	8004fee <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d02f      	beq.n	800709c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	429a      	cmp	r2, r3
 800704c:	d90e      	bls.n	800706c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800705a:	4b1a      	ldr	r3, [pc, #104]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3304      	adds	r3, #4
 8007062:	4619      	mov	r1, r3
 8007064:	4610      	mov	r0, r2
 8007066:	f7fd ff89 	bl	8004f7c <vListInsert>
 800706a:	e017      	b.n	800709c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800706c:	2300      	movs	r3, #0
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	2300      	movs	r3, #0
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	2100      	movs	r1, #0
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fd74 	bl	8006b64 <xTimerGenericCommand>
 800707c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	603b      	str	r3, [r7, #0]
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800709c:	4b09      	ldr	r3, [pc, #36]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1b0      	bne.n	8007008 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070a6:	4b07      	ldr	r3, [pc, #28]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070ac:	4b06      	ldr	r3, [pc, #24]	@ (80070c8 <prvSwitchTimerLists+0xc8>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a04      	ldr	r2, [pc, #16]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 80070b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070b4:	4a04      	ldr	r2, [pc, #16]	@ (80070c8 <prvSwitchTimerLists+0xc8>)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	6013      	str	r3, [r2, #0]
}
 80070ba:	bf00      	nop
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	200017c4 	.word	0x200017c4
 80070c8:	200017c8 	.word	0x200017c8

080070cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070d2:	f000 f969 	bl	80073a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070d6:	4b15      	ldr	r3, [pc, #84]	@ (800712c <prvCheckForValidListAndQueue+0x60>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d120      	bne.n	8007120 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070de:	4814      	ldr	r0, [pc, #80]	@ (8007130 <prvCheckForValidListAndQueue+0x64>)
 80070e0:	f7fd fefb 	bl	8004eda <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070e4:	4813      	ldr	r0, [pc, #76]	@ (8007134 <prvCheckForValidListAndQueue+0x68>)
 80070e6:	f7fd fef8 	bl	8004eda <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070ea:	4b13      	ldr	r3, [pc, #76]	@ (8007138 <prvCheckForValidListAndQueue+0x6c>)
 80070ec:	4a10      	ldr	r2, [pc, #64]	@ (8007130 <prvCheckForValidListAndQueue+0x64>)
 80070ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070f0:	4b12      	ldr	r3, [pc, #72]	@ (800713c <prvCheckForValidListAndQueue+0x70>)
 80070f2:	4a10      	ldr	r2, [pc, #64]	@ (8007134 <prvCheckForValidListAndQueue+0x68>)
 80070f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070f6:	2300      	movs	r3, #0
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	4b11      	ldr	r3, [pc, #68]	@ (8007140 <prvCheckForValidListAndQueue+0x74>)
 80070fc:	4a11      	ldr	r2, [pc, #68]	@ (8007144 <prvCheckForValidListAndQueue+0x78>)
 80070fe:	210c      	movs	r1, #12
 8007100:	200a      	movs	r0, #10
 8007102:	f7fe f809 	bl	8005118 <xQueueGenericCreateStatic>
 8007106:	4603      	mov	r3, r0
 8007108:	4a08      	ldr	r2, [pc, #32]	@ (800712c <prvCheckForValidListAndQueue+0x60>)
 800710a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800710c:	4b07      	ldr	r3, [pc, #28]	@ (800712c <prvCheckForValidListAndQueue+0x60>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007114:	4b05      	ldr	r3, [pc, #20]	@ (800712c <prvCheckForValidListAndQueue+0x60>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	490b      	ldr	r1, [pc, #44]	@ (8007148 <prvCheckForValidListAndQueue+0x7c>)
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fc66 	bl	80059ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007120:	f000 f974 	bl	800740c <vPortExitCritical>
}
 8007124:	bf00      	nop
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200017cc 	.word	0x200017cc
 8007130:	2000179c 	.word	0x2000179c
 8007134:	200017b0 	.word	0x200017b0
 8007138:	200017c4 	.word	0x200017c4
 800713c:	200017c8 	.word	0x200017c8
 8007140:	20001850 	.word	0x20001850
 8007144:	200017d8 	.word	0x200017d8
 8007148:	08008400 	.word	0x08008400

0800714c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3b04      	subs	r3, #4
 800715c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b04      	subs	r3, #4
 800716a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f023 0201 	bic.w	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3b04      	subs	r3, #4
 800717a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800717c:	4a0c      	ldr	r2, [pc, #48]	@ (80071b0 <pxPortInitialiseStack+0x64>)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3b14      	subs	r3, #20
 8007186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3b04      	subs	r3, #4
 8007192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f06f 0202 	mvn.w	r2, #2
 800719a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3b20      	subs	r3, #32
 80071a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071a2:	68fb      	ldr	r3, [r7, #12]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	080071b5 	.word	0x080071b5

080071b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071be:	4b13      	ldr	r3, [pc, #76]	@ (800720c <prvTaskExitError+0x58>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c6:	d00b      	beq.n	80071e0 <prvTaskExitError+0x2c>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	60fb      	str	r3, [r7, #12]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <prvTaskExitError+0x28>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	60bb      	str	r3, [r7, #8]
}
 80071f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071f4:	bf00      	nop
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0fc      	beq.n	80071f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	20000090 	.word	0x20000090

08007210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007210:	4b07      	ldr	r3, [pc, #28]	@ (8007230 <pxCurrentTCBConst2>)
 8007212:	6819      	ldr	r1, [r3, #0]
 8007214:	6808      	ldr	r0, [r1, #0]
 8007216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	f380 8809 	msr	PSP, r0
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f04f 0000 	mov.w	r0, #0
 8007226:	f380 8811 	msr	BASEPRI, r0
 800722a:	4770      	bx	lr
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst2>:
 8007230:	20001670 	.word	0x20001670
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007238:	4808      	ldr	r0, [pc, #32]	@ (800725c <prvPortStartFirstTask+0x24>)
 800723a:	6800      	ldr	r0, [r0, #0]
 800723c:	6800      	ldr	r0, [r0, #0]
 800723e:	f380 8808 	msr	MSP, r0
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8814 	msr	CONTROL, r0
 800724a:	b662      	cpsie	i
 800724c:	b661      	cpsie	f
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	df00      	svc	0
 8007258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800725a:	bf00      	nop
 800725c:	e000ed08 	.word	0xe000ed08

08007260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007266:	4b47      	ldr	r3, [pc, #284]	@ (8007384 <xPortStartScheduler+0x124>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a47      	ldr	r2, [pc, #284]	@ (8007388 <xPortStartScheduler+0x128>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10b      	bne.n	8007288 <xPortStartScheduler+0x28>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007288:	4b3e      	ldr	r3, [pc, #248]	@ (8007384 <xPortStartScheduler+0x124>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a3f      	ldr	r2, [pc, #252]	@ (800738c <xPortStartScheduler+0x12c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d10b      	bne.n	80072aa <xPortStartScheduler+0x4a>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	613b      	str	r3, [r7, #16]
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	e7fd      	b.n	80072a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072aa:	4b39      	ldr	r3, [pc, #228]	@ (8007390 <xPortStartScheduler+0x130>)
 80072ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	22ff      	movs	r2, #255	@ 0xff
 80072ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	4b31      	ldr	r3, [pc, #196]	@ (8007394 <xPortStartScheduler+0x134>)
 80072d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072d2:	4b31      	ldr	r3, [pc, #196]	@ (8007398 <xPortStartScheduler+0x138>)
 80072d4:	2207      	movs	r2, #7
 80072d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072d8:	e009      	b.n	80072ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80072da:	4b2f      	ldr	r3, [pc, #188]	@ (8007398 <xPortStartScheduler+0x138>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3b01      	subs	r3, #1
 80072e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007398 <xPortStartScheduler+0x138>)
 80072e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f6:	2b80      	cmp	r3, #128	@ 0x80
 80072f8:	d0ef      	beq.n	80072da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072fa:	4b27      	ldr	r3, [pc, #156]	@ (8007398 <xPortStartScheduler+0x138>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f1c3 0307 	rsb	r3, r3, #7
 8007302:	2b04      	cmp	r3, #4
 8007304:	d00b      	beq.n	800731e <xPortStartScheduler+0xbe>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60bb      	str	r3, [r7, #8]
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	e7fd      	b.n	800731a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800731e:	4b1e      	ldr	r3, [pc, #120]	@ (8007398 <xPortStartScheduler+0x138>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	4a1c      	ldr	r2, [pc, #112]	@ (8007398 <xPortStartScheduler+0x138>)
 8007326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007328:	4b1b      	ldr	r3, [pc, #108]	@ (8007398 <xPortStartScheduler+0x138>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007330:	4a19      	ldr	r2, [pc, #100]	@ (8007398 <xPortStartScheduler+0x138>)
 8007332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	b2da      	uxtb	r2, r3
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800733c:	4b17      	ldr	r3, [pc, #92]	@ (800739c <xPortStartScheduler+0x13c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a16      	ldr	r2, [pc, #88]	@ (800739c <xPortStartScheduler+0x13c>)
 8007342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007348:	4b14      	ldr	r3, [pc, #80]	@ (800739c <xPortStartScheduler+0x13c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a13      	ldr	r2, [pc, #76]	@ (800739c <xPortStartScheduler+0x13c>)
 800734e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007354:	f000 f8da 	bl	800750c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007358:	4b11      	ldr	r3, [pc, #68]	@ (80073a0 <xPortStartScheduler+0x140>)
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800735e:	f000 f8f9 	bl	8007554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007362:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <xPortStartScheduler+0x144>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a0f      	ldr	r2, [pc, #60]	@ (80073a4 <xPortStartScheduler+0x144>)
 8007368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800736c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800736e:	f7ff ff63 	bl	8007238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007372:	f7fe ff45 	bl	8006200 <vTaskSwitchContext>
	prvTaskExitError();
 8007376:	f7ff ff1d 	bl	80071b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	e000ed00 	.word	0xe000ed00
 8007388:	410fc271 	.word	0x410fc271
 800738c:	410fc270 	.word	0x410fc270
 8007390:	e000e400 	.word	0xe000e400
 8007394:	20001898 	.word	0x20001898
 8007398:	2000189c 	.word	0x2000189c
 800739c:	e000ed20 	.word	0xe000ed20
 80073a0:	20000090 	.word	0x20000090
 80073a4:	e000ef34 	.word	0xe000ef34

080073a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	607b      	str	r3, [r7, #4]
}
 80073c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073c2:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <vPortEnterCritical+0x5c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3301      	adds	r3, #1
 80073c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007404 <vPortEnterCritical+0x5c>)
 80073ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007404 <vPortEnterCritical+0x5c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d110      	bne.n	80073f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007408 <vPortEnterCritical+0x60>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00b      	beq.n	80073f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	603b      	str	r3, [r7, #0]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <vPortEnterCritical+0x4a>
	}
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000090 	.word	0x20000090
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007412:	4b12      	ldr	r3, [pc, #72]	@ (800745c <vPortExitCritical+0x50>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <vPortExitCritical+0x26>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	607b      	str	r3, [r7, #4]
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	e7fd      	b.n	800742e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007432:	4b0a      	ldr	r3, [pc, #40]	@ (800745c <vPortExitCritical+0x50>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3b01      	subs	r3, #1
 8007438:	4a08      	ldr	r2, [pc, #32]	@ (800745c <vPortExitCritical+0x50>)
 800743a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800743c:	4b07      	ldr	r3, [pc, #28]	@ (800745c <vPortExitCritical+0x50>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d105      	bne.n	8007450 <vPortExitCritical+0x44>
 8007444:	2300      	movs	r3, #0
 8007446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f383 8811 	msr	BASEPRI, r3
}
 800744e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	20000090 	.word	0x20000090

08007460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007460:	f3ef 8009 	mrs	r0, PSP
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <pxCurrentTCBConst>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	f01e 0f10 	tst.w	lr, #16
 8007470:	bf08      	it	eq
 8007472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	6010      	str	r0, [r2, #0]
 800747c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007484:	f380 8811 	msr	BASEPRI, r0
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f7fe feb6 	bl	8006200 <vTaskSwitchContext>
 8007494:	f04f 0000 	mov.w	r0, #0
 8007498:	f380 8811 	msr	BASEPRI, r0
 800749c:	bc09      	pop	{r0, r3}
 800749e:	6819      	ldr	r1, [r3, #0]
 80074a0:	6808      	ldr	r0, [r1, #0]
 80074a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a6:	f01e 0f10 	tst.w	lr, #16
 80074aa:	bf08      	it	eq
 80074ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074b0:	f380 8809 	msr	PSP, r0
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	f3af 8000 	nop.w

080074c0 <pxCurrentTCBConst>:
 80074c0:	20001670 	.word	0x20001670
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop

080074c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	607b      	str	r3, [r7, #4]
}
 80074e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074e2:	f7fe fdd3 	bl	800608c <xTaskIncrementTick>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074ec:	4b06      	ldr	r3, [pc, #24]	@ (8007508 <xPortSysTickHandler+0x40>)
 80074ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	2300      	movs	r3, #0
 80074f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	f383 8811 	msr	BASEPRI, r3
}
 80074fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007510:	4b0b      	ldr	r3, [pc, #44]	@ (8007540 <vPortSetupTimerInterrupt+0x34>)
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007516:	4b0b      	ldr	r3, [pc, #44]	@ (8007544 <vPortSetupTimerInterrupt+0x38>)
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800751c:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <vPortSetupTimerInterrupt+0x3c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a0a      	ldr	r2, [pc, #40]	@ (800754c <vPortSetupTimerInterrupt+0x40>)
 8007522:	fba2 2303 	umull	r2, r3, r2, r3
 8007526:	099b      	lsrs	r3, r3, #6
 8007528:	4a09      	ldr	r2, [pc, #36]	@ (8007550 <vPortSetupTimerInterrupt+0x44>)
 800752a:	3b01      	subs	r3, #1
 800752c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800752e:	4b04      	ldr	r3, [pc, #16]	@ (8007540 <vPortSetupTimerInterrupt+0x34>)
 8007530:	2207      	movs	r2, #7
 8007532:	601a      	str	r2, [r3, #0]
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	e000e010 	.word	0xe000e010
 8007544:	e000e018 	.word	0xe000e018
 8007548:	20000084 	.word	0x20000084
 800754c:	10624dd3 	.word	0x10624dd3
 8007550:	e000e014 	.word	0xe000e014

08007554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007564 <vPortEnableVFP+0x10>
 8007558:	6801      	ldr	r1, [r0, #0]
 800755a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800755e:	6001      	str	r1, [r0, #0]
 8007560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007562:	bf00      	nop
 8007564:	e000ed88 	.word	0xe000ed88

08007568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800756e:	f3ef 8305 	mrs	r3, IPSR
 8007572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d915      	bls.n	80075a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800757a:	4a18      	ldr	r2, [pc, #96]	@ (80075dc <vPortValidateInterruptPriority+0x74>)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007584:	4b16      	ldr	r3, [pc, #88]	@ (80075e0 <vPortValidateInterruptPriority+0x78>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	7afa      	ldrb	r2, [r7, #11]
 800758a:	429a      	cmp	r2, r3
 800758c:	d20b      	bcs.n	80075a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	607b      	str	r3, [r7, #4]
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	e7fd      	b.n	80075a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075a6:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <vPortValidateInterruptPriority+0x7c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <vPortValidateInterruptPriority+0x80>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d90b      	bls.n	80075ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	603b      	str	r3, [r7, #0]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <vPortValidateInterruptPriority+0x62>
	}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	e000e3f0 	.word	0xe000e3f0
 80075e0:	20001898 	.word	0x20001898
 80075e4:	e000ed0c 	.word	0xe000ed0c
 80075e8:	2000189c 	.word	0x2000189c

080075ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	@ 0x28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075f8:	f7fe fc8c 	bl	8005f14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007770 <pvPortMalloc+0x184>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007604:	f000 f924 	bl	8007850 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007608:	4b5a      	ldr	r3, [pc, #360]	@ (8007774 <pvPortMalloc+0x188>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4013      	ands	r3, r2
 8007610:	2b00      	cmp	r3, #0
 8007612:	f040 8095 	bne.w	8007740 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01e      	beq.n	800765a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800761c:	2208      	movs	r2, #8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b00      	cmp	r3, #0
 800762c:	d015      	beq.n	800765a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f023 0307 	bic.w	r3, r3, #7
 8007634:	3308      	adds	r3, #8
 8007636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00b      	beq.n	800765a <pvPortMalloc+0x6e>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	617b      	str	r3, [r7, #20]
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d06f      	beq.n	8007740 <pvPortMalloc+0x154>
 8007660:	4b45      	ldr	r3, [pc, #276]	@ (8007778 <pvPortMalloc+0x18c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	429a      	cmp	r2, r3
 8007668:	d86a      	bhi.n	8007740 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800766a:	4b44      	ldr	r3, [pc, #272]	@ (800777c <pvPortMalloc+0x190>)
 800766c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800766e:	4b43      	ldr	r3, [pc, #268]	@ (800777c <pvPortMalloc+0x190>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007674:	e004      	b.n	8007680 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d903      	bls.n	8007692 <pvPortMalloc+0xa6>
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1f1      	bne.n	8007676 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007692:	4b37      	ldr	r3, [pc, #220]	@ (8007770 <pvPortMalloc+0x184>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007698:	429a      	cmp	r2, r3
 800769a:	d051      	beq.n	8007740 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2208      	movs	r2, #8
 80076a2:	4413      	add	r3, r2
 80076a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	2308      	movs	r3, #8
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d920      	bls.n	8007700 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <pvPortMalloc+0xfc>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	613b      	str	r3, [r7, #16]
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076fa:	69b8      	ldr	r0, [r7, #24]
 80076fc:	f000 f90a 	bl	8007914 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007700:	4b1d      	ldr	r3, [pc, #116]	@ (8007778 <pvPortMalloc+0x18c>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	4a1b      	ldr	r2, [pc, #108]	@ (8007778 <pvPortMalloc+0x18c>)
 800770c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800770e:	4b1a      	ldr	r3, [pc, #104]	@ (8007778 <pvPortMalloc+0x18c>)
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	4b1b      	ldr	r3, [pc, #108]	@ (8007780 <pvPortMalloc+0x194>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d203      	bcs.n	8007722 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800771a:	4b17      	ldr	r3, [pc, #92]	@ (8007778 <pvPortMalloc+0x18c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a18      	ldr	r2, [pc, #96]	@ (8007780 <pvPortMalloc+0x194>)
 8007720:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	4b13      	ldr	r3, [pc, #76]	@ (8007774 <pvPortMalloc+0x188>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	431a      	orrs	r2, r3
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007736:	4b13      	ldr	r3, [pc, #76]	@ (8007784 <pvPortMalloc+0x198>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3301      	adds	r3, #1
 800773c:	4a11      	ldr	r2, [pc, #68]	@ (8007784 <pvPortMalloc+0x198>)
 800773e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007740:	f7fe fbf6 	bl	8005f30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <pvPortMalloc+0x17a>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <pvPortMalloc+0x176>
	return pvReturn;
 8007766:	69fb      	ldr	r3, [r7, #28]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3728      	adds	r7, #40	@ 0x28
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20008dd8 	.word	0x20008dd8
 8007774:	20008dec 	.word	0x20008dec
 8007778:	20008ddc 	.word	0x20008ddc
 800777c:	20008dd0 	.word	0x20008dd0
 8007780:	20008de0 	.word	0x20008de0
 8007784:	20008de4 	.word	0x20008de4

08007788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04f      	beq.n	800783a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800779a:	2308      	movs	r3, #8
 800779c:	425b      	negs	r3, r3
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	4b25      	ldr	r3, [pc, #148]	@ (8007844 <vPortFree+0xbc>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10b      	bne.n	80077ce <vPortFree+0x46>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	60fb      	str	r3, [r7, #12]
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	e7fd      	b.n	80077ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <vPortFree+0x66>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60bb      	str	r3, [r7, #8]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	4b14      	ldr	r3, [pc, #80]	@ (8007844 <vPortFree+0xbc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4013      	ands	r3, r2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01e      	beq.n	800783a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11a      	bne.n	800783a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	4b0e      	ldr	r3, [pc, #56]	@ (8007844 <vPortFree+0xbc>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	43db      	mvns	r3, r3
 800780e:	401a      	ands	r2, r3
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007814:	f7fe fb7e 	bl	8005f14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	4b0a      	ldr	r3, [pc, #40]	@ (8007848 <vPortFree+0xc0>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4413      	add	r3, r2
 8007822:	4a09      	ldr	r2, [pc, #36]	@ (8007848 <vPortFree+0xc0>)
 8007824:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007826:	6938      	ldr	r0, [r7, #16]
 8007828:	f000 f874 	bl	8007914 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800782c:	4b07      	ldr	r3, [pc, #28]	@ (800784c <vPortFree+0xc4>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3301      	adds	r3, #1
 8007832:	4a06      	ldr	r2, [pc, #24]	@ (800784c <vPortFree+0xc4>)
 8007834:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007836:	f7fe fb7b 	bl	8005f30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800783a:	bf00      	nop
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20008dec 	.word	0x20008dec
 8007848:	20008ddc 	.word	0x20008ddc
 800784c:	20008de8 	.word	0x20008de8

08007850 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007856:	f247 5330 	movw	r3, #30000	@ 0x7530
 800785a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800785c:	4b27      	ldr	r3, [pc, #156]	@ (80078fc <prvHeapInit+0xac>)
 800785e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3307      	adds	r3, #7
 800786e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0307 	bic.w	r3, r3, #7
 8007876:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	4a1f      	ldr	r2, [pc, #124]	@ (80078fc <prvHeapInit+0xac>)
 8007880:	4413      	add	r3, r2
 8007882:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007888:	4a1d      	ldr	r2, [pc, #116]	@ (8007900 <prvHeapInit+0xb0>)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800788e:	4b1c      	ldr	r3, [pc, #112]	@ (8007900 <prvHeapInit+0xb0>)
 8007890:	2200      	movs	r2, #0
 8007892:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	4413      	add	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800789c:	2208      	movs	r2, #8
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0307 	bic.w	r3, r3, #7
 80078aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4a15      	ldr	r2, [pc, #84]	@ (8007904 <prvHeapInit+0xb4>)
 80078b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078b2:	4b14      	ldr	r3, [pc, #80]	@ (8007904 <prvHeapInit+0xb4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2200      	movs	r2, #0
 80078b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078ba:	4b12      	ldr	r3, [pc, #72]	@ (8007904 <prvHeapInit+0xb4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	1ad2      	subs	r2, r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007904 <prvHeapInit+0xb4>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007908 <prvHeapInit+0xb8>)
 80078de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4a09      	ldr	r2, [pc, #36]	@ (800790c <prvHeapInit+0xbc>)
 80078e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078e8:	4b09      	ldr	r3, [pc, #36]	@ (8007910 <prvHeapInit+0xc0>)
 80078ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80078ee:	601a      	str	r2, [r3, #0]
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	200018a0 	.word	0x200018a0
 8007900:	20008dd0 	.word	0x20008dd0
 8007904:	20008dd8 	.word	0x20008dd8
 8007908:	20008de0 	.word	0x20008de0
 800790c:	20008ddc 	.word	0x20008ddc
 8007910:	20008dec 	.word	0x20008dec

08007914 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800791c:	4b28      	ldr	r3, [pc, #160]	@ (80079c0 <prvInsertBlockIntoFreeList+0xac>)
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e002      	b.n	8007928 <prvInsertBlockIntoFreeList+0x14>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	429a      	cmp	r2, r3
 8007930:	d8f7      	bhi.n	8007922 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	4413      	add	r3, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d108      	bne.n	8007956 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	441a      	add	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	441a      	add	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d118      	bne.n	800799c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	4b15      	ldr	r3, [pc, #84]	@ (80079c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d00d      	beq.n	8007992 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	441a      	add	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	e008      	b.n	80079a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007992:	4b0c      	ldr	r3, [pc, #48]	@ (80079c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	e003      	b.n	80079a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d002      	beq.n	80079b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079b2:	bf00      	nop
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20008dd0 	.word	0x20008dd0
 80079c4:	20008dd8 	.word	0x20008dd8

080079c8 <siprintf>:
 80079c8:	b40e      	push	{r1, r2, r3}
 80079ca:	b510      	push	{r4, lr}
 80079cc:	b09d      	sub	sp, #116	@ 0x74
 80079ce:	ab1f      	add	r3, sp, #124	@ 0x7c
 80079d0:	9002      	str	r0, [sp, #8]
 80079d2:	9006      	str	r0, [sp, #24]
 80079d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079d8:	480a      	ldr	r0, [pc, #40]	@ (8007a04 <siprintf+0x3c>)
 80079da:	9107      	str	r1, [sp, #28]
 80079dc:	9104      	str	r1, [sp, #16]
 80079de:	490a      	ldr	r1, [pc, #40]	@ (8007a08 <siprintf+0x40>)
 80079e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e4:	9105      	str	r1, [sp, #20]
 80079e6:	2400      	movs	r4, #0
 80079e8:	a902      	add	r1, sp, #8
 80079ea:	6800      	ldr	r0, [r0, #0]
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80079f0:	f000 f9a2 	bl	8007d38 <_svfiprintf_r>
 80079f4:	9b02      	ldr	r3, [sp, #8]
 80079f6:	701c      	strb	r4, [r3, #0]
 80079f8:	b01d      	add	sp, #116	@ 0x74
 80079fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fe:	b003      	add	sp, #12
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000094 	.word	0x20000094
 8007a08:	ffff0208 	.word	0xffff0208

08007a0c <memset>:
 8007a0c:	4402      	add	r2, r0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d100      	bne.n	8007a16 <memset+0xa>
 8007a14:	4770      	bx	lr
 8007a16:	f803 1b01 	strb.w	r1, [r3], #1
 8007a1a:	e7f9      	b.n	8007a10 <memset+0x4>

08007a1c <__errno>:
 8007a1c:	4b01      	ldr	r3, [pc, #4]	@ (8007a24 <__errno+0x8>)
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000094 	.word	0x20000094

08007a28 <__libc_init_array>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a60 <__libc_init_array+0x38>)
 8007a2c:	4c0d      	ldr	r4, [pc, #52]	@ (8007a64 <__libc_init_array+0x3c>)
 8007a2e:	1b64      	subs	r4, r4, r5
 8007a30:	10a4      	asrs	r4, r4, #2
 8007a32:	2600      	movs	r6, #0
 8007a34:	42a6      	cmp	r6, r4
 8007a36:	d109      	bne.n	8007a4c <__libc_init_array+0x24>
 8007a38:	4d0b      	ldr	r5, [pc, #44]	@ (8007a68 <__libc_init_array+0x40>)
 8007a3a:	4c0c      	ldr	r4, [pc, #48]	@ (8007a6c <__libc_init_array+0x44>)
 8007a3c:	f000 fc64 	bl	8008308 <_init>
 8007a40:	1b64      	subs	r4, r4, r5
 8007a42:	10a4      	asrs	r4, r4, #2
 8007a44:	2600      	movs	r6, #0
 8007a46:	42a6      	cmp	r6, r4
 8007a48:	d105      	bne.n	8007a56 <__libc_init_array+0x2e>
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a50:	4798      	blx	r3
 8007a52:	3601      	adds	r6, #1
 8007a54:	e7ee      	b.n	8007a34 <__libc_init_array+0xc>
 8007a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a5a:	4798      	blx	r3
 8007a5c:	3601      	adds	r6, #1
 8007a5e:	e7f2      	b.n	8007a46 <__libc_init_array+0x1e>
 8007a60:	0800848c 	.word	0x0800848c
 8007a64:	0800848c 	.word	0x0800848c
 8007a68:	0800848c 	.word	0x0800848c
 8007a6c:	08008490 	.word	0x08008490

08007a70 <__retarget_lock_acquire_recursive>:
 8007a70:	4770      	bx	lr

08007a72 <__retarget_lock_release_recursive>:
 8007a72:	4770      	bx	lr

08007a74 <memcpy>:
 8007a74:	440a      	add	r2, r1
 8007a76:	4291      	cmp	r1, r2
 8007a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a7c:	d100      	bne.n	8007a80 <memcpy+0xc>
 8007a7e:	4770      	bx	lr
 8007a80:	b510      	push	{r4, lr}
 8007a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a8a:	4291      	cmp	r1, r2
 8007a8c:	d1f9      	bne.n	8007a82 <memcpy+0xe>
 8007a8e:	bd10      	pop	{r4, pc}

08007a90 <_free_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4605      	mov	r5, r0
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d041      	beq.n	8007b1c <_free_r+0x8c>
 8007a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9c:	1f0c      	subs	r4, r1, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bfb8      	it	lt
 8007aa2:	18e4      	addlt	r4, r4, r3
 8007aa4:	f000 f8e0 	bl	8007c68 <__malloc_lock>
 8007aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b20 <_free_r+0x90>)
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	b933      	cbnz	r3, 8007abc <_free_r+0x2c>
 8007aae:	6063      	str	r3, [r4, #4]
 8007ab0:	6014      	str	r4, [r2, #0]
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ab8:	f000 b8dc 	b.w	8007c74 <__malloc_unlock>
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	d908      	bls.n	8007ad2 <_free_r+0x42>
 8007ac0:	6820      	ldr	r0, [r4, #0]
 8007ac2:	1821      	adds	r1, r4, r0
 8007ac4:	428b      	cmp	r3, r1
 8007ac6:	bf01      	itttt	eq
 8007ac8:	6819      	ldreq	r1, [r3, #0]
 8007aca:	685b      	ldreq	r3, [r3, #4]
 8007acc:	1809      	addeq	r1, r1, r0
 8007ace:	6021      	streq	r1, [r4, #0]
 8007ad0:	e7ed      	b.n	8007aae <_free_r+0x1e>
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	b10b      	cbz	r3, 8007adc <_free_r+0x4c>
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	d9fa      	bls.n	8007ad2 <_free_r+0x42>
 8007adc:	6811      	ldr	r1, [r2, #0]
 8007ade:	1850      	adds	r0, r2, r1
 8007ae0:	42a0      	cmp	r0, r4
 8007ae2:	d10b      	bne.n	8007afc <_free_r+0x6c>
 8007ae4:	6820      	ldr	r0, [r4, #0]
 8007ae6:	4401      	add	r1, r0
 8007ae8:	1850      	adds	r0, r2, r1
 8007aea:	4283      	cmp	r3, r0
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	d1e0      	bne.n	8007ab2 <_free_r+0x22>
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	6053      	str	r3, [r2, #4]
 8007af6:	4408      	add	r0, r1
 8007af8:	6010      	str	r0, [r2, #0]
 8007afa:	e7da      	b.n	8007ab2 <_free_r+0x22>
 8007afc:	d902      	bls.n	8007b04 <_free_r+0x74>
 8007afe:	230c      	movs	r3, #12
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	e7d6      	b.n	8007ab2 <_free_r+0x22>
 8007b04:	6820      	ldr	r0, [r4, #0]
 8007b06:	1821      	adds	r1, r4, r0
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	bf04      	itt	eq
 8007b0c:	6819      	ldreq	r1, [r3, #0]
 8007b0e:	685b      	ldreq	r3, [r3, #4]
 8007b10:	6063      	str	r3, [r4, #4]
 8007b12:	bf04      	itt	eq
 8007b14:	1809      	addeq	r1, r1, r0
 8007b16:	6021      	streq	r1, [r4, #0]
 8007b18:	6054      	str	r4, [r2, #4]
 8007b1a:	e7ca      	b.n	8007ab2 <_free_r+0x22>
 8007b1c:	bd38      	pop	{r3, r4, r5, pc}
 8007b1e:	bf00      	nop
 8007b20:	20008f34 	.word	0x20008f34

08007b24 <sbrk_aligned>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4e0f      	ldr	r6, [pc, #60]	@ (8007b64 <sbrk_aligned+0x40>)
 8007b28:	460c      	mov	r4, r1
 8007b2a:	6831      	ldr	r1, [r6, #0]
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	b911      	cbnz	r1, 8007b36 <sbrk_aligned+0x12>
 8007b30:	f000 fba4 	bl	800827c <_sbrk_r>
 8007b34:	6030      	str	r0, [r6, #0]
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 fb9f 	bl	800827c <_sbrk_r>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	d103      	bne.n	8007b4a <sbrk_aligned+0x26>
 8007b42:	f04f 34ff 	mov.w	r4, #4294967295
 8007b46:	4620      	mov	r0, r4
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
 8007b4a:	1cc4      	adds	r4, r0, #3
 8007b4c:	f024 0403 	bic.w	r4, r4, #3
 8007b50:	42a0      	cmp	r0, r4
 8007b52:	d0f8      	beq.n	8007b46 <sbrk_aligned+0x22>
 8007b54:	1a21      	subs	r1, r4, r0
 8007b56:	4628      	mov	r0, r5
 8007b58:	f000 fb90 	bl	800827c <_sbrk_r>
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d1f2      	bne.n	8007b46 <sbrk_aligned+0x22>
 8007b60:	e7ef      	b.n	8007b42 <sbrk_aligned+0x1e>
 8007b62:	bf00      	nop
 8007b64:	20008f30 	.word	0x20008f30

08007b68 <_malloc_r>:
 8007b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b6c:	1ccd      	adds	r5, r1, #3
 8007b6e:	f025 0503 	bic.w	r5, r5, #3
 8007b72:	3508      	adds	r5, #8
 8007b74:	2d0c      	cmp	r5, #12
 8007b76:	bf38      	it	cc
 8007b78:	250c      	movcc	r5, #12
 8007b7a:	2d00      	cmp	r5, #0
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	db01      	blt.n	8007b84 <_malloc_r+0x1c>
 8007b80:	42a9      	cmp	r1, r5
 8007b82:	d904      	bls.n	8007b8e <_malloc_r+0x26>
 8007b84:	230c      	movs	r3, #12
 8007b86:	6033      	str	r3, [r6, #0]
 8007b88:	2000      	movs	r0, #0
 8007b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c64 <_malloc_r+0xfc>
 8007b92:	f000 f869 	bl	8007c68 <__malloc_lock>
 8007b96:	f8d8 3000 	ldr.w	r3, [r8]
 8007b9a:	461c      	mov	r4, r3
 8007b9c:	bb44      	cbnz	r4, 8007bf0 <_malloc_r+0x88>
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f7ff ffbf 	bl	8007b24 <sbrk_aligned>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	4604      	mov	r4, r0
 8007baa:	d158      	bne.n	8007c5e <_malloc_r+0xf6>
 8007bac:	f8d8 4000 	ldr.w	r4, [r8]
 8007bb0:	4627      	mov	r7, r4
 8007bb2:	2f00      	cmp	r7, #0
 8007bb4:	d143      	bne.n	8007c3e <_malloc_r+0xd6>
 8007bb6:	2c00      	cmp	r4, #0
 8007bb8:	d04b      	beq.n	8007c52 <_malloc_r+0xea>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	eb04 0903 	add.w	r9, r4, r3
 8007bc4:	f000 fb5a 	bl	800827c <_sbrk_r>
 8007bc8:	4581      	cmp	r9, r0
 8007bca:	d142      	bne.n	8007c52 <_malloc_r+0xea>
 8007bcc:	6821      	ldr	r1, [r4, #0]
 8007bce:	1a6d      	subs	r5, r5, r1
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f7ff ffa6 	bl	8007b24 <sbrk_aligned>
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d03a      	beq.n	8007c52 <_malloc_r+0xea>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	442b      	add	r3, r5
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	f8d8 3000 	ldr.w	r3, [r8]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	bb62      	cbnz	r2, 8007c44 <_malloc_r+0xdc>
 8007bea:	f8c8 7000 	str.w	r7, [r8]
 8007bee:	e00f      	b.n	8007c10 <_malloc_r+0xa8>
 8007bf0:	6822      	ldr	r2, [r4, #0]
 8007bf2:	1b52      	subs	r2, r2, r5
 8007bf4:	d420      	bmi.n	8007c38 <_malloc_r+0xd0>
 8007bf6:	2a0b      	cmp	r2, #11
 8007bf8:	d917      	bls.n	8007c2a <_malloc_r+0xc2>
 8007bfa:	1961      	adds	r1, r4, r5
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	6025      	str	r5, [r4, #0]
 8007c00:	bf18      	it	ne
 8007c02:	6059      	strne	r1, [r3, #4]
 8007c04:	6863      	ldr	r3, [r4, #4]
 8007c06:	bf08      	it	eq
 8007c08:	f8c8 1000 	streq.w	r1, [r8]
 8007c0c:	5162      	str	r2, [r4, r5]
 8007c0e:	604b      	str	r3, [r1, #4]
 8007c10:	4630      	mov	r0, r6
 8007c12:	f000 f82f 	bl	8007c74 <__malloc_unlock>
 8007c16:	f104 000b 	add.w	r0, r4, #11
 8007c1a:	1d23      	adds	r3, r4, #4
 8007c1c:	f020 0007 	bic.w	r0, r0, #7
 8007c20:	1ac2      	subs	r2, r0, r3
 8007c22:	bf1c      	itt	ne
 8007c24:	1a1b      	subne	r3, r3, r0
 8007c26:	50a3      	strne	r3, [r4, r2]
 8007c28:	e7af      	b.n	8007b8a <_malloc_r+0x22>
 8007c2a:	6862      	ldr	r2, [r4, #4]
 8007c2c:	42a3      	cmp	r3, r4
 8007c2e:	bf0c      	ite	eq
 8007c30:	f8c8 2000 	streq.w	r2, [r8]
 8007c34:	605a      	strne	r2, [r3, #4]
 8007c36:	e7eb      	b.n	8007c10 <_malloc_r+0xa8>
 8007c38:	4623      	mov	r3, r4
 8007c3a:	6864      	ldr	r4, [r4, #4]
 8007c3c:	e7ae      	b.n	8007b9c <_malloc_r+0x34>
 8007c3e:	463c      	mov	r4, r7
 8007c40:	687f      	ldr	r7, [r7, #4]
 8007c42:	e7b6      	b.n	8007bb2 <_malloc_r+0x4a>
 8007c44:	461a      	mov	r2, r3
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	42a3      	cmp	r3, r4
 8007c4a:	d1fb      	bne.n	8007c44 <_malloc_r+0xdc>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	6053      	str	r3, [r2, #4]
 8007c50:	e7de      	b.n	8007c10 <_malloc_r+0xa8>
 8007c52:	230c      	movs	r3, #12
 8007c54:	6033      	str	r3, [r6, #0]
 8007c56:	4630      	mov	r0, r6
 8007c58:	f000 f80c 	bl	8007c74 <__malloc_unlock>
 8007c5c:	e794      	b.n	8007b88 <_malloc_r+0x20>
 8007c5e:	6005      	str	r5, [r0, #0]
 8007c60:	e7d6      	b.n	8007c10 <_malloc_r+0xa8>
 8007c62:	bf00      	nop
 8007c64:	20008f34 	.word	0x20008f34

08007c68 <__malloc_lock>:
 8007c68:	4801      	ldr	r0, [pc, #4]	@ (8007c70 <__malloc_lock+0x8>)
 8007c6a:	f7ff bf01 	b.w	8007a70 <__retarget_lock_acquire_recursive>
 8007c6e:	bf00      	nop
 8007c70:	20008f2c 	.word	0x20008f2c

08007c74 <__malloc_unlock>:
 8007c74:	4801      	ldr	r0, [pc, #4]	@ (8007c7c <__malloc_unlock+0x8>)
 8007c76:	f7ff befc 	b.w	8007a72 <__retarget_lock_release_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	20008f2c 	.word	0x20008f2c

08007c80 <__ssputs_r>:
 8007c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c84:	688e      	ldr	r6, [r1, #8]
 8007c86:	461f      	mov	r7, r3
 8007c88:	42be      	cmp	r6, r7
 8007c8a:	680b      	ldr	r3, [r1, #0]
 8007c8c:	4682      	mov	sl, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	4690      	mov	r8, r2
 8007c92:	d82d      	bhi.n	8007cf0 <__ssputs_r+0x70>
 8007c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c9c:	d026      	beq.n	8007cec <__ssputs_r+0x6c>
 8007c9e:	6965      	ldr	r5, [r4, #20]
 8007ca0:	6909      	ldr	r1, [r1, #16]
 8007ca2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ca6:	eba3 0901 	sub.w	r9, r3, r1
 8007caa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cae:	1c7b      	adds	r3, r7, #1
 8007cb0:	444b      	add	r3, r9
 8007cb2:	106d      	asrs	r5, r5, #1
 8007cb4:	429d      	cmp	r5, r3
 8007cb6:	bf38      	it	cc
 8007cb8:	461d      	movcc	r5, r3
 8007cba:	0553      	lsls	r3, r2, #21
 8007cbc:	d527      	bpl.n	8007d0e <__ssputs_r+0x8e>
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7ff ff52 	bl	8007b68 <_malloc_r>
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	b360      	cbz	r0, 8007d22 <__ssputs_r+0xa2>
 8007cc8:	6921      	ldr	r1, [r4, #16]
 8007cca:	464a      	mov	r2, r9
 8007ccc:	f7ff fed2 	bl	8007a74 <memcpy>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	6126      	str	r6, [r4, #16]
 8007cde:	6165      	str	r5, [r4, #20]
 8007ce0:	444e      	add	r6, r9
 8007ce2:	eba5 0509 	sub.w	r5, r5, r9
 8007ce6:	6026      	str	r6, [r4, #0]
 8007ce8:	60a5      	str	r5, [r4, #8]
 8007cea:	463e      	mov	r6, r7
 8007cec:	42be      	cmp	r6, r7
 8007cee:	d900      	bls.n	8007cf2 <__ssputs_r+0x72>
 8007cf0:	463e      	mov	r6, r7
 8007cf2:	6820      	ldr	r0, [r4, #0]
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	f000 faa6 	bl	8008248 <memmove>
 8007cfc:	68a3      	ldr	r3, [r4, #8]
 8007cfe:	1b9b      	subs	r3, r3, r6
 8007d00:	60a3      	str	r3, [r4, #8]
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	4433      	add	r3, r6
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	2000      	movs	r0, #0
 8007d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0e:	462a      	mov	r2, r5
 8007d10:	f000 fac4 	bl	800829c <_realloc_r>
 8007d14:	4606      	mov	r6, r0
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d1e0      	bne.n	8007cdc <__ssputs_r+0x5c>
 8007d1a:	6921      	ldr	r1, [r4, #16]
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	f7ff feb7 	bl	8007a90 <_free_r>
 8007d22:	230c      	movs	r3, #12
 8007d24:	f8ca 3000 	str.w	r3, [sl]
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d2e:	81a3      	strh	r3, [r4, #12]
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	e7e9      	b.n	8007d0a <__ssputs_r+0x8a>
	...

08007d38 <_svfiprintf_r>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	4698      	mov	r8, r3
 8007d3e:	898b      	ldrh	r3, [r1, #12]
 8007d40:	061b      	lsls	r3, r3, #24
 8007d42:	b09d      	sub	sp, #116	@ 0x74
 8007d44:	4607      	mov	r7, r0
 8007d46:	460d      	mov	r5, r1
 8007d48:	4614      	mov	r4, r2
 8007d4a:	d510      	bpl.n	8007d6e <_svfiprintf_r+0x36>
 8007d4c:	690b      	ldr	r3, [r1, #16]
 8007d4e:	b973      	cbnz	r3, 8007d6e <_svfiprintf_r+0x36>
 8007d50:	2140      	movs	r1, #64	@ 0x40
 8007d52:	f7ff ff09 	bl	8007b68 <_malloc_r>
 8007d56:	6028      	str	r0, [r5, #0]
 8007d58:	6128      	str	r0, [r5, #16]
 8007d5a:	b930      	cbnz	r0, 8007d6a <_svfiprintf_r+0x32>
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	b01d      	add	sp, #116	@ 0x74
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	2340      	movs	r3, #64	@ 0x40
 8007d6c:	616b      	str	r3, [r5, #20]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d72:	2320      	movs	r3, #32
 8007d74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d7c:	2330      	movs	r3, #48	@ 0x30
 8007d7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f1c <_svfiprintf_r+0x1e4>
 8007d82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d86:	f04f 0901 	mov.w	r9, #1
 8007d8a:	4623      	mov	r3, r4
 8007d8c:	469a      	mov	sl, r3
 8007d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d92:	b10a      	cbz	r2, 8007d98 <_svfiprintf_r+0x60>
 8007d94:	2a25      	cmp	r2, #37	@ 0x25
 8007d96:	d1f9      	bne.n	8007d8c <_svfiprintf_r+0x54>
 8007d98:	ebba 0b04 	subs.w	fp, sl, r4
 8007d9c:	d00b      	beq.n	8007db6 <_svfiprintf_r+0x7e>
 8007d9e:	465b      	mov	r3, fp
 8007da0:	4622      	mov	r2, r4
 8007da2:	4629      	mov	r1, r5
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff ff6b 	bl	8007c80 <__ssputs_r>
 8007daa:	3001      	adds	r0, #1
 8007dac:	f000 80a7 	beq.w	8007efe <_svfiprintf_r+0x1c6>
 8007db0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007db2:	445a      	add	r2, fp
 8007db4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007db6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 809f 	beq.w	8007efe <_svfiprintf_r+0x1c6>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dca:	f10a 0a01 	add.w	sl, sl, #1
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	9307      	str	r3, [sp, #28]
 8007dd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dd8:	4654      	mov	r4, sl
 8007dda:	2205      	movs	r2, #5
 8007ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de0:	484e      	ldr	r0, [pc, #312]	@ (8007f1c <_svfiprintf_r+0x1e4>)
 8007de2:	f7f8 f9fd 	bl	80001e0 <memchr>
 8007de6:	9a04      	ldr	r2, [sp, #16]
 8007de8:	b9d8      	cbnz	r0, 8007e22 <_svfiprintf_r+0xea>
 8007dea:	06d0      	lsls	r0, r2, #27
 8007dec:	bf44      	itt	mi
 8007dee:	2320      	movmi	r3, #32
 8007df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007df4:	0711      	lsls	r1, r2, #28
 8007df6:	bf44      	itt	mi
 8007df8:	232b      	movmi	r3, #43	@ 0x2b
 8007dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e04:	d015      	beq.n	8007e32 <_svfiprintf_r+0xfa>
 8007e06:	9a07      	ldr	r2, [sp, #28]
 8007e08:	4654      	mov	r4, sl
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f04f 0c0a 	mov.w	ip, #10
 8007e10:	4621      	mov	r1, r4
 8007e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e16:	3b30      	subs	r3, #48	@ 0x30
 8007e18:	2b09      	cmp	r3, #9
 8007e1a:	d94b      	bls.n	8007eb4 <_svfiprintf_r+0x17c>
 8007e1c:	b1b0      	cbz	r0, 8007e4c <_svfiprintf_r+0x114>
 8007e1e:	9207      	str	r2, [sp, #28]
 8007e20:	e014      	b.n	8007e4c <_svfiprintf_r+0x114>
 8007e22:	eba0 0308 	sub.w	r3, r0, r8
 8007e26:	fa09 f303 	lsl.w	r3, r9, r3
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	9304      	str	r3, [sp, #16]
 8007e2e:	46a2      	mov	sl, r4
 8007e30:	e7d2      	b.n	8007dd8 <_svfiprintf_r+0xa0>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	1d19      	adds	r1, r3, #4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	9103      	str	r1, [sp, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bfbb      	ittet	lt
 8007e3e:	425b      	neglt	r3, r3
 8007e40:	f042 0202 	orrlt.w	r2, r2, #2
 8007e44:	9307      	strge	r3, [sp, #28]
 8007e46:	9307      	strlt	r3, [sp, #28]
 8007e48:	bfb8      	it	lt
 8007e4a:	9204      	strlt	r2, [sp, #16]
 8007e4c:	7823      	ldrb	r3, [r4, #0]
 8007e4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e50:	d10a      	bne.n	8007e68 <_svfiprintf_r+0x130>
 8007e52:	7863      	ldrb	r3, [r4, #1]
 8007e54:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e56:	d132      	bne.n	8007ebe <_svfiprintf_r+0x186>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	1d1a      	adds	r2, r3, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	9203      	str	r2, [sp, #12]
 8007e60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e64:	3402      	adds	r4, #2
 8007e66:	9305      	str	r3, [sp, #20]
 8007e68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f2c <_svfiprintf_r+0x1f4>
 8007e6c:	7821      	ldrb	r1, [r4, #0]
 8007e6e:	2203      	movs	r2, #3
 8007e70:	4650      	mov	r0, sl
 8007e72:	f7f8 f9b5 	bl	80001e0 <memchr>
 8007e76:	b138      	cbz	r0, 8007e88 <_svfiprintf_r+0x150>
 8007e78:	9b04      	ldr	r3, [sp, #16]
 8007e7a:	eba0 000a 	sub.w	r0, r0, sl
 8007e7e:	2240      	movs	r2, #64	@ 0x40
 8007e80:	4082      	lsls	r2, r0
 8007e82:	4313      	orrs	r3, r2
 8007e84:	3401      	adds	r4, #1
 8007e86:	9304      	str	r3, [sp, #16]
 8007e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8c:	4824      	ldr	r0, [pc, #144]	@ (8007f20 <_svfiprintf_r+0x1e8>)
 8007e8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e92:	2206      	movs	r2, #6
 8007e94:	f7f8 f9a4 	bl	80001e0 <memchr>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d036      	beq.n	8007f0a <_svfiprintf_r+0x1d2>
 8007e9c:	4b21      	ldr	r3, [pc, #132]	@ (8007f24 <_svfiprintf_r+0x1ec>)
 8007e9e:	bb1b      	cbnz	r3, 8007ee8 <_svfiprintf_r+0x1b0>
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	3307      	adds	r3, #7
 8007ea4:	f023 0307 	bic.w	r3, r3, #7
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eae:	4433      	add	r3, r6
 8007eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eb2:	e76a      	b.n	8007d8a <_svfiprintf_r+0x52>
 8007eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eb8:	460c      	mov	r4, r1
 8007eba:	2001      	movs	r0, #1
 8007ebc:	e7a8      	b.n	8007e10 <_svfiprintf_r+0xd8>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	3401      	adds	r4, #1
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	f04f 0c0a 	mov.w	ip, #10
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ed0:	3a30      	subs	r2, #48	@ 0x30
 8007ed2:	2a09      	cmp	r2, #9
 8007ed4:	d903      	bls.n	8007ede <_svfiprintf_r+0x1a6>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0c6      	beq.n	8007e68 <_svfiprintf_r+0x130>
 8007eda:	9105      	str	r1, [sp, #20]
 8007edc:	e7c4      	b.n	8007e68 <_svfiprintf_r+0x130>
 8007ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e7f0      	b.n	8007eca <_svfiprintf_r+0x192>
 8007ee8:	ab03      	add	r3, sp, #12
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	462a      	mov	r2, r5
 8007eee:	4b0e      	ldr	r3, [pc, #56]	@ (8007f28 <_svfiprintf_r+0x1f0>)
 8007ef0:	a904      	add	r1, sp, #16
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	1c42      	adds	r2, r0, #1
 8007efa:	4606      	mov	r6, r0
 8007efc:	d1d6      	bne.n	8007eac <_svfiprintf_r+0x174>
 8007efe:	89ab      	ldrh	r3, [r5, #12]
 8007f00:	065b      	lsls	r3, r3, #25
 8007f02:	f53f af2d 	bmi.w	8007d60 <_svfiprintf_r+0x28>
 8007f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f08:	e72c      	b.n	8007d64 <_svfiprintf_r+0x2c>
 8007f0a:	ab03      	add	r3, sp, #12
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	462a      	mov	r2, r5
 8007f10:	4b05      	ldr	r3, [pc, #20]	@ (8007f28 <_svfiprintf_r+0x1f0>)
 8007f12:	a904      	add	r1, sp, #16
 8007f14:	4638      	mov	r0, r7
 8007f16:	f000 f879 	bl	800800c <_printf_i>
 8007f1a:	e7ed      	b.n	8007ef8 <_svfiprintf_r+0x1c0>
 8007f1c:	08008450 	.word	0x08008450
 8007f20:	0800845a 	.word	0x0800845a
 8007f24:	00000000 	.word	0x00000000
 8007f28:	08007c81 	.word	0x08007c81
 8007f2c:	08008456 	.word	0x08008456

08007f30 <_printf_common>:
 8007f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f34:	4616      	mov	r6, r2
 8007f36:	4698      	mov	r8, r3
 8007f38:	688a      	ldr	r2, [r1, #8]
 8007f3a:	690b      	ldr	r3, [r1, #16]
 8007f3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	bfb8      	it	lt
 8007f44:	4613      	movlt	r3, r2
 8007f46:	6033      	str	r3, [r6, #0]
 8007f48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b10a      	cbz	r2, 8007f56 <_printf_common+0x26>
 8007f52:	3301      	adds	r3, #1
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	0699      	lsls	r1, r3, #26
 8007f5a:	bf42      	ittt	mi
 8007f5c:	6833      	ldrmi	r3, [r6, #0]
 8007f5e:	3302      	addmi	r3, #2
 8007f60:	6033      	strmi	r3, [r6, #0]
 8007f62:	6825      	ldr	r5, [r4, #0]
 8007f64:	f015 0506 	ands.w	r5, r5, #6
 8007f68:	d106      	bne.n	8007f78 <_printf_common+0x48>
 8007f6a:	f104 0a19 	add.w	sl, r4, #25
 8007f6e:	68e3      	ldr	r3, [r4, #12]
 8007f70:	6832      	ldr	r2, [r6, #0]
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	42ab      	cmp	r3, r5
 8007f76:	dc26      	bgt.n	8007fc6 <_printf_common+0x96>
 8007f78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	3b00      	subs	r3, #0
 8007f80:	bf18      	it	ne
 8007f82:	2301      	movne	r3, #1
 8007f84:	0692      	lsls	r2, r2, #26
 8007f86:	d42b      	bmi.n	8007fe0 <_printf_common+0xb0>
 8007f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	4638      	mov	r0, r7
 8007f90:	47c8      	blx	r9
 8007f92:	3001      	adds	r0, #1
 8007f94:	d01e      	beq.n	8007fd4 <_printf_common+0xa4>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	6922      	ldr	r2, [r4, #16]
 8007f9a:	f003 0306 	and.w	r3, r3, #6
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	bf02      	ittt	eq
 8007fa2:	68e5      	ldreq	r5, [r4, #12]
 8007fa4:	6833      	ldreq	r3, [r6, #0]
 8007fa6:	1aed      	subeq	r5, r5, r3
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	bf0c      	ite	eq
 8007fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fb0:	2500      	movne	r5, #0
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	bfc4      	itt	gt
 8007fb6:	1a9b      	subgt	r3, r3, r2
 8007fb8:	18ed      	addgt	r5, r5, r3
 8007fba:	2600      	movs	r6, #0
 8007fbc:	341a      	adds	r4, #26
 8007fbe:	42b5      	cmp	r5, r6
 8007fc0:	d11a      	bne.n	8007ff8 <_printf_common+0xc8>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e008      	b.n	8007fd8 <_printf_common+0xa8>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4652      	mov	r2, sl
 8007fca:	4641      	mov	r1, r8
 8007fcc:	4638      	mov	r0, r7
 8007fce:	47c8      	blx	r9
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d103      	bne.n	8007fdc <_printf_common+0xac>
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fdc:	3501      	adds	r5, #1
 8007fde:	e7c6      	b.n	8007f6e <_printf_common+0x3e>
 8007fe0:	18e1      	adds	r1, r4, r3
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	2030      	movs	r0, #48	@ 0x30
 8007fe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fea:	4422      	add	r2, r4
 8007fec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	e7c7      	b.n	8007f88 <_printf_common+0x58>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	4638      	mov	r0, r7
 8008000:	47c8      	blx	r9
 8008002:	3001      	adds	r0, #1
 8008004:	d0e6      	beq.n	8007fd4 <_printf_common+0xa4>
 8008006:	3601      	adds	r6, #1
 8008008:	e7d9      	b.n	8007fbe <_printf_common+0x8e>
	...

0800800c <_printf_i>:
 800800c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	7e0f      	ldrb	r7, [r1, #24]
 8008012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008014:	2f78      	cmp	r7, #120	@ 0x78
 8008016:	4691      	mov	r9, r2
 8008018:	4680      	mov	r8, r0
 800801a:	460c      	mov	r4, r1
 800801c:	469a      	mov	sl, r3
 800801e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008022:	d807      	bhi.n	8008034 <_printf_i+0x28>
 8008024:	2f62      	cmp	r7, #98	@ 0x62
 8008026:	d80a      	bhi.n	800803e <_printf_i+0x32>
 8008028:	2f00      	cmp	r7, #0
 800802a:	f000 80d1 	beq.w	80081d0 <_printf_i+0x1c4>
 800802e:	2f58      	cmp	r7, #88	@ 0x58
 8008030:	f000 80b8 	beq.w	80081a4 <_printf_i+0x198>
 8008034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800803c:	e03a      	b.n	80080b4 <_printf_i+0xa8>
 800803e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008042:	2b15      	cmp	r3, #21
 8008044:	d8f6      	bhi.n	8008034 <_printf_i+0x28>
 8008046:	a101      	add	r1, pc, #4	@ (adr r1, 800804c <_printf_i+0x40>)
 8008048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800804c:	080080a5 	.word	0x080080a5
 8008050:	080080b9 	.word	0x080080b9
 8008054:	08008035 	.word	0x08008035
 8008058:	08008035 	.word	0x08008035
 800805c:	08008035 	.word	0x08008035
 8008060:	08008035 	.word	0x08008035
 8008064:	080080b9 	.word	0x080080b9
 8008068:	08008035 	.word	0x08008035
 800806c:	08008035 	.word	0x08008035
 8008070:	08008035 	.word	0x08008035
 8008074:	08008035 	.word	0x08008035
 8008078:	080081b7 	.word	0x080081b7
 800807c:	080080e3 	.word	0x080080e3
 8008080:	08008171 	.word	0x08008171
 8008084:	08008035 	.word	0x08008035
 8008088:	08008035 	.word	0x08008035
 800808c:	080081d9 	.word	0x080081d9
 8008090:	08008035 	.word	0x08008035
 8008094:	080080e3 	.word	0x080080e3
 8008098:	08008035 	.word	0x08008035
 800809c:	08008035 	.word	0x08008035
 80080a0:	08008179 	.word	0x08008179
 80080a4:	6833      	ldr	r3, [r6, #0]
 80080a6:	1d1a      	adds	r2, r3, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6032      	str	r2, [r6, #0]
 80080ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080b4:	2301      	movs	r3, #1
 80080b6:	e09c      	b.n	80081f2 <_printf_i+0x1e6>
 80080b8:	6833      	ldr	r3, [r6, #0]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	1d19      	adds	r1, r3, #4
 80080be:	6031      	str	r1, [r6, #0]
 80080c0:	0606      	lsls	r6, r0, #24
 80080c2:	d501      	bpl.n	80080c8 <_printf_i+0xbc>
 80080c4:	681d      	ldr	r5, [r3, #0]
 80080c6:	e003      	b.n	80080d0 <_printf_i+0xc4>
 80080c8:	0645      	lsls	r5, r0, #25
 80080ca:	d5fb      	bpl.n	80080c4 <_printf_i+0xb8>
 80080cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	da03      	bge.n	80080dc <_printf_i+0xd0>
 80080d4:	232d      	movs	r3, #45	@ 0x2d
 80080d6:	426d      	negs	r5, r5
 80080d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080dc:	4858      	ldr	r0, [pc, #352]	@ (8008240 <_printf_i+0x234>)
 80080de:	230a      	movs	r3, #10
 80080e0:	e011      	b.n	8008106 <_printf_i+0xfa>
 80080e2:	6821      	ldr	r1, [r4, #0]
 80080e4:	6833      	ldr	r3, [r6, #0]
 80080e6:	0608      	lsls	r0, r1, #24
 80080e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80080ec:	d402      	bmi.n	80080f4 <_printf_i+0xe8>
 80080ee:	0649      	lsls	r1, r1, #25
 80080f0:	bf48      	it	mi
 80080f2:	b2ad      	uxthmi	r5, r5
 80080f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80080f6:	4852      	ldr	r0, [pc, #328]	@ (8008240 <_printf_i+0x234>)
 80080f8:	6033      	str	r3, [r6, #0]
 80080fa:	bf14      	ite	ne
 80080fc:	230a      	movne	r3, #10
 80080fe:	2308      	moveq	r3, #8
 8008100:	2100      	movs	r1, #0
 8008102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008106:	6866      	ldr	r6, [r4, #4]
 8008108:	60a6      	str	r6, [r4, #8]
 800810a:	2e00      	cmp	r6, #0
 800810c:	db05      	blt.n	800811a <_printf_i+0x10e>
 800810e:	6821      	ldr	r1, [r4, #0]
 8008110:	432e      	orrs	r6, r5
 8008112:	f021 0104 	bic.w	r1, r1, #4
 8008116:	6021      	str	r1, [r4, #0]
 8008118:	d04b      	beq.n	80081b2 <_printf_i+0x1a6>
 800811a:	4616      	mov	r6, r2
 800811c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008120:	fb03 5711 	mls	r7, r3, r1, r5
 8008124:	5dc7      	ldrb	r7, [r0, r7]
 8008126:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800812a:	462f      	mov	r7, r5
 800812c:	42bb      	cmp	r3, r7
 800812e:	460d      	mov	r5, r1
 8008130:	d9f4      	bls.n	800811c <_printf_i+0x110>
 8008132:	2b08      	cmp	r3, #8
 8008134:	d10b      	bne.n	800814e <_printf_i+0x142>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	07df      	lsls	r7, r3, #31
 800813a:	d508      	bpl.n	800814e <_printf_i+0x142>
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	6861      	ldr	r1, [r4, #4]
 8008140:	4299      	cmp	r1, r3
 8008142:	bfde      	ittt	le
 8008144:	2330      	movle	r3, #48	@ 0x30
 8008146:	f806 3c01 	strble.w	r3, [r6, #-1]
 800814a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800814e:	1b92      	subs	r2, r2, r6
 8008150:	6122      	str	r2, [r4, #16]
 8008152:	f8cd a000 	str.w	sl, [sp]
 8008156:	464b      	mov	r3, r9
 8008158:	aa03      	add	r2, sp, #12
 800815a:	4621      	mov	r1, r4
 800815c:	4640      	mov	r0, r8
 800815e:	f7ff fee7 	bl	8007f30 <_printf_common>
 8008162:	3001      	adds	r0, #1
 8008164:	d14a      	bne.n	80081fc <_printf_i+0x1f0>
 8008166:	f04f 30ff 	mov.w	r0, #4294967295
 800816a:	b004      	add	sp, #16
 800816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	f043 0320 	orr.w	r3, r3, #32
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	4832      	ldr	r0, [pc, #200]	@ (8008244 <_printf_i+0x238>)
 800817a:	2778      	movs	r7, #120	@ 0x78
 800817c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	6831      	ldr	r1, [r6, #0]
 8008184:	061f      	lsls	r7, r3, #24
 8008186:	f851 5b04 	ldr.w	r5, [r1], #4
 800818a:	d402      	bmi.n	8008192 <_printf_i+0x186>
 800818c:	065f      	lsls	r7, r3, #25
 800818e:	bf48      	it	mi
 8008190:	b2ad      	uxthmi	r5, r5
 8008192:	6031      	str	r1, [r6, #0]
 8008194:	07d9      	lsls	r1, r3, #31
 8008196:	bf44      	itt	mi
 8008198:	f043 0320 	orrmi.w	r3, r3, #32
 800819c:	6023      	strmi	r3, [r4, #0]
 800819e:	b11d      	cbz	r5, 80081a8 <_printf_i+0x19c>
 80081a0:	2310      	movs	r3, #16
 80081a2:	e7ad      	b.n	8008100 <_printf_i+0xf4>
 80081a4:	4826      	ldr	r0, [pc, #152]	@ (8008240 <_printf_i+0x234>)
 80081a6:	e7e9      	b.n	800817c <_printf_i+0x170>
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	f023 0320 	bic.w	r3, r3, #32
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	e7f6      	b.n	80081a0 <_printf_i+0x194>
 80081b2:	4616      	mov	r6, r2
 80081b4:	e7bd      	b.n	8008132 <_printf_i+0x126>
 80081b6:	6833      	ldr	r3, [r6, #0]
 80081b8:	6825      	ldr	r5, [r4, #0]
 80081ba:	6961      	ldr	r1, [r4, #20]
 80081bc:	1d18      	adds	r0, r3, #4
 80081be:	6030      	str	r0, [r6, #0]
 80081c0:	062e      	lsls	r6, r5, #24
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	d501      	bpl.n	80081ca <_printf_i+0x1be>
 80081c6:	6019      	str	r1, [r3, #0]
 80081c8:	e002      	b.n	80081d0 <_printf_i+0x1c4>
 80081ca:	0668      	lsls	r0, r5, #25
 80081cc:	d5fb      	bpl.n	80081c6 <_printf_i+0x1ba>
 80081ce:	8019      	strh	r1, [r3, #0]
 80081d0:	2300      	movs	r3, #0
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	4616      	mov	r6, r2
 80081d6:	e7bc      	b.n	8008152 <_printf_i+0x146>
 80081d8:	6833      	ldr	r3, [r6, #0]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	6032      	str	r2, [r6, #0]
 80081de:	681e      	ldr	r6, [r3, #0]
 80081e0:	6862      	ldr	r2, [r4, #4]
 80081e2:	2100      	movs	r1, #0
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7f7 fffb 	bl	80001e0 <memchr>
 80081ea:	b108      	cbz	r0, 80081f0 <_printf_i+0x1e4>
 80081ec:	1b80      	subs	r0, r0, r6
 80081ee:	6060      	str	r0, [r4, #4]
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	2300      	movs	r3, #0
 80081f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081fa:	e7aa      	b.n	8008152 <_printf_i+0x146>
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	4632      	mov	r2, r6
 8008200:	4649      	mov	r1, r9
 8008202:	4640      	mov	r0, r8
 8008204:	47d0      	blx	sl
 8008206:	3001      	adds	r0, #1
 8008208:	d0ad      	beq.n	8008166 <_printf_i+0x15a>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	079b      	lsls	r3, r3, #30
 800820e:	d413      	bmi.n	8008238 <_printf_i+0x22c>
 8008210:	68e0      	ldr	r0, [r4, #12]
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	4298      	cmp	r0, r3
 8008216:	bfb8      	it	lt
 8008218:	4618      	movlt	r0, r3
 800821a:	e7a6      	b.n	800816a <_printf_i+0x15e>
 800821c:	2301      	movs	r3, #1
 800821e:	4632      	mov	r2, r6
 8008220:	4649      	mov	r1, r9
 8008222:	4640      	mov	r0, r8
 8008224:	47d0      	blx	sl
 8008226:	3001      	adds	r0, #1
 8008228:	d09d      	beq.n	8008166 <_printf_i+0x15a>
 800822a:	3501      	adds	r5, #1
 800822c:	68e3      	ldr	r3, [r4, #12]
 800822e:	9903      	ldr	r1, [sp, #12]
 8008230:	1a5b      	subs	r3, r3, r1
 8008232:	42ab      	cmp	r3, r5
 8008234:	dcf2      	bgt.n	800821c <_printf_i+0x210>
 8008236:	e7eb      	b.n	8008210 <_printf_i+0x204>
 8008238:	2500      	movs	r5, #0
 800823a:	f104 0619 	add.w	r6, r4, #25
 800823e:	e7f5      	b.n	800822c <_printf_i+0x220>
 8008240:	08008461 	.word	0x08008461
 8008244:	08008472 	.word	0x08008472

08008248 <memmove>:
 8008248:	4288      	cmp	r0, r1
 800824a:	b510      	push	{r4, lr}
 800824c:	eb01 0402 	add.w	r4, r1, r2
 8008250:	d902      	bls.n	8008258 <memmove+0x10>
 8008252:	4284      	cmp	r4, r0
 8008254:	4623      	mov	r3, r4
 8008256:	d807      	bhi.n	8008268 <memmove+0x20>
 8008258:	1e43      	subs	r3, r0, #1
 800825a:	42a1      	cmp	r1, r4
 800825c:	d008      	beq.n	8008270 <memmove+0x28>
 800825e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008262:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008266:	e7f8      	b.n	800825a <memmove+0x12>
 8008268:	4402      	add	r2, r0
 800826a:	4601      	mov	r1, r0
 800826c:	428a      	cmp	r2, r1
 800826e:	d100      	bne.n	8008272 <memmove+0x2a>
 8008270:	bd10      	pop	{r4, pc}
 8008272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800827a:	e7f7      	b.n	800826c <memmove+0x24>

0800827c <_sbrk_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d06      	ldr	r5, [pc, #24]	@ (8008298 <_sbrk_r+0x1c>)
 8008280:	2300      	movs	r3, #0
 8008282:	4604      	mov	r4, r0
 8008284:	4608      	mov	r0, r1
 8008286:	602b      	str	r3, [r5, #0]
 8008288:	f7f8 fe1e 	bl	8000ec8 <_sbrk>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d102      	bne.n	8008296 <_sbrk_r+0x1a>
 8008290:	682b      	ldr	r3, [r5, #0]
 8008292:	b103      	cbz	r3, 8008296 <_sbrk_r+0x1a>
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	20008f28 	.word	0x20008f28

0800829c <_realloc_r>:
 800829c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a0:	4607      	mov	r7, r0
 80082a2:	4614      	mov	r4, r2
 80082a4:	460d      	mov	r5, r1
 80082a6:	b921      	cbnz	r1, 80082b2 <_realloc_r+0x16>
 80082a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ac:	4611      	mov	r1, r2
 80082ae:	f7ff bc5b 	b.w	8007b68 <_malloc_r>
 80082b2:	b92a      	cbnz	r2, 80082c0 <_realloc_r+0x24>
 80082b4:	f7ff fbec 	bl	8007a90 <_free_r>
 80082b8:	4625      	mov	r5, r4
 80082ba:	4628      	mov	r0, r5
 80082bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c0:	f000 f81a 	bl	80082f8 <_malloc_usable_size_r>
 80082c4:	4284      	cmp	r4, r0
 80082c6:	4606      	mov	r6, r0
 80082c8:	d802      	bhi.n	80082d0 <_realloc_r+0x34>
 80082ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082ce:	d8f4      	bhi.n	80082ba <_realloc_r+0x1e>
 80082d0:	4621      	mov	r1, r4
 80082d2:	4638      	mov	r0, r7
 80082d4:	f7ff fc48 	bl	8007b68 <_malloc_r>
 80082d8:	4680      	mov	r8, r0
 80082da:	b908      	cbnz	r0, 80082e0 <_realloc_r+0x44>
 80082dc:	4645      	mov	r5, r8
 80082de:	e7ec      	b.n	80082ba <_realloc_r+0x1e>
 80082e0:	42b4      	cmp	r4, r6
 80082e2:	4622      	mov	r2, r4
 80082e4:	4629      	mov	r1, r5
 80082e6:	bf28      	it	cs
 80082e8:	4632      	movcs	r2, r6
 80082ea:	f7ff fbc3 	bl	8007a74 <memcpy>
 80082ee:	4629      	mov	r1, r5
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff fbcd 	bl	8007a90 <_free_r>
 80082f6:	e7f1      	b.n	80082dc <_realloc_r+0x40>

080082f8 <_malloc_usable_size_r>:
 80082f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082fc:	1f18      	subs	r0, r3, #4
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bfbc      	itt	lt
 8008302:	580b      	ldrlt	r3, [r1, r0]
 8008304:	18c0      	addlt	r0, r0, r3
 8008306:	4770      	bx	lr

08008308 <_init>:
 8008308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830a:	bf00      	nop
 800830c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830e:	bc08      	pop	{r3}
 8008310:	469e      	mov	lr, r3
 8008312:	4770      	bx	lr

08008314 <_fini>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr
